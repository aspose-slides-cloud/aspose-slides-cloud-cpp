// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="ApiBase.cs">
//   Copyright (c) 2020 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------


#include "gtest/gtest.h"

#include "TestUtils.h"

class SlidesApiTest : public ::testing::Test
{
public:
	static TestUtils* utils;

protected:
	void SetUp()
	{
		if (utils == nullptr)
		{
			utils = new TestUtils();
		}
	}
};

TestUtils* SlidesApiTest::utils = nullptr;

TEST_F(SlidesApiTest, alignShapes) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex", "int32_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignShapes", "subShape", "utility::string_t");
	utils->initialize("alignShapes", "", "");
	std::shared_ptr<Shapes> result = utils->getSlidesApi()->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, alignShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex", "int32_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignShapes", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("alignShapes", "name", "utility::string_t", paramName);
	utils->initialize("alignShapes", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex", "int32_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignShapes", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("alignShapes", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("alignShapes", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidAlignmentType) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex", "int32_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignShapes", "subShape", "utility::string_t");
	paramAlignmentType = utils->getInvalidTestValue("alignShapes", "alignmentType", "utility::string_t", paramAlignmentType);
	utils->initialize("alignShapes", "alignmentType", "utility::string_t", paramAlignmentType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "alignmentType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "alignmentType", "utility::string_t", paramAlignmentType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "alignmentType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "alignmentType", "utility::string_t", paramAlignmentType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "alignmentType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidAlignToSlide) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex", "int32_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignShapes", "subShape", "utility::string_t");
	paramAlignToSlide = utils->getInvalidBoolTestValue("alignShapes", "alignToSlide", "bool", paramAlignToSlide).value();
	utils->initialize("alignShapes", "alignToSlide", "bool", paramAlignToSlide);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "alignToSlide", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "alignToSlide", "bool", paramAlignToSlide);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "alignToSlide", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "alignToSlide", "bool", paramAlignToSlide);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "alignToSlide", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex", "int32_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignShapes", "subShape", "utility::string_t");
	paramShapes = utils->getInvalidIntVectorTestValue("alignShapes", "shapes", "std::vector<int32_t>", paramShapes);
	utils->initialize("alignShapes", "shapes", "std::vector<int32_t>", paramShapes);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "shapes", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "shapes", "std::vector<int32_t>", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "shapes", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "shapes", "std::vector<int32_t>", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "shapes", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex", "int32_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignShapes", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("alignShapes", "password", "utility::string_t", paramPassword);
	utils->initialize("alignShapes", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex", "int32_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignShapes", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("alignShapes", "folder", "utility::string_t", paramFolder);
	utils->initialize("alignShapes", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex", "int32_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignShapes", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("alignShapes", "storage", "utility::string_t", paramStorage);
	utils->initialize("alignShapes", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex", "int32_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignShapes", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("alignShapes", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("alignShapes", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignSpecialSlideShapes) {
	utility::string_t paramName = utils->getTestValue("alignSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t");
	utils->initialize("alignSpecialSlideShapes", "", "");
	std::shared_ptr<Shapes> result = utils->getSlidesApi()->alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, alignSpecialSlideShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("alignSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("alignSpecialSlideShapes", "name", "utility::string_t", paramName);
	utils->initialize("alignSpecialSlideShapes", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignSpecialSlideShapes", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignSpecialSlideShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("alignSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("alignSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignSpecialSlideShapes", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignSpecialSlideShapesInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("alignSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("alignSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignSpecialSlideShapes", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignSpecialSlideShapesInvalidAlignmentType) {
	utility::string_t paramName = utils->getTestValue("alignSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t");
	paramAlignmentType = utils->getInvalidTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t", paramAlignmentType);
	utils->initialize("alignSpecialSlideShapes", "alignmentType", "utility::string_t", paramAlignmentType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "alignmentType", "utility::string_t", paramAlignmentType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "alignmentType", "utility::string_t", paramAlignmentType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignSpecialSlideShapes", "alignmentType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignSpecialSlideShapesInvalidAlignToSlide) {
	utility::string_t paramName = utils->getTestValue("alignSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t");
	paramAlignToSlide = utils->getInvalidBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool", paramAlignToSlide).value();
	utils->initialize("alignSpecialSlideShapes", "alignToSlide", "bool", paramAlignToSlide);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "alignToSlide", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "alignToSlide", "bool", paramAlignToSlide);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "alignToSlide", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "alignToSlide", "bool", paramAlignToSlide);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignSpecialSlideShapes", "alignToSlide", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignSpecialSlideShapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("alignSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t");
	paramShapes = utils->getInvalidIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>", paramShapes);
	utils->initialize("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>", paramShapes);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignSpecialSlideShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("alignSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("alignSpecialSlideShapes", "password", "utility::string_t", paramPassword);
	utils->initialize("alignSpecialSlideShapes", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignSpecialSlideShapes", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignSpecialSlideShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("alignSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("alignSpecialSlideShapes", "folder", "utility::string_t", paramFolder);
	utils->initialize("alignSpecialSlideShapes", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignSpecialSlideShapes", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignSpecialSlideShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("alignSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("alignSpecialSlideShapes", "storage", "utility::string_t", paramStorage);
	utils->initialize("alignSpecialSlideShapes", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignSpecialSlideShapes", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignSpecialSlideShapesInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("alignSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("alignSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("alignSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramAlignmentType = utils->getTestValue("alignSpecialSlideShapes", "alignmentType", "utility::string_t");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignSpecialSlideShapes", "alignToSlide", "bool");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("alignSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("alignSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("alignSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("alignSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("alignSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignSpecialSlideShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignSpecialSlideShapes", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, compressEmbeddedFonts) {
	utility::string_t paramName = utils->getTestValue("compressEmbeddedFonts", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("compressEmbeddedFonts", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("compressEmbeddedFonts", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("compressEmbeddedFonts", "storage", "utility::string_t");
	utils->initialize("compressEmbeddedFonts", "", "");
	utils->getSlidesApi()->compressEmbeddedFonts(paramName, paramPassword, paramFolder, paramStorage).wait();
}

TEST_F(SlidesApiTest, compressEmbeddedFontsInvalidName) {
	utility::string_t paramName = utils->getTestValue("compressEmbeddedFonts", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("compressEmbeddedFonts", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("compressEmbeddedFonts", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("compressEmbeddedFonts", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("compressEmbeddedFonts", "name", "utility::string_t", paramName);
	utils->initialize("compressEmbeddedFonts", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->compressEmbeddedFonts(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFonts", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFonts", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFonts", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFonts", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("compressEmbeddedFonts", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, compressEmbeddedFontsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("compressEmbeddedFonts", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("compressEmbeddedFonts", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("compressEmbeddedFonts", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("compressEmbeddedFonts", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("compressEmbeddedFonts", "password", "utility::string_t", paramPassword);
	utils->initialize("compressEmbeddedFonts", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->compressEmbeddedFonts(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFonts", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFonts", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFonts", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFonts", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("compressEmbeddedFonts", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, compressEmbeddedFontsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("compressEmbeddedFonts", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("compressEmbeddedFonts", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("compressEmbeddedFonts", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("compressEmbeddedFonts", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("compressEmbeddedFonts", "folder", "utility::string_t", paramFolder);
	utils->initialize("compressEmbeddedFonts", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->compressEmbeddedFonts(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFonts", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFonts", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFonts", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFonts", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("compressEmbeddedFonts", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, compressEmbeddedFontsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("compressEmbeddedFonts", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("compressEmbeddedFonts", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("compressEmbeddedFonts", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("compressEmbeddedFonts", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("compressEmbeddedFonts", "storage", "utility::string_t", paramStorage);
	utils->initialize("compressEmbeddedFonts", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->compressEmbeddedFonts(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFonts", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFonts", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFonts", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFonts", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("compressEmbeddedFonts", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, compressEmbeddedFontsOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("compressEmbeddedFontsOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("compressEmbeddedFontsOnline", "password", "utility::string_t");
	utils->initialize("compressEmbeddedFontsOnline", "", "");
	HttpContent result = utils->getSlidesApi()->compressEmbeddedFontsOnline(paramDocument, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, compressEmbeddedFontsOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("compressEmbeddedFontsOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("compressEmbeddedFontsOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("compressEmbeddedFontsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("compressEmbeddedFontsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->compressEmbeddedFontsOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFontsOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFontsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFontsOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFontsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("compressEmbeddedFontsOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, compressEmbeddedFontsOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("compressEmbeddedFontsOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("compressEmbeddedFontsOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("compressEmbeddedFontsOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("compressEmbeddedFontsOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->compressEmbeddedFontsOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFontsOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFontsOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("compressEmbeddedFontsOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("compressEmbeddedFontsOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("compressEmbeddedFontsOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convert) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convert", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convert", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convert", "options", "std::shared_ptr<ExportOptions>");
	utils->initialize("convert", "", "");
	HttpContent result = utils->getSlidesApi()->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, convertInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convert", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convert", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convert", "options", "std::shared_ptr<ExportOptions>");
	paramDocument = utils->getInvalidBinaryTestValue("convert", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("convert", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convert", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convert", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convert", "options", "std::shared_ptr<ExportOptions>");
	paramFormat = utils->getInvalidTestValue("convert", "format", "utility::string_t", paramFormat);
	utils->initialize("convert", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convert", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convert", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convert", "options", "std::shared_ptr<ExportOptions>");
	paramPassword = utils->getInvalidTestValue("convert", "password", "utility::string_t", paramPassword);
	utils->initialize("convert", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convert", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convert", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convert", "options", "std::shared_ptr<ExportOptions>");
	paramStorage = utils->getInvalidTestValue("convert", "storage", "utility::string_t", paramStorage);
	utils->initialize("convert", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convert", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convert", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convert", "options", "std::shared_ptr<ExportOptions>");
	paramFontsFolder = utils->getInvalidTestValue("convert", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("convert", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertInvalidSlides) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convert", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convert", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convert", "options", "std::shared_ptr<ExportOptions>");
	paramSlides = utils->getInvalidIntVectorTestValue("convert", "slides", "std::vector<int32_t>", paramSlides);
	utils->initialize("convert", "slides", "std::vector<int32_t>", paramSlides);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "slides", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "slides", "std::vector<int32_t>", paramSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "slides", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "slides", "std::vector<int32_t>", paramSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "slides", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertInvalidOptions) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convert", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convert", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convert", "options", "std::shared_ptr<ExportOptions>");
	paramOptions = utils->getInvalidTestValueForClass<>("convert", "options", "std::shared_ptr<ExportOptions>", paramOptions);
	utils->initialize("convert", "options", "std::shared_ptr<ExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "options", "std::shared_ptr<ExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSave) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convertAndSave", "options", "std::shared_ptr<ExportOptions>");
	utils->initialize("convertAndSave", "", "");
	utils->getSlidesApi()->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
}

TEST_F(SlidesApiTest, convertAndSaveInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convertAndSave", "options", "std::shared_ptr<ExportOptions>");
	paramDocument = utils->getInvalidBinaryTestValue("convertAndSave", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("convertAndSave", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convertAndSave", "options", "std::shared_ptr<ExportOptions>");
	paramFormat = utils->getInvalidTestValue("convertAndSave", "format", "utility::string_t", paramFormat);
	utils->initialize("convertAndSave", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidOutPath) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convertAndSave", "options", "std::shared_ptr<ExportOptions>");
	paramOutPath = utils->getInvalidTestValue("convertAndSave", "outPath", "utility::string_t", paramOutPath);
	utils->initialize("convertAndSave", "outPath", "utility::string_t", paramOutPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "outPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "outPath", "utility::string_t", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "outPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "outPath", "utility::string_t", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "outPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convertAndSave", "options", "std::shared_ptr<ExportOptions>");
	paramPassword = utils->getInvalidTestValue("convertAndSave", "password", "utility::string_t", paramPassword);
	utils->initialize("convertAndSave", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convertAndSave", "options", "std::shared_ptr<ExportOptions>");
	paramStorage = utils->getInvalidTestValue("convertAndSave", "storage", "utility::string_t", paramStorage);
	utils->initialize("convertAndSave", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convertAndSave", "options", "std::shared_ptr<ExportOptions>");
	paramFontsFolder = utils->getInvalidTestValue("convertAndSave", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("convertAndSave", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidSlides) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convertAndSave", "options", "std::shared_ptr<ExportOptions>");
	paramSlides = utils->getInvalidIntVectorTestValue("convertAndSave", "slides", "std::vector<int32_t>", paramSlides);
	utils->initialize("convertAndSave", "slides", "std::vector<int32_t>", paramSlides);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "slides", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "slides", "std::vector<int32_t>", paramSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "slides", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "slides", "std::vector<int32_t>", paramSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "slides", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidOptions) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides", "std::vector<int32_t>");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("convertAndSave", "options", "std::shared_ptr<ExportOptions>");
	paramOptions = utils->getInvalidTestValueForClass<>("convertAndSave", "options", "std::shared_ptr<ExportOptions>", paramOptions);
	utils->initialize("convertAndSave", "options", "std::shared_ptr<ExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "options", "std::shared_ptr<ExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFile) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId", "utility::string_t");
	utils->initialize("copyFile", "", "");
	utils->getSlidesApi()->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
}

TEST_F(SlidesApiTest, copyFileInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId", "utility::string_t");
	paramSrcPath = utils->getInvalidTestValue("copyFile", "srcPath", "utility::string_t", paramSrcPath);
	utils->initialize("copyFile", "srcPath", "utility::string_t", paramSrcPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcPath", "utility::string_t", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcPath", "utility::string_t", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "srcPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId", "utility::string_t");
	paramDestPath = utils->getInvalidTestValue("copyFile", "destPath", "utility::string_t", paramDestPath);
	utils->initialize("copyFile", "destPath", "utility::string_t", paramDestPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "destPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "destPath", "utility::string_t", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "destPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "destPath", "utility::string_t", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "destPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId", "utility::string_t");
	paramSrcStorageName = utils->getInvalidTestValue("copyFile", "srcStorageName", "utility::string_t", paramSrcStorageName);
	utils->initialize("copyFile", "srcStorageName", "utility::string_t", paramSrcStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcStorageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcStorageName", "utility::string_t", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcStorageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcStorageName", "utility::string_t", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "srcStorageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId", "utility::string_t");
	paramDestStorageName = utils->getInvalidTestValue("copyFile", "destStorageName", "utility::string_t", paramDestStorageName);
	utils->initialize("copyFile", "destStorageName", "utility::string_t", paramDestStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "destStorageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "destStorageName", "utility::string_t", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "destStorageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "destStorageName", "utility::string_t", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "destStorageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidVersionId) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId", "utility::string_t");
	paramVersionId = utils->getInvalidTestValue("copyFile", "versionId", "utility::string_t", paramVersionId);
	utils->initialize("copyFile", "versionId", "utility::string_t", paramVersionId);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "versionId", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "versionId", "utility::string_t", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "versionId", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "versionId", "utility::string_t", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "versionId", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolder) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName", "utility::string_t");
	utils->initialize("copyFolder", "", "");
	utils->getSlidesApi()->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
}

TEST_F(SlidesApiTest, copyFolderInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName", "utility::string_t");
	paramSrcPath = utils->getInvalidTestValue("copyFolder", "srcPath", "utility::string_t", paramSrcPath);
	utils->initialize("copyFolder", "srcPath", "utility::string_t", paramSrcPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcPath", "utility::string_t", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcPath", "utility::string_t", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "srcPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName", "utility::string_t");
	paramDestPath = utils->getInvalidTestValue("copyFolder", "destPath", "utility::string_t", paramDestPath);
	utils->initialize("copyFolder", "destPath", "utility::string_t", paramDestPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destPath", "utility::string_t", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destPath", "utility::string_t", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "destPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName", "utility::string_t");
	paramSrcStorageName = utils->getInvalidTestValue("copyFolder", "srcStorageName", "utility::string_t", paramSrcStorageName);
	utils->initialize("copyFolder", "srcStorageName", "utility::string_t", paramSrcStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcStorageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcStorageName", "utility::string_t", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcStorageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcStorageName", "utility::string_t", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "srcStorageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName", "utility::string_t");
	paramDestStorageName = utils->getInvalidTestValue("copyFolder", "destStorageName", "utility::string_t", paramDestStorageName);
	utils->initialize("copyFolder", "destStorageName", "utility::string_t", paramDestStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destStorageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destStorageName", "utility::string_t", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destStorageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destStorageName", "utility::string_t", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "destStorageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlide) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage", "utility::string_t");
	utils->initialize("copyLayoutSlide", "", "");
	std::shared_ptr<LayoutSlide> result = utils->getSlidesApi()->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("copyLayoutSlide", "name", "utility::string_t", paramName);
	utils->initialize("copyLayoutSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidCloneFrom) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage", "utility::string_t");
	paramCloneFrom = utils->getInvalidTestValue("copyLayoutSlide", "cloneFrom", "utility::string_t", paramCloneFrom);
	utils->initialize("copyLayoutSlide", "cloneFrom", "utility::string_t", paramCloneFrom);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFrom", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFrom", "utility::string_t", paramCloneFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFrom", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFrom", "utility::string_t", paramCloneFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "cloneFrom", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidCloneFromPosition) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage", "utility::string_t");
	paramCloneFromPosition = utils->getInvalidIntTestValue("copyLayoutSlide", "cloneFromPosition", "int32_t", paramCloneFromPosition).value();
	utils->initialize("copyLayoutSlide", "cloneFromPosition", "int32_t", paramCloneFromPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromPosition", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromPosition", "int32_t", paramCloneFromPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromPosition", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromPosition", "int32_t", paramCloneFromPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "cloneFromPosition", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidCloneFromPassword) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage", "utility::string_t");
	paramCloneFromPassword = utils->getInvalidTestValue("copyLayoutSlide", "cloneFromPassword", "utility::string_t", paramCloneFromPassword);
	utils->initialize("copyLayoutSlide", "cloneFromPassword", "utility::string_t", paramCloneFromPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromPassword", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromPassword", "utility::string_t", paramCloneFromPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromPassword", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromPassword", "utility::string_t", paramCloneFromPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "cloneFromPassword", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidCloneFromStorage) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage", "utility::string_t");
	paramCloneFromStorage = utils->getInvalidTestValue("copyLayoutSlide", "cloneFromStorage", "utility::string_t", paramCloneFromStorage);
	utils->initialize("copyLayoutSlide", "cloneFromStorage", "utility::string_t", paramCloneFromStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromStorage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromStorage", "utility::string_t", paramCloneFromStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromStorage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromStorage", "utility::string_t", paramCloneFromStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "cloneFromStorage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("copyLayoutSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("copyLayoutSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("copyLayoutSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("copyLayoutSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("copyLayoutSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("copyLayoutSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlide) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage", "utility::string_t");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll", "bool");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage", "utility::string_t");
	utils->initialize("copyMasterSlide", "", "");
	std::shared_ptr<MasterSlide> result = utils->getSlidesApi()->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage", "utility::string_t");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll", "bool");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("copyMasterSlide", "name", "utility::string_t", paramName);
	utils->initialize("copyMasterSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidCloneFrom) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage", "utility::string_t");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll", "bool");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage", "utility::string_t");
	paramCloneFrom = utils->getInvalidTestValue("copyMasterSlide", "cloneFrom", "utility::string_t", paramCloneFrom);
	utils->initialize("copyMasterSlide", "cloneFrom", "utility::string_t", paramCloneFrom);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFrom", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFrom", "utility::string_t", paramCloneFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFrom", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFrom", "utility::string_t", paramCloneFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "cloneFrom", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidCloneFromPosition) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage", "utility::string_t");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll", "bool");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage", "utility::string_t");
	paramCloneFromPosition = utils->getInvalidIntTestValue("copyMasterSlide", "cloneFromPosition", "int32_t", paramCloneFromPosition).value();
	utils->initialize("copyMasterSlide", "cloneFromPosition", "int32_t", paramCloneFromPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromPosition", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromPosition", "int32_t", paramCloneFromPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromPosition", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromPosition", "int32_t", paramCloneFromPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "cloneFromPosition", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidCloneFromPassword) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage", "utility::string_t");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll", "bool");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage", "utility::string_t");
	paramCloneFromPassword = utils->getInvalidTestValue("copyMasterSlide", "cloneFromPassword", "utility::string_t", paramCloneFromPassword);
	utils->initialize("copyMasterSlide", "cloneFromPassword", "utility::string_t", paramCloneFromPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromPassword", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromPassword", "utility::string_t", paramCloneFromPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromPassword", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromPassword", "utility::string_t", paramCloneFromPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "cloneFromPassword", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidCloneFromStorage) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage", "utility::string_t");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll", "bool");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage", "utility::string_t");
	paramCloneFromStorage = utils->getInvalidTestValue("copyMasterSlide", "cloneFromStorage", "utility::string_t", paramCloneFromStorage);
	utils->initialize("copyMasterSlide", "cloneFromStorage", "utility::string_t", paramCloneFromStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromStorage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromStorage", "utility::string_t", paramCloneFromStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromStorage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromStorage", "utility::string_t", paramCloneFromStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "cloneFromStorage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidApplyToAll) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage", "utility::string_t");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll", "bool");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage", "utility::string_t");
	paramApplyToAll = utils->getInvalidBoolTestValue("copyMasterSlide", "applyToAll", "bool", paramApplyToAll).value();
	utils->initialize("copyMasterSlide", "applyToAll", "bool", paramApplyToAll);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "applyToAll", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "applyToAll", "bool", paramApplyToAll);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "applyToAll", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "applyToAll", "bool", paramApplyToAll);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "applyToAll", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage", "utility::string_t");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll", "bool");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("copyMasterSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("copyMasterSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage", "utility::string_t");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll", "bool");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("copyMasterSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("copyMasterSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name", "utility::string_t");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom", "utility::string_t");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition", "int32_t");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword", "utility::string_t");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage", "utility::string_t");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll", "bool");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("copyMasterSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("copyMasterSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlide) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name", "utility::string_t");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position", "int32_t");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage", "utility::string_t");
	utils->initialize("copySlide", "", "");
	std::shared_ptr<Slides> result = utils->getSlidesApi()->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, copySlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name", "utility::string_t");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position", "int32_t");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("copySlide", "name", "utility::string_t", paramName);
	utils->initialize("copySlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidSlideToCopy) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name", "utility::string_t");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position", "int32_t");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage", "utility::string_t");
	paramSlideToCopy = utils->getInvalidIntTestValue("copySlide", "slideToCopy", "int32_t", paramSlideToCopy).value();
	utils->initialize("copySlide", "slideToCopy", "int32_t", paramSlideToCopy);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "slideToCopy", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "slideToCopy", "int32_t", paramSlideToCopy);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "slideToCopy", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "slideToCopy", "int32_t", paramSlideToCopy);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "slideToCopy", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name", "utility::string_t");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position", "int32_t");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage", "utility::string_t");
	paramPosition = utils->getInvalidIntTestValue("copySlide", "position", "int32_t", paramPosition).value();
	utils->initialize("copySlide", "position", "int32_t", paramPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "position", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "position", "int32_t", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "position", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "position", "int32_t", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "position", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidSource) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name", "utility::string_t");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position", "int32_t");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage", "utility::string_t");
	paramSource = utils->getInvalidTestValue("copySlide", "source", "utility::string_t", paramSource);
	utils->initialize("copySlide", "source", "utility::string_t", paramSource);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "source", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "source", "utility::string_t", paramSource);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "source", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "source", "utility::string_t", paramSource);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "source", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidSourcePassword) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name", "utility::string_t");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position", "int32_t");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage", "utility::string_t");
	paramSourcePassword = utils->getInvalidTestValue("copySlide", "sourcePassword", "utility::string_t", paramSourcePassword);
	utils->initialize("copySlide", "sourcePassword", "utility::string_t", paramSourcePassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "sourcePassword", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "sourcePassword", "utility::string_t", paramSourcePassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "sourcePassword", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "sourcePassword", "utility::string_t", paramSourcePassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "sourcePassword", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidSourceStorage) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name", "utility::string_t");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position", "int32_t");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage", "utility::string_t");
	paramSourceStorage = utils->getInvalidTestValue("copySlide", "sourceStorage", "utility::string_t", paramSourceStorage);
	utils->initialize("copySlide", "sourceStorage", "utility::string_t", paramSourceStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "sourceStorage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "sourceStorage", "utility::string_t", paramSourceStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "sourceStorage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "sourceStorage", "utility::string_t", paramSourceStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "sourceStorage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name", "utility::string_t");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position", "int32_t");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("copySlide", "password", "utility::string_t", paramPassword);
	utils->initialize("copySlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name", "utility::string_t");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position", "int32_t");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("copySlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("copySlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name", "utility::string_t");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position", "int32_t");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("copySlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("copySlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage", "utility::string_t");
	utils->initialize("createAnimationEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createAnimationEffect", "name", "utility::string_t", paramName);
	utils->initialize("createAnimationEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createAnimationEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage", "utility::string_t");
	paramEffect = utils->getInvalidTestValueForClass<>("createAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
	utils->initialize("createAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "effect", "std::shared_ptr<Effect>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createAnimationEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("createAnimationEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createAnimationEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("createAnimationEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createAnimationEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("createAnimationEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequence) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex", "int32_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage", "utility::string_t");
	utils->initialize("createAnimationInteractiveSequence", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex", "int32_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createAnimationInteractiveSequence", "name", "utility::string_t", paramName);
	utils->initialize("createAnimationInteractiveSequence", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex", "int32_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidSequence) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex", "int32_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage", "utility::string_t");
	paramSequence = utils->getInvalidTestValueForClass<>("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>", paramSequence);
	utils->initialize("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>", paramSequence);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>", paramSequence);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>", paramSequence);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex", "int32_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
	utils->initialize("createAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex", "int32_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
	utils->initialize("createAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex", "int32_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
	utils->initialize("createAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	utils->initialize("createAnimationInteractiveSequenceEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
	utils->initialize("createAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSequenceIndex = utils->getInvalidIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex).value();
	utils->initialize("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramEffect = utils->getInvalidTestValueForClass<>("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
	utils->initialize("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("createAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategory) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage", "utility::string_t");
	utils->initialize("createChartCategory", "", "");
	std::shared_ptr<Chart> result = utils->getSlidesApi()->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createChartCategoryInvalidName) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createChartCategory", "name", "utility::string_t", paramName);
	utils->initialize("createChartCategory", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createChartCategory", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createChartCategory", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createChartCategory", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createChartCategory", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidCategory) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage", "utility::string_t");
	paramCategory = utils->getInvalidTestValueForClass<>("createChartCategory", "category", "std::shared_ptr<ChartCategory>", paramCategory);
	utils->initialize("createChartCategory", "category", "std::shared_ptr<ChartCategory>", paramCategory);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "category", "std::shared_ptr<ChartCategory>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "category", "std::shared_ptr<ChartCategory>", paramCategory);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "category", "std::shared_ptr<ChartCategory>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "category", "std::shared_ptr<ChartCategory>", paramCategory);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "category", "std::shared_ptr<ChartCategory>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createChartCategory", "password", "utility::string_t", paramPassword);
	utils->initialize("createChartCategory", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createChartCategory", "folder", "utility::string_t", paramFolder);
	utils->initialize("createChartCategory", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createChartCategory", "storage", "utility::string_t", paramStorage);
	utils->initialize("createChartCategory", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPoint) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage", "utility::string_t");
	utils->initialize("createChartDataPoint", "", "");
	std::shared_ptr<Chart> result = utils->getSlidesApi()->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createChartDataPointInvalidName) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createChartDataPoint", "name", "utility::string_t", paramName);
	utils->initialize("createChartDataPoint", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createChartDataPoint", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createChartDataPoint", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage", "utility::string_t");
	paramSeriesIndex = utils->getInvalidIntTestValue("createChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex).value();
	utils->initialize("createChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "seriesIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "seriesIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "seriesIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidDataPoint) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage", "utility::string_t");
	paramDataPoint = utils->getInvalidTestValueForClass<>("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>", paramDataPoint);
	utils->initialize("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>", paramDataPoint);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>", paramDataPoint);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>", paramDataPoint);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createChartDataPoint", "password", "utility::string_t", paramPassword);
	utils->initialize("createChartDataPoint", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createChartDataPoint", "folder", "utility::string_t", paramFolder);
	utils->initialize("createChartDataPoint", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createChartDataPoint", "storage", "utility::string_t", paramStorage);
	utils->initialize("createChartDataPoint", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeries) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage", "utility::string_t");
	utils->initialize("createChartSeries", "", "");
	std::shared_ptr<Chart> result = utils->getSlidesApi()->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createChartSeriesInvalidName) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createChartSeries", "name", "utility::string_t", paramName);
	utils->initialize("createChartSeries", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createChartSeries", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createChartSeries", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createChartSeries", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createChartSeries", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidSeries) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage", "utility::string_t");
	paramSeries = utils->getInvalidTestValueForClass<>("createChartSeries", "series", "std::shared_ptr<Series>", paramSeries);
	utils->initialize("createChartSeries", "series", "std::shared_ptr<Series>", paramSeries);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "series", "std::shared_ptr<Series>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "series", "std::shared_ptr<Series>", paramSeries);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "series", "std::shared_ptr<Series>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "series", "std::shared_ptr<Series>", paramSeries);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "series", "std::shared_ptr<Series>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createChartSeries", "password", "utility::string_t", paramPassword);
	utils->initialize("createChartSeries", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createChartSeries", "folder", "utility::string_t", paramFolder);
	utils->initialize("createChartSeries", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createChartSeries", "storage", "utility::string_t", paramStorage);
	utils->initialize("createChartSeries", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createComment) {
	utility::string_t paramName = utils->getTestValue("createComment", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createComment", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createComment", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage", "utility::string_t");
	utils->initialize("createComment", "", "");
	std::shared_ptr<SlideComments> result = utils->getSlidesApi()->createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createCommentInvalidName) {
	utility::string_t paramName = utils->getTestValue("createComment", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createComment", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createComment", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createComment", "name", "utility::string_t", paramName);
	utils->initialize("createComment", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createComment", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createComment", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createComment", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createComment", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createComment", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createComment", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createComment", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createComment", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createComment", "dto", "std::shared_ptr<SlideCommentBase>", paramDto);
	utils->initialize("createComment", "dto", "std::shared_ptr<SlideCommentBase>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "dto", "std::shared_ptr<SlideCommentBase>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "dto", "std::shared_ptr<SlideCommentBase>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "dto", "std::shared_ptr<SlideCommentBase>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "dto", "std::shared_ptr<SlideCommentBase>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "dto", "std::shared_ptr<SlideCommentBase>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createComment", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createComment", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createComment", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createComment", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createComment", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createComment", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createComment", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createComment", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createComment", "password", "utility::string_t", paramPassword);
	utils->initialize("createComment", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createComment", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createComment", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createComment", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createComment", "folder", "utility::string_t", paramFolder);
	utils->initialize("createComment", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createComment", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createComment", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createComment", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createComment", "storage", "utility::string_t", paramStorage);
	utils->initialize("createComment", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createCommentOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("createCommentOnline", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createCommentOnline", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createCommentOnline", "password", "utility::string_t");
	utils->initialize("createCommentOnline", "", "");
	HttpContent result = utils->getSlidesApi()->createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, createCommentOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createCommentOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("createCommentOnline", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createCommentOnline", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createCommentOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("createCommentOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("createCommentOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createCommentOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createCommentOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("createCommentOnline", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createCommentOnline", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createCommentOnline", "password", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createCommentOnline", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createCommentOnline", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createCommentOnline", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentOnlineInvalidDto) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createCommentOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("createCommentOnline", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createCommentOnline", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createCommentOnline", "password", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>", paramDto);
	utils->initialize("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentOnlineInvalidShapeIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createCommentOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("createCommentOnline", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createCommentOnline", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createCommentOnline", "password", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createCommentOnline", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createCommentOnline", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createCommentOnline", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createCommentOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("createCommentOnline", "slideIndex", "int32_t");
	std::shared_ptr<SlideCommentBase> paramDto = utils->getTestValueForClass<SlideCommentBase>("createCommentOnline", "dto", "std::shared_ptr<SlideCommentBase>");
	auto paramShapeIndex = utils->getOptionalIntTestValue("createCommentOnline", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createCommentOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createCommentOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("createCommentOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createCommentOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createFolder) {
	utility::string_t paramPath = utils->getTestValue("createFolder", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("createFolder", "storageName", "utility::string_t");
	utils->initialize("createFolder", "", "");
	utils->getSlidesApi()->createFolder(paramPath, paramStorageName).wait();
}

TEST_F(SlidesApiTest, createFolderInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("createFolder", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("createFolder", "storageName", "utility::string_t");
	paramPath = utils->getInvalidTestValue("createFolder", "path", "utility::string_t", paramPath);
	utils->initialize("createFolder", "path", "utility::string_t", paramPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createFolder(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createFolder", "path", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createFolder", "path", "utility::string_t", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createFolder", "path", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createFolder", "path", "utility::string_t", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createFolder", "path", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createFolderInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("createFolder", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("createFolder", "storageName", "utility::string_t");
	paramStorageName = utils->getInvalidTestValue("createFolder", "storageName", "utility::string_t", paramStorageName);
	utils->initialize("createFolder", "storageName", "utility::string_t", paramStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createFolder(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createFolder", "storageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createFolder", "storageName", "utility::string_t", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createFolder", "storageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createFolder", "storageName", "utility::string_t", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createFolder", "storageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermark) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage", "utility::string_t");
	utils->initialize("createImageWatermark", "", "");
	utils->getSlidesApi()->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidName) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createImageWatermark", "name", "utility::string_t", paramName);
	utils->initialize("createImageWatermark", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidImage) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage", "utility::string_t");
	paramImage = utils->getInvalidBinaryTestValue("createImageWatermark", "image", "std::shared_ptr<HttpContent>", paramImage);
	utils->initialize("createImageWatermark", "image", "std::shared_ptr<HttpContent>", paramImage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "image", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "image", "std::shared_ptr<HttpContent>", paramImage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "image", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "image", "std::shared_ptr<HttpContent>", paramImage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "image", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidPictureFrame) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage", "utility::string_t");
	paramPictureFrame = utils->getInvalidTestValueForClass<>("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>", paramPictureFrame);
	utils->initialize("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>", paramPictureFrame);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>", paramPictureFrame);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>", paramPictureFrame);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createImageWatermark", "password", "utility::string_t", paramPassword);
	utils->initialize("createImageWatermark", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createImageWatermark", "folder", "utility::string_t", paramFolder);
	utils->initialize("createImageWatermark", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createImageWatermark", "storage", "utility::string_t", paramStorage);
	utils->initialize("createImageWatermark", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermarkOnline", "password", "utility::string_t");
	utils->initialize("createImageWatermarkOnline", "", "");
	HttpContent result = utils->getSlidesApi()->createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, createImageWatermarkOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermarkOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkOnlineInvalidImage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermarkOnline", "password", "utility::string_t");
	paramImage = utils->getInvalidBinaryTestValue("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>", paramImage);
	utils->initialize("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>", paramImage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>", paramImage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>", paramImage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkOnlineInvalidPictureFrame) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermarkOnline", "password", "utility::string_t");
	paramPictureFrame = utils->getInvalidTestValueForClass<>("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>", paramPictureFrame);
	utils->initialize("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>", paramPictureFrame);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>", paramPictureFrame);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>", paramPictureFrame);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createImageWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermarkOnline", "image", "std::shared_ptr<HttpContent>");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermarkOnline", "pictureFrame", "std::shared_ptr<PictureFrame>");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermarkOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createImageWatermarkOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("createImageWatermarkOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermarkOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlide) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage", "utility::string_t");
	utils->initialize("createNotesSlide", "", "");
	std::shared_ptr<NotesSlide> result = utils->getSlidesApi()->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createNotesSlide", "name", "utility::string_t", paramName);
	utils->initialize("createNotesSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createNotesSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createNotesSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>", paramDto);
	utils->initialize("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createNotesSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("createNotesSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createNotesSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("createNotesSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createNotesSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("createNotesSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraph) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createParagraph", "subShape", "utility::string_t");
	utils->initialize("createParagraph", "", "");
	std::shared_ptr<Paragraph> result = utils->getSlidesApi()->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createParagraph", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("createParagraph", "name", "utility::string_t", paramName);
	utils->initialize("createParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createParagraph", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createParagraph", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createParagraph", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
	utils->initialize("createParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "dto", "std::shared_ptr<Paragraph>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createParagraph", "subShape", "utility::string_t");
	paramPosition = utils->getInvalidIntTestValue("createParagraph", "position", "int32_t", paramPosition).value();
	utils->initialize("createParagraph", "position", "int32_t", paramPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "position", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "position", "int32_t", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "position", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "position", "int32_t", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "position", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createParagraph", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("createParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createParagraph", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("createParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createParagraph", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("createParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createParagraph", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("createParagraph", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("createParagraph", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortion) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createPortion", "subShape", "utility::string_t");
	utils->initialize("createPortion", "", "");
	std::shared_ptr<Portion> result = utils->getSlidesApi()->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createPortion", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("createPortion", "name", "utility::string_t", paramName);
	utils->initialize("createPortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createPortion", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createPortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createPortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createPortion", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createPortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createPortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createPortion", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("createPortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("createPortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createPortion", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createPortion", "dto", "std::shared_ptr<Portion>", paramDto);
	utils->initialize("createPortion", "dto", "std::shared_ptr<Portion>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "dto", "std::shared_ptr<Portion>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "dto", "std::shared_ptr<Portion>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "dto", "std::shared_ptr<Portion>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createPortion", "subShape", "utility::string_t");
	paramPosition = utils->getInvalidIntTestValue("createPortion", "position", "int32_t", paramPosition).value();
	utils->initialize("createPortion", "position", "int32_t", paramPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "position", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "position", "int32_t", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "position", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "position", "int32_t", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "position", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createPortion", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createPortion", "password", "utility::string_t", paramPassword);
	utils->initialize("createPortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createPortion", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createPortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("createPortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createPortion", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createPortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("createPortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createPortion", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("createPortion", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("createPortion", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentation) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data", "std::shared_ptr<HttpContent>");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage", "utility::string_t");
	utils->initialize("createPresentation", "", "");
	std::shared_ptr<Document> result = utils->getSlidesApi()->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createPresentationInvalidName) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data", "std::shared_ptr<HttpContent>");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createPresentation", "name", "utility::string_t", paramName);
	utils->initialize("createPresentation", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationInvalidData) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data", "std::shared_ptr<HttpContent>");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage", "utility::string_t");
	paramData = utils->getInvalidBinaryTestValue("createPresentation", "data", "std::shared_ptr<HttpContent>", paramData);
	utils->initialize("createPresentation", "data", "std::shared_ptr<HttpContent>", paramData);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "data", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "data", "std::shared_ptr<HttpContent>", paramData);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "data", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "data", "std::shared_ptr<HttpContent>", paramData);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "data", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationInvalidInputPassword) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data", "std::shared_ptr<HttpContent>");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage", "utility::string_t");
	paramInputPassword = utils->getInvalidTestValue("createPresentation", "inputPassword", "utility::string_t", paramInputPassword);
	utils->initialize("createPresentation", "inputPassword", "utility::string_t", paramInputPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "inputPassword", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "inputPassword", "utility::string_t", paramInputPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "inputPassword", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "inputPassword", "utility::string_t", paramInputPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "inputPassword", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data", "std::shared_ptr<HttpContent>");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createPresentation", "password", "utility::string_t", paramPassword);
	utils->initialize("createPresentation", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data", "std::shared_ptr<HttpContent>");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createPresentation", "folder", "utility::string_t", paramFolder);
	utils->initialize("createPresentation", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data", "std::shared_ptr<HttpContent>");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createPresentation", "storage", "utility::string_t", paramStorage);
	utils->initialize("createPresentation", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSource) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name", "utility::string_t");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage", "utility::string_t");
	utils->initialize("createPresentationFromSource", "", "");
	std::shared_ptr<Document> result = utils->getSlidesApi()->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidName) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name", "utility::string_t");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createPresentationFromSource", "name", "utility::string_t", paramName);
	utils->initialize("createPresentationFromSource", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidSourcePath) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name", "utility::string_t");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage", "utility::string_t");
	paramSourcePath = utils->getInvalidTestValue("createPresentationFromSource", "sourcePath", "utility::string_t", paramSourcePath);
	utils->initialize("createPresentationFromSource", "sourcePath", "utility::string_t", paramSourcePath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourcePath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourcePath", "utility::string_t", paramSourcePath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourcePath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourcePath", "utility::string_t", paramSourcePath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "sourcePath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidSourcePassword) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name", "utility::string_t");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage", "utility::string_t");
	paramSourcePassword = utils->getInvalidTestValue("createPresentationFromSource", "sourcePassword", "utility::string_t", paramSourcePassword);
	utils->initialize("createPresentationFromSource", "sourcePassword", "utility::string_t", paramSourcePassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourcePassword", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourcePassword", "utility::string_t", paramSourcePassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourcePassword", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourcePassword", "utility::string_t", paramSourcePassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "sourcePassword", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidSourceStorage) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name", "utility::string_t");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage", "utility::string_t");
	paramSourceStorage = utils->getInvalidTestValue("createPresentationFromSource", "sourceStorage", "utility::string_t", paramSourceStorage);
	utils->initialize("createPresentationFromSource", "sourceStorage", "utility::string_t", paramSourceStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourceStorage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourceStorage", "utility::string_t", paramSourceStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourceStorage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourceStorage", "utility::string_t", paramSourceStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "sourceStorage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name", "utility::string_t");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createPresentationFromSource", "password", "utility::string_t", paramPassword);
	utils->initialize("createPresentationFromSource", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name", "utility::string_t");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createPresentationFromSource", "folder", "utility::string_t", paramFolder);
	utils->initialize("createPresentationFromSource", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name", "utility::string_t");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath", "utility::string_t");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword", "utility::string_t");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createPresentationFromSource", "storage", "utility::string_t", paramStorage);
	utils->initialize("createPresentationFromSource", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplate) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name", "utility::string_t");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath", "utility::string_t");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data", "utility::string_t");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword", "utility::string_t");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage", "utility::string_t");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage", "utility::string_t");
	utils->initialize("createPresentationFromTemplate", "", "");
	std::shared_ptr<Document> result = utils->getSlidesApi()->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidName) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name", "utility::string_t");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath", "utility::string_t");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data", "utility::string_t");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword", "utility::string_t");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage", "utility::string_t");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createPresentationFromTemplate", "name", "utility::string_t", paramName);
	utils->initialize("createPresentationFromTemplate", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidTemplatePath) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name", "utility::string_t");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath", "utility::string_t");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data", "utility::string_t");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword", "utility::string_t");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage", "utility::string_t");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage", "utility::string_t");
	paramTemplatePath = utils->getInvalidTestValue("createPresentationFromTemplate", "templatePath", "utility::string_t", paramTemplatePath);
	utils->initialize("createPresentationFromTemplate", "templatePath", "utility::string_t", paramTemplatePath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templatePath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templatePath", "utility::string_t", paramTemplatePath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templatePath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templatePath", "utility::string_t", paramTemplatePath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "templatePath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidData) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name", "utility::string_t");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath", "utility::string_t");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data", "utility::string_t");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword", "utility::string_t");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage", "utility::string_t");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage", "utility::string_t");
	paramData = utils->getInvalidTestValue("createPresentationFromTemplate", "data", "utility::string_t", paramData);
	utils->initialize("createPresentationFromTemplate", "data", "utility::string_t", paramData);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "data", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "data", "utility::string_t", paramData);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "data", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "data", "utility::string_t", paramData);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "data", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidTemplatePassword) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name", "utility::string_t");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath", "utility::string_t");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data", "utility::string_t");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword", "utility::string_t");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage", "utility::string_t");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage", "utility::string_t");
	paramTemplatePassword = utils->getInvalidTestValue("createPresentationFromTemplate", "templatePassword", "utility::string_t", paramTemplatePassword);
	utils->initialize("createPresentationFromTemplate", "templatePassword", "utility::string_t", paramTemplatePassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templatePassword", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templatePassword", "utility::string_t", paramTemplatePassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templatePassword", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templatePassword", "utility::string_t", paramTemplatePassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "templatePassword", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidTemplateStorage) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name", "utility::string_t");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath", "utility::string_t");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data", "utility::string_t");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword", "utility::string_t");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage", "utility::string_t");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage", "utility::string_t");
	paramTemplateStorage = utils->getInvalidTestValue("createPresentationFromTemplate", "templateStorage", "utility::string_t", paramTemplateStorage);
	utils->initialize("createPresentationFromTemplate", "templateStorage", "utility::string_t", paramTemplateStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templateStorage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templateStorage", "utility::string_t", paramTemplateStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templateStorage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templateStorage", "utility::string_t", paramTemplateStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "templateStorage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidIsImageDataEmbedded) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name", "utility::string_t");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath", "utility::string_t");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data", "utility::string_t");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword", "utility::string_t");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage", "utility::string_t");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage", "utility::string_t");
	paramIsImageDataEmbedded = utils->getInvalidBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", "bool", paramIsImageDataEmbedded).value();
	utils->initialize("createPresentationFromTemplate", "isImageDataEmbedded", "bool", paramIsImageDataEmbedded);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "isImageDataEmbedded", "bool", paramIsImageDataEmbedded);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "isImageDataEmbedded", "bool", paramIsImageDataEmbedded);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "isImageDataEmbedded", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name", "utility::string_t");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath", "utility::string_t");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data", "utility::string_t");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword", "utility::string_t");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage", "utility::string_t");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createPresentationFromTemplate", "password", "utility::string_t", paramPassword);
	utils->initialize("createPresentationFromTemplate", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name", "utility::string_t");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath", "utility::string_t");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data", "utility::string_t");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword", "utility::string_t");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage", "utility::string_t");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createPresentationFromTemplate", "folder", "utility::string_t", paramFolder);
	utils->initialize("createPresentationFromTemplate", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name", "utility::string_t");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath", "utility::string_t");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data", "utility::string_t");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword", "utility::string_t");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage", "utility::string_t");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", "bool");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createPresentationFromTemplate", "storage", "utility::string_t", paramStorage);
	utils->initialize("createPresentationFromTemplate", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSection) {
	utility::string_t paramName = utils->getTestValue("createSection", "name", "utility::string_t");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage", "utility::string_t");
	utils->initialize("createSection", "", "");
	std::shared_ptr<Sections> result = utils->getSlidesApi()->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSection", "name", "utility::string_t");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createSection", "name", "utility::string_t", paramName);
	utils->initialize("createSection", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSectionInvalidSectionName) {
	utility::string_t paramName = utils->getTestValue("createSection", "name", "utility::string_t");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage", "utility::string_t");
	paramSectionName = utils->getInvalidTestValue("createSection", "sectionName", "utility::string_t", paramSectionName);
	utils->initialize("createSection", "sectionName", "utility::string_t", paramSectionName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "sectionName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "sectionName", "utility::string_t", paramSectionName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "sectionName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "sectionName", "utility::string_t", paramSectionName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "sectionName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSectionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSection", "name", "utility::string_t");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createSection", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createSection", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSection", "name", "utility::string_t");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createSection", "password", "utility::string_t", paramPassword);
	utils->initialize("createSection", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSection", "name", "utility::string_t");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createSection", "folder", "utility::string_t", paramFolder);
	utils->initialize("createSection", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSection", "name", "utility::string_t");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createSection", "storage", "utility::string_t", paramStorage);
	utils->initialize("createSection", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShape) {
	utility::string_t paramName = utils->getTestValue("createShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createShape", "subShape", "utility::string_t");
	utils->initialize("createShape", "", "");
	std::shared_ptr<ShapeBase> result = utils->getSlidesApi()->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("createShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("createShape", "name", "utility::string_t", paramName);
	utils->initialize("createShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createShape", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
	utils->initialize("createShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "dto", "std::shared_ptr<ShapeBase>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "dto", "std::shared_ptr<ShapeBase>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "dto", "std::shared_ptr<ShapeBase>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidShapeToClone) {
	utility::string_t paramName = utils->getTestValue("createShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createShape", "subShape", "utility::string_t");
	paramShapeToClone = utils->getInvalidIntTestValue("createShape", "shapeToClone", "int32_t", paramShapeToClone).value();
	utils->initialize("createShape", "shapeToClone", "int32_t", paramShapeToClone);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "shapeToClone", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "shapeToClone", "int32_t", paramShapeToClone);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "shapeToClone", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "shapeToClone", "int32_t", paramShapeToClone);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "shapeToClone", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createShape", "subShape", "utility::string_t");
	paramPosition = utils->getInvalidIntTestValue("createShape", "position", "int32_t", paramPosition).value();
	utils->initialize("createShape", "position", "int32_t", paramPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "position", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "position", "int32_t", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "position", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "position", "int32_t", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "position", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createShape", "password", "utility::string_t", paramPassword);
	utils->initialize("createShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("createShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("createShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("createShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("createShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("createShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlide) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name", "utility::string_t");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage", "utility::string_t");
	utils->initialize("createSlide", "", "");
	std::shared_ptr<Slides> result = utils->getSlidesApi()->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name", "utility::string_t");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createSlide", "name", "utility::string_t", paramName);
	utils->initialize("createSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlideInvalidLayoutAlias) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name", "utility::string_t");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage", "utility::string_t");
	paramLayoutAlias = utils->getInvalidTestValue("createSlide", "layoutAlias", "utility::string_t", paramLayoutAlias);
	utils->initialize("createSlide", "layoutAlias", "utility::string_t", paramLayoutAlias);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "layoutAlias", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "layoutAlias", "utility::string_t", paramLayoutAlias);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "layoutAlias", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "layoutAlias", "utility::string_t", paramLayoutAlias);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "layoutAlias", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlideInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name", "utility::string_t");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage", "utility::string_t");
	paramPosition = utils->getInvalidIntTestValue("createSlide", "position", "int32_t", paramPosition).value();
	utils->initialize("createSlide", "position", "int32_t", paramPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "position", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "position", "int32_t", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "position", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "position", "int32_t", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "position", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name", "utility::string_t");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("createSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name", "utility::string_t");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("createSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name", "utility::string_t");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("createSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSmartArtNode) {
	utility::string_t paramName = utils->getTestValue("createSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("createSmartArtNode", "smartArtIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("createSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramText = utils->getTestValue("createSmartArtNode", "text", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSmartArtNode", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSmartArtNode", "storage", "utility::string_t");
	utils->initialize("createSmartArtNode", "", "");
	std::shared_ptr<SmartArt> result = utils->getSlidesApi()->createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSmartArtNodeInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("createSmartArtNode", "smartArtIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("createSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramText = utils->getTestValue("createSmartArtNode", "text", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSmartArtNode", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSmartArtNode", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createSmartArtNode", "name", "utility::string_t", paramName);
	utils->initialize("createSmartArtNode", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSmartArtNode", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSmartArtNodeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("createSmartArtNode", "smartArtIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("createSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramText = utils->getTestValue("createSmartArtNode", "text", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSmartArtNode", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSmartArtNode", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createSmartArtNode", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createSmartArtNode", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSmartArtNode", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSmartArtNodeInvalidSmartArtIndex) {
	utility::string_t paramName = utils->getTestValue("createSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("createSmartArtNode", "smartArtIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("createSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramText = utils->getTestValue("createSmartArtNode", "text", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSmartArtNode", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSmartArtNode", "storage", "utility::string_t");
	paramSmartArtIndex = utils->getInvalidIntTestValue("createSmartArtNode", "smartArtIndex", "int32_t", paramSmartArtIndex).value();
	utils->initialize("createSmartArtNode", "smartArtIndex", "int32_t", paramSmartArtIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "smartArtIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "smartArtIndex", "int32_t", paramSmartArtIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "smartArtIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "smartArtIndex", "int32_t", paramSmartArtIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSmartArtNode", "smartArtIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSmartArtNodeInvalidSubNode) {
	utility::string_t paramName = utils->getTestValue("createSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("createSmartArtNode", "smartArtIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("createSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramText = utils->getTestValue("createSmartArtNode", "text", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSmartArtNode", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSmartArtNode", "storage", "utility::string_t");
	paramSubNode = utils->getInvalidTestValue("createSmartArtNode", "subNode", "utility::string_t", paramSubNode);
	utils->initialize("createSmartArtNode", "subNode", "utility::string_t", paramSubNode);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "subNode", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "subNode", "utility::string_t", paramSubNode);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "subNode", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "subNode", "utility::string_t", paramSubNode);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSmartArtNode", "subNode", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSmartArtNodeInvalidText) {
	utility::string_t paramName = utils->getTestValue("createSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("createSmartArtNode", "smartArtIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("createSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramText = utils->getTestValue("createSmartArtNode", "text", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSmartArtNode", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSmartArtNode", "storage", "utility::string_t");
	paramText = utils->getInvalidTestValue("createSmartArtNode", "text", "utility::string_t", paramText);
	utils->initialize("createSmartArtNode", "text", "utility::string_t", paramText);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "text", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "text", "utility::string_t", paramText);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "text", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "text", "utility::string_t", paramText);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSmartArtNode", "text", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSmartArtNodeInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("createSmartArtNode", "smartArtIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("createSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramText = utils->getTestValue("createSmartArtNode", "text", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSmartArtNode", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSmartArtNode", "storage", "utility::string_t");
	paramPosition = utils->getInvalidIntTestValue("createSmartArtNode", "position", "int32_t", paramPosition).value();
	utils->initialize("createSmartArtNode", "position", "int32_t", paramPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "position", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "position", "int32_t", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "position", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "position", "int32_t", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSmartArtNode", "position", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSmartArtNodeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("createSmartArtNode", "smartArtIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("createSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramText = utils->getTestValue("createSmartArtNode", "text", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSmartArtNode", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSmartArtNode", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createSmartArtNode", "password", "utility::string_t", paramPassword);
	utils->initialize("createSmartArtNode", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSmartArtNode", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSmartArtNodeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("createSmartArtNode", "smartArtIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("createSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramText = utils->getTestValue("createSmartArtNode", "text", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSmartArtNode", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSmartArtNode", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createSmartArtNode", "folder", "utility::string_t", paramFolder);
	utils->initialize("createSmartArtNode", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSmartArtNode", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSmartArtNodeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("createSmartArtNode", "smartArtIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("createSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramText = utils->getTestValue("createSmartArtNode", "text", "utility::string_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSmartArtNode", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSmartArtNode", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createSmartArtNode", "storage", "utility::string_t", paramStorage);
	utils->initialize("createSmartArtNode", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSmartArtNode", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSmartArtNode", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSmartArtNode", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationEffect", "storage", "utility::string_t");
	utils->initialize("createSpecialSlideAnimationEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);
	utils->initialize("createSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationEffectInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("createSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("createSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationEffect", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramEffect = utils->getInvalidTestValueForClass<>("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
	utils->initialize("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("createSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("createSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("createSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequence) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	utils->initialize("createSpecialSlideAnimationInteractiveSequence", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t", paramName);
	utils->initialize("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceInvalidSequence) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramSequence = utils->getInvalidTestValueForClass<>("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>", paramSequence);
	utils->initialize("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>", paramSequence);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>", paramSequence);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>", paramSequence);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
	utils->initialize("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
	utils->initialize("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createSpecialSlideAnimationInteractiveSequence", "sequence", "std::shared_ptr<InteractiveSequence>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
	utils->initialize("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	utils->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
	utils->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSequenceIndex = utils->getInvalidIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex).value();
	utils->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramEffect = utils->getInvalidTestValueForClass<>("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
	utils->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideParagraph) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t");
	utils->initialize("createSpecialSlideParagraph", "", "");
	std::shared_ptr<Paragraph> result = utils->getSlidesApi()->createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSpecialSlideParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("createSpecialSlideParagraph", "name", "utility::string_t", paramName);
	utils->initialize("createSpecialSlideParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideParagraphInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("createSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideParagraph", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
	utils->initialize("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideParagraphInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t");
	paramPosition = utils->getInvalidIntTestValue("createSpecialSlideParagraph", "position", "int32_t", paramPosition).value();
	utils->initialize("createSpecialSlideParagraph", "position", "int32_t", paramPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "position", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "position", "int32_t", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "position", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "position", "int32_t", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideParagraph", "position", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("createSpecialSlideParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("createSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("createSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideParagraphInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlideParagraph", "shapeIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideParagraph", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("createSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("createSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideParagraph", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlidePortion) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	utils->initialize("createSpecialSlidePortion", "", "");
	std::shared_ptr<Portion> result = utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSpecialSlidePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("createSpecialSlidePortion", "name", "utility::string_t", paramName);
	utils->initialize("createSpecialSlidePortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlidePortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlidePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlidePortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlidePortionInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("createSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("createSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlidePortion", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlidePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlidePortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlidePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("createSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlidePortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlidePortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>", paramDto);
	utils->initialize("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlidePortionInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	paramPosition = utils->getInvalidIntTestValue("createSpecialSlidePortion", "position", "int32_t", paramPosition).value();
	utils->initialize("createSpecialSlidePortion", "position", "int32_t", paramPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "position", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "position", "int32_t", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "position", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "position", "int32_t", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlidePortion", "position", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlidePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createSpecialSlidePortion", "password", "utility::string_t", paramPassword);
	utils->initialize("createSpecialSlidePortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlidePortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlidePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("createSpecialSlidePortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlidePortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlidePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("createSpecialSlidePortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlidePortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlidePortionInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSpecialSlidePortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlidePortion", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlidePortion", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("createSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("createSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlidePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlidePortion", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideShape) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideShape", "slideType", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideShape", "subShape", "utility::string_t");
	utils->initialize("createSpecialSlideShape", "", "");
	std::shared_ptr<ShapeBase> result = utils->getSlidesApi()->createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSpecialSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideShape", "slideType", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("createSpecialSlideShape", "name", "utility::string_t", paramName);
	utils->initialize("createSpecialSlideShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideShape", "slideType", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideShapeInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideShape", "slideType", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("createSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("createSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideShape", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideShapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideShape", "slideType", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideShape", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
	utils->initialize("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideShapeInvalidShapeToClone) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideShape", "slideType", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideShape", "subShape", "utility::string_t");
	paramShapeToClone = utils->getInvalidIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t", paramShapeToClone).value();
	utils->initialize("createSpecialSlideShape", "shapeToClone", "int32_t", paramShapeToClone);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "shapeToClone", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "shapeToClone", "int32_t", paramShapeToClone);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "shapeToClone", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "shapeToClone", "int32_t", paramShapeToClone);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideShape", "shapeToClone", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideShapeInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideShape", "slideType", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideShape", "subShape", "utility::string_t");
	paramPosition = utils->getInvalidIntTestValue("createSpecialSlideShape", "position", "int32_t", paramPosition).value();
	utils->initialize("createSpecialSlideShape", "position", "int32_t", paramPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "position", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "position", "int32_t", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "position", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "position", "int32_t", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideShape", "position", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideShape", "slideType", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createSpecialSlideShape", "password", "utility::string_t", paramPassword);
	utils->initialize("createSpecialSlideShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideShape", "slideType", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createSpecialSlideShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("createSpecialSlideShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideShape", "slideType", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createSpecialSlideShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("createSpecialSlideShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSpecialSlideShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("createSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("createSpecialSlideShape", "slideType", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSpecialSlideShape", "shapeToClone", "int32_t");
	auto paramPosition = utils->getOptionalIntTestValue("createSpecialSlideShape", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("createSpecialSlideShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("createSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("createSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSpecialSlideShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellParagraph) {
	utility::string_t paramName = utils->getTestValue("createTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellParagraph", "cellIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellParagraph", "storage", "utility::string_t");
	utils->initialize("createTableCellParagraph", "", "");
	std::shared_ptr<Paragraph> result = utils->getSlidesApi()->createTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createTableCellParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("createTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellParagraph", "cellIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellParagraph", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createTableCellParagraph", "name", "utility::string_t", paramName);
	utils->initialize("createTableCellParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellParagraph", "cellIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellParagraph", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellParagraph", "cellIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellParagraph", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellParagraphInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("createTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellParagraph", "cellIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellParagraph", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("createTableCellParagraph", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("createTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellParagraph", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellParagraphInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("createTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellParagraph", "cellIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellParagraph", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("createTableCellParagraph", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("createTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellParagraph", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellParagraph", "cellIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellParagraph", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
	utils->initialize("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellParagraph", "cellIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellParagraph", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createTableCellParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("createTableCellParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellParagraph", "cellIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellParagraph", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createTableCellParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("createTableCellParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellParagraph", "cellIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellParagraph", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createTableCellParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("createTableCellParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellPortion) {
	utility::string_t paramName = utils->getTestValue("createTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellPortion", "storage", "utility::string_t");
	utils->initialize("createTableCellPortion", "", "");
	std::shared_ptr<Portion> result = utils->getSlidesApi()->createTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createTableCellPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("createTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellPortion", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createTableCellPortion", "name", "utility::string_t", paramName);
	utils->initialize("createTableCellPortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellPortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellPortion", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createTableCellPortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellPortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellPortion", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellPortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellPortionInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("createTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellPortion", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("createTableCellPortion", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("createTableCellPortion", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellPortion", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellPortionInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("createTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellPortion", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("createTableCellPortion", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("createTableCellPortion", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellPortion", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("createTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellPortion", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("createTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellPortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellPortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellPortion", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createTableCellPortion", "dto", "std::shared_ptr<Portion>", paramDto);
	utils->initialize("createTableCellPortion", "dto", "std::shared_ptr<Portion>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "dto", "std::shared_ptr<Portion>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "dto", "std::shared_ptr<Portion>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellPortion", "dto", "std::shared_ptr<Portion>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellPortion", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createTableCellPortion", "password", "utility::string_t", paramPassword);
	utils->initialize("createTableCellPortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellPortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellPortion", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createTableCellPortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("createTableCellPortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellPortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableCellPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("createTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("createTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("createTableCellPortion", "paragraphIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("createTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableCellPortion", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createTableCellPortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("createTableCellPortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableCellPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableCellPortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableCellPortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableRow) {
	utility::string_t paramName = utils->getTestValue("createTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableRow", "shapeIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("createTableRow", "dto", "std::shared_ptr<TableRow>");
	auto paramPosition = utils->getOptionalIntTestValue("createTableRow", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableRow", "storage", "utility::string_t");
	utils->initialize("createTableRow", "", "");
	std::shared_ptr<TableRow> result = utils->getSlidesApi()->createTableRow(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createTableRowInvalidName) {
	utility::string_t paramName = utils->getTestValue("createTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableRow", "shapeIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("createTableRow", "dto", "std::shared_ptr<TableRow>");
	auto paramPosition = utils->getOptionalIntTestValue("createTableRow", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableRow", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createTableRow", "name", "utility::string_t", paramName);
	utils->initialize("createTableRow", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableRow(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableRow", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableRow", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableRow", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableRow", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableRow", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableRowInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableRow", "shapeIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("createTableRow", "dto", "std::shared_ptr<TableRow>");
	auto paramPosition = utils->getOptionalIntTestValue("createTableRow", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableRow", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("createTableRow", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("createTableRow", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableRow(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableRow", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableRow", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableRow", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableRow", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableRow", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableRowInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableRow", "shapeIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("createTableRow", "dto", "std::shared_ptr<TableRow>");
	auto paramPosition = utils->getOptionalIntTestValue("createTableRow", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableRow", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("createTableRow", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("createTableRow", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableRow(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableRow", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableRow", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableRow", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableRow", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableRow", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableRowInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableRow", "shapeIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("createTableRow", "dto", "std::shared_ptr<TableRow>");
	auto paramPosition = utils->getOptionalIntTestValue("createTableRow", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableRow", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("createTableRow", "dto", "std::shared_ptr<TableRow>", paramDto);
	utils->initialize("createTableRow", "dto", "std::shared_ptr<TableRow>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableRow(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableRow", "dto", "std::shared_ptr<TableRow>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableRow", "dto", "std::shared_ptr<TableRow>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableRow", "dto", "std::shared_ptr<TableRow>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableRow", "dto", "std::shared_ptr<TableRow>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableRow", "dto", "std::shared_ptr<TableRow>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableRowInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableRow", "shapeIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("createTableRow", "dto", "std::shared_ptr<TableRow>");
	auto paramPosition = utils->getOptionalIntTestValue("createTableRow", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableRow", "storage", "utility::string_t");
	paramPosition = utils->getInvalidIntTestValue("createTableRow", "position", "int32_t", paramPosition).value();
	utils->initialize("createTableRow", "position", "int32_t", paramPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableRow(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableRow", "position", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableRow", "position", "int32_t", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableRow", "position", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableRow", "position", "int32_t", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableRow", "position", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableRowInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableRow", "shapeIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("createTableRow", "dto", "std::shared_ptr<TableRow>");
	auto paramPosition = utils->getOptionalIntTestValue("createTableRow", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableRow", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createTableRow", "password", "utility::string_t", paramPassword);
	utils->initialize("createTableRow", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableRow(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableRow", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableRow", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableRow", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableRow", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableRow", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableRowInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableRow", "shapeIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("createTableRow", "dto", "std::shared_ptr<TableRow>");
	auto paramPosition = utils->getOptionalIntTestValue("createTableRow", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableRow", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createTableRow", "folder", "utility::string_t", paramFolder);
	utils->initialize("createTableRow", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableRow(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableRow", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableRow", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableRow", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableRow", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableRow", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createTableRowInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("createTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("createTableRow", "shapeIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("createTableRow", "dto", "std::shared_ptr<TableRow>");
	auto paramPosition = utils->getOptionalIntTestValue("createTableRow", "position", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("createTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createTableRow", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createTableRow", "storage", "utility::string_t", paramStorage);
	utils->initialize("createTableRow", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createTableRow(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createTableRow", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createTableRow", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createTableRow", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createTableRow", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createTableRow", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createVbaModule) {
	utility::string_t paramName = utils->getTestValue("createVbaModule", "name", "utility::string_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("createVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createVbaModule", "storage", "utility::string_t");
	utils->initialize("createVbaModule", "", "");
	std::shared_ptr<VbaModule> result = utils->getSlidesApi()->createVbaModule(paramName, paramModuleDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createVbaModuleInvalidName) {
	utility::string_t paramName = utils->getTestValue("createVbaModule", "name", "utility::string_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("createVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createVbaModule", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createVbaModule", "name", "utility::string_t", paramName);
	utils->initialize("createVbaModule", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createVbaModule(paramName, paramModuleDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createVbaModule", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createVbaModule", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createVbaModule", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createVbaModule", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createVbaModule", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createVbaModuleInvalidModuleDto) {
	utility::string_t paramName = utils->getTestValue("createVbaModule", "name", "utility::string_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("createVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createVbaModule", "storage", "utility::string_t");
	paramModuleDto = utils->getInvalidTestValueForClass<>("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>", paramModuleDto);
	utils->initialize("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>", paramModuleDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createVbaModule(paramName, paramModuleDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>", paramModuleDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>", paramModuleDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createVbaModuleInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createVbaModule", "name", "utility::string_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("createVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createVbaModule", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createVbaModule", "password", "utility::string_t", paramPassword);
	utils->initialize("createVbaModule", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createVbaModule(paramName, paramModuleDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createVbaModule", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createVbaModule", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createVbaModule", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createVbaModule", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createVbaModule", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createVbaModuleInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createVbaModule", "name", "utility::string_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("createVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createVbaModule", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createVbaModule", "folder", "utility::string_t", paramFolder);
	utils->initialize("createVbaModule", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createVbaModule(paramName, paramModuleDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createVbaModule", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createVbaModule", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createVbaModule", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createVbaModule", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createVbaModule", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createVbaModuleInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createVbaModule", "name", "utility::string_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("createVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("createVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createVbaModule", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createVbaModule", "storage", "utility::string_t", paramStorage);
	utils->initialize("createVbaModule", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createVbaModule(paramName, paramModuleDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createVbaModule", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createVbaModule", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createVbaModule", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createVbaModule", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createVbaModule", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermark) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name", "utility::string_t");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage", "utility::string_t");
	utils->initialize("createWatermark", "", "");
	utils->getSlidesApi()->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
}

TEST_F(SlidesApiTest, createWatermarkInvalidName) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name", "utility::string_t");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("createWatermark", "name", "utility::string_t", paramName);
	utils->initialize("createWatermark", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidShape) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name", "utility::string_t");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage", "utility::string_t");
	paramShape = utils->getInvalidTestValueForClass<>("createWatermark", "shape", "std::shared_ptr<Shape>", paramShape);
	utils->initialize("createWatermark", "shape", "std::shared_ptr<Shape>", paramShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "shape", "std::shared_ptr<Shape>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "shape", "std::shared_ptr<Shape>", paramShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "shape", "std::shared_ptr<Shape>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "shape", "std::shared_ptr<Shape>", paramShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "shape", "std::shared_ptr<Shape>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidFontHeight) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name", "utility::string_t");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage", "utility::string_t");
	paramFontHeight = utils->getInvalidDoubleTestValue("createWatermark", "fontHeight", "double", paramFontHeight).value();
	utils->initialize("createWatermark", "fontHeight", "double", paramFontHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontHeight", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontHeight", "double", paramFontHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontHeight", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontHeight", "double", paramFontHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "fontHeight", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidText) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name", "utility::string_t");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage", "utility::string_t");
	paramText = utils->getInvalidTestValue("createWatermark", "text", "utility::string_t", paramText);
	utils->initialize("createWatermark", "text", "utility::string_t", paramText);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "text", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "text", "utility::string_t", paramText);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "text", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "text", "utility::string_t", paramText);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "text", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidFontName) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name", "utility::string_t");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage", "utility::string_t");
	paramFontName = utils->getInvalidTestValue("createWatermark", "fontName", "utility::string_t", paramFontName);
	utils->initialize("createWatermark", "fontName", "utility::string_t", paramFontName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontName", "utility::string_t", paramFontName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontName", "utility::string_t", paramFontName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "fontName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidFontColor) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name", "utility::string_t");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage", "utility::string_t");
	paramFontColor = utils->getInvalidTestValue("createWatermark", "fontColor", "utility::string_t", paramFontColor);
	utils->initialize("createWatermark", "fontColor", "utility::string_t", paramFontColor);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontColor", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontColor", "utility::string_t", paramFontColor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontColor", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontColor", "utility::string_t", paramFontColor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "fontColor", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name", "utility::string_t");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createWatermark", "password", "utility::string_t", paramPassword);
	utils->initialize("createWatermark", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name", "utility::string_t");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("createWatermark", "folder", "utility::string_t", paramFolder);
	utils->initialize("createWatermark", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name", "utility::string_t");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("createWatermark", "storage", "utility::string_t", paramStorage);
	utils->initialize("createWatermark", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password", "utility::string_t");
	utils->initialize("createWatermarkOnline", "", "");
	HttpContent result = utils->getSlidesApi()->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidShape) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password", "utility::string_t");
	paramShape = utils->getInvalidTestValueForClass<>("createWatermarkOnline", "shape", "std::shared_ptr<Shape>", paramShape);
	utils->initialize("createWatermarkOnline", "shape", "std::shared_ptr<Shape>", paramShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "shape", "std::shared_ptr<Shape>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "shape", "std::shared_ptr<Shape>", paramShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "shape", "std::shared_ptr<Shape>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "shape", "std::shared_ptr<Shape>", paramShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "shape", "std::shared_ptr<Shape>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidFontHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password", "utility::string_t");
	paramFontHeight = utils->getInvalidDoubleTestValue("createWatermarkOnline", "fontHeight", "double", paramFontHeight).value();
	utils->initialize("createWatermarkOnline", "fontHeight", "double", paramFontHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontHeight", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontHeight", "double", paramFontHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontHeight", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontHeight", "double", paramFontHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "fontHeight", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidText) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password", "utility::string_t");
	paramText = utils->getInvalidTestValue("createWatermarkOnline", "text", "utility::string_t", paramText);
	utils->initialize("createWatermarkOnline", "text", "utility::string_t", paramText);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "text", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "text", "utility::string_t", paramText);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "text", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "text", "utility::string_t", paramText);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "text", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidFontName) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password", "utility::string_t");
	paramFontName = utils->getInvalidTestValue("createWatermarkOnline", "fontName", "utility::string_t", paramFontName);
	utils->initialize("createWatermarkOnline", "fontName", "utility::string_t", paramFontName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontName", "utility::string_t", paramFontName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontName", "utility::string_t", paramFontName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "fontName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidFontColor) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password", "utility::string_t");
	paramFontColor = utils->getInvalidTestValue("createWatermarkOnline", "fontColor", "utility::string_t", paramFontColor);
	utils->initialize("createWatermarkOnline", "fontColor", "utility::string_t", paramFontColor);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontColor", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontColor", "utility::string_t", paramFontColor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontColor", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontColor", "utility::string_t", paramFontColor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "fontColor", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape", "std::shared_ptr<Shape>");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight", "double");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName", "utility::string_t");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("createWatermarkOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("createWatermarkOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimation) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage", "utility::string_t");
	utils->initialize("deleteAnimation", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteAnimation", "name", "utility::string_t", paramName);
	utils->initialize("deleteAnimation", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimation", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimation", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteAnimation", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimation", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteAnimation", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteAnimation", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimation", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteAnimation", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteAnimation", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimation", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteAnimation", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteAnimation", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimation", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage", "utility::string_t");
	utils->initialize("deleteAnimationEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteAnimationEffect", "name", "utility::string_t", paramName);
	utils->initialize("deleteAnimationEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimationEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage", "utility::string_t");
	paramEffectIndex = utils->getInvalidIntTestValue("deleteAnimationEffect", "effectIndex", "int32_t", paramEffectIndex).value();
	utils->initialize("deleteAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "effectIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteAnimationEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteAnimationEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteAnimationEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteAnimationEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteAnimationEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteAnimationEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequence) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage", "utility::string_t");
	utils->initialize("deleteAnimationInteractiveSequence", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteAnimationInteractiveSequence", "name", "utility::string_t", paramName);
	utils->initialize("deleteAnimationInteractiveSequence", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage", "utility::string_t");
	paramSequenceIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t", paramSequenceIndex).value();
	utils->initialize("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t", paramSequenceIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSequenceIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex).value();
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramEffectIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex).value();
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequences) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage", "utility::string_t");
	utils->initialize("deleteAnimationInteractiveSequences", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequencesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteAnimationInteractiveSequences", "name", "utility::string_t", paramName);
	utils->initialize("deleteAnimationInteractiveSequences", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequences", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequencesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequences", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteAnimationInteractiveSequences", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequences", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequencesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteAnimationInteractiveSequences", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteAnimationInteractiveSequences", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequences", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequencesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteAnimationInteractiveSequences", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteAnimationInteractiveSequences", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequences", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequencesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteAnimationInteractiveSequences", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteAnimationInteractiveSequences", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequences", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationMainSequence) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage", "utility::string_t");
	utils->initialize("deleteAnimationMainSequence", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationMainSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteAnimationMainSequence", "name", "utility::string_t", paramName);
	utils->initialize("deleteAnimationMainSequence", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationMainSequence", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationMainSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimationMainSequence", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteAnimationMainSequence", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationMainSequence", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationMainSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteAnimationMainSequence", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteAnimationMainSequence", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationMainSequence", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationMainSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteAnimationMainSequence", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteAnimationMainSequence", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationMainSequence", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationMainSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteAnimationMainSequence", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteAnimationMainSequence", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationMainSequence", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteBackground) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage", "utility::string_t");
	utils->initialize("deleteBackground", "", "");
	std::shared_ptr<SlideBackground> result = utils->getSlidesApi()->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteBackgroundInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteBackground", "name", "utility::string_t", paramName);
	utils->initialize("deleteBackground", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteBackground", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteBackgroundInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteBackground", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteBackground", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteBackground", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteBackgroundInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteBackground", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteBackground", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteBackground", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteBackgroundInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteBackground", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteBackground", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteBackground", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteBackgroundInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteBackground", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteBackground", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteBackground", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategory) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage", "utility::string_t");
	utils->initialize("deleteChartCategory", "", "");
	std::shared_ptr<Chart> result = utils->getSlidesApi()->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteChartCategory", "name", "utility::string_t", paramName);
	utils->initialize("deleteChartCategory", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteChartCategory", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteChartCategory", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteChartCategory", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteChartCategory", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidCategoryIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage", "utility::string_t");
	paramCategoryIndex = utils->getInvalidIntTestValue("deleteChartCategory", "categoryIndex", "int32_t", paramCategoryIndex).value();
	utils->initialize("deleteChartCategory", "categoryIndex", "int32_t", paramCategoryIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "categoryIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "categoryIndex", "int32_t", paramCategoryIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "categoryIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "categoryIndex", "int32_t", paramCategoryIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "categoryIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteChartCategory", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteChartCategory", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteChartCategory", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteChartCategory", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteChartCategory", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteChartCategory", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPoint) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage", "utility::string_t");
	utils->initialize("deleteChartDataPoint", "", "");
	std::shared_ptr<Chart> result = utils->getSlidesApi()->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteChartDataPoint", "name", "utility::string_t", paramName);
	utils->initialize("deleteChartDataPoint", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteChartDataPoint", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage", "utility::string_t");
	paramSeriesIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex).value();
	utils->initialize("deleteChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "seriesIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "seriesIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "seriesIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidPointIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage", "utility::string_t");
	paramPointIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "pointIndex", "int32_t", paramPointIndex).value();
	utils->initialize("deleteChartDataPoint", "pointIndex", "int32_t", paramPointIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "pointIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "pointIndex", "int32_t", paramPointIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "pointIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "pointIndex", "int32_t", paramPointIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "pointIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteChartDataPoint", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteChartDataPoint", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteChartDataPoint", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteChartDataPoint", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteChartDataPoint", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteChartDataPoint", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeries) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage", "utility::string_t");
	utils->initialize("deleteChartSeries", "", "");
	std::shared_ptr<Chart> result = utils->getSlidesApi()->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteChartSeries", "name", "utility::string_t", paramName);
	utils->initialize("deleteChartSeries", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteChartSeries", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteChartSeries", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteChartSeries", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteChartSeries", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage", "utility::string_t");
	paramSeriesIndex = utils->getInvalidIntTestValue("deleteChartSeries", "seriesIndex", "int32_t", paramSeriesIndex).value();
	utils->initialize("deleteChartSeries", "seriesIndex", "int32_t", paramSeriesIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "seriesIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "seriesIndex", "int32_t", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "seriesIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "seriesIndex", "int32_t", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "seriesIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteChartSeries", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteChartSeries", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteChartSeries", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteChartSeries", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteChartSeries", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteChartSeries", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteComments) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name", "utility::string_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage", "utility::string_t");
	utils->initialize("deleteComments", "", "");
	utils->getSlidesApi()->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
}

TEST_F(SlidesApiTest, deleteCommentsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name", "utility::string_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteComments", "name", "utility::string_t", paramName);
	utils->initialize("deleteComments", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteComments", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteComments", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteComments", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteComments", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteComments", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsInvalidAuthor) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name", "utility::string_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage", "utility::string_t");
	paramAuthor = utils->getInvalidTestValue("deleteComments", "author", "utility::string_t", paramAuthor);
	utils->initialize("deleteComments", "author", "utility::string_t", paramAuthor);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteComments", "author", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteComments", "author", "utility::string_t", paramAuthor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteComments", "author", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteComments", "author", "utility::string_t", paramAuthor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteComments", "author", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name", "utility::string_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteComments", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteComments", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteComments", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteComments", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteComments", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteComments", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteComments", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name", "utility::string_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteComments", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteComments", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteComments", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteComments", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteComments", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteComments", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteComments", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name", "utility::string_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteComments", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteComments", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteComments", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteComments", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteComments", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteComments", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteComments", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteCommentsOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramAuthor = utils->getTestValue("deleteCommentsOnline", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteCommentsOnline", "password", "utility::string_t");
	utils->initialize("deleteCommentsOnline", "", "");
	HttpContent result = utils->getSlidesApi()->deleteCommentsOnline(paramDocument, paramAuthor, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, deleteCommentsOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteCommentsOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramAuthor = utils->getTestValue("deleteCommentsOnline", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteCommentsOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("deleteCommentsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("deleteCommentsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteCommentsOnline(paramDocument, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteCommentsOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsOnlineInvalidAuthor) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteCommentsOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramAuthor = utils->getTestValue("deleteCommentsOnline", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteCommentsOnline", "password", "utility::string_t");
	paramAuthor = utils->getInvalidTestValue("deleteCommentsOnline", "author", "utility::string_t", paramAuthor);
	utils->initialize("deleteCommentsOnline", "author", "utility::string_t", paramAuthor);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteCommentsOnline(paramDocument, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "author", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "author", "utility::string_t", paramAuthor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "author", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "author", "utility::string_t", paramAuthor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteCommentsOnline", "author", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteCommentsOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramAuthor = utils->getTestValue("deleteCommentsOnline", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteCommentsOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteCommentsOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteCommentsOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteCommentsOnline(paramDocument, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteCommentsOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentProperties) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperties", "storage", "utility::string_t");
	utils->initialize("deleteDocumentProperties", "", "");
	std::shared_ptr<DocumentProperties> result = utils->getSlidesApi()->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteDocumentPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperties", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteDocumentProperties", "name", "utility::string_t", paramName);
	utils->initialize("deleteDocumentProperties", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperties", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperties", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteDocumentProperties", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteDocumentProperties", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperties", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperties", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteDocumentProperties", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteDocumentProperties", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperties", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperties", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteDocumentProperties", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteDocumentProperties", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperties", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentProperty) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage", "utility::string_t");
	utils->initialize("deleteDocumentProperty", "", "");
	std::shared_ptr<DocumentProperties> result = utils->getSlidesApi()->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteDocumentPropertyInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteDocumentProperty", "name", "utility::string_t", paramName);
	utils->initialize("deleteDocumentProperty", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperty", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertyInvalidPropertyName) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage", "utility::string_t");
	paramPropertyName = utils->getInvalidTestValue("deleteDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);
	utils->initialize("deleteDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "propertyName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "propertyName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperty", "propertyName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertyInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteDocumentProperty", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteDocumentProperty", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperty", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertyInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteDocumentProperty", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteDocumentProperty", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperty", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertyInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteDocumentProperty", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteDocumentProperty", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperty", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteEmbeddedFont) {
	utility::string_t paramName = utils->getTestValue("deleteEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("deleteEmbeddedFont", "fontName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteEmbeddedFont", "storage", "utility::string_t");
	utils->initialize("deleteEmbeddedFont", "", "");
	std::shared_ptr<FontsData> result = utils->getSlidesApi()->deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteEmbeddedFontInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("deleteEmbeddedFont", "fontName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteEmbeddedFont", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteEmbeddedFont", "name", "utility::string_t", paramName);
	utils->initialize("deleteEmbeddedFont", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFont", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFont", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFont", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFont", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteEmbeddedFont", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteEmbeddedFontInvalidFontName) {
	utility::string_t paramName = utils->getTestValue("deleteEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("deleteEmbeddedFont", "fontName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteEmbeddedFont", "storage", "utility::string_t");
	paramFontName = utils->getInvalidTestValue("deleteEmbeddedFont", "fontName", "utility::string_t", paramFontName);
	utils->initialize("deleteEmbeddedFont", "fontName", "utility::string_t", paramFontName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFont", "fontName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFont", "fontName", "utility::string_t", paramFontName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFont", "fontName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFont", "fontName", "utility::string_t", paramFontName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteEmbeddedFont", "fontName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteEmbeddedFontInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("deleteEmbeddedFont", "fontName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteEmbeddedFont", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteEmbeddedFont", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteEmbeddedFont", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFont", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFont", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFont", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFont", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteEmbeddedFont", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteEmbeddedFontInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("deleteEmbeddedFont", "fontName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteEmbeddedFont", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteEmbeddedFont", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteEmbeddedFont", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFont", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFont", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFont", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFont", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteEmbeddedFont", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteEmbeddedFontInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("deleteEmbeddedFont", "fontName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteEmbeddedFont", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteEmbeddedFont", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteEmbeddedFont", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFont", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFont", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFont", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFont", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteEmbeddedFont", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteEmbeddedFontOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFontName = utils->getTestValue("deleteEmbeddedFontOnline", "fontName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteEmbeddedFontOnline", "password", "utility::string_t");
	utils->initialize("deleteEmbeddedFontOnline", "", "");
	HttpContent result = utils->getSlidesApi()->deleteEmbeddedFontOnline(paramDocument, paramFontName, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, deleteEmbeddedFontOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFontName = utils->getTestValue("deleteEmbeddedFontOnline", "fontName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteEmbeddedFontOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("deleteEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("deleteEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteEmbeddedFontOnline(paramDocument, paramFontName, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteEmbeddedFontOnlineInvalidFontName) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFontName = utils->getTestValue("deleteEmbeddedFontOnline", "fontName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteEmbeddedFontOnline", "password", "utility::string_t");
	paramFontName = utils->getInvalidTestValue("deleteEmbeddedFontOnline", "fontName", "utility::string_t", paramFontName);
	utils->initialize("deleteEmbeddedFontOnline", "fontName", "utility::string_t", paramFontName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteEmbeddedFontOnline(paramDocument, paramFontName, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFontOnline", "fontName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFontOnline", "fontName", "utility::string_t", paramFontName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFontOnline", "fontName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFontOnline", "fontName", "utility::string_t", paramFontName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteEmbeddedFontOnline", "fontName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteEmbeddedFontOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFontName = utils->getTestValue("deleteEmbeddedFontOnline", "fontName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteEmbeddedFontOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteEmbeddedFontOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteEmbeddedFontOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteEmbeddedFontOnline(paramDocument, paramFontName, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFontOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFontOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteEmbeddedFontOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteEmbeddedFontOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteEmbeddedFontOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFile) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId", "utility::string_t");
	utils->initialize("deleteFile", "", "");
	utils->getSlidesApi()->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
}

TEST_F(SlidesApiTest, deleteFileInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId", "utility::string_t");
	paramPath = utils->getInvalidTestValue("deleteFile", "path", "utility::string_t", paramPath);
	utils->initialize("deleteFile", "path", "utility::string_t", paramPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "path", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "path", "utility::string_t", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "path", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "path", "utility::string_t", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "path", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFileInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId", "utility::string_t");
	paramStorageName = utils->getInvalidTestValue("deleteFile", "storageName", "utility::string_t", paramStorageName);
	utils->initialize("deleteFile", "storageName", "utility::string_t", paramStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "storageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "storageName", "utility::string_t", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "storageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "storageName", "utility::string_t", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "storageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFileInvalidVersionId) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId", "utility::string_t");
	paramVersionId = utils->getInvalidTestValue("deleteFile", "versionId", "utility::string_t", paramVersionId);
	utils->initialize("deleteFile", "versionId", "utility::string_t", paramVersionId);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "versionId", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "versionId", "utility::string_t", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "versionId", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "versionId", "utility::string_t", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "versionId", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolder) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName", "utility::string_t");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive", "bool");
	utils->initialize("deleteFolder", "", "");
	utils->getSlidesApi()->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
}

TEST_F(SlidesApiTest, deleteFolderInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName", "utility::string_t");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive", "bool");
	paramPath = utils->getInvalidTestValue("deleteFolder", "path", "utility::string_t", paramPath);
	utils->initialize("deleteFolder", "path", "utility::string_t", paramPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "path", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "path", "utility::string_t", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "path", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "path", "utility::string_t", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "path", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolderInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName", "utility::string_t");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive", "bool");
	paramStorageName = utils->getInvalidTestValue("deleteFolder", "storageName", "utility::string_t", paramStorageName);
	utils->initialize("deleteFolder", "storageName", "utility::string_t", paramStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "storageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "storageName", "utility::string_t", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "storageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "storageName", "utility::string_t", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "storageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolderInvalidRecursive) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName", "utility::string_t");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive", "bool");
	paramRecursive = utils->getInvalidBoolTestValue("deleteFolder", "recursive", "bool", paramRecursive).value();
	utils->initialize("deleteFolder", "recursive", "bool", paramRecursive);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "recursive", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "recursive", "bool", paramRecursive);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "recursive", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "recursive", "bool", paramRecursive);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "recursive", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlide) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage", "utility::string_t");
	utils->initialize("deleteNotesSlide", "", "");
	std::shared_ptr<Slide> result = utils->getSlidesApi()->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteNotesSlide", "name", "utility::string_t", paramName);
	utils->initialize("deleteNotesSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteNotesSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteNotesSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteNotesSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteNotesSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraph) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraph", "subShape", "utility::string_t");
	utils->initialize("deleteParagraph", "", "");
	std::shared_ptr<Paragraphs> result = utils->getSlidesApi()->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraph", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteParagraph", "name", "utility::string_t", paramName);
	utils->initialize("deleteParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraph", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraph", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraph", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteParagraph", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("deleteParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraph", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraph", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraph", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraph", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deleteParagraph", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deleteParagraph", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraphs", "subShape", "utility::string_t");
	utils->initialize("deleteParagraphs", "", "");
	std::shared_ptr<Paragraphs> result = utils->getSlidesApi()->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraphs", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteParagraphs", "name", "utility::string_t", paramName);
	utils->initialize("deleteParagraphs", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraphs", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteParagraphs", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteParagraphs", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraphs", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteParagraphs", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteParagraphs", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraphs", "subShape", "utility::string_t");
	paramParagraphs = utils->getInvalidIntVectorTestValue("deleteParagraphs", "paragraphs", "std::vector<int32_t>", paramParagraphs);
	utils->initialize("deleteParagraphs", "paragraphs", "std::vector<int32_t>", paramParagraphs);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "paragraphs", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "paragraphs", "std::vector<int32_t>", paramParagraphs);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "paragraphs", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "paragraphs", "std::vector<int32_t>", paramParagraphs);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "paragraphs", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraphs", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteParagraphs", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteParagraphs", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraphs", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteParagraphs", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteParagraphs", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraphs", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteParagraphs", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteParagraphs", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteParagraphs", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deleteParagraphs", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deleteParagraphs", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortion) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortion", "subShape", "utility::string_t");
	utils->initialize("deletePortion", "", "");
	std::shared_ptr<Portions> result = utils->getSlidesApi()->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deletePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortion", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deletePortion", "name", "utility::string_t", paramName);
	utils->initialize("deletePortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortion", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deletePortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deletePortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortion", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deletePortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deletePortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortion", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("deletePortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("deletePortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortion", "subShape", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("deletePortion", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("deletePortion", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortion", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deletePortion", "password", "utility::string_t", paramPassword);
	utils->initialize("deletePortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortion", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deletePortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("deletePortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortion", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deletePortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("deletePortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortion", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deletePortion", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deletePortion", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortions) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortions", "subShape", "utility::string_t");
	utils->initialize("deletePortions", "", "");
	std::shared_ptr<Portions> result = utils->getSlidesApi()->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deletePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortions", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deletePortions", "name", "utility::string_t", paramName);
	utils->initialize("deletePortions", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortions", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deletePortions", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deletePortions", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortions", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deletePortions", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deletePortions", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortions", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("deletePortions", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("deletePortions", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidPortions) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortions", "subShape", "utility::string_t");
	paramPortions = utils->getInvalidIntVectorTestValue("deletePortions", "portions", "std::vector<int32_t>", paramPortions);
	utils->initialize("deletePortions", "portions", "std::vector<int32_t>", paramPortions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "portions", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "portions", "std::vector<int32_t>", paramPortions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "portions", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "portions", "std::vector<int32_t>", paramPortions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "portions", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortions", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deletePortions", "password", "utility::string_t", paramPassword);
	utils->initialize("deletePortions", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortions", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deletePortions", "folder", "utility::string_t", paramFolder);
	utils->initialize("deletePortions", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortions", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deletePortions", "storage", "utility::string_t", paramStorage);
	utils->initialize("deletePortions", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deletePortions", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deletePortions", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deletePortions", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtection) {
	utility::string_t paramName = utils->getTestValue("deleteProtection", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteProtection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteProtection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteProtection", "storage", "utility::string_t");
	utils->initialize("deleteProtection", "", "");
	std::shared_ptr<ProtectionProperties> result = utils->getSlidesApi()->deleteProtection(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteProtectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteProtection", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteProtection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteProtection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteProtection", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteProtection", "name", "utility::string_t", paramName);
	utils->initialize("deleteProtection", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteProtection(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtection", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteProtection", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteProtection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteProtection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteProtection", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteProtection", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteProtection", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteProtection(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtection", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteProtection", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteProtection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteProtection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteProtection", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteProtection", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteProtection", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteProtection(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtection", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteProtection", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteProtection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteProtection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteProtection", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteProtection", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteProtection", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteProtection(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtection", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtectionOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteProtectionOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("deleteProtectionOnline", "password", "utility::string_t");
	utils->initialize("deleteProtectionOnline", "", "");
	HttpContent result = utils->getSlidesApi()->deleteProtectionOnline(paramDocument, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, deleteProtectionOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteProtectionOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("deleteProtectionOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("deleteProtectionOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("deleteProtectionOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteProtectionOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtectionOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtectionOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtectionOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtectionOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtectionOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtectionOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteProtectionOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("deleteProtectionOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteProtectionOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteProtectionOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteProtectionOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtectionOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtectionOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtectionOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtectionOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtectionOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSection) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex", "int32_t");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage", "utility::string_t");
	utils->initialize("deleteSection", "", "");
	std::shared_ptr<Sections> result = utils->getSlidesApi()->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex", "int32_t");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSection", "name", "utility::string_t", paramName);
	utils->initialize("deleteSection", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidSectionIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex", "int32_t");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage", "utility::string_t");
	paramSectionIndex = utils->getInvalidIntTestValue("deleteSection", "sectionIndex", "int32_t", paramSectionIndex).value();
	utils->initialize("deleteSection", "sectionIndex", "int32_t", paramSectionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "sectionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "sectionIndex", "int32_t", paramSectionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "sectionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "sectionIndex", "int32_t", paramSectionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "sectionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidWithSlides) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex", "int32_t");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage", "utility::string_t");
	paramWithSlides = utils->getInvalidBoolTestValue("deleteSection", "withSlides", "bool", paramWithSlides).value();
	utils->initialize("deleteSection", "withSlides", "bool", paramWithSlides);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "withSlides", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "withSlides", "bool", paramWithSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "withSlides", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "withSlides", "bool", paramWithSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "withSlides", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex", "int32_t");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSection", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSection", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex", "int32_t");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSection", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSection", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex", "int32_t");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSection", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSection", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSections) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name", "utility::string_t");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections", "std::vector<int32_t>");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage", "utility::string_t");
	utils->initialize("deleteSections", "", "");
	std::shared_ptr<Sections> result = utils->getSlidesApi()->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSectionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name", "utility::string_t");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections", "std::vector<int32_t>");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSections", "name", "utility::string_t", paramName);
	utils->initialize("deleteSections", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidSections) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name", "utility::string_t");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections", "std::vector<int32_t>");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage", "utility::string_t");
	paramSections = utils->getInvalidIntVectorTestValue("deleteSections", "sections", "std::vector<int32_t>", paramSections);
	utils->initialize("deleteSections", "sections", "std::vector<int32_t>", paramSections);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "sections", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "sections", "std::vector<int32_t>", paramSections);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "sections", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "sections", "std::vector<int32_t>", paramSections);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "sections", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidWithSlides) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name", "utility::string_t");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections", "std::vector<int32_t>");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage", "utility::string_t");
	paramWithSlides = utils->getInvalidBoolTestValue("deleteSections", "withSlides", "bool", paramWithSlides).value();
	utils->initialize("deleteSections", "withSlides", "bool", paramWithSlides);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "withSlides", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "withSlides", "bool", paramWithSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "withSlides", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "withSlides", "bool", paramWithSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "withSlides", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name", "utility::string_t");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections", "std::vector<int32_t>");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSections", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSections", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name", "utility::string_t");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections", "std::vector<int32_t>");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSections", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSections", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name", "utility::string_t");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections", "std::vector<int32_t>");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSections", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSections", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShape) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShape", "subShape", "utility::string_t");
	utils->initialize("deleteShape", "", "");
	std::shared_ptr<Shapes> result = utils->getSlidesApi()->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteShape", "name", "utility::string_t", paramName);
	utils->initialize("deleteShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShape", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteShape", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteShape", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteShape", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deleteShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deleteShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapes) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShapes", "subShape", "utility::string_t");
	utils->initialize("deleteShapes", "", "");
	std::shared_ptr<Shapes> result = utils->getSlidesApi()->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShapes", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteShapes", "name", "utility::string_t", paramName);
	utils->initialize("deleteShapes", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShapes", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteShapes", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteShapes", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShapes", "subShape", "utility::string_t");
	paramShapes = utils->getInvalidIntVectorTestValue("deleteShapes", "shapes", "std::vector<int32_t>", paramShapes);
	utils->initialize("deleteShapes", "shapes", "std::vector<int32_t>", paramShapes);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "shapes", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "shapes", "std::vector<int32_t>", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "shapes", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "shapes", "std::vector<int32_t>", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "shapes", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShapes", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteShapes", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteShapes", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShapes", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteShapes", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteShapes", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShapes", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteShapes", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteShapes", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapesInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteShapes", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deleteShapes", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deleteShapes", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlide) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage", "utility::string_t");
	utils->initialize("deleteSlide", "", "");
	std::shared_ptr<Slides> result = utils->getSlidesApi()->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSlide", "name", "utility::string_t", paramName);
	utils->initialize("deleteSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideComments) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage", "utility::string_t");
	utils->initialize("deleteSlideComments", "", "");
	std::shared_ptr<SlideComments> result = utils->getSlidesApi()->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSlideComments", "name", "utility::string_t", paramName);
	utils->initialize("deleteSlideComments", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideComments", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSlideComments", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidAuthor) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage", "utility::string_t");
	paramAuthor = utils->getInvalidTestValue("deleteSlideComments", "author", "utility::string_t", paramAuthor);
	utils->initialize("deleteSlideComments", "author", "utility::string_t", paramAuthor);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "author", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "author", "utility::string_t", paramAuthor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "author", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "author", "utility::string_t", paramAuthor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "author", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSlideComments", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSlideComments", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSlideComments", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSlideComments", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSlideComments", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSlideComments", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideCommentsOnline", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideCommentsOnline", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideCommentsOnline", "password", "utility::string_t");
	utils->initialize("deleteSlideCommentsOnline", "", "");
	HttpContent result = utils->getSlidesApi()->deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, deleteSlideCommentsOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideCommentsOnline", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideCommentsOnline", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideCommentsOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideCommentsOnline", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideCommentsOnline", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideCommentsOnline", "password", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideCommentsOnline", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSlideCommentsOnline", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideCommentsOnline", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsOnlineInvalidAuthor) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideCommentsOnline", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideCommentsOnline", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideCommentsOnline", "password", "utility::string_t");
	paramAuthor = utils->getInvalidTestValue("deleteSlideCommentsOnline", "author", "utility::string_t", paramAuthor);
	utils->initialize("deleteSlideCommentsOnline", "author", "utility::string_t", paramAuthor);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "author", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "author", "utility::string_t", paramAuthor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "author", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "author", "utility::string_t", paramAuthor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideCommentsOnline", "author", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteSlideCommentsOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideCommentsOnline", "slideIndex", "int32_t");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideCommentsOnline", "author", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideCommentsOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSlideCommentsOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSlideCommentsOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideCommentsOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlides) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage", "utility::string_t");
	utils->initialize("deleteSlides", "", "");
	std::shared_ptr<Slides> result = utils->getSlidesApi()->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSlides", "name", "utility::string_t", paramName);
	utils->initialize("deleteSlides", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlides", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesInvalidSlides) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage", "utility::string_t");
	paramSlides = utils->getInvalidIntVectorTestValue("deleteSlides", "slides", "std::vector<int32_t>", paramSlides);
	utils->initialize("deleteSlides", "slides", "std::vector<int32_t>", paramSlides);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "slides", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "slides", "std::vector<int32_t>", paramSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "slides", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "slides", "std::vector<int32_t>", paramSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlides", "slides", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSlides", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSlides", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlides", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSlides", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSlides", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlides", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSlides", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSlides", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlides", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSmartArtNode) {
	utility::string_t paramName = utils->getTestValue("deleteSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("deleteSmartArtNode", "smartArtIndex", "int32_t");
	int32_t paramNodeIndex = utils->getIntTestValue("deleteSmartArtNode", "nodeIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("deleteSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSmartArtNode", "storage", "utility::string_t");
	utils->initialize("deleteSmartArtNode", "", "");
	std::shared_ptr<SmartArt> result = utils->getSlidesApi()->deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSmartArtNodeInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("deleteSmartArtNode", "smartArtIndex", "int32_t");
	int32_t paramNodeIndex = utils->getIntTestValue("deleteSmartArtNode", "nodeIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("deleteSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSmartArtNode", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSmartArtNode", "name", "utility::string_t", paramName);
	utils->initialize("deleteSmartArtNode", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSmartArtNode", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSmartArtNodeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("deleteSmartArtNode", "smartArtIndex", "int32_t");
	int32_t paramNodeIndex = utils->getIntTestValue("deleteSmartArtNode", "nodeIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("deleteSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSmartArtNode", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSmartArtNode", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSmartArtNode", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSmartArtNode", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSmartArtNodeInvalidSmartArtIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("deleteSmartArtNode", "smartArtIndex", "int32_t");
	int32_t paramNodeIndex = utils->getIntTestValue("deleteSmartArtNode", "nodeIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("deleteSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSmartArtNode", "storage", "utility::string_t");
	paramSmartArtIndex = utils->getInvalidIntTestValue("deleteSmartArtNode", "smartArtIndex", "int32_t", paramSmartArtIndex).value();
	utils->initialize("deleteSmartArtNode", "smartArtIndex", "int32_t", paramSmartArtIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "smartArtIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "smartArtIndex", "int32_t", paramSmartArtIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "smartArtIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "smartArtIndex", "int32_t", paramSmartArtIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSmartArtNode", "smartArtIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSmartArtNodeInvalidNodeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("deleteSmartArtNode", "smartArtIndex", "int32_t");
	int32_t paramNodeIndex = utils->getIntTestValue("deleteSmartArtNode", "nodeIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("deleteSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSmartArtNode", "storage", "utility::string_t");
	paramNodeIndex = utils->getInvalidIntTestValue("deleteSmartArtNode", "nodeIndex", "int32_t", paramNodeIndex).value();
	utils->initialize("deleteSmartArtNode", "nodeIndex", "int32_t", paramNodeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "nodeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "nodeIndex", "int32_t", paramNodeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "nodeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "nodeIndex", "int32_t", paramNodeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSmartArtNode", "nodeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSmartArtNodeInvalidSubNode) {
	utility::string_t paramName = utils->getTestValue("deleteSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("deleteSmartArtNode", "smartArtIndex", "int32_t");
	int32_t paramNodeIndex = utils->getIntTestValue("deleteSmartArtNode", "nodeIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("deleteSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSmartArtNode", "storage", "utility::string_t");
	paramSubNode = utils->getInvalidTestValue("deleteSmartArtNode", "subNode", "utility::string_t", paramSubNode);
	utils->initialize("deleteSmartArtNode", "subNode", "utility::string_t", paramSubNode);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "subNode", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "subNode", "utility::string_t", paramSubNode);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "subNode", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "subNode", "utility::string_t", paramSubNode);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSmartArtNode", "subNode", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSmartArtNodeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("deleteSmartArtNode", "smartArtIndex", "int32_t");
	int32_t paramNodeIndex = utils->getIntTestValue("deleteSmartArtNode", "nodeIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("deleteSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSmartArtNode", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSmartArtNode", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSmartArtNode", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSmartArtNode", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSmartArtNodeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("deleteSmartArtNode", "smartArtIndex", "int32_t");
	int32_t paramNodeIndex = utils->getIntTestValue("deleteSmartArtNode", "nodeIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("deleteSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSmartArtNode", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSmartArtNode", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSmartArtNode", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSmartArtNode", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSmartArtNodeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSmartArtNode", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSmartArtNode", "slideIndex", "int32_t");
	int32_t paramSmartArtIndex = utils->getIntTestValue("deleteSmartArtNode", "smartArtIndex", "int32_t");
	int32_t paramNodeIndex = utils->getIntTestValue("deleteSmartArtNode", "nodeIndex", "int32_t");
	utility::string_t paramSubNode = utils->getTestValue("deleteSmartArtNode", "subNode", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSmartArtNode", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSmartArtNode", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSmartArtNode", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSmartArtNode", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSmartArtNode", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSmartArtNode", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSmartArtNode", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSmartArtNode", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimation) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimation", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimation", "storage", "utility::string_t");
	utils->initialize("deleteSpecialSlideAnimation", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimation", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimation", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlideAnimation", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlideAnimation", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimation", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimation", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimation", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimation", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimation", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimation", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimation", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimation", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimation", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlideAnimation", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlideAnimation", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimation", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimation", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimation", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimation", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimation", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimation", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimation", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t");
	utils->initialize("deleteSpecialSlideAnimationEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationEffectInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramEffectIndex = utils->getInvalidIntTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t", paramEffectIndex).value();
	utils->initialize("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequence) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequence", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramSequenceIndex = utils->getInvalidIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t", paramSequenceIndex).value();
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t", paramSequenceIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequence", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSequenceIndex = utils->getInvalidIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex).value();
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramEffectIndex = utils->getInvalidIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex).value();
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequences) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t");
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequences", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequencesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequencesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequencesInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequencesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequencesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationInteractiveSequencesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationInteractiveSequences", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationMainSequence) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t");
	utils->initialize("deleteSpecialSlideAnimationMainSequence", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationMainSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationMainSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationMainSequenceInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationMainSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationMainSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideAnimationMainSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideAnimationMainSequence", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraph) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
	utils->initialize("deleteSpecialSlideParagraph", "", "");
	std::shared_ptr<Paragraphs> result = utils->getSlidesApi()->deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlideParagraph", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlideParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraph", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlideParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deleteSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deleteSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraph", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
	utils->initialize("deleteSpecialSlideParagraphs", "", "");
	std::shared_ptr<Paragraphs> result = utils->getSlidesApi()->deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlideParagraphs", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlideParagraphs", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraphs", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlideParagraphs", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlideParagraphs", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraphs", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphsInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlideParagraphs", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlideParagraphs", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraphs", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphsInvalidParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramParagraphs = utils->getInvalidIntVectorTestValue("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>", paramParagraphs);
	utils->initialize("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>", paramParagraphs);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>", paramParagraphs);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>", paramParagraphs);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlideParagraphs", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlideParagraphs", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraphs", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlideParagraphs", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlideParagraphs", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraphs", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlideParagraphs", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlideParagraphs", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraphs", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideParagraphsInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideParagraphs", "shapeIndex", "int32_t");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSpecialSlideParagraphs", "paragraphs", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deleteSpecialSlideParagraphs", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deleteSpecialSlideParagraphs", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideParagraphs", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideParagraphs", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideParagraphs", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortion) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t");
	utils->initialize("deleteSpecialSlidePortion", "", "");
	std::shared_ptr<Portions> result = utils->getSlidesApi()->deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlidePortion", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlidePortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortion", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("deleteSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("deleteSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortion", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlidePortion", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlidePortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlidePortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlidePortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deleteSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deleteSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortion", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortions) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t");
	utils->initialize("deleteSpecialSlidePortions", "", "");
	std::shared_ptr<Portions> result = utils->getSlidesApi()->deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlidePortions", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlidePortions", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortions", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlidePortions", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortions", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionsInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlidePortions", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortions", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteSpecialSlidePortions", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortions", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("deleteSpecialSlidePortions", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortions", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionsInvalidPortions) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t");
	paramPortions = utils->getInvalidIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>", paramPortions);
	utils->initialize("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>", paramPortions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>", paramPortions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>", paramPortions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlidePortions", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlidePortions", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortions", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlidePortions", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortions", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlidePortions", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortions", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlidePortionsInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSpecialSlidePortions", "paragraphIndex", "int32_t");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSpecialSlidePortions", "portions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deleteSpecialSlidePortions", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deleteSpecialSlidePortions", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlidePortions", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlidePortions", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlidePortions", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShape) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShape", "subShape", "utility::string_t");
	utils->initialize("deleteSpecialSlideShape", "", "");
	std::shared_ptr<Shapes> result = utils->getSlidesApi()->deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlideShape", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlideShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapeInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShape", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShape", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShape", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlideShape", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlideShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlideShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlideShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlideShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlideShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deleteSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deleteSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapes) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShapes", "slideType", "utility::string_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShapes", "subShape", "utility::string_t");
	utils->initialize("deleteSpecialSlideShapes", "", "");
	std::shared_ptr<Shapes> result = utils->getSlidesApi()->deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShapes", "slideType", "utility::string_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShapes", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteSpecialSlideShapes", "name", "utility::string_t", paramName);
	utils->initialize("deleteSpecialSlideShapes", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShapes", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShapes", "slideType", "utility::string_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShapes", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShapes", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapesInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShapes", "slideType", "utility::string_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShapes", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("deleteSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("deleteSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShapes", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShapes", "slideType", "utility::string_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShapes", "subShape", "utility::string_t");
	paramShapes = utils->getInvalidIntVectorTestValue("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>", paramShapes);
	utils->initialize("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>", paramShapes);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShapes", "slideType", "utility::string_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShapes", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteSpecialSlideShapes", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteSpecialSlideShapes", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShapes", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShapes", "slideType", "utility::string_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShapes", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteSpecialSlideShapes", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteSpecialSlideShapes", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShapes", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShapes", "slideType", "utility::string_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShapes", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteSpecialSlideShapes", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteSpecialSlideShapes", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShapes", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSpecialSlideShapesInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("deleteSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("deleteSpecialSlideShapes", "slideType", "utility::string_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSpecialSlideShapes", "shapes", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("deleteSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("deleteSpecialSlideShapes", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("deleteSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("deleteSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSpecialSlideShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSpecialSlideShapes", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellParagraph) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellParagraph", "storage", "utility::string_t");
	utils->initialize("deleteTableCellParagraph", "", "");
	std::shared_ptr<Paragraphs> result = utils->getSlidesApi()->deleteTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteTableCellParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellParagraph", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteTableCellParagraph", "name", "utility::string_t", paramName);
	utils->initialize("deleteTableCellParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellParagraph", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellParagraph", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellParagraphInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellParagraph", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("deleteTableCellParagraph", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("deleteTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellParagraph", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellParagraphInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellParagraph", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("deleteTableCellParagraph", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("deleteTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellParagraph", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellParagraph", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("deleteTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellParagraph", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellParagraph", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteTableCellParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteTableCellParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellParagraph", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteTableCellParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteTableCellParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellParagraph", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteTableCellParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteTableCellParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellPortion) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellPortion", "storage", "utility::string_t");
	utils->initialize("deleteTableCellPortion", "", "");
	std::shared_ptr<Portions> result = utils->getSlidesApi()->deleteTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteTableCellPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellPortion", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteTableCellPortion", "name", "utility::string_t", paramName);
	utils->initialize("deleteTableCellPortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellPortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellPortion", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellPortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellPortion", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellPortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellPortionInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellPortion", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("deleteTableCellPortion", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellPortion", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellPortionInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellPortion", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("deleteTableCellPortion", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellPortion", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellPortion", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("deleteTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellPortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellPortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellPortion", "storage", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("deleteTableCellPortion", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellPortion", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellPortion", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteTableCellPortion", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteTableCellPortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellPortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellPortion", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteTableCellPortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteTableCellPortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellPortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableCellPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("deleteTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableCellPortion", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteTableCellPortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteTableCellPortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableCellPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableCellPortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableCellPortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableRow) {
	utility::string_t paramName = utils->getTestValue("deleteTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableRow", "rowIndex", "int32_t");
	auto paramWithAttachedRows = utils->getOptionalBoolTestValue("deleteTableRow", "withAttachedRows", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableRow", "storage", "utility::string_t");
	utils->initialize("deleteTableRow", "", "");
	std::shared_ptr<Table> result = utils->getSlidesApi()->deleteTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramWithAttachedRows, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteTableRowInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableRow", "rowIndex", "int32_t");
	auto paramWithAttachedRows = utils->getOptionalBoolTestValue("deleteTableRow", "withAttachedRows", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableRow", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteTableRow", "name", "utility::string_t", paramName);
	utils->initialize("deleteTableRow", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramWithAttachedRows, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableRow", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableRowInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableRow", "rowIndex", "int32_t");
	auto paramWithAttachedRows = utils->getOptionalBoolTestValue("deleteTableRow", "withAttachedRows", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableRow", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteTableRow", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("deleteTableRow", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramWithAttachedRows, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableRow", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableRowInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableRow", "rowIndex", "int32_t");
	auto paramWithAttachedRows = utils->getOptionalBoolTestValue("deleteTableRow", "withAttachedRows", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableRow", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteTableRow", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("deleteTableRow", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramWithAttachedRows, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableRow", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableRowInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("deleteTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableRow", "rowIndex", "int32_t");
	auto paramWithAttachedRows = utils->getOptionalBoolTestValue("deleteTableRow", "withAttachedRows", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableRow", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("deleteTableRow", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("deleteTableRow", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramWithAttachedRows, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableRow", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableRowInvalidWithAttachedRows) {
	utility::string_t paramName = utils->getTestValue("deleteTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableRow", "rowIndex", "int32_t");
	auto paramWithAttachedRows = utils->getOptionalBoolTestValue("deleteTableRow", "withAttachedRows", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableRow", "storage", "utility::string_t");
	paramWithAttachedRows = utils->getInvalidBoolTestValue("deleteTableRow", "withAttachedRows", "bool", paramWithAttachedRows).value();
	utils->initialize("deleteTableRow", "withAttachedRows", "bool", paramWithAttachedRows);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramWithAttachedRows, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "withAttachedRows", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "withAttachedRows", "bool", paramWithAttachedRows);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "withAttachedRows", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "withAttachedRows", "bool", paramWithAttachedRows);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableRow", "withAttachedRows", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableRowInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableRow", "rowIndex", "int32_t");
	auto paramWithAttachedRows = utils->getOptionalBoolTestValue("deleteTableRow", "withAttachedRows", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableRow", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteTableRow", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteTableRow", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramWithAttachedRows, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableRow", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableRowInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableRow", "rowIndex", "int32_t");
	auto paramWithAttachedRows = utils->getOptionalBoolTestValue("deleteTableRow", "withAttachedRows", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableRow", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteTableRow", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteTableRow", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramWithAttachedRows, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableRow", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteTableRowInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("deleteTableRow", "rowIndex", "int32_t");
	auto paramWithAttachedRows = utils->getOptionalBoolTestValue("deleteTableRow", "withAttachedRows", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteTableRow", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteTableRow", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteTableRow", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramWithAttachedRows, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteTableRow", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteTableRow", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteTableRow", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedLayoutSlides) {
	utility::string_t paramName = utils->getTestValue("deleteUnusedLayoutSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedLayoutSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteUnusedLayoutSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteUnusedLayoutSlides", "storage", "utility::string_t");
	utils->initialize("deleteUnusedLayoutSlides", "", "");
	std::shared_ptr<LayoutSlides> result = utils->getSlidesApi()->deleteUnusedLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteUnusedLayoutSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteUnusedLayoutSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedLayoutSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteUnusedLayoutSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteUnusedLayoutSlides", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteUnusedLayoutSlides", "name", "utility::string_t", paramName);
	utils->initialize("deleteUnusedLayoutSlides", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlides", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlides", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlides", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlides", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedLayoutSlides", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedLayoutSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteUnusedLayoutSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedLayoutSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteUnusedLayoutSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteUnusedLayoutSlides", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteUnusedLayoutSlides", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteUnusedLayoutSlides", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlides", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlides", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlides", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlides", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedLayoutSlides", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedLayoutSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteUnusedLayoutSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedLayoutSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteUnusedLayoutSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteUnusedLayoutSlides", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteUnusedLayoutSlides", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteUnusedLayoutSlides", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlides", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlides", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedLayoutSlides", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedLayoutSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteUnusedLayoutSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedLayoutSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteUnusedLayoutSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteUnusedLayoutSlides", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteUnusedLayoutSlides", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteUnusedLayoutSlides", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlides", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlides", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedLayoutSlides", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedLayoutSlidesOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteUnusedLayoutSlidesOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedLayoutSlidesOnline", "password", "utility::string_t");
	utils->initialize("deleteUnusedLayoutSlidesOnline", "", "");
	HttpContent result = utils->getSlidesApi()->deleteUnusedLayoutSlidesOnline(paramDocument, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, deleteUnusedLayoutSlidesOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteUnusedLayoutSlidesOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedLayoutSlidesOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("deleteUnusedLayoutSlidesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("deleteUnusedLayoutSlidesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedLayoutSlidesOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlidesOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlidesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlidesOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlidesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedLayoutSlidesOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedLayoutSlidesOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteUnusedLayoutSlidesOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedLayoutSlidesOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteUnusedLayoutSlidesOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteUnusedLayoutSlidesOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedLayoutSlidesOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlidesOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlidesOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedLayoutSlidesOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedLayoutSlidesOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedLayoutSlidesOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedMasterSlides) {
	utility::string_t paramName = utils->getTestValue("deleteUnusedMasterSlides", "name", "utility::string_t");
	auto paramIgnorePreserveField = utils->getOptionalBoolTestValue("deleteUnusedMasterSlides", "ignorePreserveField", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedMasterSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteUnusedMasterSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteUnusedMasterSlides", "storage", "utility::string_t");
	utils->initialize("deleteUnusedMasterSlides", "", "");
	std::shared_ptr<MasterSlides> result = utils->getSlidesApi()->deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteUnusedMasterSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteUnusedMasterSlides", "name", "utility::string_t");
	auto paramIgnorePreserveField = utils->getOptionalBoolTestValue("deleteUnusedMasterSlides", "ignorePreserveField", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedMasterSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteUnusedMasterSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteUnusedMasterSlides", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteUnusedMasterSlides", "name", "utility::string_t", paramName);
	utils->initialize("deleteUnusedMasterSlides", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlides", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlides", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlides", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlides", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedMasterSlides", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedMasterSlidesInvalidIgnorePreserveField) {
	utility::string_t paramName = utils->getTestValue("deleteUnusedMasterSlides", "name", "utility::string_t");
	auto paramIgnorePreserveField = utils->getOptionalBoolTestValue("deleteUnusedMasterSlides", "ignorePreserveField", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedMasterSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteUnusedMasterSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteUnusedMasterSlides", "storage", "utility::string_t");
	paramIgnorePreserveField = utils->getInvalidBoolTestValue("deleteUnusedMasterSlides", "ignorePreserveField", "bool", paramIgnorePreserveField).value();
	utils->initialize("deleteUnusedMasterSlides", "ignorePreserveField", "bool", paramIgnorePreserveField);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlides", "ignorePreserveField", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlides", "ignorePreserveField", "bool", paramIgnorePreserveField);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlides", "ignorePreserveField", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlides", "ignorePreserveField", "bool", paramIgnorePreserveField);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedMasterSlides", "ignorePreserveField", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedMasterSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteUnusedMasterSlides", "name", "utility::string_t");
	auto paramIgnorePreserveField = utils->getOptionalBoolTestValue("deleteUnusedMasterSlides", "ignorePreserveField", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedMasterSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteUnusedMasterSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteUnusedMasterSlides", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteUnusedMasterSlides", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteUnusedMasterSlides", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlides", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlides", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlides", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlides", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedMasterSlides", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedMasterSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteUnusedMasterSlides", "name", "utility::string_t");
	auto paramIgnorePreserveField = utils->getOptionalBoolTestValue("deleteUnusedMasterSlides", "ignorePreserveField", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedMasterSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteUnusedMasterSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteUnusedMasterSlides", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteUnusedMasterSlides", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteUnusedMasterSlides", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlides", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlides", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedMasterSlides", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedMasterSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteUnusedMasterSlides", "name", "utility::string_t");
	auto paramIgnorePreserveField = utils->getOptionalBoolTestValue("deleteUnusedMasterSlides", "ignorePreserveField", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedMasterSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteUnusedMasterSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteUnusedMasterSlides", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteUnusedMasterSlides", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteUnusedMasterSlides", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlides", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlides", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedMasterSlides", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedMasterSlidesOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteUnusedMasterSlidesOnline", "document", "std::shared_ptr<HttpContent>");
	auto paramIgnorePreserveField = utils->getOptionalBoolTestValue("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedMasterSlidesOnline", "password", "utility::string_t");
	utils->initialize("deleteUnusedMasterSlidesOnline", "", "");
	HttpContent result = utils->getSlidesApi()->deleteUnusedMasterSlidesOnline(paramDocument, paramIgnorePreserveField, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, deleteUnusedMasterSlidesOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteUnusedMasterSlidesOnline", "document", "std::shared_ptr<HttpContent>");
	auto paramIgnorePreserveField = utils->getOptionalBoolTestValue("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedMasterSlidesOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("deleteUnusedMasterSlidesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("deleteUnusedMasterSlidesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedMasterSlidesOnline(paramDocument, paramIgnorePreserveField, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlidesOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlidesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlidesOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlidesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedMasterSlidesOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedMasterSlidesOnlineInvalidIgnorePreserveField) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteUnusedMasterSlidesOnline", "document", "std::shared_ptr<HttpContent>");
	auto paramIgnorePreserveField = utils->getOptionalBoolTestValue("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedMasterSlidesOnline", "password", "utility::string_t");
	paramIgnorePreserveField = utils->getInvalidBoolTestValue("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "bool", paramIgnorePreserveField).value();
	utils->initialize("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "bool", paramIgnorePreserveField);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedMasterSlidesOnline(paramDocument, paramIgnorePreserveField, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "bool", paramIgnorePreserveField);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "bool", paramIgnorePreserveField);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteUnusedMasterSlidesOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteUnusedMasterSlidesOnline", "document", "std::shared_ptr<HttpContent>");
	auto paramIgnorePreserveField = utils->getOptionalBoolTestValue("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "bool");
	utility::string_t paramPassword = utils->getTestValue("deleteUnusedMasterSlidesOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteUnusedMasterSlidesOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteUnusedMasterSlidesOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteUnusedMasterSlidesOnline(paramDocument, paramIgnorePreserveField, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlidesOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlidesOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteUnusedMasterSlidesOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteUnusedMasterSlidesOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteUnusedMasterSlidesOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteVbaModule) {
	utility::string_t paramName = utils->getTestValue("deleteVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("deleteVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteVbaModule", "storage", "utility::string_t");
	utils->initialize("deleteVbaModule", "", "");
	std::shared_ptr<VbaProject> result = utils->getSlidesApi()->deleteVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteVbaModuleInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("deleteVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteVbaModule", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteVbaModule", "name", "utility::string_t", paramName);
	utils->initialize("deleteVbaModule", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteVbaModule", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteVbaModule", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteVbaModule", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteVbaModule", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteVbaModule", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteVbaModuleInvalidModuleIndex) {
	utility::string_t paramName = utils->getTestValue("deleteVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("deleteVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteVbaModule", "storage", "utility::string_t");
	paramModuleIndex = utils->getInvalidIntTestValue("deleteVbaModule", "moduleIndex", "int32_t", paramModuleIndex).value();
	utils->initialize("deleteVbaModule", "moduleIndex", "int32_t", paramModuleIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteVbaModule", "moduleIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteVbaModule", "moduleIndex", "int32_t", paramModuleIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteVbaModule", "moduleIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteVbaModule", "moduleIndex", "int32_t", paramModuleIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteVbaModule", "moduleIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteVbaModuleInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("deleteVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteVbaModule", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteVbaModule", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteVbaModule", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteVbaModule", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteVbaModule", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteVbaModule", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteVbaModule", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteVbaModule", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteVbaModuleInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("deleteVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteVbaModule", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteVbaModule", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteVbaModule", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteVbaModule", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteVbaModule", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteVbaModule", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteVbaModule", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteVbaModule", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteVbaModuleInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("deleteVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("deleteVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteVbaModule", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteVbaModule", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteVbaModule", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteVbaModule", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteVbaModule", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteVbaModule", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteVbaModule", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteVbaModule", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermark) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name", "utility::string_t");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage", "utility::string_t");
	utils->initialize("deleteWatermark", "", "");
	utils->getSlidesApi()->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
}

TEST_F(SlidesApiTest, deleteWatermarkInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name", "utility::string_t");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("deleteWatermark", "name", "utility::string_t", paramName);
	utils->initialize("deleteWatermark", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermark", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkInvalidShapeName) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name", "utility::string_t");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage", "utility::string_t");
	paramShapeName = utils->getInvalidTestValue("deleteWatermark", "shapeName", "utility::string_t", paramShapeName);
	utils->initialize("deleteWatermark", "shapeName", "utility::string_t", paramShapeName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "shapeName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "shapeName", "utility::string_t", paramShapeName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "shapeName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "shapeName", "utility::string_t", paramShapeName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermark", "shapeName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name", "utility::string_t");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteWatermark", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteWatermark", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermark", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name", "utility::string_t");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("deleteWatermark", "folder", "utility::string_t", paramFolder);
	utils->initialize("deleteWatermark", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermark", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name", "utility::string_t");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("deleteWatermark", "storage", "utility::string_t", paramStorage);
	utils->initialize("deleteWatermark", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermark", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermarkOnline", "shapeName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermarkOnline", "password", "utility::string_t");
	utils->initialize("deleteWatermarkOnline", "", "");
	HttpContent result = utils->getSlidesApi()->deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, deleteWatermarkOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermarkOnline", "shapeName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermarkOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("deleteWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("deleteWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermarkOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkOnlineInvalidShapeName) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermarkOnline", "shapeName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermarkOnline", "password", "utility::string_t");
	paramShapeName = utils->getInvalidTestValue("deleteWatermarkOnline", "shapeName", "utility::string_t", paramShapeName);
	utils->initialize("deleteWatermarkOnline", "shapeName", "utility::string_t", paramShapeName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "shapeName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "shapeName", "utility::string_t", paramShapeName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "shapeName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "shapeName", "utility::string_t", paramShapeName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermarkOnline", "shapeName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteWatermarkOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermarkOnline", "shapeName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermarkOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("deleteWatermarkOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("deleteWatermarkOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermarkOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFile) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId", "utility::string_t");
	utils->initialize("downloadFile", "", "");
	HttpContent result = utils->getSlidesApi()->downloadFile(paramPath, paramStorageName, paramVersionId).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadFileInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId", "utility::string_t");
	paramPath = utils->getInvalidTestValue("downloadFile", "path", "utility::string_t", paramPath);
	utils->initialize("downloadFile", "path", "utility::string_t", paramPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "path", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "path", "utility::string_t", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "path", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "path", "utility::string_t", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "path", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFileInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId", "utility::string_t");
	paramStorageName = utils->getInvalidTestValue("downloadFile", "storageName", "utility::string_t", paramStorageName);
	utils->initialize("downloadFile", "storageName", "utility::string_t", paramStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "storageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "storageName", "utility::string_t", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "storageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "storageName", "utility::string_t", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "storageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFileInvalidVersionId) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId", "utility::string_t");
	paramVersionId = utils->getInvalidTestValue("downloadFile", "versionId", "utility::string_t", paramVersionId);
	utils->initialize("downloadFile", "versionId", "utility::string_t", paramVersionId);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "versionId", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "versionId", "utility::string_t", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "versionId", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "versionId", "utility::string_t", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "versionId", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImage) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage", "utility::string_t");
	utils->initialize("downloadImage", "", "");
	HttpContent result = utils->getSlidesApi()->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImageInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("downloadImage", "name", "utility::string_t", paramName);
	utils->initialize("downloadImage", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageInvalidIndex) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage", "utility::string_t");
	paramIndex = utils->getInvalidIntTestValue("downloadImage", "index", "int32_t", paramIndex).value();
	utils->initialize("downloadImage", "index", "int32_t", paramIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "index", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "index", "int32_t", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "index", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "index", "int32_t", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "index", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("downloadImage", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadImage", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadImage", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadImage", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("downloadImage", "folder", "utility::string_t", paramFolder);
	utils->initialize("downloadImage", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("downloadImage", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadImage", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormat) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage", "utility::string_t");
	utils->initialize("downloadImageDefaultFormat", "", "");
	HttpContent result = utils->getSlidesApi()->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("downloadImageDefaultFormat", "name", "utility::string_t", paramName);
	utils->initialize("downloadImageDefaultFormat", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormat", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatInvalidIndex) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage", "utility::string_t");
	paramIndex = utils->getInvalidIntTestValue("downloadImageDefaultFormat", "index", "int32_t", paramIndex).value();
	utils->initialize("downloadImageDefaultFormat", "index", "int32_t", paramIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "index", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "index", "int32_t", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "index", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "index", "int32_t", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormat", "index", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadImageDefaultFormat", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadImageDefaultFormat", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormat", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("downloadImageDefaultFormat", "folder", "utility::string_t", paramFolder);
	utils->initialize("downloadImageDefaultFormat", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormat", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name", "utility::string_t");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("downloadImageDefaultFormat", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadImageDefaultFormat", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormat", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormatOnline", "index", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormatOnline", "password", "utility::string_t");
	utils->initialize("downloadImageDefaultFormatOnline", "", "");
	HttpContent result = utils->getSlidesApi()->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormatOnline", "index", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormatOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("downloadImageDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("downloadImageDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatOnlineInvalidIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormatOnline", "index", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormatOnline", "password", "utility::string_t");
	paramIndex = utils->getInvalidIntTestValue("downloadImageDefaultFormatOnline", "index", "int32_t", paramIndex).value();
	utils->initialize("downloadImageDefaultFormatOnline", "index", "int32_t", paramIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "index", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "index", "int32_t", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "index", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "index", "int32_t", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormatOnline", "index", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormatOnline", "index", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormatOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadImageDefaultFormatOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadImageDefaultFormatOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormatOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramIndex = utils->getIntTestValue("downloadImageOnline", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImageOnline", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageOnline", "password", "utility::string_t");
	utils->initialize("downloadImageOnline", "", "");
	HttpContent result = utils->getSlidesApi()->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImageOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramIndex = utils->getIntTestValue("downloadImageOnline", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImageOnline", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("downloadImageOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("downloadImageOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageOnlineInvalidIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramIndex = utils->getIntTestValue("downloadImageOnline", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImageOnline", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageOnline", "password", "utility::string_t");
	paramIndex = utils->getInvalidIntTestValue("downloadImageOnline", "index", "int32_t", paramIndex).value();
	utils->initialize("downloadImageOnline", "index", "int32_t", paramIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "index", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "index", "int32_t", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "index", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "index", "int32_t", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageOnline", "index", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramIndex = utils->getIntTestValue("downloadImageOnline", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImageOnline", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageOnline", "password", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("downloadImageOnline", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadImageOnline", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageOnline", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramIndex = utils->getIntTestValue("downloadImageOnline", "index", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImageOnline", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImageOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadImageOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadImageOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImages) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage", "utility::string_t");
	utils->initialize("downloadImages", "", "");
	HttpContent result = utils->getSlidesApi()->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImagesInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("downloadImages", "name", "utility::string_t", paramName);
	utils->initialize("downloadImages", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImages", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImages", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImages", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImages", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImages", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("downloadImages", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadImages", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImages", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImages", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImages", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImages", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImages", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadImages", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadImages", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImages", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImages", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImages", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImages", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImages", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("downloadImages", "folder", "utility::string_t", paramFolder);
	utils->initialize("downloadImages", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImages", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImages", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImages", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImages", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImages", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("downloadImages", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadImages", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImages", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImages", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImages", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImages", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImages", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormat) {
	utility::string_t paramName = utils->getTestValue("downloadImagesDefaultFormat", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormat", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImagesDefaultFormat", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImagesDefaultFormat", "storage", "utility::string_t");
	utils->initialize("downloadImagesDefaultFormat", "", "");
	HttpContent result = utils->getSlidesApi()->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadImagesDefaultFormat", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormat", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImagesDefaultFormat", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImagesDefaultFormat", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("downloadImagesDefaultFormat", "name", "utility::string_t", paramName);
	utils->initialize("downloadImagesDefaultFormat", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormat", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadImagesDefaultFormat", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormat", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImagesDefaultFormat", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImagesDefaultFormat", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadImagesDefaultFormat", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadImagesDefaultFormat", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormat", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadImagesDefaultFormat", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormat", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImagesDefaultFormat", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImagesDefaultFormat", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("downloadImagesDefaultFormat", "folder", "utility::string_t", paramFolder);
	utils->initialize("downloadImagesDefaultFormat", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormat", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadImagesDefaultFormat", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormat", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadImagesDefaultFormat", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadImagesDefaultFormat", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("downloadImagesDefaultFormat", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadImagesDefaultFormat", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormat", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormatOnline", "password", "utility::string_t");
	utils->initialize("downloadImagesDefaultFormatOnline", "", "");
	HttpContent result = utils->getSlidesApi()->downloadImagesDefaultFormatOnline(paramDocument, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormatOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("downloadImagesDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("downloadImagesDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImagesDefaultFormatOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesDefaultFormatOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormatOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadImagesDefaultFormatOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadImagesDefaultFormatOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImagesDefaultFormatOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormatOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormatOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormatOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormatOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormatOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("downloadImagesOnline", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesOnline", "password", "utility::string_t");
	utils->initialize("downloadImagesOnline", "", "");
	HttpContent result = utils->getSlidesApi()->downloadImagesOnline(paramDocument, paramFormat, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImagesOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("downloadImagesOnline", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("downloadImagesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("downloadImagesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImagesOnline(paramDocument, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("downloadImagesOnline", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesOnline", "password", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("downloadImagesOnline", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadImagesOnline", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImagesOnline(paramDocument, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesOnline", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("downloadImagesOnline", "format", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadImagesOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadImagesOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadImagesOnline(paramDocument, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlide) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder", "utility::string_t");
	utils->initialize("downloadNotesSlide", "", "");
	HttpContent result = utils->getSlidesApi()->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder", "utility::string_t");
	paramName = utils->getInvalidTestValue("downloadNotesSlide", "name", "utility::string_t", paramName);
	utils->initialize("downloadNotesSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadNotesSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("downloadNotesSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("downloadNotesSlide", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadNotesSlide", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder", "utility::string_t");
	paramWidth = utils->getInvalidIntTestValue("downloadNotesSlide", "width", "int32_t", paramWidth).value();
	utils->initialize("downloadNotesSlide", "width", "int32_t", paramWidth);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "width", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "width", "int32_t", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "width", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "width", "int32_t", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "width", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder", "utility::string_t");
	paramHeight = utils->getInvalidIntTestValue("downloadNotesSlide", "height", "int32_t", paramHeight).value();
	utils->initialize("downloadNotesSlide", "height", "int32_t", paramHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "height", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "height", "int32_t", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "height", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "height", "int32_t", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "height", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadNotesSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadNotesSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("downloadNotesSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("downloadNotesSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("downloadNotesSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadNotesSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("downloadNotesSlide", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("downloadNotesSlide", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder", "utility::string_t");
	utils->initialize("downloadNotesSlideOnline", "", "");
	HttpContent result = utils->getSlidesApi()->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadNotesSlideOnline", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("downloadNotesSlideOnline", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("downloadNotesSlideOnline", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadNotesSlideOnline", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder", "utility::string_t");
	paramWidth = utils->getInvalidIntTestValue("downloadNotesSlideOnline", "width", "int32_t", paramWidth).value();
	utils->initialize("downloadNotesSlideOnline", "width", "int32_t", paramWidth);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "width", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "width", "int32_t", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "width", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "width", "int32_t", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "width", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder", "utility::string_t");
	paramHeight = utils->getInvalidIntTestValue("downloadNotesSlideOnline", "height", "int32_t", paramHeight).value();
	utils->initialize("downloadNotesSlideOnline", "height", "int32_t", paramHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "height", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "height", "int32_t", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "height", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "height", "int32_t", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "height", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadNotesSlideOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadNotesSlideOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("downloadNotesSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("downloadNotesSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPortionAsMathMl) {
	utility::string_t paramName = utils->getTestValue("downloadPortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadPortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadPortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("downloadPortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("downloadPortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadPortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPortionAsMathMl", "storage", "utility::string_t");
	utils->initialize("downloadPortionAsMathMl", "", "");
	HttpContent result = utils->getSlidesApi()->downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadPortionAsMathMlInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadPortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadPortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadPortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("downloadPortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("downloadPortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadPortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPortionAsMathMl", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("downloadPortionAsMathMl", "name", "utility::string_t", paramName);
	utils->initialize("downloadPortionAsMathMl", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPortionAsMathMl", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPortionAsMathMlInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("downloadPortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadPortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadPortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("downloadPortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("downloadPortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadPortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPortionAsMathMl", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadPortionAsMathMl", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("downloadPortionAsMathMl", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPortionAsMathMl", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPortionAsMathMlInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("downloadPortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadPortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadPortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("downloadPortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("downloadPortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadPortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPortionAsMathMl", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("downloadPortionAsMathMl", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("downloadPortionAsMathMl", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPortionAsMathMl", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPortionAsMathMlInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("downloadPortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadPortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadPortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("downloadPortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("downloadPortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadPortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPortionAsMathMl", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("downloadPortionAsMathMl", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("downloadPortionAsMathMl", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPortionAsMathMl", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPortionAsMathMlInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("downloadPortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadPortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadPortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("downloadPortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("downloadPortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadPortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPortionAsMathMl", "storage", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("downloadPortionAsMathMl", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("downloadPortionAsMathMl", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPortionAsMathMl", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPortionAsMathMlInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadPortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadPortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadPortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("downloadPortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("downloadPortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadPortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPortionAsMathMl", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadPortionAsMathMl", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadPortionAsMathMl", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPortionAsMathMl", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPortionAsMathMlInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadPortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadPortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadPortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("downloadPortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("downloadPortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadPortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPortionAsMathMl", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("downloadPortionAsMathMl", "folder", "utility::string_t", paramFolder);
	utils->initialize("downloadPortionAsMathMl", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPortionAsMathMl", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPortionAsMathMlInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadPortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadPortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadPortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("downloadPortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("downloadPortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadPortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPortionAsMathMl", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("downloadPortionAsMathMl", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadPortionAsMathMl", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPortionAsMathMl", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPortionAsMathMl", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPortionAsMathMl", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentation) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides", "std::vector<int32_t>");
	utils->initialize("downloadPresentation", "", "");
	HttpContent result = utils->getSlidesApi()->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadPresentationInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides", "std::vector<int32_t>");
	paramName = utils->getInvalidTestValue("downloadPresentation", "name", "utility::string_t", paramName);
	utils->initialize("downloadPresentation", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides", "std::vector<int32_t>");
	paramFormat = utils->getInvalidTestValue("downloadPresentation", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadPresentation", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides", "std::vector<int32_t>");
	paramOptions = utils->getInvalidTestValueForClass<>("downloadPresentation", "options", "std::shared_ptr<ExportOptions>", paramOptions);
	utils->initialize("downloadPresentation", "options", "std::shared_ptr<ExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "options", "std::shared_ptr<ExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides", "std::vector<int32_t>");
	paramPassword = utils->getInvalidTestValue("downloadPresentation", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadPresentation", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides", "std::vector<int32_t>");
	paramFolder = utils->getInvalidTestValue("downloadPresentation", "folder", "utility::string_t", paramFolder);
	utils->initialize("downloadPresentation", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides", "std::vector<int32_t>");
	paramStorage = utils->getInvalidTestValue("downloadPresentation", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadPresentation", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides", "std::vector<int32_t>");
	paramFontsFolder = utils->getInvalidTestValue("downloadPresentation", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("downloadPresentation", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidSlides) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides", "std::vector<int32_t>");
	paramSlides = utils->getInvalidIntVectorTestValue("downloadPresentation", "slides", "std::vector<int32_t>", paramSlides);
	utils->initialize("downloadPresentation", "slides", "std::vector<int32_t>", paramSlides);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "slides", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "slides", "std::vector<int32_t>", paramSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "slides", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "slides", "std::vector<int32_t>", paramSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "slides", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShape) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	utils->initialize("downloadShape", "", "");
	HttpContent result = utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("downloadShape", "name", "utility::string_t", paramName);
	utils->initialize("downloadShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("downloadShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("downloadShape", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("downloadShape", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("downloadShape", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadShape", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramOptions = utils->getInvalidTestValueForClass<>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
	utils->initialize("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramScaleX = utils->getInvalidDoubleTestValue("downloadShape", "scaleX", "double", paramScaleX).value();
	utils->initialize("downloadShape", "scaleX", "double", paramScaleX);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "scaleX", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "scaleX", "double", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "scaleX", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "scaleX", "double", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "scaleX", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramScaleY = utils->getInvalidDoubleTestValue("downloadShape", "scaleY", "double", paramScaleY).value();
	utils->initialize("downloadShape", "scaleY", "double", paramScaleY);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "scaleY", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "scaleY", "double", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "scaleY", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "scaleY", "double", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "scaleY", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramBounds = utils->getInvalidTestValue("downloadShape", "bounds", "utility::string_t", paramBounds);
	utils->initialize("downloadShape", "bounds", "utility::string_t", paramBounds);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "bounds", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "bounds", "utility::string_t", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "bounds", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "bounds", "utility::string_t", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "bounds", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadShape", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("downloadShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("downloadShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("downloadShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("downloadShape", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("downloadShape", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("downloadShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("downloadShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeFromDto) {
	utility::string_t paramFormat = utils->getTestValue("downloadShapeFromDto", "format", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("downloadShapeFromDto", "dto", "std::shared_ptr<ShapeBase>");
	utils->initialize("downloadShapeFromDto", "", "");
	HttpContent result = utils->getSlidesApi()->downloadShapeFromDto(paramFormat, paramDto).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadShapeFromDtoInvalidFormat) {
	utility::string_t paramFormat = utils->getTestValue("downloadShapeFromDto", "format", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("downloadShapeFromDto", "dto", "std::shared_ptr<ShapeBase>");
	paramFormat = utils->getInvalidTestValue("downloadShapeFromDto", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadShapeFromDto", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeFromDto(paramFormat, paramDto).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeFromDto", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeFromDto", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeFromDto", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeFromDto", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeFromDto", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeFromDtoInvalidDto) {
	utility::string_t paramFormat = utils->getTestValue("downloadShapeFromDto", "format", "utility::string_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("downloadShapeFromDto", "dto", "std::shared_ptr<ShapeBase>");
	paramDto = utils->getInvalidTestValueForClass<>("downloadShapeFromDto", "dto", "std::shared_ptr<ShapeBase>", paramDto);
	utils->initialize("downloadShapeFromDto", "dto", "std::shared_ptr<ShapeBase>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeFromDto(paramFormat, paramDto).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeFromDto", "dto", "std::shared_ptr<ShapeBase>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeFromDto", "dto", "std::shared_ptr<ShapeBase>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeFromDto", "dto", "std::shared_ptr<ShapeBase>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeFromDto", "dto", "std::shared_ptr<ShapeBase>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeFromDto", "dto", "std::shared_ptr<ShapeBase>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	utils->initialize("downloadShapeOnline", "", "");
	HttpContent result = utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramDocument = utils->getInvalidBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadShapeOnline", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("downloadShapeOnline", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidShapeIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramShapeIndex = utils->getInvalidIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("downloadShapeOnline", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramFormat = utils->getInvalidTestValue("downloadShapeOnline", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadShapeOnline", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidScaleX) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramScaleX = utils->getInvalidDoubleTestValue("downloadShapeOnline", "scaleX", "double", paramScaleX).value();
	utils->initialize("downloadShapeOnline", "scaleX", "double", paramScaleX);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "scaleX", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "scaleX", "double", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "scaleX", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "scaleX", "double", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "scaleX", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidScaleY) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramScaleY = utils->getInvalidDoubleTestValue("downloadShapeOnline", "scaleY", "double", paramScaleY).value();
	utils->initialize("downloadShapeOnline", "scaleY", "double", paramScaleY);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "scaleY", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "scaleY", "double", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "scaleY", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "scaleY", "double", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "scaleY", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidBounds) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramBounds = utils->getInvalidTestValue("downloadShapeOnline", "bounds", "utility::string_t", paramBounds);
	utils->initialize("downloadShapeOnline", "bounds", "utility::string_t", paramBounds);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "bounds", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "bounds", "utility::string_t", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "bounds", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "bounds", "utility::string_t", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "bounds", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramPassword = utils->getInvalidTestValue("downloadShapeOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadShapeOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramStorage = utils->getInvalidTestValue("downloadShapeOnline", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadShapeOnline", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramFontsFolder = utils->getInvalidTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("downloadShapeOnline", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidOptions) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramOptions = utils->getInvalidTestValueForClass<>("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
	utils->initialize("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlide) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder", "utility::string_t");
	utils->initialize("downloadSlide", "", "");
	HttpContent result = utils->getSlidesApi()->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder", "utility::string_t");
	paramName = utils->getInvalidTestValue("downloadSlide", "name", "utility::string_t", paramName);
	utils->initialize("downloadSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("downloadSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("downloadSlide", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadSlide", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder", "utility::string_t");
	paramOptions = utils->getInvalidTestValueForClass<>("downloadSlide", "options", "std::shared_ptr<ExportOptions>", paramOptions);
	utils->initialize("downloadSlide", "options", "std::shared_ptr<ExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "options", "std::shared_ptr<ExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder", "utility::string_t");
	paramWidth = utils->getInvalidIntTestValue("downloadSlide", "width", "int32_t", paramWidth).value();
	utils->initialize("downloadSlide", "width", "int32_t", paramWidth);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "width", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "width", "int32_t", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "width", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "width", "int32_t", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "width", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder", "utility::string_t");
	paramHeight = utils->getInvalidIntTestValue("downloadSlide", "height", "int32_t", paramHeight).value();
	utils->initialize("downloadSlide", "height", "int32_t", paramHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "height", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "height", "int32_t", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "height", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "height", "int32_t", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "height", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("downloadSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("downloadSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("downloadSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("downloadSlide", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("downloadSlide", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	utils->initialize("downloadSlideOnline", "", "");
	HttpContent result = utils->getSlidesApi()->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramDocument = utils->getInvalidBinaryTestValue("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadSlideOnline", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("downloadSlideOnline", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramFormat = utils->getInvalidTestValue("downloadSlideOnline", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadSlideOnline", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramWidth = utils->getInvalidIntTestValue("downloadSlideOnline", "width", "int32_t", paramWidth).value();
	utils->initialize("downloadSlideOnline", "width", "int32_t", paramWidth);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "width", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "width", "int32_t", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "width", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "width", "int32_t", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "width", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramHeight = utils->getInvalidIntTestValue("downloadSlideOnline", "height", "int32_t", paramHeight).value();
	utils->initialize("downloadSlideOnline", "height", "int32_t", paramHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "height", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "height", "int32_t", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "height", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "height", "int32_t", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "height", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramPassword = utils->getInvalidTestValue("downloadSlideOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadSlideOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramStorage = utils->getInvalidTestValue("downloadSlideOnline", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadSlideOnline", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramFontsFolder = utils->getInvalidTestValue("downloadSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("downloadSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidOptions) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramOptions = utils->getInvalidTestValueForClass<>("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
	utils->initialize("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "options", "std::shared_ptr<ExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShape) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	utils->initialize("downloadSpecialSlideShape", "", "");
	HttpContent result = utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("downloadSpecialSlideShape", "name", "utility::string_t", paramName);
	utils->initialize("downloadSpecialSlideShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("downloadSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("downloadSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("downloadSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("downloadSpecialSlideShape", "format", "utility::string_t", paramFormat);
	utils->initialize("downloadSpecialSlideShape", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramOptions = utils->getInvalidTestValueForClass<>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
	utils->initialize("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramScaleX = utils->getInvalidDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double", paramScaleX).value();
	utils->initialize("downloadSpecialSlideShape", "scaleX", "double", paramScaleX);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "scaleX", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "scaleX", "double", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "scaleX", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "scaleX", "double", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "scaleX", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramScaleY = utils->getInvalidDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double", paramScaleY).value();
	utils->initialize("downloadSpecialSlideShape", "scaleY", "double", paramScaleY);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "scaleY", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "scaleY", "double", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "scaleY", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "scaleY", "double", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "scaleY", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramBounds = utils->getInvalidTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t", paramBounds);
	utils->initialize("downloadSpecialSlideShape", "bounds", "utility::string_t", paramBounds);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "bounds", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "bounds", "utility::string_t", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "bounds", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "bounds", "utility::string_t", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "bounds", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("downloadSpecialSlideShape", "password", "utility::string_t", paramPassword);
	utils->initialize("downloadSpecialSlideShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("downloadSpecialSlideShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("downloadSpecialSlideShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("downloadSpecialSlideShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("downloadSpecialSlideShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("downloadSpecialSlideShape", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSpecialSlideShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("downloadSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("downloadSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("downloadSpecialSlideShape", "format", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("downloadSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("downloadSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("downloadSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("downloadSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("downloadSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("downloadSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSpecialSlideShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimation) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex", "int32_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage", "utility::string_t");
	utils->initialize("getAnimation", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex", "int32_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getAnimation", "name", "utility::string_t", paramName);
	utils->initialize("getAnimation", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex", "int32_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getAnimation", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getAnimation", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimationInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex", "int32_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getAnimation", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getAnimation", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimationInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex", "int32_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getAnimation", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getAnimation", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex", "int32_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getAnimation", "password", "utility::string_t", paramPassword);
	utils->initialize("getAnimation", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex", "int32_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getAnimation", "folder", "utility::string_t", paramFolder);
	utils->initialize("getAnimation", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex", "int32_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getAnimation", "storage", "utility::string_t", paramStorage);
	utils->initialize("getAnimation", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getApiInfo) {
	utils->initialize("getApiInfo", "", "");
	std::shared_ptr<ApiInfo> result = utils->getSlidesApi()->getApiInfo().get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getAvailableFonts) {
	utility::string_t paramFontsFolder = utils->getTestValue("getAvailableFonts", "fontsFolder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getAvailableFonts", "storage", "utility::string_t");
	utils->initialize("getAvailableFonts", "", "");
	std::shared_ptr<FontsData> result = utils->getSlidesApi()->getAvailableFonts(paramFontsFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getAvailableFontsInvalidFontsFolder) {
	utility::string_t paramFontsFolder = utils->getTestValue("getAvailableFonts", "fontsFolder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getAvailableFonts", "storage", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("getAvailableFonts", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("getAvailableFonts", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getAvailableFonts(paramFontsFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAvailableFonts", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAvailableFonts", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAvailableFonts", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAvailableFonts", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAvailableFonts", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAvailableFontsInvalidStorage) {
	utility::string_t paramFontsFolder = utils->getTestValue("getAvailableFonts", "fontsFolder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getAvailableFonts", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getAvailableFonts", "storage", "utility::string_t", paramStorage);
	utils->initialize("getAvailableFonts", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getAvailableFonts(paramFontsFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAvailableFonts", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAvailableFonts", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAvailableFonts", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAvailableFonts", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAvailableFonts", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getBackground) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage", "utility::string_t");
	utils->initialize("getBackground", "", "");
	std::shared_ptr<SlideBackground> result = utils->getSlidesApi()->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getBackgroundInvalidName) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getBackground", "name", "utility::string_t", paramName);
	utils->initialize("getBackground", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getBackground", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getBackground", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getBackground", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getBackground", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getBackground", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getBackgroundInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getBackground", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getBackground", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getBackground", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getBackground", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getBackground", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getBackground", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getBackground", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getBackgroundInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getBackground", "password", "utility::string_t", paramPassword);
	utils->initialize("getBackground", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getBackground", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getBackground", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getBackground", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getBackground", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getBackground", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getBackgroundInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getBackground", "folder", "utility::string_t", paramFolder);
	utils->initialize("getBackground", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getBackground", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getBackground", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getBackground", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getBackground", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getBackground", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getBackgroundInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getBackground", "storage", "utility::string_t", paramStorage);
	utils->initialize("getBackground", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getBackground", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getBackground", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getBackground", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getBackground", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getBackground", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getColorScheme) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage", "utility::string_t");
	utils->initialize("getColorScheme", "", "");
	std::shared_ptr<ColorScheme> result = utils->getSlidesApi()->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getColorSchemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getColorScheme", "name", "utility::string_t", paramName);
	utils->initialize("getColorScheme", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getColorScheme", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getColorSchemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getColorScheme", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getColorScheme", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getColorScheme", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getColorSchemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getColorScheme", "password", "utility::string_t", paramPassword);
	utils->initialize("getColorScheme", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getColorScheme", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getColorSchemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getColorScheme", "folder", "utility::string_t", paramFolder);
	utils->initialize("getColorScheme", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getColorScheme", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getColorSchemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getColorScheme", "storage", "utility::string_t", paramStorage);
	utils->initialize("getColorScheme", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getColorScheme", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDiscUsage) {
	utility::string_t paramStorageName = utils->getTestValue("getDiscUsage", "storageName", "utility::string_t");
	utils->initialize("getDiscUsage", "", "");
	std::shared_ptr<DiscUsage> result = utils->getSlidesApi()->getDiscUsage(paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getDiscUsageInvalidStorageName) {
	utility::string_t paramStorageName = utils->getTestValue("getDiscUsage", "storageName", "utility::string_t");
	paramStorageName = utils->getInvalidTestValue("getDiscUsage", "storageName", "utility::string_t", paramStorageName);
	utils->initialize("getDiscUsage", "storageName", "utility::string_t", paramStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getDiscUsage(paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDiscUsage", "storageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDiscUsage", "storageName", "utility::string_t", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDiscUsage", "storageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDiscUsage", "storageName", "utility::string_t", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDiscUsage", "storageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentProperties) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperties", "storage", "utility::string_t");
	utils->initialize("getDocumentProperties", "", "");
	std::shared_ptr<DocumentProperties> result = utils->getSlidesApi()->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getDocumentPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperties", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getDocumentProperties", "name", "utility::string_t", paramName);
	utils->initialize("getDocumentProperties", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperties", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperties", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getDocumentProperties", "password", "utility::string_t", paramPassword);
	utils->initialize("getDocumentProperties", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperties", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperties", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getDocumentProperties", "folder", "utility::string_t", paramFolder);
	utils->initialize("getDocumentProperties", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperties", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperties", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getDocumentProperties", "storage", "utility::string_t", paramStorage);
	utils->initialize("getDocumentProperties", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperties", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentProperty) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage", "utility::string_t");
	utils->initialize("getDocumentProperty", "", "");
	std::shared_ptr<DocumentProperty> result = utils->getSlidesApi()->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getDocumentPropertyInvalidName) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getDocumentProperty", "name", "utility::string_t", paramName);
	utils->initialize("getDocumentProperty", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperty", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertyInvalidPropertyName) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage", "utility::string_t");
	paramPropertyName = utils->getInvalidTestValue("getDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);
	utils->initialize("getDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "propertyName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "propertyName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperty", "propertyName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertyInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getDocumentProperty", "password", "utility::string_t", paramPassword);
	utils->initialize("getDocumentProperty", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperty", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertyInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getDocumentProperty", "folder", "utility::string_t", paramFolder);
	utils->initialize("getDocumentProperty", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperty", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertyInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getDocumentProperty", "storage", "utility::string_t", paramStorage);
	utils->initialize("getDocumentProperty", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperty", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFileVersions) {
	utility::string_t paramPath = utils->getTestValue("getFileVersions", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("getFileVersions", "storageName", "utility::string_t");
	utils->initialize("getFileVersions", "", "");
	std::shared_ptr<FileVersions> result = utils->getSlidesApi()->getFileVersions(paramPath, paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFileVersionsInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("getFileVersions", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("getFileVersions", "storageName", "utility::string_t");
	paramPath = utils->getInvalidTestValue("getFileVersions", "path", "utility::string_t", paramPath);
	utils->initialize("getFileVersions", "path", "utility::string_t", paramPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFileVersions(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "path", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "path", "utility::string_t", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "path", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "path", "utility::string_t", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFileVersions", "path", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFileVersionsInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("getFileVersions", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("getFileVersions", "storageName", "utility::string_t");
	paramStorageName = utils->getInvalidTestValue("getFileVersions", "storageName", "utility::string_t", paramStorageName);
	utils->initialize("getFileVersions", "storageName", "utility::string_t", paramStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFileVersions(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "storageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "storageName", "utility::string_t", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "storageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "storageName", "utility::string_t", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFileVersions", "storageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFilesList) {
	utility::string_t paramPath = utils->getTestValue("getFilesList", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("getFilesList", "storageName", "utility::string_t");
	utils->initialize("getFilesList", "", "");
	std::shared_ptr<FilesList> result = utils->getSlidesApi()->getFilesList(paramPath, paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFilesListInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("getFilesList", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("getFilesList", "storageName", "utility::string_t");
	paramPath = utils->getInvalidTestValue("getFilesList", "path", "utility::string_t", paramPath);
	utils->initialize("getFilesList", "path", "utility::string_t", paramPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFilesList(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFilesList", "path", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFilesList", "path", "utility::string_t", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFilesList", "path", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFilesList", "path", "utility::string_t", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFilesList", "path", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFilesListInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("getFilesList", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("getFilesList", "storageName", "utility::string_t");
	paramStorageName = utils->getInvalidTestValue("getFilesList", "storageName", "utility::string_t", paramStorageName);
	utils->initialize("getFilesList", "storageName", "utility::string_t", paramStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFilesList(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFilesList", "storageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFilesList", "storageName", "utility::string_t", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFilesList", "storageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFilesList", "storageName", "utility::string_t", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFilesList", "storageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontScheme) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage", "utility::string_t");
	utils->initialize("getFontScheme", "", "");
	std::shared_ptr<FontScheme> result = utils->getSlidesApi()->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFontSchemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getFontScheme", "name", "utility::string_t", paramName);
	utils->initialize("getFontScheme", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontScheme", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontSchemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getFontScheme", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getFontScheme", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontScheme", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontSchemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getFontScheme", "password", "utility::string_t", paramPassword);
	utils->initialize("getFontScheme", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontScheme", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontSchemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getFontScheme", "folder", "utility::string_t", paramFolder);
	utils->initialize("getFontScheme", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontScheme", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontSchemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getFontScheme", "storage", "utility::string_t", paramStorage);
	utils->initialize("getFontScheme", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontScheme", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFonts) {
	utility::string_t paramName = utils->getTestValue("getFonts", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getFonts", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFonts", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFonts", "storage", "utility::string_t");
	utils->initialize("getFonts", "", "");
	std::shared_ptr<FontsData> result = utils->getSlidesApi()->getFonts(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFontsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getFonts", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getFonts", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFonts", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFonts", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getFonts", "name", "utility::string_t", paramName);
	utils->initialize("getFonts", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFonts(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFonts", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFonts", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFonts", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFonts", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFonts", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getFonts", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getFonts", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFonts", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFonts", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getFonts", "password", "utility::string_t", paramPassword);
	utils->initialize("getFonts", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFonts(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFonts", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFonts", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFonts", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFonts", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFonts", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getFonts", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getFonts", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFonts", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFonts", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getFonts", "folder", "utility::string_t", paramFolder);
	utils->initialize("getFonts", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFonts(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFonts", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFonts", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFonts", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFonts", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFonts", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getFonts", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getFonts", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFonts", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFonts", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getFonts", "storage", "utility::string_t", paramStorage);
	utils->initialize("getFonts", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFonts(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFonts", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFonts", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFonts", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFonts", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFonts", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontsOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("getFontsOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("getFontsOnline", "password", "utility::string_t");
	utils->initialize("getFontsOnline", "", "");
	std::shared_ptr<FontsData> result = utils->getSlidesApi()->getFontsOnline(paramDocument, paramPassword).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFontsOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("getFontsOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("getFontsOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("getFontsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("getFontsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFontsOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontsOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontsOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontsOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontsOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("getFontsOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("getFontsOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getFontsOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("getFontsOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFontsOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontsOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontsOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontsOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontsOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontsOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFormatScheme) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage", "utility::string_t");
	utils->initialize("getFormatScheme", "", "");
	std::shared_ptr<FormatScheme> result = utils->getSlidesApi()->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFormatSchemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getFormatScheme", "name", "utility::string_t", paramName);
	utils->initialize("getFormatScheme", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFormatScheme", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFormatSchemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getFormatScheme", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getFormatScheme", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFormatScheme", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFormatSchemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getFormatScheme", "password", "utility::string_t", paramPassword);
	utils->initialize("getFormatScheme", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFormatScheme", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFormatSchemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getFormatScheme", "folder", "utility::string_t", paramFolder);
	utils->initialize("getFormatScheme", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFormatScheme", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFormatSchemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getFormatScheme", "storage", "utility::string_t", paramStorage);
	utils->initialize("getFormatScheme", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFormatScheme", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlide) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage", "utility::string_t");
	utils->initialize("getLayoutSlide", "", "");
	std::shared_ptr<LayoutSlide> result = utils->getSlidesApi()->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getLayoutSlide", "name", "utility::string_t", paramName);
	utils->initialize("getLayoutSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getLayoutSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getLayoutSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getLayoutSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("getLayoutSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getLayoutSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("getLayoutSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getLayoutSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("getLayoutSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlides) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlides", "storage", "utility::string_t");
	utils->initialize("getLayoutSlides", "", "");
	std::shared_ptr<LayoutSlides> result = utils->getSlidesApi()->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getLayoutSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlides", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getLayoutSlides", "name", "utility::string_t", paramName);
	utils->initialize("getLayoutSlides", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlides", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlides", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getLayoutSlides", "password", "utility::string_t", paramPassword);
	utils->initialize("getLayoutSlides", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlides", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlides", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getLayoutSlides", "folder", "utility::string_t", paramFolder);
	utils->initialize("getLayoutSlides", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlides", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlides", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getLayoutSlides", "storage", "utility::string_t", paramStorage);
	utils->initialize("getLayoutSlides", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlides", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlide) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage", "utility::string_t");
	utils->initialize("getMasterSlide", "", "");
	std::shared_ptr<MasterSlide> result = utils->getSlidesApi()->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getMasterSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getMasterSlide", "name", "utility::string_t", paramName);
	utils->initialize("getMasterSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getMasterSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getMasterSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getMasterSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("getMasterSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getMasterSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("getMasterSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getMasterSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("getMasterSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlides) {
	utility::string_t paramName = utils->getTestValue("getMasterSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlides", "storage", "utility::string_t");
	utils->initialize("getMasterSlides", "", "");
	std::shared_ptr<MasterSlides> result = utils->getSlidesApi()->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getMasterSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getMasterSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlides", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getMasterSlides", "name", "utility::string_t", paramName);
	utils->initialize("getMasterSlides", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlides", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getMasterSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlides", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getMasterSlides", "password", "utility::string_t", paramPassword);
	utils->initialize("getMasterSlides", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlides", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getMasterSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlides", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getMasterSlides", "folder", "utility::string_t", paramFolder);
	utils->initialize("getMasterSlides", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlides", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getMasterSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlides", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getMasterSlides", "storage", "utility::string_t", paramStorage);
	utils->initialize("getMasterSlides", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlides", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlide) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage", "utility::string_t");
	utils->initialize("getNotesSlide", "", "");
	std::shared_ptr<NotesSlide> result = utils->getSlidesApi()->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getNotesSlide", "name", "utility::string_t", paramName);
	utils->initialize("getNotesSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getNotesSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getNotesSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("getNotesSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getNotesSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("getNotesSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getNotesSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("getNotesSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage", "utility::string_t");
	utils->initialize("getNotesSlideHeaderFooter", "", "");
	std::shared_ptr<NotesSlideHeaderFooter> result = utils->getSlidesApi()->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "name", "utility::string_t", paramName);
	utils->initialize("getNotesSlideHeaderFooter", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getNotesSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "password", "utility::string_t", paramPassword);
	utils->initialize("getNotesSlideHeaderFooter", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
	utils->initialize("getNotesSlideHeaderFooter", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
	utils->initialize("getNotesSlideHeaderFooter", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("getNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideOnline", "password", "utility::string_t");
	utils->initialize("getNotesSlideOnline", "", "");
	std::shared_ptr<NotesSlide> result = utils->getSlidesApi()->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("getNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("getNotesSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("getNotesSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("getNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideOnline", "password", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideOnline", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getNotesSlideOnline", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideOnline", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("getNotesSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getNotesSlideOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("getNotesSlideOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraph) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraph", "subShape", "utility::string_t");
	utils->initialize("getParagraph", "", "");
	std::shared_ptr<Paragraph> result = utils->getSlidesApi()->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraph", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getParagraph", "name", "utility::string_t", paramName);
	utils->initialize("getParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraph", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraph", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraph", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getParagraph", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraph", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("getParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraph", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("getParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraph", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("getParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraph", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getParagraph", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getParagraph", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphEffective) {
	utility::string_t paramName = utils->getTestValue("getParagraphEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphEffective", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphEffective", "subShape", "utility::string_t");
	utils->initialize("getParagraphEffective", "", "");
	std::shared_ptr<Paragraph> result = utils->getSlidesApi()->getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getParagraphEffectiveInvalidName) {
	utility::string_t paramName = utils->getTestValue("getParagraphEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphEffective", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphEffective", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getParagraphEffective", "name", "utility::string_t", paramName);
	utils->initialize("getParagraphEffective", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphEffective", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphEffectiveInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphEffective", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphEffective", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getParagraphEffective", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getParagraphEffective", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphEffective", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphEffectiveInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphEffective", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphEffective", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getParagraphEffective", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getParagraphEffective", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphEffective", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphEffectiveInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphEffective", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphEffective", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getParagraphEffective", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getParagraphEffective", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphEffective", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphEffectiveInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getParagraphEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphEffective", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphEffective", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getParagraphEffective", "password", "utility::string_t", paramPassword);
	utils->initialize("getParagraphEffective", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphEffective", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphEffectiveInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getParagraphEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphEffective", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphEffective", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getParagraphEffective", "folder", "utility::string_t", paramFolder);
	utils->initialize("getParagraphEffective", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphEffective", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphEffectiveInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getParagraphEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphEffective", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphEffective", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getParagraphEffective", "storage", "utility::string_t", paramStorage);
	utils->initialize("getParagraphEffective", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphEffective", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphEffectiveInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getParagraphEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphEffective", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphEffective", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getParagraphEffective", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getParagraphEffective", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphEffective", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphEffective", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphEffective", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphRectangle) {
	utility::string_t paramName = utils->getTestValue("getParagraphRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphRectangle", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphRectangle", "storage", "utility::string_t");
	utils->initialize("getParagraphRectangle", "", "");
	std::shared_ptr<TextBounds> result = utils->getSlidesApi()->getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getParagraphRectangleInvalidName) {
	utility::string_t paramName = utils->getTestValue("getParagraphRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphRectangle", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphRectangle", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getParagraphRectangle", "name", "utility::string_t", paramName);
	utils->initialize("getParagraphRectangle", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphRectangle", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphRectangleInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphRectangle", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphRectangle", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getParagraphRectangle", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getParagraphRectangle", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphRectangle", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphRectangleInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphRectangle", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphRectangle", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getParagraphRectangle", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getParagraphRectangle", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphRectangle", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphRectangleInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphRectangle", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphRectangle", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getParagraphRectangle", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getParagraphRectangle", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphRectangle", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphRectangleInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getParagraphRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphRectangle", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphRectangle", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getParagraphRectangle", "password", "utility::string_t", paramPassword);
	utils->initialize("getParagraphRectangle", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphRectangle", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphRectangleInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getParagraphRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphRectangle", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphRectangle", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getParagraphRectangle", "folder", "utility::string_t", paramFolder);
	utils->initialize("getParagraphRectangle", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphRectangle", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphRectangleInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getParagraphRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraphRectangle", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphRectangle", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getParagraphRectangle", "storage", "utility::string_t", paramStorage);
	utils->initialize("getParagraphRectangle", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphRectangle", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphRectangle", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphRectangle", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphs) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphs", "subShape", "utility::string_t");
	utils->initialize("getParagraphs", "", "");
	std::shared_ptr<Paragraphs> result = utils->getSlidesApi()->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphs", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getParagraphs", "name", "utility::string_t", paramName);
	utils->initialize("getParagraphs", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphs", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getParagraphs", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getParagraphs", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphs", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getParagraphs", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getParagraphs", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphs", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getParagraphs", "password", "utility::string_t", paramPassword);
	utils->initialize("getParagraphs", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphs", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getParagraphs", "folder", "utility::string_t", paramFolder);
	utils->initialize("getParagraphs", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphs", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getParagraphs", "storage", "utility::string_t", paramStorage);
	utils->initialize("getParagraphs", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphsInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getParagraphs", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getParagraphs", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getParagraphs", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholder) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex", "int32_t");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage", "utility::string_t");
	utils->initialize("getPlaceholder", "", "");
	std::shared_ptr<Placeholder> result = utils->getSlidesApi()->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPlaceholderInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex", "int32_t");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getPlaceholder", "name", "utility::string_t", paramName);
	utils->initialize("getPlaceholder", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholderInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex", "int32_t");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getPlaceholder", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getPlaceholder", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholderInvalidPlaceholderIndex) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex", "int32_t");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage", "utility::string_t");
	paramPlaceholderIndex = utils->getInvalidIntTestValue("getPlaceholder", "placeholderIndex", "int32_t", paramPlaceholderIndex).value();
	utils->initialize("getPlaceholder", "placeholderIndex", "int32_t", paramPlaceholderIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "placeholderIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "placeholderIndex", "int32_t", paramPlaceholderIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "placeholderIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "placeholderIndex", "int32_t", paramPlaceholderIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "placeholderIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholderInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex", "int32_t");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getPlaceholder", "password", "utility::string_t", paramPassword);
	utils->initialize("getPlaceholder", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholderInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex", "int32_t");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getPlaceholder", "folder", "utility::string_t", paramFolder);
	utils->initialize("getPlaceholder", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholderInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex", "int32_t");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getPlaceholder", "storage", "utility::string_t", paramStorage);
	utils->initialize("getPlaceholder", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholders) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage", "utility::string_t");
	utils->initialize("getPlaceholders", "", "");
	std::shared_ptr<Placeholders> result = utils->getSlidesApi()->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPlaceholdersInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getPlaceholders", "name", "utility::string_t", paramName);
	utils->initialize("getPlaceholders", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholders", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholdersInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getPlaceholders", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getPlaceholders", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholders", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholdersInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getPlaceholders", "password", "utility::string_t", paramPassword);
	utils->initialize("getPlaceholders", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholders", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholdersInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getPlaceholders", "folder", "utility::string_t", paramFolder);
	utils->initialize("getPlaceholders", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholders", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholdersInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getPlaceholders", "storage", "utility::string_t", paramStorage);
	utils->initialize("getPlaceholders", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholders", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortion) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortion", "subShape", "utility::string_t");
	utils->initialize("getPortion", "", "");
	std::shared_ptr<Portion> result = utils->getSlidesApi()->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortion", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getPortion", "name", "utility::string_t", paramName);
	utils->initialize("getPortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortion", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getPortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getPortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortion", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getPortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getPortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortion", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getPortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getPortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortion", "subShape", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("getPortion", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("getPortion", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortion", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getPortion", "password", "utility::string_t", paramPassword);
	utils->initialize("getPortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortion", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getPortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("getPortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortion", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getPortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("getPortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortion", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getPortion", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getPortion", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionEffective) {
	utility::string_t paramName = utils->getTestValue("getPortionEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionEffective", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionEffective", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortionEffective", "subShape", "utility::string_t");
	utils->initialize("getPortionEffective", "", "");
	std::shared_ptr<Portion> result = utils->getSlidesApi()->getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPortionEffectiveInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPortionEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionEffective", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionEffective", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortionEffective", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getPortionEffective", "name", "utility::string_t", paramName);
	utils->initialize("getPortionEffective", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionEffective", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionEffectiveInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getPortionEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionEffective", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionEffective", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortionEffective", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getPortionEffective", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getPortionEffective", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionEffective", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionEffectiveInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getPortionEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionEffective", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionEffective", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortionEffective", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getPortionEffective", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getPortionEffective", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionEffective", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionEffectiveInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getPortionEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionEffective", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionEffective", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortionEffective", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getPortionEffective", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getPortionEffective", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionEffective", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionEffectiveInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("getPortionEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionEffective", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionEffective", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortionEffective", "subShape", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("getPortionEffective", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("getPortionEffective", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionEffective", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionEffectiveInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPortionEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionEffective", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionEffective", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortionEffective", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getPortionEffective", "password", "utility::string_t", paramPassword);
	utils->initialize("getPortionEffective", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionEffective", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionEffectiveInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPortionEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionEffective", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionEffective", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortionEffective", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getPortionEffective", "folder", "utility::string_t", paramFolder);
	utils->initialize("getPortionEffective", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionEffective", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionEffectiveInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPortionEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionEffective", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionEffective", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortionEffective", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getPortionEffective", "storage", "utility::string_t", paramStorage);
	utils->initialize("getPortionEffective", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionEffective", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionEffectiveInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getPortionEffective", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionEffective", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionEffective", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionEffective", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionEffective", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionEffective", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionEffective", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionEffective", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortionEffective", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getPortionEffective", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getPortionEffective", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionEffective", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionEffective", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionEffective", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionRectangle) {
	utility::string_t paramName = utils->getTestValue("getPortionRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionRectangle", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionRectangle", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionRectangle", "storage", "utility::string_t");
	utils->initialize("getPortionRectangle", "", "");
	std::shared_ptr<TextBounds> result = utils->getSlidesApi()->getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPortionRectangleInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPortionRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionRectangle", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionRectangle", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionRectangle", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getPortionRectangle", "name", "utility::string_t", paramName);
	utils->initialize("getPortionRectangle", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionRectangle", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionRectangleInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getPortionRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionRectangle", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionRectangle", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionRectangle", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getPortionRectangle", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getPortionRectangle", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionRectangle", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionRectangleInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getPortionRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionRectangle", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionRectangle", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionRectangle", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getPortionRectangle", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getPortionRectangle", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionRectangle", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionRectangleInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getPortionRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionRectangle", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionRectangle", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionRectangle", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getPortionRectangle", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getPortionRectangle", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionRectangle", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionRectangleInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("getPortionRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionRectangle", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionRectangle", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionRectangle", "storage", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("getPortionRectangle", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("getPortionRectangle", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionRectangle", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionRectangleInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPortionRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionRectangle", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionRectangle", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionRectangle", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getPortionRectangle", "password", "utility::string_t", paramPassword);
	utils->initialize("getPortionRectangle", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionRectangle", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionRectangleInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPortionRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionRectangle", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionRectangle", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionRectangle", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getPortionRectangle", "folder", "utility::string_t", paramFolder);
	utils->initialize("getPortionRectangle", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionRectangle", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionRectangleInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPortionRectangle", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortionRectangle", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortionRectangle", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortionRectangle", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortionRectangle", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortionRectangle", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortionRectangle", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortionRectangle", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getPortionRectangle", "storage", "utility::string_t", paramStorage);
	utils->initialize("getPortionRectangle", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortionRectangle", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortionRectangle", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortionRectangle", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortions) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortions", "subShape", "utility::string_t");
	utils->initialize("getPortions", "", "");
	std::shared_ptr<Portions> result = utils->getSlidesApi()->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortions", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getPortions", "name", "utility::string_t", paramName);
	utils->initialize("getPortions", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortions", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getPortions", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getPortions", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortions", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getPortions", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getPortions", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortions", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getPortions", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getPortions", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortions", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getPortions", "password", "utility::string_t", paramPassword);
	utils->initialize("getPortions", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortions", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getPortions", "folder", "utility::string_t", paramFolder);
	utils->initialize("getPortions", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortions", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getPortions", "storage", "utility::string_t", paramStorage);
	utils->initialize("getPortions", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getPortions", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getPortions", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getPortions", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentation) {
	utility::string_t paramName = utils->getTestValue("getPresentation", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentation", "storage", "utility::string_t");
	utils->initialize("getPresentation", "", "");
	std::shared_ptr<Document> result = utils->getSlidesApi()->getPresentation(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPresentationInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPresentation", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentation", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getPresentation", "name", "utility::string_t", paramName);
	utils->initialize("getPresentation", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentation", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentation", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentation", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentation", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentation", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPresentation", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentation", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getPresentation", "password", "utility::string_t", paramPassword);
	utils->initialize("getPresentation", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentation", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentation", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentation", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentation", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentation", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPresentation", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentation", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getPresentation", "folder", "utility::string_t", paramFolder);
	utils->initialize("getPresentation", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentation", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentation", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentation", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentation", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentation", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPresentation", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getPresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentation", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getPresentation", "storage", "utility::string_t", paramStorage);
	utils->initialize("getPresentation", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentation", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentation", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentation", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentation", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentation", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationImages) {
	utility::string_t paramName = utils->getTestValue("getPresentationImages", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getPresentationImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentationImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentationImages", "storage", "utility::string_t");
	utils->initialize("getPresentationImages", "", "");
	std::shared_ptr<Images> result = utils->getSlidesApi()->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPresentationImagesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPresentationImages", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getPresentationImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentationImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentationImages", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getPresentationImages", "name", "utility::string_t", paramName);
	utils->initialize("getPresentationImages", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationImages", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationImagesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPresentationImages", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getPresentationImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentationImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentationImages", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getPresentationImages", "password", "utility::string_t", paramPassword);
	utils->initialize("getPresentationImages", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationImages", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationImagesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPresentationImages", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getPresentationImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentationImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentationImages", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getPresentationImages", "folder", "utility::string_t", paramFolder);
	utils->initialize("getPresentationImages", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationImages", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationImagesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPresentationImages", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getPresentationImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentationImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentationImages", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getPresentationImages", "storage", "utility::string_t", paramStorage);
	utils->initialize("getPresentationImages", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationImages", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationTextItems) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name", "utility::string_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage", "utility::string_t");
	utils->initialize("getPresentationTextItems", "", "");
	std::shared_ptr<TextItems> result = utils->getSlidesApi()->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPresentationTextItemsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name", "utility::string_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getPresentationTextItems", "name", "utility::string_t", paramName);
	utils->initialize("getPresentationTextItems", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationTextItems", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationTextItemsInvalidWithEmpty) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name", "utility::string_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage", "utility::string_t");
	paramWithEmpty = utils->getInvalidBoolTestValue("getPresentationTextItems", "withEmpty", "bool", paramWithEmpty).value();
	utils->initialize("getPresentationTextItems", "withEmpty", "bool", paramWithEmpty);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "withEmpty", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "withEmpty", "bool", paramWithEmpty);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "withEmpty", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "withEmpty", "bool", paramWithEmpty);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationTextItems", "withEmpty", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationTextItemsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name", "utility::string_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getPresentationTextItems", "password", "utility::string_t", paramPassword);
	utils->initialize("getPresentationTextItems", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationTextItems", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationTextItemsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name", "utility::string_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getPresentationTextItems", "folder", "utility::string_t", paramFolder);
	utils->initialize("getPresentationTextItems", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationTextItems", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationTextItemsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name", "utility::string_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getPresentationTextItems", "storage", "utility::string_t", paramStorage);
	utils->initialize("getPresentationTextItems", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationTextItems", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getProtectionProperties) {
	utility::string_t paramName = utils->getTestValue("getProtectionProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getProtectionProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getProtectionProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getProtectionProperties", "storage", "utility::string_t");
	utils->initialize("getProtectionProperties", "", "");
	std::shared_ptr<ProtectionProperties> result = utils->getSlidesApi()->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getProtectionPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getProtectionProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getProtectionProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getProtectionProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getProtectionProperties", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getProtectionProperties", "name", "utility::string_t", paramName);
	utils->initialize("getProtectionProperties", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getProtectionProperties", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getProtectionPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getProtectionProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getProtectionProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getProtectionProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getProtectionProperties", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getProtectionProperties", "password", "utility::string_t", paramPassword);
	utils->initialize("getProtectionProperties", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getProtectionProperties", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getProtectionPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getProtectionProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getProtectionProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getProtectionProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getProtectionProperties", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getProtectionProperties", "folder", "utility::string_t", paramFolder);
	utils->initialize("getProtectionProperties", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getProtectionProperties", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getProtectionPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getProtectionProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getProtectionProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getProtectionProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getProtectionProperties", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getProtectionProperties", "storage", "utility::string_t", paramStorage);
	utils->initialize("getProtectionProperties", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getProtectionProperties", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSections) {
	utility::string_t paramName = utils->getTestValue("getSections", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage", "utility::string_t");
	utils->initialize("getSections", "", "");
	std::shared_ptr<Sections> result = utils->getSlidesApi()->getSections(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSectionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSections", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSections", "name", "utility::string_t", paramName);
	utils->initialize("getSections", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSections", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSections", "password", "utility::string_t", paramPassword);
	utils->initialize("getSections", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSections", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSections", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSections", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSections", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSections", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSections", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShape) {
	utility::string_t paramName = utils->getTestValue("getShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShape", "subShape", "utility::string_t");
	utils->initialize("getShape", "", "");
	std::shared_ptr<ShapeBase> result = utils->getSlidesApi()->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getShape", "name", "utility::string_t", paramName);
	utils->initialize("getShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShape", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getShape", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getShape", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getShape", "password", "utility::string_t", paramPassword);
	utils->initialize("getShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("getShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("getShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeGeometryPath) {
	utility::string_t paramName = utils->getTestValue("getShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShapeGeometryPath", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapeGeometryPath", "storage", "utility::string_t");
	utils->initialize("getShapeGeometryPath", "", "");
	std::shared_ptr<GeometryPaths> result = utils->getSlidesApi()->getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getShapeGeometryPathInvalidName) {
	utility::string_t paramName = utils->getTestValue("getShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShapeGeometryPath", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapeGeometryPath", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getShapeGeometryPath", "name", "utility::string_t", paramName);
	utils->initialize("getShapeGeometryPath", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapeGeometryPath", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeGeometryPathInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShapeGeometryPath", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapeGeometryPath", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getShapeGeometryPath", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getShapeGeometryPath", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapeGeometryPath", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeGeometryPathInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShapeGeometryPath", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapeGeometryPath", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getShapeGeometryPath", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getShapeGeometryPath", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapeGeometryPath", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeGeometryPathInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShapeGeometryPath", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapeGeometryPath", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getShapeGeometryPath", "password", "utility::string_t", paramPassword);
	utils->initialize("getShapeGeometryPath", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapeGeometryPath", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeGeometryPathInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShapeGeometryPath", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapeGeometryPath", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getShapeGeometryPath", "folder", "utility::string_t", paramFolder);
	utils->initialize("getShapeGeometryPath", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapeGeometryPath", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeGeometryPathInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getShapeGeometryPath", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapeGeometryPath", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getShapeGeometryPath", "storage", "utility::string_t", paramStorage);
	utils->initialize("getShapeGeometryPath", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapeGeometryPath", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapeGeometryPath", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapeGeometryPath", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapes) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage", "utility::string_t");
	utility::string_t paramShapeType = utils->getTestValue("getShapes", "shapeType", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShapes", "subShape", "utility::string_t");
	utils->initialize("getShapes", "", "");
	std::shared_ptr<Shapes> result = utils->getSlidesApi()->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage", "utility::string_t");
	utility::string_t paramShapeType = utils->getTestValue("getShapes", "shapeType", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShapes", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getShapes", "name", "utility::string_t", paramName);
	utils->initialize("getShapes", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage", "utility::string_t");
	utility::string_t paramShapeType = utils->getTestValue("getShapes", "shapeType", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShapes", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getShapes", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getShapes", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage", "utility::string_t");
	utility::string_t paramShapeType = utils->getTestValue("getShapes", "shapeType", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShapes", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getShapes", "password", "utility::string_t", paramPassword);
	utils->initialize("getShapes", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage", "utility::string_t");
	utility::string_t paramShapeType = utils->getTestValue("getShapes", "shapeType", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShapes", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getShapes", "folder", "utility::string_t", paramFolder);
	utils->initialize("getShapes", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage", "utility::string_t");
	utility::string_t paramShapeType = utils->getTestValue("getShapes", "shapeType", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShapes", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getShapes", "storage", "utility::string_t", paramStorage);
	utils->initialize("getShapes", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapesInvalidShapeType) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage", "utility::string_t");
	utility::string_t paramShapeType = utils->getTestValue("getShapes", "shapeType", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShapes", "subShape", "utility::string_t");
	paramShapeType = utils->getInvalidTestValue("getShapes", "shapeType", "utility::string_t", paramShapeType);
	utils->initialize("getShapes", "shapeType", "utility::string_t", paramShapeType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "shapeType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "shapeType", "utility::string_t", paramShapeType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "shapeType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "shapeType", "utility::string_t", paramShapeType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "shapeType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapesInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage", "utility::string_t");
	utility::string_t paramShapeType = utils->getTestValue("getShapes", "shapeType", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getShapes", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getShapes", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getShapes", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlide) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage", "utility::string_t");
	utils->initialize("getSlide", "", "");
	std::shared_ptr<Slide> result = utils->getSlidesApi()->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSlide", "name", "utility::string_t", paramName);
	utils->initialize("getSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("getSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideComments) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage", "utility::string_t");
	utils->initialize("getSlideComments", "", "");
	std::shared_ptr<SlideComments> result = utils->getSlidesApi()->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideCommentsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSlideComments", "name", "utility::string_t", paramName);
	utils->initialize("getSlideComments", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideComments", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideCommentsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideComments", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSlideComments", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideComments", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideCommentsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSlideComments", "password", "utility::string_t", paramPassword);
	utils->initialize("getSlideComments", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideComments", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideCommentsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSlideComments", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSlideComments", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideComments", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideCommentsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSlideComments", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSlideComments", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideComments", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage", "utility::string_t");
	utils->initialize("getSlideHeaderFooter", "", "");
	std::shared_ptr<HeaderFooter> result = utils->getSlidesApi()->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSlideHeaderFooter", "name", "utility::string_t", paramName);
	utils->initialize("getSlideHeaderFooter", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSlideHeaderFooter", "password", "utility::string_t", paramPassword);
	utils->initialize("getSlideHeaderFooter", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSlideHeaderFooter", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSlideHeaderFooter", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideImages) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage", "utility::string_t");
	utils->initialize("getSlideImages", "", "");
	std::shared_ptr<Images> result = utils->getSlidesApi()->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideImagesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSlideImages", "name", "utility::string_t", paramName);
	utils->initialize("getSlideImages", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideImages", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideImagesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideImages", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSlideImages", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideImages", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideImagesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSlideImages", "password", "utility::string_t", paramPassword);
	utils->initialize("getSlideImages", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideImages", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideImagesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSlideImages", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSlideImages", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideImages", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideImagesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSlideImages", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSlideImages", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideImages", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideProperties) {
	utility::string_t paramName = utils->getTestValue("getSlideProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideProperties", "storage", "utility::string_t");
	utils->initialize("getSlideProperties", "", "");
	std::shared_ptr<SlideProperties> result = utils->getSlidesApi()->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidePropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideProperties", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSlideProperties", "name", "utility::string_t", paramName);
	utils->initialize("getSlideProperties", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideProperties", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidePropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideProperties", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSlideProperties", "password", "utility::string_t", paramPassword);
	utils->initialize("getSlideProperties", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideProperties", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidePropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideProperties", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSlideProperties", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSlideProperties", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideProperties", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidePropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideProperties", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSlideProperties", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSlideProperties", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideProperties", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShowProperties) {
	utility::string_t paramName = utils->getTestValue("getSlideShowProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideShowProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideShowProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideShowProperties", "storage", "utility::string_t");
	utils->initialize("getSlideShowProperties", "", "");
	std::shared_ptr<SlideShowProperties> result = utils->getSlidesApi()->getSlideShowProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideShowPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideShowProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideShowProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideShowProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideShowProperties", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSlideShowProperties", "name", "utility::string_t", paramName);
	utils->initialize("getSlideShowProperties", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideShowProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShowProperties", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShowProperties", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShowProperties", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShowProperties", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShowProperties", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShowPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideShowProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideShowProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideShowProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideShowProperties", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSlideShowProperties", "password", "utility::string_t", paramPassword);
	utils->initialize("getSlideShowProperties", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideShowProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShowProperties", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShowProperties", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShowProperties", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShowProperties", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShowProperties", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShowPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideShowProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideShowProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideShowProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideShowProperties", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSlideShowProperties", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSlideShowProperties", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideShowProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShowProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShowProperties", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShowProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShowProperties", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShowProperties", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShowPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideShowProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlideShowProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideShowProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideShowProperties", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSlideShowProperties", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSlideShowProperties", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideShowProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShowProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShowProperties", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShowProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShowProperties", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShowProperties", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItems) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex", "int32_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage", "utility::string_t");
	utils->initialize("getSlideTextItems", "", "");
	std::shared_ptr<TextItems> result = utils->getSlidesApi()->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex", "int32_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSlideTextItems", "name", "utility::string_t", paramName);
	utils->initialize("getSlideTextItems", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex", "int32_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideTextItems", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSlideTextItems", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidWithEmpty) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex", "int32_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage", "utility::string_t");
	paramWithEmpty = utils->getInvalidBoolTestValue("getSlideTextItems", "withEmpty", "bool", paramWithEmpty).value();
	utils->initialize("getSlideTextItems", "withEmpty", "bool", paramWithEmpty);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "withEmpty", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "withEmpty", "bool", paramWithEmpty);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "withEmpty", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "withEmpty", "bool", paramWithEmpty);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "withEmpty", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex", "int32_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSlideTextItems", "password", "utility::string_t", paramPassword);
	utils->initialize("getSlideTextItems", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex", "int32_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSlideTextItems", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSlideTextItems", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex", "int32_t");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty", "bool");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSlideTextItems", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSlideTextItems", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlides) {
	utility::string_t paramName = utils->getTestValue("getSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlides", "storage", "utility::string_t");
	utils->initialize("getSlides", "", "");
	std::shared_ptr<Slides> result = utils->getSlidesApi()->getSlides(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlides", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSlides", "name", "utility::string_t", paramName);
	utils->initialize("getSlides", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlides", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlides", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlides", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlides", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlides", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlides", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSlides", "password", "utility::string_t", paramPassword);
	utils->initialize("getSlides", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlides", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlides", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlides", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlides", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlides", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlides", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSlides", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSlides", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlides", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlides", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlides", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlides", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSlides", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSlides", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSlides", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlides", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlides", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlides", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideAnimation) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideAnimation", "slideType", "utility::string_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideAnimation", "storage", "utility::string_t");
	utils->initialize("getSpecialSlideAnimation", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSpecialSlideAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideAnimation", "slideType", "utility::string_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideAnimation", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSpecialSlideAnimation", "name", "utility::string_t", paramName);
	utils->initialize("getSpecialSlideAnimation", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideAnimation", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideAnimation", "slideType", "utility::string_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideAnimation", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideAnimation", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideAnimationInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideAnimation", "slideType", "utility::string_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideAnimation", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("getSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("getSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideAnimation", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideAnimationInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideAnimation", "slideType", "utility::string_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideAnimation", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getSpecialSlideAnimation", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getSpecialSlideAnimation", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideAnimation", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideAnimationInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideAnimation", "slideType", "utility::string_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideAnimation", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getSpecialSlideAnimation", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getSpecialSlideAnimation", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideAnimation", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideAnimation", "slideType", "utility::string_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideAnimation", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSpecialSlideAnimation", "password", "utility::string_t", paramPassword);
	utils->initialize("getSpecialSlideAnimation", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideAnimation", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideAnimation", "slideType", "utility::string_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideAnimation", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideAnimation", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideAnimation", "slideType", "utility::string_t");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "shapeIndex", "int32_t");
	auto paramParagraphIndex = utils->getOptionalIntTestValue("getSpecialSlideAnimation", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideAnimation", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideAnimation", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraph) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraph", "subShape", "utility::string_t");
	utils->initialize("getSpecialSlideParagraph", "", "");
	std::shared_ptr<Paragraph> result = utils->getSlidesApi()->getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraph", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSpecialSlideParagraph", "name", "utility::string_t", paramName);
	utils->initialize("getSpecialSlideParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("getSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("getSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraph", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraph", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraph", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraph", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraph", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("getSpecialSlideParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraph", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraph", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlideParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraph", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphs) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraphs", "subShape", "utility::string_t");
	utils->initialize("getSpecialSlideParagraphs", "", "");
	std::shared_ptr<Paragraphs> result = utils->getSlidesApi()->getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSpecialSlideParagraphs", "name", "utility::string_t", paramName);
	utils->initialize("getSpecialSlideParagraphs", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraphs", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSpecialSlideParagraphs", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSpecialSlideParagraphs", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraphs", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphsInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("getSpecialSlideParagraphs", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("getSpecialSlideParagraphs", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraphs", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getSpecialSlideParagraphs", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getSpecialSlideParagraphs", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraphs", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSpecialSlideParagraphs", "password", "utility::string_t", paramPassword);
	utils->initialize("getSpecialSlideParagraphs", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraphs", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSpecialSlideParagraphs", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSpecialSlideParagraphs", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraphs", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSpecialSlideParagraphs", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSpecialSlideParagraphs", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraphs", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideParagraphsInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideParagraphs", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideParagraphs", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideParagraphs", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideParagraphs", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getSpecialSlideParagraphs", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getSpecialSlideParagraphs", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideParagraphs", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideParagraphs", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideParagraphs", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortion) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortion", "subShape", "utility::string_t");
	utils->initialize("getSpecialSlidePortion", "", "");
	std::shared_ptr<Portion> result = utils->getSlidesApi()->getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSpecialSlidePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortion", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSpecialSlidePortion", "name", "utility::string_t", paramName);
	utils->initialize("getSpecialSlidePortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortion", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortion", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("getSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("getSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortion", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortion", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortion", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortion", "subShape", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("getSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortion", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortion", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSpecialSlidePortion", "password", "utility::string_t", paramPassword);
	utils->initialize("getSpecialSlidePortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortion", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSpecialSlidePortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortion", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSpecialSlidePortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getSpecialSlidePortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortion", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortion", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortions) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortions", "subShape", "utility::string_t");
	utils->initialize("getSpecialSlidePortions", "", "");
	std::shared_ptr<Portions> result = utils->getSlidesApi()->getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSpecialSlidePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortions", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSpecialSlidePortions", "name", "utility::string_t", paramName);
	utils->initialize("getSpecialSlidePortions", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortions", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortions", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSpecialSlidePortions", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSpecialSlidePortions", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortions", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionsInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortions", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("getSpecialSlidePortions", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("getSpecialSlidePortions", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortions", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortions", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getSpecialSlidePortions", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getSpecialSlidePortions", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortions", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortions", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getSpecialSlidePortions", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getSpecialSlidePortions", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortions", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortions", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSpecialSlidePortions", "password", "utility::string_t", paramPassword);
	utils->initialize("getSpecialSlidePortions", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortions", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortions", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSpecialSlidePortions", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSpecialSlidePortions", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortions", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortions", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSpecialSlidePortions", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSpecialSlidePortions", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortions", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlidePortionsInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlidePortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlidePortions", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlidePortions", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlidePortions", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSpecialSlidePortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlidePortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlidePortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlidePortions", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlidePortions", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getSpecialSlidePortions", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getSpecialSlidePortions", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlidePortions", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlidePortions", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlidePortions", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShape) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShape", "subShape", "utility::string_t");
	utils->initialize("getSpecialSlideShape", "", "");
	std::shared_ptr<ShapeBase> result = utils->getSlidesApi()->getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSpecialSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSpecialSlideShape", "name", "utility::string_t", paramName);
	utils->initialize("getSpecialSlideShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapeInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("getSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("getSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShape", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShape", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShape", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSpecialSlideShape", "password", "utility::string_t", paramPassword);
	utils->initialize("getSpecialSlideShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSpecialSlideShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSpecialSlideShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSpecialSlideShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSpecialSlideShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapes) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShapes", "subShape", "utility::string_t");
	utils->initialize("getSpecialSlideShapes", "", "");
	std::shared_ptr<Shapes> result = utils->getSlidesApi()->getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSpecialSlideShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShapes", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("getSpecialSlideShapes", "name", "utility::string_t", paramName);
	utils->initialize("getSpecialSlideShapes", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShapes", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShapes", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShapes", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapesInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShapes", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("getSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("getSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShapes", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShapes", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getSpecialSlideShapes", "password", "utility::string_t", paramPassword);
	utils->initialize("getSpecialSlideShapes", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShapes", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShapes", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getSpecialSlideShapes", "folder", "utility::string_t", paramFolder);
	utils->initialize("getSpecialSlideShapes", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShapes", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShapes", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getSpecialSlideShapes", "storage", "utility::string_t", paramStorage);
	utils->initialize("getSpecialSlideShapes", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShapes", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSpecialSlideShapesInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("getSpecialSlideShapes", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getSpecialSlideShapes", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("getSpecialSlideShapes", "slideType", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getSpecialSlideShapes", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getSpecialSlideShapes", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getSpecialSlideShapes", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("getSpecialSlideShapes", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("getSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("getSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSpecialSlideShapes", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSpecialSlideShapes", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSpecialSlideShapes", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraph) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraph", "storage", "utility::string_t");
	utils->initialize("getTableCellParagraph", "", "");
	std::shared_ptr<Paragraph> result = utils->getSlidesApi()->getTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getTableCellParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraph", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getTableCellParagraph", "name", "utility::string_t", paramName);
	utils->initialize("getTableCellParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraph", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraph", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraph", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("getTableCellParagraph", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("getTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraph", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraph", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("getTableCellParagraph", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("getTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraph", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraph", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraph", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraph", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getTableCellParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("getTableCellParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraph", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getTableCellParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("getTableCellParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellParagraph", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraph", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getTableCellParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("getTableCellParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphs) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraphs", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraphs", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraphs", "cellIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraphs", "storage", "utility::string_t");
	utils->initialize("getTableCellParagraphs", "", "");
	std::shared_ptr<Paragraphs> result = utils->getSlidesApi()->getTableCellParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getTableCellParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraphs", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraphs", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraphs", "cellIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraphs", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getTableCellParagraphs", "name", "utility::string_t", paramName);
	utils->initialize("getTableCellParagraphs", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraphs", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraphs", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraphs", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraphs", "cellIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraphs", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getTableCellParagraphs", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getTableCellParagraphs", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraphs", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraphs", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraphs", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraphs", "cellIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraphs", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getTableCellParagraphs", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getTableCellParagraphs", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraphs", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphsInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraphs", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraphs", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraphs", "cellIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraphs", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("getTableCellParagraphs", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("getTableCellParagraphs", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraphs", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphsInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraphs", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraphs", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraphs", "cellIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraphs", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("getTableCellParagraphs", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("getTableCellParagraphs", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraphs", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraphs", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraphs", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraphs", "cellIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraphs", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getTableCellParagraphs", "password", "utility::string_t", paramPassword);
	utils->initialize("getTableCellParagraphs", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraphs", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraphs", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraphs", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraphs", "cellIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraphs", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getTableCellParagraphs", "folder", "utility::string_t", paramFolder);
	utils->initialize("getTableCellParagraphs", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraphs", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getTableCellParagraphs", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellParagraphs", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellParagraphs", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellParagraphs", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellParagraphs", "cellIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellParagraphs", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellParagraphs", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellParagraphs", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getTableCellParagraphs", "storage", "utility::string_t", paramStorage);
	utils->initialize("getTableCellParagraphs", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellParagraphs", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellParagraphs", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellParagraphs", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortion) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortion", "storage", "utility::string_t");
	utils->initialize("getTableCellPortion", "", "");
	std::shared_ptr<Portion> result = utils->getSlidesApi()->getTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getTableCellPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortion", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getTableCellPortion", "name", "utility::string_t", paramName);
	utils->initialize("getTableCellPortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortion", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getTableCellPortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortion", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortion", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("getTableCellPortion", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("getTableCellPortion", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortion", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortion", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("getTableCellPortion", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("getTableCellPortion", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortion", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortion", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortion", "storage", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("getTableCellPortion", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("getTableCellPortion", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortion", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortion", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getTableCellPortion", "password", "utility::string_t", paramPassword);
	utils->initialize("getTableCellPortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortion", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getTableCellPortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("getTableCellPortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("getTableCellPortion", "portionIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortion", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getTableCellPortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("getTableCellPortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortions) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortions", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortions", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortions", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortions", "storage", "utility::string_t");
	utils->initialize("getTableCellPortions", "", "");
	std::shared_ptr<Portions> result = utils->getSlidesApi()->getTableCellPortions(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getTableCellPortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortions", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortions", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortions", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortions", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getTableCellPortions", "name", "utility::string_t", paramName);
	utils->initialize("getTableCellPortions", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortions(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortions", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortions", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortions", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortions", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortions", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getTableCellPortions", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getTableCellPortions", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortions(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortions", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortions", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortions", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortions", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortions", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("getTableCellPortions", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("getTableCellPortions", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortions(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortions", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionsInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortions", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortions", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortions", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortions", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("getTableCellPortions", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("getTableCellPortions", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortions(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortions", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionsInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortions", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortions", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortions", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortions", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("getTableCellPortions", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("getTableCellPortions", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortions(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortions", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortions", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortions", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortions", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortions", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("getTableCellPortions", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("getTableCellPortions", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortions(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortions", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortions", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortions", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortions", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortions", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getTableCellPortions", "password", "utility::string_t", paramPassword);
	utils->initialize("getTableCellPortions", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortions(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortions", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortions", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortions", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortions", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortions", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getTableCellPortions", "folder", "utility::string_t", paramFolder);
	utils->initialize("getTableCellPortions", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortions(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortions", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTableCellPortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getTableCellPortions", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTableCellPortions", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("getTableCellPortions", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("getTableCellPortions", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("getTableCellPortions", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("getTableCellPortions", "paragraphIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTableCellPortions", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTableCellPortions", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTableCellPortions", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getTableCellPortions", "storage", "utility::string_t", paramStorage);
	utils->initialize("getTableCellPortions", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTableCellPortions(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTableCellPortions", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTableCellPortions", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTableCellPortions", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTheme) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage", "utility::string_t");
	utils->initialize("getTheme", "", "");
	std::shared_ptr<Theme> result = utils->getSlidesApi()->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getThemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getTheme", "name", "utility::string_t", paramName);
	utils->initialize("getTheme", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTheme", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTheme", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTheme", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTheme", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTheme", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getThemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("getTheme", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("getTheme", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTheme", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTheme", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTheme", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTheme", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTheme", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getThemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getTheme", "password", "utility::string_t", paramPassword);
	utils->initialize("getTheme", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTheme", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTheme", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTheme", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTheme", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTheme", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getThemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getTheme", "folder", "utility::string_t", paramFolder);
	utils->initialize("getTheme", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTheme", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTheme", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTheme", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTheme", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTheme", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getThemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getTheme", "storage", "utility::string_t", paramStorage);
	utils->initialize("getTheme", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTheme", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTheme", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTheme", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTheme", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTheme", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getVbaModule) {
	utility::string_t paramName = utils->getTestValue("getVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("getVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getVbaModule", "storage", "utility::string_t");
	utils->initialize("getVbaModule", "", "");
	std::shared_ptr<VbaModule> result = utils->getSlidesApi()->getVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getVbaModuleInvalidName) {
	utility::string_t paramName = utils->getTestValue("getVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("getVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getVbaModule", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getVbaModule", "name", "utility::string_t", paramName);
	utils->initialize("getVbaModule", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getVbaModule", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getVbaModule", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getVbaModule", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getVbaModule", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getVbaModule", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getVbaModuleInvalidModuleIndex) {
	utility::string_t paramName = utils->getTestValue("getVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("getVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getVbaModule", "storage", "utility::string_t");
	paramModuleIndex = utils->getInvalidIntTestValue("getVbaModule", "moduleIndex", "int32_t", paramModuleIndex).value();
	utils->initialize("getVbaModule", "moduleIndex", "int32_t", paramModuleIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getVbaModule", "moduleIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getVbaModule", "moduleIndex", "int32_t", paramModuleIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getVbaModule", "moduleIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getVbaModule", "moduleIndex", "int32_t", paramModuleIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getVbaModule", "moduleIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getVbaModuleInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("getVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getVbaModule", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getVbaModule", "password", "utility::string_t", paramPassword);
	utils->initialize("getVbaModule", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getVbaModule", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getVbaModule", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getVbaModule", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getVbaModule", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getVbaModule", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getVbaModuleInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("getVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getVbaModule", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getVbaModule", "folder", "utility::string_t", paramFolder);
	utils->initialize("getVbaModule", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getVbaModule", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getVbaModule", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getVbaModule", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getVbaModule", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getVbaModule", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getVbaModuleInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("getVbaModule", "moduleIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("getVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getVbaModule", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getVbaModule", "storage", "utility::string_t", paramStorage);
	utils->initialize("getVbaModule", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getVbaModule(paramName, paramModuleIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getVbaModule", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getVbaModule", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getVbaModule", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getVbaModule", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getVbaModule", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getVbaProject) {
	utility::string_t paramName = utils->getTestValue("getVbaProject", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getVbaProject", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getVbaProject", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getVbaProject", "storage", "utility::string_t");
	utils->initialize("getVbaProject", "", "");
	std::shared_ptr<VbaProject> result = utils->getSlidesApi()->getVbaProject(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getVbaProjectInvalidName) {
	utility::string_t paramName = utils->getTestValue("getVbaProject", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getVbaProject", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getVbaProject", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getVbaProject", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getVbaProject", "name", "utility::string_t", paramName);
	utils->initialize("getVbaProject", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getVbaProject(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getVbaProject", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getVbaProject", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getVbaProject", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getVbaProject", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getVbaProject", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getVbaProjectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getVbaProject", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getVbaProject", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getVbaProject", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getVbaProject", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getVbaProject", "password", "utility::string_t", paramPassword);
	utils->initialize("getVbaProject", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getVbaProject(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getVbaProject", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getVbaProject", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getVbaProject", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getVbaProject", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getVbaProject", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getVbaProjectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getVbaProject", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getVbaProject", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getVbaProject", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getVbaProject", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getVbaProject", "folder", "utility::string_t", paramFolder);
	utils->initialize("getVbaProject", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getVbaProject(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getVbaProject", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getVbaProject", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getVbaProject", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getVbaProject", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getVbaProject", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getVbaProjectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getVbaProject", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getVbaProject", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getVbaProject", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getVbaProject", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getVbaProject", "storage", "utility::string_t", paramStorage);
	utils->initialize("getVbaProject", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getVbaProject(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getVbaProject", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getVbaProject", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getVbaProject", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getVbaProject", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getVbaProject", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getViewProperties) {
	utility::string_t paramName = utils->getTestValue("getViewProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getViewProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getViewProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getViewProperties", "storage", "utility::string_t");
	utils->initialize("getViewProperties", "", "");
	std::shared_ptr<ViewProperties> result = utils->getSlidesApi()->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getViewPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getViewProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getViewProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getViewProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getViewProperties", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("getViewProperties", "name", "utility::string_t", paramName);
	utils->initialize("getViewProperties", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getViewProperties", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getViewPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getViewProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getViewProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getViewProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getViewProperties", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("getViewProperties", "password", "utility::string_t", paramPassword);
	utils->initialize("getViewProperties", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getViewProperties", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getViewPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getViewProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getViewProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getViewProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getViewProperties", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("getViewProperties", "folder", "utility::string_t", paramFolder);
	utils->initialize("getViewProperties", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getViewProperties", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getViewPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getViewProperties", "name", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("getViewProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("getViewProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("getViewProperties", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("getViewProperties", "storage", "utility::string_t", paramStorage);
	utils->initialize("getViewProperties", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getViewProperties", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeRegex) {
	utility::string_t paramName = utils->getTestValue("highlightShapeRegex", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeRegex", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t");
	utility::string_t paramRegex = utils->getTestValue("highlightShapeRegex", "regex", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeRegex", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeRegex", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeRegex", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeRegex", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeRegex", "storage", "utility::string_t");
	utils->initialize("highlightShapeRegex", "", "");
	std::shared_ptr<Shape> result = utils->getSlidesApi()->highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, highlightShapeRegexInvalidName) {
	utility::string_t paramName = utils->getTestValue("highlightShapeRegex", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeRegex", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t");
	utility::string_t paramRegex = utils->getTestValue("highlightShapeRegex", "regex", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeRegex", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeRegex", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeRegex", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeRegex", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeRegex", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("highlightShapeRegex", "name", "utility::string_t", paramName);
	utils->initialize("highlightShapeRegex", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeRegex", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeRegexInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("highlightShapeRegex", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeRegex", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t");
	utility::string_t paramRegex = utils->getTestValue("highlightShapeRegex", "regex", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeRegex", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeRegex", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeRegex", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeRegex", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeRegex", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("highlightShapeRegex", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("highlightShapeRegex", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeRegex", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeRegexInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("highlightShapeRegex", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeRegex", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t");
	utility::string_t paramRegex = utils->getTestValue("highlightShapeRegex", "regex", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeRegex", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeRegex", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeRegex", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeRegex", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeRegex", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("highlightShapeRegex", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeRegex", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeRegexInvalidRegex) {
	utility::string_t paramName = utils->getTestValue("highlightShapeRegex", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeRegex", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t");
	utility::string_t paramRegex = utils->getTestValue("highlightShapeRegex", "regex", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeRegex", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeRegex", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeRegex", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeRegex", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeRegex", "storage", "utility::string_t");
	paramRegex = utils->getInvalidTestValue("highlightShapeRegex", "regex", "utility::string_t", paramRegex);
	utils->initialize("highlightShapeRegex", "regex", "utility::string_t", paramRegex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "regex", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "regex", "utility::string_t", paramRegex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "regex", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "regex", "utility::string_t", paramRegex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeRegex", "regex", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeRegexInvalidColor) {
	utility::string_t paramName = utils->getTestValue("highlightShapeRegex", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeRegex", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t");
	utility::string_t paramRegex = utils->getTestValue("highlightShapeRegex", "regex", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeRegex", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeRegex", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeRegex", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeRegex", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeRegex", "storage", "utility::string_t");
	paramColor = utils->getInvalidTestValue("highlightShapeRegex", "color", "utility::string_t", paramColor);
	utils->initialize("highlightShapeRegex", "color", "utility::string_t", paramColor);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "color", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "color", "utility::string_t", paramColor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "color", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "color", "utility::string_t", paramColor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeRegex", "color", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeRegexInvalidWholeWordsOnly) {
	utility::string_t paramName = utils->getTestValue("highlightShapeRegex", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeRegex", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t");
	utility::string_t paramRegex = utils->getTestValue("highlightShapeRegex", "regex", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeRegex", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeRegex", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeRegex", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeRegex", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeRegex", "storage", "utility::string_t");
	paramWholeWordsOnly = utils->getInvalidBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool", paramWholeWordsOnly).value();
	utils->initialize("highlightShapeRegex", "wholeWordsOnly", "bool", paramWholeWordsOnly);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "wholeWordsOnly", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "wholeWordsOnly", "bool", paramWholeWordsOnly);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "wholeWordsOnly", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "wholeWordsOnly", "bool", paramWholeWordsOnly);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeRegex", "wholeWordsOnly", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeRegexInvalidIgnoreCase) {
	utility::string_t paramName = utils->getTestValue("highlightShapeRegex", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeRegex", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t");
	utility::string_t paramRegex = utils->getTestValue("highlightShapeRegex", "regex", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeRegex", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeRegex", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeRegex", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeRegex", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeRegex", "storage", "utility::string_t");
	paramIgnoreCase = utils->getInvalidBoolTestValue("highlightShapeRegex", "ignoreCase", "bool", paramIgnoreCase).value();
	utils->initialize("highlightShapeRegex", "ignoreCase", "bool", paramIgnoreCase);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "ignoreCase", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "ignoreCase", "bool", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "ignoreCase", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "ignoreCase", "bool", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeRegex", "ignoreCase", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeRegexInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("highlightShapeRegex", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeRegex", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t");
	utility::string_t paramRegex = utils->getTestValue("highlightShapeRegex", "regex", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeRegex", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeRegex", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeRegex", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeRegex", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeRegex", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("highlightShapeRegex", "password", "utility::string_t", paramPassword);
	utils->initialize("highlightShapeRegex", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeRegex", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeRegexInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("highlightShapeRegex", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeRegex", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t");
	utility::string_t paramRegex = utils->getTestValue("highlightShapeRegex", "regex", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeRegex", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeRegex", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeRegex", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeRegex", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeRegex", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("highlightShapeRegex", "folder", "utility::string_t", paramFolder);
	utils->initialize("highlightShapeRegex", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeRegex", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeRegexInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("highlightShapeRegex", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeRegex", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeRegex", "shapeIndex", "int32_t");
	utility::string_t paramRegex = utils->getTestValue("highlightShapeRegex", "regex", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeRegex", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeRegex", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeRegex", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeRegex", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeRegex", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeRegex", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("highlightShapeRegex", "storage", "utility::string_t", paramStorage);
	utils->initialize("highlightShapeRegex", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeRegex", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeRegex", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeRegex", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeText) {
	utility::string_t paramName = utils->getTestValue("highlightShapeText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeText", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeText", "shapeIndex", "int32_t");
	utility::string_t paramText = utils->getTestValue("highlightShapeText", "text", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeText", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeText", "storage", "utility::string_t");
	utils->initialize("highlightShapeText", "", "");
	std::shared_ptr<Shape> result = utils->getSlidesApi()->highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, highlightShapeTextInvalidName) {
	utility::string_t paramName = utils->getTestValue("highlightShapeText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeText", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeText", "shapeIndex", "int32_t");
	utility::string_t paramText = utils->getTestValue("highlightShapeText", "text", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeText", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeText", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("highlightShapeText", "name", "utility::string_t", paramName);
	utils->initialize("highlightShapeText", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeText", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeTextInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("highlightShapeText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeText", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeText", "shapeIndex", "int32_t");
	utility::string_t paramText = utils->getTestValue("highlightShapeText", "text", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeText", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeText", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("highlightShapeText", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("highlightShapeText", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeText", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeTextInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("highlightShapeText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeText", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeText", "shapeIndex", "int32_t");
	utility::string_t paramText = utils->getTestValue("highlightShapeText", "text", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeText", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeText", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("highlightShapeText", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("highlightShapeText", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeText", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeTextInvalidText) {
	utility::string_t paramName = utils->getTestValue("highlightShapeText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeText", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeText", "shapeIndex", "int32_t");
	utility::string_t paramText = utils->getTestValue("highlightShapeText", "text", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeText", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeText", "storage", "utility::string_t");
	paramText = utils->getInvalidTestValue("highlightShapeText", "text", "utility::string_t", paramText);
	utils->initialize("highlightShapeText", "text", "utility::string_t", paramText);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "text", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "text", "utility::string_t", paramText);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "text", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "text", "utility::string_t", paramText);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeText", "text", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeTextInvalidColor) {
	utility::string_t paramName = utils->getTestValue("highlightShapeText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeText", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeText", "shapeIndex", "int32_t");
	utility::string_t paramText = utils->getTestValue("highlightShapeText", "text", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeText", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeText", "storage", "utility::string_t");
	paramColor = utils->getInvalidTestValue("highlightShapeText", "color", "utility::string_t", paramColor);
	utils->initialize("highlightShapeText", "color", "utility::string_t", paramColor);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "color", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "color", "utility::string_t", paramColor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "color", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "color", "utility::string_t", paramColor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeText", "color", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeTextInvalidWholeWordsOnly) {
	utility::string_t paramName = utils->getTestValue("highlightShapeText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeText", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeText", "shapeIndex", "int32_t");
	utility::string_t paramText = utils->getTestValue("highlightShapeText", "text", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeText", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeText", "storage", "utility::string_t");
	paramWholeWordsOnly = utils->getInvalidBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool", paramWholeWordsOnly).value();
	utils->initialize("highlightShapeText", "wholeWordsOnly", "bool", paramWholeWordsOnly);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "wholeWordsOnly", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "wholeWordsOnly", "bool", paramWholeWordsOnly);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "wholeWordsOnly", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "wholeWordsOnly", "bool", paramWholeWordsOnly);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeText", "wholeWordsOnly", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeTextInvalidIgnoreCase) {
	utility::string_t paramName = utils->getTestValue("highlightShapeText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeText", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeText", "shapeIndex", "int32_t");
	utility::string_t paramText = utils->getTestValue("highlightShapeText", "text", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeText", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeText", "storage", "utility::string_t");
	paramIgnoreCase = utils->getInvalidBoolTestValue("highlightShapeText", "ignoreCase", "bool", paramIgnoreCase).value();
	utils->initialize("highlightShapeText", "ignoreCase", "bool", paramIgnoreCase);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "ignoreCase", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "ignoreCase", "bool", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "ignoreCase", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "ignoreCase", "bool", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeText", "ignoreCase", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeTextInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("highlightShapeText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeText", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeText", "shapeIndex", "int32_t");
	utility::string_t paramText = utils->getTestValue("highlightShapeText", "text", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeText", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeText", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("highlightShapeText", "password", "utility::string_t", paramPassword);
	utils->initialize("highlightShapeText", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeText", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeTextInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("highlightShapeText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeText", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeText", "shapeIndex", "int32_t");
	utility::string_t paramText = utils->getTestValue("highlightShapeText", "text", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeText", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeText", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("highlightShapeText", "folder", "utility::string_t", paramFolder);
	utils->initialize("highlightShapeText", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeText", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, highlightShapeTextInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("highlightShapeText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("highlightShapeText", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("highlightShapeText", "shapeIndex", "int32_t");
	utility::string_t paramText = utils->getTestValue("highlightShapeText", "text", "utility::string_t");
	utility::string_t paramColor = utils->getTestValue("highlightShapeText", "color", "utility::string_t");
	auto paramWholeWordsOnly = utils->getOptionalBoolTestValue("highlightShapeText", "wholeWordsOnly", "bool");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("highlightShapeText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("highlightShapeText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("highlightShapeText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("highlightShapeText", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("highlightShapeText", "storage", "utility::string_t", paramStorage);
	utils->initialize("highlightShapeText", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("highlightShapeText", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("highlightShapeText", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("highlightShapeText", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromHtml) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name", "utility::string_t");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage", "utility::string_t");
	utils->initialize("importFromHtml", "", "");
	std::shared_ptr<Document> result = utils->getSlidesApi()->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, importFromHtmlInvalidName) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name", "utility::string_t");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("importFromHtml", "name", "utility::string_t", paramName);
	utils->initialize("importFromHtml", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromHtml", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromHtmlInvalidHtml) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name", "utility::string_t");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage", "utility::string_t");
	paramHtml = utils->getInvalidTestValue("importFromHtml", "html", "utility::string_t", paramHtml);
	utils->initialize("importFromHtml", "html", "utility::string_t", paramHtml);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "html", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "html", "utility::string_t", paramHtml);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "html", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "html", "utility::string_t", paramHtml);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromHtml", "html", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromHtmlInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name", "utility::string_t");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("importFromHtml", "password", "utility::string_t", paramPassword);
	utils->initialize("importFromHtml", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromHtml", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromHtmlInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name", "utility::string_t");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("importFromHtml", "folder", "utility::string_t", paramFolder);
	utils->initialize("importFromHtml", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromHtml", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromHtmlInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name", "utility::string_t");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("importFromHtml", "storage", "utility::string_t", paramStorage);
	utils->initialize("importFromHtml", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromHtml", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromPdf) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage", "utility::string_t");
	utils->initialize("importFromPdf", "", "");
	std::shared_ptr<Document> result = utils->getSlidesApi()->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, importFromPdfInvalidName) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("importFromPdf", "name", "utility::string_t", paramName);
	utils->initialize("importFromPdf", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromPdf", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromPdfInvalidPdf) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage", "utility::string_t");
	paramPdf = utils->getInvalidBinaryTestValue("importFromPdf", "pdf", "std::shared_ptr<HttpContent>", paramPdf);
	utils->initialize("importFromPdf", "pdf", "std::shared_ptr<HttpContent>", paramPdf);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "pdf", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "pdf", "std::shared_ptr<HttpContent>", paramPdf);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "pdf", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "pdf", "std::shared_ptr<HttpContent>", paramPdf);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromPdf", "pdf", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromPdfInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("importFromPdf", "password", "utility::string_t", paramPassword);
	utils->initialize("importFromPdf", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromPdf", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromPdfInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("importFromPdf", "folder", "utility::string_t", paramFolder);
	utils->initialize("importFromPdf", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromPdf", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromPdfInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name", "utility::string_t");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("importFromPdf", "storage", "utility::string_t", paramStorage);
	utils->initialize("importFromPdf", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromPdf", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvg) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	utils->initialize("importShapesFromSvg", "", "");
	std::shared_ptr<Shapes> result = utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidName) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("importShapesFromSvg", "name", "utility::string_t", paramName);
	utils->initialize("importShapesFromSvg", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("importShapesFromSvg", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("importShapesFromSvg", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidImage) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramImage = utils->getInvalidBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>", paramImage);
	utils->initialize("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>", paramImage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>", paramImage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>", paramImage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidX) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramX = utils->getInvalidIntTestValue("importShapesFromSvg", "x", "int32_t", paramX).value();
	utils->initialize("importShapesFromSvg", "x", "int32_t", paramX);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "x", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "x", "int32_t", paramX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "x", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "x", "int32_t", paramX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "x", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidY) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramY = utils->getInvalidIntTestValue("importShapesFromSvg", "y", "int32_t", paramY).value();
	utils->initialize("importShapesFromSvg", "y", "int32_t", paramY);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "y", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "y", "int32_t", paramY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "y", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "y", "int32_t", paramY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "y", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramWidth = utils->getInvalidIntTestValue("importShapesFromSvg", "width", "int32_t", paramWidth).value();
	utils->initialize("importShapesFromSvg", "width", "int32_t", paramWidth);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "width", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "width", "int32_t", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "width", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "width", "int32_t", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "width", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramHeight = utils->getInvalidIntTestValue("importShapesFromSvg", "height", "int32_t", paramHeight).value();
	utils->initialize("importShapesFromSvg", "height", "int32_t", paramHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "height", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "height", "int32_t", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "height", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "height", "int32_t", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "height", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramShapes = utils->getInvalidIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>", paramShapes);
	utils->initialize("importShapesFromSvg", "shapes", "std::vector<int32_t>", paramShapes);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "shapes", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "shapes", "std::vector<int32_t>", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "shapes", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "shapes", "std::vector<int32_t>", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "shapes", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidGroup) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramGroup = utils->getInvalidBoolTestValue("importShapesFromSvg", "group", "bool", paramGroup).value();
	utils->initialize("importShapesFromSvg", "group", "bool", paramGroup);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "group", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "group", "bool", paramGroup);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "group", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "group", "bool", paramGroup);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "group", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("importShapesFromSvg", "password", "utility::string_t", paramPassword);
	utils->initialize("importShapesFromSvg", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("importShapesFromSvg", "folder", "utility::string_t", paramFolder);
	utils->initialize("importShapesFromSvg", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importShapesFromSvgInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("importShapesFromSvg", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("importShapesFromSvg", "slideIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("importShapesFromSvg", "image", "std::shared_ptr<HttpContent>");
	auto paramX = utils->getOptionalIntTestValue("importShapesFromSvg", "x", "int32_t");
	auto paramY = utils->getOptionalIntTestValue("importShapesFromSvg", "y", "int32_t");
	auto paramWidth = utils->getOptionalIntTestValue("importShapesFromSvg", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("importShapesFromSvg", "height", "int32_t");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("importShapesFromSvg", "shapes", "std::vector<int32_t>");
	auto paramGroup = utils->getOptionalBoolTestValue("importShapesFromSvg", "group", "bool");
	utility::string_t paramPassword = utils->getTestValue("importShapesFromSvg", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("importShapesFromSvg", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("importShapesFromSvg", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("importShapesFromSvg", "storage", "utility::string_t", paramStorage);
	utils->initialize("importShapesFromSvg", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importShapesFromSvg", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importShapesFromSvg", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importShapesFromSvg", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, merge) {
	utility::string_t paramName = utils->getTestValue("merge", "name", "utility::string_t");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request", "std::shared_ptr<PresentationsMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("merge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage", "utility::string_t");
	utils->initialize("merge", "", "");
	std::shared_ptr<Document> result = utils->getSlidesApi()->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, mergeInvalidName) {
	utility::string_t paramName = utils->getTestValue("merge", "name", "utility::string_t");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request", "std::shared_ptr<PresentationsMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("merge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("merge", "name", "utility::string_t", paramName);
	utils->initialize("merge", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("merge", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("merge", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("merge", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("merge", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("merge", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeInvalidRequest) {
	utility::string_t paramName = utils->getTestValue("merge", "name", "utility::string_t");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request", "std::shared_ptr<PresentationsMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("merge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage", "utility::string_t");
	paramRequest = utils->getInvalidTestValueForClass<>("merge", "request", "std::shared_ptr<PresentationsMergeRequest>", paramRequest);
	utils->initialize("merge", "request", "std::shared_ptr<PresentationsMergeRequest>", paramRequest);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("merge", "request", "std::shared_ptr<PresentationsMergeRequest>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("merge", "request", "std::shared_ptr<PresentationsMergeRequest>", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("merge", "request", "std::shared_ptr<PresentationsMergeRequest>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("merge", "request", "std::shared_ptr<PresentationsMergeRequest>", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("merge", "request", "std::shared_ptr<PresentationsMergeRequest>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("merge", "name", "utility::string_t");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request", "std::shared_ptr<PresentationsMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("merge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("merge", "password", "utility::string_t", paramPassword);
	utils->initialize("merge", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("merge", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("merge", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("merge", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("merge", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("merge", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("merge", "name", "utility::string_t");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request", "std::shared_ptr<PresentationsMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("merge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("merge", "folder", "utility::string_t", paramFolder);
	utils->initialize("merge", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("merge", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("merge", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("merge", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("merge", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("merge", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("merge", "name", "utility::string_t");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request", "std::shared_ptr<PresentationsMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("merge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("merge", "storage", "utility::string_t", paramStorage);
	utils->initialize("merge", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("merge", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("merge", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("merge", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("merge", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("merge", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeAndSaveOnline) {
	utility::string_t paramOutPath = utils->getTestValue("mergeAndSaveOnline", "outPath", "utility::string_t");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramStorage = utils->getTestValue("mergeAndSaveOnline", "storage", "utility::string_t");
	utils->initialize("mergeAndSaveOnline", "", "");
	utils->getSlidesApi()->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage).wait();
}

TEST_F(SlidesApiTest, mergeAndSaveOnlineInvalidOutPath) {
	utility::string_t paramOutPath = utils->getTestValue("mergeAndSaveOnline", "outPath", "utility::string_t");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramStorage = utils->getTestValue("mergeAndSaveOnline", "storage", "utility::string_t");
	paramOutPath = utils->getInvalidTestValue("mergeAndSaveOnline", "outPath", "utility::string_t", paramOutPath);
	utils->initialize("mergeAndSaveOnline", "outPath", "utility::string_t", paramOutPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "outPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "outPath", "utility::string_t", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "outPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "outPath", "utility::string_t", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeAndSaveOnline", "outPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeAndSaveOnlineInvalidFiles) {
	utility::string_t paramOutPath = utils->getTestValue("mergeAndSaveOnline", "outPath", "utility::string_t");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramStorage = utils->getTestValue("mergeAndSaveOnline", "storage", "utility::string_t");
	paramFiles = utils->getInvalidBinArrayTestValue("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);
	utils->initialize("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeAndSaveOnlineInvalidRequest) {
	utility::string_t paramOutPath = utils->getTestValue("mergeAndSaveOnline", "outPath", "utility::string_t");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramStorage = utils->getTestValue("mergeAndSaveOnline", "storage", "utility::string_t");
	paramRequest = utils->getInvalidTestValueForClass<>("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);
	utils->initialize("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeAndSaveOnlineInvalidStorage) {
	utility::string_t paramOutPath = utils->getTestValue("mergeAndSaveOnline", "outPath", "utility::string_t");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeAndSaveOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeAndSaveOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramStorage = utils->getTestValue("mergeAndSaveOnline", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("mergeAndSaveOnline", "storage", "utility::string_t", paramStorage);
	utils->initialize("mergeAndSaveOnline", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeAndSaveOnline", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeOnline) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramStorage = utils->getTestValue("mergeOnline", "storage", "utility::string_t");
	utils->initialize("mergeOnline", "", "");
	HttpContent result = utils->getSlidesApi()->mergeOnline(paramFiles, paramRequest, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, mergeOnlineInvalidFiles) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramStorage = utils->getTestValue("mergeOnline", "storage", "utility::string_t");
	paramFiles = utils->getInvalidBinArrayTestValue("mergeOnline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);
	utils->initialize("mergeOnline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeOnline(paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeOnline", "files", "std::vector<std::shared_ptr<HttpContent>>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeOnlineInvalidRequest) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramStorage = utils->getTestValue("mergeOnline", "storage", "utility::string_t");
	paramRequest = utils->getInvalidTestValueForClass<>("mergeOnline", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);
	utils->initialize("mergeOnline", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeOnline(paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeOnline", "request", "std::shared_ptr<OrderedMergeRequest>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeOnlineInvalidStorage) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeOnline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeOnline", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramStorage = utils->getTestValue("mergeOnline", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("mergeOnline", "storage", "utility::string_t", paramStorage);
	utils->initialize("mergeOnline", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeOnline(paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeOnline", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeTableCells) {
	utility::string_t paramName = utils->getTestValue("mergeTableCells", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("mergeTableCells", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("mergeTableCells", "shapeIndex", "int32_t");
	std::shared_ptr<TableCellMergeOptions> paramTableCellMergeOptions = utils->getTestValueForClass<TableCellMergeOptions>("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>");
	utility::string_t paramPassword = utils->getTestValue("mergeTableCells", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("mergeTableCells", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("mergeTableCells", "storage", "utility::string_t");
	utils->initialize("mergeTableCells", "", "");
	std::shared_ptr<Table> result = utils->getSlidesApi()->mergeTableCells(paramName, paramSlideIndex, paramShapeIndex, paramTableCellMergeOptions, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, mergeTableCellsInvalidName) {
	utility::string_t paramName = utils->getTestValue("mergeTableCells", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("mergeTableCells", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("mergeTableCells", "shapeIndex", "int32_t");
	std::shared_ptr<TableCellMergeOptions> paramTableCellMergeOptions = utils->getTestValueForClass<TableCellMergeOptions>("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>");
	utility::string_t paramPassword = utils->getTestValue("mergeTableCells", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("mergeTableCells", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("mergeTableCells", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("mergeTableCells", "name", "utility::string_t", paramName);
	utils->initialize("mergeTableCells", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeTableCells(paramName, paramSlideIndex, paramShapeIndex, paramTableCellMergeOptions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeTableCells", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeTableCellsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("mergeTableCells", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("mergeTableCells", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("mergeTableCells", "shapeIndex", "int32_t");
	std::shared_ptr<TableCellMergeOptions> paramTableCellMergeOptions = utils->getTestValueForClass<TableCellMergeOptions>("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>");
	utility::string_t paramPassword = utils->getTestValue("mergeTableCells", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("mergeTableCells", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("mergeTableCells", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("mergeTableCells", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("mergeTableCells", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeTableCells(paramName, paramSlideIndex, paramShapeIndex, paramTableCellMergeOptions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeTableCells", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeTableCellsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("mergeTableCells", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("mergeTableCells", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("mergeTableCells", "shapeIndex", "int32_t");
	std::shared_ptr<TableCellMergeOptions> paramTableCellMergeOptions = utils->getTestValueForClass<TableCellMergeOptions>("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>");
	utility::string_t paramPassword = utils->getTestValue("mergeTableCells", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("mergeTableCells", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("mergeTableCells", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("mergeTableCells", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("mergeTableCells", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeTableCells(paramName, paramSlideIndex, paramShapeIndex, paramTableCellMergeOptions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeTableCells", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeTableCellsInvalidTableCellMergeOptions) {
	utility::string_t paramName = utils->getTestValue("mergeTableCells", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("mergeTableCells", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("mergeTableCells", "shapeIndex", "int32_t");
	std::shared_ptr<TableCellMergeOptions> paramTableCellMergeOptions = utils->getTestValueForClass<TableCellMergeOptions>("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>");
	utility::string_t paramPassword = utils->getTestValue("mergeTableCells", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("mergeTableCells", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("mergeTableCells", "storage", "utility::string_t");
	paramTableCellMergeOptions = utils->getInvalidTestValueForClass<>("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>", paramTableCellMergeOptions);
	utils->initialize("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>", paramTableCellMergeOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeTableCells(paramName, paramSlideIndex, paramShapeIndex, paramTableCellMergeOptions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>", paramTableCellMergeOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>", paramTableCellMergeOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeTableCellsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("mergeTableCells", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("mergeTableCells", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("mergeTableCells", "shapeIndex", "int32_t");
	std::shared_ptr<TableCellMergeOptions> paramTableCellMergeOptions = utils->getTestValueForClass<TableCellMergeOptions>("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>");
	utility::string_t paramPassword = utils->getTestValue("mergeTableCells", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("mergeTableCells", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("mergeTableCells", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("mergeTableCells", "password", "utility::string_t", paramPassword);
	utils->initialize("mergeTableCells", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeTableCells(paramName, paramSlideIndex, paramShapeIndex, paramTableCellMergeOptions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeTableCells", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeTableCellsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("mergeTableCells", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("mergeTableCells", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("mergeTableCells", "shapeIndex", "int32_t");
	std::shared_ptr<TableCellMergeOptions> paramTableCellMergeOptions = utils->getTestValueForClass<TableCellMergeOptions>("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>");
	utility::string_t paramPassword = utils->getTestValue("mergeTableCells", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("mergeTableCells", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("mergeTableCells", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("mergeTableCells", "folder", "utility::string_t", paramFolder);
	utils->initialize("mergeTableCells", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeTableCells(paramName, paramSlideIndex, paramShapeIndex, paramTableCellMergeOptions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeTableCells", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeTableCellsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("mergeTableCells", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("mergeTableCells", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("mergeTableCells", "shapeIndex", "int32_t");
	std::shared_ptr<TableCellMergeOptions> paramTableCellMergeOptions = utils->getTestValueForClass<TableCellMergeOptions>("mergeTableCells", "tableCellMergeOptions", "std::shared_ptr<TableCellMergeOptions>");
	utility::string_t paramPassword = utils->getTestValue("mergeTableCells", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("mergeTableCells", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("mergeTableCells", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("mergeTableCells", "storage", "utility::string_t", paramStorage);
	utils->initialize("mergeTableCells", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->mergeTableCells(paramName, paramSlideIndex, paramShapeIndex, paramTableCellMergeOptions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeTableCells", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeTableCells", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeTableCells", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFile) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId", "utility::string_t");
	utils->initialize("moveFile", "", "");
	utils->getSlidesApi()->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
}

TEST_F(SlidesApiTest, moveFileInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId", "utility::string_t");
	paramSrcPath = utils->getInvalidTestValue("moveFile", "srcPath", "utility::string_t", paramSrcPath);
	utils->initialize("moveFile", "srcPath", "utility::string_t", paramSrcPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcPath", "utility::string_t", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcPath", "utility::string_t", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "srcPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId", "utility::string_t");
	paramDestPath = utils->getInvalidTestValue("moveFile", "destPath", "utility::string_t", paramDestPath);
	utils->initialize("moveFile", "destPath", "utility::string_t", paramDestPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "destPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "destPath", "utility::string_t", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "destPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "destPath", "utility::string_t", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "destPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId", "utility::string_t");
	paramSrcStorageName = utils->getInvalidTestValue("moveFile", "srcStorageName", "utility::string_t", paramSrcStorageName);
	utils->initialize("moveFile", "srcStorageName", "utility::string_t", paramSrcStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcStorageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcStorageName", "utility::string_t", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcStorageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcStorageName", "utility::string_t", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "srcStorageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId", "utility::string_t");
	paramDestStorageName = utils->getInvalidTestValue("moveFile", "destStorageName", "utility::string_t", paramDestStorageName);
	utils->initialize("moveFile", "destStorageName", "utility::string_t", paramDestStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "destStorageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "destStorageName", "utility::string_t", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "destStorageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "destStorageName", "utility::string_t", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "destStorageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidVersionId) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId", "utility::string_t");
	paramVersionId = utils->getInvalidTestValue("moveFile", "versionId", "utility::string_t", paramVersionId);
	utils->initialize("moveFile", "versionId", "utility::string_t", paramVersionId);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "versionId", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "versionId", "utility::string_t", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "versionId", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "versionId", "utility::string_t", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "versionId", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolder) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName", "utility::string_t");
	utils->initialize("moveFolder", "", "");
	utils->getSlidesApi()->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
}

TEST_F(SlidesApiTest, moveFolderInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName", "utility::string_t");
	paramSrcPath = utils->getInvalidTestValue("moveFolder", "srcPath", "utility::string_t", paramSrcPath);
	utils->initialize("moveFolder", "srcPath", "utility::string_t", paramSrcPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcPath", "utility::string_t", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcPath", "utility::string_t", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "srcPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName", "utility::string_t");
	paramDestPath = utils->getInvalidTestValue("moveFolder", "destPath", "utility::string_t", paramDestPath);
	utils->initialize("moveFolder", "destPath", "utility::string_t", paramDestPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destPath", "utility::string_t", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destPath", "utility::string_t", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "destPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName", "utility::string_t");
	paramSrcStorageName = utils->getInvalidTestValue("moveFolder", "srcStorageName", "utility::string_t", paramSrcStorageName);
	utils->initialize("moveFolder", "srcStorageName", "utility::string_t", paramSrcStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcStorageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcStorageName", "utility::string_t", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcStorageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcStorageName", "utility::string_t", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "srcStorageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath", "utility::string_t");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath", "utility::string_t");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName", "utility::string_t");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName", "utility::string_t");
	paramDestStorageName = utils->getInvalidTestValue("moveFolder", "destStorageName", "utility::string_t", paramDestStorageName);
	utils->initialize("moveFolder", "destStorageName", "utility::string_t", paramDestStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destStorageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destStorageName", "utility::string_t", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destStorageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destStorageName", "utility::string_t", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "destStorageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSection) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage", "utility::string_t");
	utils->initialize("moveSection", "", "");
	std::shared_ptr<Sections> result = utils->getSlidesApi()->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, moveSectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("moveSection", "name", "utility::string_t", paramName);
	utils->initialize("moveSection", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSectionInvalidSectionIndex) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage", "utility::string_t");
	paramSectionIndex = utils->getInvalidIntTestValue("moveSection", "sectionIndex", "int32_t", paramSectionIndex).value();
	utils->initialize("moveSection", "sectionIndex", "int32_t", paramSectionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "sectionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "sectionIndex", "int32_t", paramSectionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "sectionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "sectionIndex", "int32_t", paramSectionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "sectionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSectionInvalidNewPosition) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage", "utility::string_t");
	paramNewPosition = utils->getInvalidIntTestValue("moveSection", "newPosition", "int32_t", paramNewPosition).value();
	utils->initialize("moveSection", "newPosition", "int32_t", paramNewPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "newPosition", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "newPosition", "int32_t", paramNewPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "newPosition", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "newPosition", "int32_t", paramNewPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "newPosition", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("moveSection", "password", "utility::string_t", paramPassword);
	utils->initialize("moveSection", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("moveSection", "folder", "utility::string_t", paramFolder);
	utils->initialize("moveSection", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("moveSection", "storage", "utility::string_t", paramStorage);
	utils->initialize("moveSection", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlide) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage", "utility::string_t");
	utils->initialize("moveSlide", "", "");
	std::shared_ptr<Slides> result = utils->getSlidesApi()->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, moveSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("moveSlide", "name", "utility::string_t", paramName);
	utils->initialize("moveSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("moveSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("moveSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlideInvalidNewPosition) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage", "utility::string_t");
	paramNewPosition = utils->getInvalidIntTestValue("moveSlide", "newPosition", "int32_t", paramNewPosition).value();
	utils->initialize("moveSlide", "newPosition", "int32_t", paramNewPosition);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "newPosition", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "newPosition", "int32_t", paramNewPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "newPosition", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "newPosition", "int32_t", paramNewPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "newPosition", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("moveSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("moveSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("moveSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("moveSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex", "int32_t");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("moveSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("moveSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExists) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage", "utility::string_t");
	utils->initialize("notesSlideExists", "", "");
	std::shared_ptr<EntityExists> result = utils->getSlidesApi()->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, notesSlideExistsInvalidName) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("notesSlideExists", "name", "utility::string_t", paramName);
	utils->initialize("notesSlideExists", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExists", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("notesSlideExists", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("notesSlideExists", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExists", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("notesSlideExists", "password", "utility::string_t", paramPassword);
	utils->initialize("notesSlideExists", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExists", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("notesSlideExists", "folder", "utility::string_t", paramFolder);
	utils->initialize("notesSlideExists", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExists", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("notesSlideExists", "storage", "utility::string_t", paramStorage);
	utils->initialize("notesSlideExists", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExists", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("notesSlideExistsOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExistsOnline", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExistsOnline", "password", "utility::string_t");
	utils->initialize("notesSlideExistsOnline", "", "");
	std::shared_ptr<EntityExists> result = utils->getSlidesApi()->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, notesSlideExistsOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("notesSlideExistsOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExistsOnline", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExistsOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("notesSlideExistsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("notesSlideExistsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExistsOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("notesSlideExistsOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExistsOnline", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExistsOnline", "password", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("notesSlideExistsOnline", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("notesSlideExistsOnline", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExistsOnline", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("notesSlideExistsOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExistsOnline", "slideIndex", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExistsOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("notesSlideExistsOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("notesSlideExistsOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExistsOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExists) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId", "utility::string_t");
	utils->initialize("objectExists", "", "");
	std::shared_ptr<ObjectExist> result = utils->getSlidesApi()->objectExists(paramPath, paramStorageName, paramVersionId).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, objectExistsInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId", "utility::string_t");
	paramPath = utils->getInvalidTestValue("objectExists", "path", "utility::string_t", paramPath);
	utils->initialize("objectExists", "path", "utility::string_t", paramPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->objectExists(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "path", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "path", "utility::string_t", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "path", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "path", "utility::string_t", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "path", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExistsInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId", "utility::string_t");
	paramStorageName = utils->getInvalidTestValue("objectExists", "storageName", "utility::string_t", paramStorageName);
	utils->initialize("objectExists", "storageName", "utility::string_t", paramStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->objectExists(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "storageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "storageName", "utility::string_t", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "storageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "storageName", "utility::string_t", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "storageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExistsInvalidVersionId) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path", "utility::string_t");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName", "utility::string_t");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId", "utility::string_t");
	paramVersionId = utils->getInvalidTestValue("objectExists", "versionId", "utility::string_t", paramVersionId);
	utils->initialize("objectExists", "versionId", "utility::string_t", paramVersionId);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->objectExists(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "versionId", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "versionId", "utility::string_t", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "versionId", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "versionId", "utility::string_t", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "versionId", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, orderedMerge) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name", "utility::string_t");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage", "utility::string_t");
	utils->initialize("orderedMerge", "", "");
	std::shared_ptr<Document> result = utils->getSlidesApi()->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, orderedMergeInvalidName) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name", "utility::string_t");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("orderedMerge", "name", "utility::string_t", paramName);
	utils->initialize("orderedMerge", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("orderedMerge", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, orderedMergeInvalidRequest) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name", "utility::string_t");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage", "utility::string_t");
	paramRequest = utils->getInvalidTestValueForClass<>("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);
	utils->initialize("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, orderedMergeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name", "utility::string_t");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("orderedMerge", "password", "utility::string_t", paramPassword);
	utils->initialize("orderedMerge", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("orderedMerge", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, orderedMergeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name", "utility::string_t");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("orderedMerge", "folder", "utility::string_t", paramFolder);
	utils->initialize("orderedMerge", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("orderedMerge", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, orderedMergeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name", "utility::string_t");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request", "std::shared_ptr<OrderedMergeRequest>");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("orderedMerge", "storage", "utility::string_t", paramStorage);
	utils->initialize("orderedMerge", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("orderedMerge", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, pipeline) {
	std::shared_ptr<Pipeline> paramPipeline = utils->getTestValueForClass<Pipeline>("pipeline", "pipeline", "std::shared_ptr<Pipeline>");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("pipeline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	utils->initialize("pipeline", "", "");
	HttpContent result = utils->getSlidesApi()->pipeline(paramPipeline, paramFiles).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, pipelineInvalidPipeline) {
	std::shared_ptr<Pipeline> paramPipeline = utils->getTestValueForClass<Pipeline>("pipeline", "pipeline", "std::shared_ptr<Pipeline>");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("pipeline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	paramPipeline = utils->getInvalidTestValueForClass<>("pipeline", "pipeline", "std::shared_ptr<Pipeline>", paramPipeline);
	utils->initialize("pipeline", "pipeline", "std::shared_ptr<Pipeline>", paramPipeline);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->pipeline(paramPipeline, paramFiles).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("pipeline", "pipeline", "std::shared_ptr<Pipeline>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("pipeline", "pipeline", "std::shared_ptr<Pipeline>", paramPipeline);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("pipeline", "pipeline", "std::shared_ptr<Pipeline>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("pipeline", "pipeline", "std::shared_ptr<Pipeline>", paramPipeline);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("pipeline", "pipeline", "std::shared_ptr<Pipeline>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, pipelineInvalidFiles) {
	std::shared_ptr<Pipeline> paramPipeline = utils->getTestValueForClass<Pipeline>("pipeline", "pipeline", "std::shared_ptr<Pipeline>");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("pipeline", "files", "std::vector<std::shared_ptr<HttpContent>>");
	paramFiles = utils->getInvalidBinArrayTestValue("pipeline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);
	utils->initialize("pipeline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->pipeline(paramPipeline, paramFiles).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("pipeline", "files", "std::vector<std::shared_ptr<HttpContent>>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("pipeline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("pipeline", "files", "std::vector<std::shared_ptr<HttpContent>>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("pipeline", "files", "std::vector<std::shared_ptr<HttpContent>>", paramFiles);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("pipeline", "files", "std::vector<std::shared_ptr<HttpContent>>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlides) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name", "utility::string_t");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions", "std::vector<int32_t>");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage", "utility::string_t");
	utils->initialize("reorderSlides", "", "");
	std::shared_ptr<Slides> result = utils->getSlidesApi()->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, reorderSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name", "utility::string_t");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions", "std::vector<int32_t>");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("reorderSlides", "name", "utility::string_t", paramName);
	utils->initialize("reorderSlides", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlidesInvalidOldPositions) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name", "utility::string_t");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions", "std::vector<int32_t>");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage", "utility::string_t");
	paramOldPositions = utils->getInvalidIntVectorTestValue("reorderSlides", "oldPositions", "std::vector<int32_t>", paramOldPositions);
	utils->initialize("reorderSlides", "oldPositions", "std::vector<int32_t>", paramOldPositions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "oldPositions", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "oldPositions", "std::vector<int32_t>", paramOldPositions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "oldPositions", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "oldPositions", "std::vector<int32_t>", paramOldPositions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "oldPositions", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlidesInvalidNewPositions) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name", "utility::string_t");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions", "std::vector<int32_t>");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage", "utility::string_t");
	paramNewPositions = utils->getInvalidIntVectorTestValue("reorderSlides", "newPositions", "std::vector<int32_t>", paramNewPositions);
	utils->initialize("reorderSlides", "newPositions", "std::vector<int32_t>", paramNewPositions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "newPositions", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "newPositions", "std::vector<int32_t>", paramNewPositions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "newPositions", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "newPositions", "std::vector<int32_t>", paramNewPositions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "newPositions", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name", "utility::string_t");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions", "std::vector<int32_t>");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("reorderSlides", "password", "utility::string_t", paramPassword);
	utils->initialize("reorderSlides", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name", "utility::string_t");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions", "std::vector<int32_t>");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("reorderSlides", "folder", "utility::string_t", paramFolder);
	utils->initialize("reorderSlides", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name", "utility::string_t");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions", "std::vector<int32_t>");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions", "std::vector<int32_t>");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("reorderSlides", "storage", "utility::string_t", paramStorage);
	utils->initialize("reorderSlides", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFont) {
	utility::string_t paramName = utils->getTestValue("replaceFont", "name", "utility::string_t");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFont", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFont", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFont", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFont", "fontsFolder", "utility::string_t");
	utils->initialize("replaceFont", "", "");
	std::shared_ptr<FontsData> result = utils->getSlidesApi()->replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, replaceFontInvalidName) {
	utility::string_t paramName = utils->getTestValue("replaceFont", "name", "utility::string_t");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFont", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFont", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFont", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFont", "fontsFolder", "utility::string_t");
	paramName = utils->getInvalidTestValue("replaceFont", "name", "utility::string_t", paramName);
	utils->initialize("replaceFont", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFont", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFont", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFont", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFont", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFont", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontInvalidSourceFont) {
	utility::string_t paramName = utils->getTestValue("replaceFont", "name", "utility::string_t");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFont", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFont", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFont", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFont", "fontsFolder", "utility::string_t");
	paramSourceFont = utils->getInvalidTestValue("replaceFont", "sourceFont", "utility::string_t", paramSourceFont);
	utils->initialize("replaceFont", "sourceFont", "utility::string_t", paramSourceFont);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFont", "sourceFont", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFont", "sourceFont", "utility::string_t", paramSourceFont);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFont", "sourceFont", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFont", "sourceFont", "utility::string_t", paramSourceFont);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFont", "sourceFont", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontInvalidTargetFont) {
	utility::string_t paramName = utils->getTestValue("replaceFont", "name", "utility::string_t");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFont", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFont", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFont", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFont", "fontsFolder", "utility::string_t");
	paramTargetFont = utils->getInvalidTestValue("replaceFont", "targetFont", "utility::string_t", paramTargetFont);
	utils->initialize("replaceFont", "targetFont", "utility::string_t", paramTargetFont);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFont", "targetFont", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFont", "targetFont", "utility::string_t", paramTargetFont);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFont", "targetFont", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFont", "targetFont", "utility::string_t", paramTargetFont);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFont", "targetFont", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontInvalidEmbed) {
	utility::string_t paramName = utils->getTestValue("replaceFont", "name", "utility::string_t");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFont", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFont", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFont", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFont", "fontsFolder", "utility::string_t");
	paramEmbed = utils->getInvalidBoolTestValue("replaceFont", "embed", "bool", paramEmbed).value();
	utils->initialize("replaceFont", "embed", "bool", paramEmbed);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFont", "embed", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFont", "embed", "bool", paramEmbed);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFont", "embed", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFont", "embed", "bool", paramEmbed);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFont", "embed", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("replaceFont", "name", "utility::string_t");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFont", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFont", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFont", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFont", "fontsFolder", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("replaceFont", "password", "utility::string_t", paramPassword);
	utils->initialize("replaceFont", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFont", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFont", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFont", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFont", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFont", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("replaceFont", "name", "utility::string_t");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFont", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFont", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFont", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFont", "fontsFolder", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("replaceFont", "folder", "utility::string_t", paramFolder);
	utils->initialize("replaceFont", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFont", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFont", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFont", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFont", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFont", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("replaceFont", "name", "utility::string_t");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFont", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFont", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFont", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFont", "fontsFolder", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("replaceFont", "storage", "utility::string_t", paramStorage);
	utils->initialize("replaceFont", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFont", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFont", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFont", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFont", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFont", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("replaceFont", "name", "utility::string_t");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFont", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFont", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFont", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFont", "fontsFolder", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("replaceFont", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("replaceFont", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFont", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFont", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFont", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFont", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFont", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFontOnline", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFontOnline", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFontOnline", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFontOnline", "fontsFolder", "utility::string_t");
	utils->initialize("replaceFontOnline", "", "");
	HttpContent result = utils->getSlidesApi()->replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, replaceFontOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFontOnline", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFontOnline", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFontOnline", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFontOnline", "fontsFolder", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("replaceFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("replaceFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFontOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontOnlineInvalidSourceFont) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFontOnline", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFontOnline", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFontOnline", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFontOnline", "fontsFolder", "utility::string_t");
	paramSourceFont = utils->getInvalidTestValue("replaceFontOnline", "sourceFont", "utility::string_t", paramSourceFont);
	utils->initialize("replaceFontOnline", "sourceFont", "utility::string_t", paramSourceFont);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "sourceFont", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "sourceFont", "utility::string_t", paramSourceFont);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "sourceFont", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "sourceFont", "utility::string_t", paramSourceFont);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFontOnline", "sourceFont", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontOnlineInvalidTargetFont) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFontOnline", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFontOnline", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFontOnline", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFontOnline", "fontsFolder", "utility::string_t");
	paramTargetFont = utils->getInvalidTestValue("replaceFontOnline", "targetFont", "utility::string_t", paramTargetFont);
	utils->initialize("replaceFontOnline", "targetFont", "utility::string_t", paramTargetFont);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "targetFont", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "targetFont", "utility::string_t", paramTargetFont);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "targetFont", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "targetFont", "utility::string_t", paramTargetFont);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFontOnline", "targetFont", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontOnlineInvalidEmbed) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFontOnline", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFontOnline", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFontOnline", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFontOnline", "fontsFolder", "utility::string_t");
	paramEmbed = utils->getInvalidBoolTestValue("replaceFontOnline", "embed", "bool", paramEmbed).value();
	utils->initialize("replaceFontOnline", "embed", "bool", paramEmbed);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "embed", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "embed", "bool", paramEmbed);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "embed", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "embed", "bool", paramEmbed);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFontOnline", "embed", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFontOnline", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFontOnline", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFontOnline", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFontOnline", "fontsFolder", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("replaceFontOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("replaceFontOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFontOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceFontOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramSourceFont = utils->getTestValue("replaceFontOnline", "sourceFont", "utility::string_t");
	utility::string_t paramTargetFont = utils->getTestValue("replaceFontOnline", "targetFont", "utility::string_t");
	auto paramEmbed = utils->getOptionalBoolTestValue("replaceFontOnline", "embed", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("replaceFontOnline", "fontsFolder", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("replaceFontOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("replaceFontOnline", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceFontOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceFontOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceFontOnline", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceImage) {
	utility::string_t paramName = utils->getTestValue("replaceImage", "name", "utility::string_t");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImage", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImage", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceImage", "storage", "utility::string_t");
	utils->initialize("replaceImage", "", "");
	utils->getSlidesApi()->replaceImage(paramName, paramImageIndex, paramImage, paramPassword, paramFolder, paramStorage).wait();
}

TEST_F(SlidesApiTest, replaceImageInvalidName) {
	utility::string_t paramName = utils->getTestValue("replaceImage", "name", "utility::string_t");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImage", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImage", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceImage", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("replaceImage", "name", "utility::string_t", paramName);
	utils->initialize("replaceImage", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceImage(paramName, paramImageIndex, paramImage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceImage", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceImage", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceImage", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceImage", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceImage", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceImageInvalidImageIndex) {
	utility::string_t paramName = utils->getTestValue("replaceImage", "name", "utility::string_t");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImage", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImage", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceImage", "storage", "utility::string_t");
	paramImageIndex = utils->getInvalidIntTestValue("replaceImage", "imageIndex", "int32_t", paramImageIndex).value();
	utils->initialize("replaceImage", "imageIndex", "int32_t", paramImageIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceImage(paramName, paramImageIndex, paramImage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceImage", "imageIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceImage", "imageIndex", "int32_t", paramImageIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceImage", "imageIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceImage", "imageIndex", "int32_t", paramImageIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceImage", "imageIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceImageInvalidImage) {
	utility::string_t paramName = utils->getTestValue("replaceImage", "name", "utility::string_t");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImage", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImage", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceImage", "storage", "utility::string_t");
	paramImage = utils->getInvalidBinaryTestValue("replaceImage", "image", "std::shared_ptr<HttpContent>", paramImage);
	utils->initialize("replaceImage", "image", "std::shared_ptr<HttpContent>", paramImage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceImage(paramName, paramImageIndex, paramImage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceImage", "image", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceImage", "image", "std::shared_ptr<HttpContent>", paramImage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceImage", "image", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceImage", "image", "std::shared_ptr<HttpContent>", paramImage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceImage", "image", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceImageInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("replaceImage", "name", "utility::string_t");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImage", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImage", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceImage", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("replaceImage", "password", "utility::string_t", paramPassword);
	utils->initialize("replaceImage", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceImage(paramName, paramImageIndex, paramImage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceImage", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceImage", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceImage", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceImage", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceImage", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceImageInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("replaceImage", "name", "utility::string_t");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImage", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImage", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceImage", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("replaceImage", "folder", "utility::string_t", paramFolder);
	utils->initialize("replaceImage", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceImage(paramName, paramImageIndex, paramImage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceImage", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceImage", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceImage", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceImage", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceImage", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceImageInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("replaceImage", "name", "utility::string_t");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImage", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImage", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImage", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceImage", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceImage", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("replaceImage", "storage", "utility::string_t", paramStorage);
	utils->initialize("replaceImage", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceImage(paramName, paramImageIndex, paramImage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceImage", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceImage", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceImage", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceImage", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceImage", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceImageOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceImageOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImageOnline", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImageOnline", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImageOnline", "password", "utility::string_t");
	utils->initialize("replaceImageOnline", "", "");
	HttpContent result = utils->getSlidesApi()->replaceImageOnline(paramDocument, paramImageIndex, paramImage, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, replaceImageOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceImageOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImageOnline", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImageOnline", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImageOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("replaceImageOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("replaceImageOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceImageOnline(paramDocument, paramImageIndex, paramImage, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceImageOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceImageOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceImageOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceImageOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceImageOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceImageOnlineInvalidImageIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceImageOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImageOnline", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImageOnline", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImageOnline", "password", "utility::string_t");
	paramImageIndex = utils->getInvalidIntTestValue("replaceImageOnline", "imageIndex", "int32_t", paramImageIndex).value();
	utils->initialize("replaceImageOnline", "imageIndex", "int32_t", paramImageIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceImageOnline(paramDocument, paramImageIndex, paramImage, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceImageOnline", "imageIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceImageOnline", "imageIndex", "int32_t", paramImageIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceImageOnline", "imageIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceImageOnline", "imageIndex", "int32_t", paramImageIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceImageOnline", "imageIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceImageOnlineInvalidImage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceImageOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImageOnline", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImageOnline", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImageOnline", "password", "utility::string_t");
	paramImage = utils->getInvalidBinaryTestValue("replaceImageOnline", "image", "std::shared_ptr<HttpContent>", paramImage);
	utils->initialize("replaceImageOnline", "image", "std::shared_ptr<HttpContent>", paramImage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceImageOnline(paramDocument, paramImageIndex, paramImage, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceImageOnline", "image", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceImageOnline", "image", "std::shared_ptr<HttpContent>", paramImage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceImageOnline", "image", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceImageOnline", "image", "std::shared_ptr<HttpContent>", paramImage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceImageOnline", "image", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceImageOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceImageOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramImageIndex = utils->getIntTestValue("replaceImageOnline", "imageIndex", "int32_t");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("replaceImageOnline", "image", "std::shared_ptr<HttpContent>");
	utility::string_t paramPassword = utils->getTestValue("replaceImageOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("replaceImageOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("replaceImageOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceImageOnline(paramDocument, paramImageIndex, paramImage, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceImageOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceImageOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceImageOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceImageOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceImageOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationText) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage", "utility::string_t");
	utils->initialize("replacePresentationText", "", "");
	std::shared_ptr<DocumentReplaceResult> result = utils->getSlidesApi()->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidName) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("replacePresentationText", "name", "utility::string_t", paramName);
	utils->initialize("replacePresentationText", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidOldValue) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage", "utility::string_t");
	paramOldValue = utils->getInvalidTestValue("replacePresentationText", "oldValue", "utility::string_t", paramOldValue);
	utils->initialize("replacePresentationText", "oldValue", "utility::string_t", paramOldValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "oldValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "oldValue", "utility::string_t", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "oldValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "oldValue", "utility::string_t", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "oldValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidNewValue) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage", "utility::string_t");
	paramNewValue = utils->getInvalidTestValue("replacePresentationText", "newValue", "utility::string_t", paramNewValue);
	utils->initialize("replacePresentationText", "newValue", "utility::string_t", paramNewValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "newValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "newValue", "utility::string_t", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "newValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "newValue", "utility::string_t", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "newValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidIgnoreCase) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage", "utility::string_t");
	paramIgnoreCase = utils->getInvalidBoolTestValue("replacePresentationText", "ignoreCase", "bool", paramIgnoreCase).value();
	utils->initialize("replacePresentationText", "ignoreCase", "bool", paramIgnoreCase);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "ignoreCase", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "ignoreCase", "bool", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "ignoreCase", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "ignoreCase", "bool", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "ignoreCase", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("replacePresentationText", "password", "utility::string_t", paramPassword);
	utils->initialize("replacePresentationText", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("replacePresentationText", "folder", "utility::string_t", paramFolder);
	utils->initialize("replacePresentationText", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("replacePresentationText", "storage", "utility::string_t", paramStorage);
	utils->initialize("replacePresentationText", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password", "utility::string_t");
	utils->initialize("replacePresentationTextOnline", "", "");
	HttpContent result = utils->getSlidesApi()->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, replacePresentationTextOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextOnlineInvalidOldValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password", "utility::string_t");
	paramOldValue = utils->getInvalidTestValue("replacePresentationTextOnline", "oldValue", "utility::string_t", paramOldValue);
	utils->initialize("replacePresentationTextOnline", "oldValue", "utility::string_t", paramOldValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "oldValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "oldValue", "utility::string_t", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "oldValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "oldValue", "utility::string_t", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationTextOnline", "oldValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextOnlineInvalidNewValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password", "utility::string_t");
	paramNewValue = utils->getInvalidTestValue("replacePresentationTextOnline", "newValue", "utility::string_t", paramNewValue);
	utils->initialize("replacePresentationTextOnline", "newValue", "utility::string_t", paramNewValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "newValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "newValue", "utility::string_t", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "newValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "newValue", "utility::string_t", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationTextOnline", "newValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextOnlineInvalidIgnoreCase) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password", "utility::string_t");
	paramIgnoreCase = utils->getInvalidBoolTestValue("replacePresentationTextOnline", "ignoreCase", "bool", paramIgnoreCase).value();
	utils->initialize("replacePresentationTextOnline", "ignoreCase", "bool", paramIgnoreCase);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "ignoreCase", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "ignoreCase", "bool", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "ignoreCase", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "ignoreCase", "bool", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationTextOnline", "ignoreCase", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("replacePresentationTextOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("replacePresentationTextOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationTextOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideText) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage", "utility::string_t");
	utils->initialize("replaceSlideText", "", "");
	std::shared_ptr<SlideReplaceResult> result = utils->getSlidesApi()->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidName) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("replaceSlideText", "name", "utility::string_t", paramName);
	utils->initialize("replaceSlideText", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("replaceSlideText", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("replaceSlideText", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidOldValue) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage", "utility::string_t");
	paramOldValue = utils->getInvalidTestValue("replaceSlideText", "oldValue", "utility::string_t", paramOldValue);
	utils->initialize("replaceSlideText", "oldValue", "utility::string_t", paramOldValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "oldValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "oldValue", "utility::string_t", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "oldValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "oldValue", "utility::string_t", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "oldValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidNewValue) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage", "utility::string_t");
	paramNewValue = utils->getInvalidTestValue("replaceSlideText", "newValue", "utility::string_t", paramNewValue);
	utils->initialize("replaceSlideText", "newValue", "utility::string_t", paramNewValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "newValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "newValue", "utility::string_t", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "newValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "newValue", "utility::string_t", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "newValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidIgnoreCase) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage", "utility::string_t");
	paramIgnoreCase = utils->getInvalidBoolTestValue("replaceSlideText", "ignoreCase", "bool", paramIgnoreCase).value();
	utils->initialize("replaceSlideText", "ignoreCase", "bool", paramIgnoreCase);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "ignoreCase", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "ignoreCase", "bool", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "ignoreCase", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "ignoreCase", "bool", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "ignoreCase", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("replaceSlideText", "password", "utility::string_t", paramPassword);
	utils->initialize("replaceSlideText", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("replaceSlideText", "folder", "utility::string_t", paramFolder);
	utils->initialize("replaceSlideText", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("replaceSlideText", "storage", "utility::string_t", paramStorage);
	utils->initialize("replaceSlideText", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password", "utility::string_t");
	utils->initialize("replaceSlideTextOnline", "", "");
	HttpContent result = utils->getSlidesApi()->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("replaceSlideTextOnline", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("replaceSlideTextOnline", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidOldValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password", "utility::string_t");
	paramOldValue = utils->getInvalidTestValue("replaceSlideTextOnline", "oldValue", "utility::string_t", paramOldValue);
	utils->initialize("replaceSlideTextOnline", "oldValue", "utility::string_t", paramOldValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "oldValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "oldValue", "utility::string_t", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "oldValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "oldValue", "utility::string_t", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "oldValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidNewValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password", "utility::string_t");
	paramNewValue = utils->getInvalidTestValue("replaceSlideTextOnline", "newValue", "utility::string_t", paramNewValue);
	utils->initialize("replaceSlideTextOnline", "newValue", "utility::string_t", paramNewValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "newValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "newValue", "utility::string_t", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "newValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "newValue", "utility::string_t", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "newValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidIgnoreCase) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password", "utility::string_t");
	paramIgnoreCase = utils->getInvalidBoolTestValue("replaceSlideTextOnline", "ignoreCase", "bool", paramIgnoreCase).value();
	utils->initialize("replaceSlideTextOnline", "ignoreCase", "bool", paramIgnoreCase);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "ignoreCase", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "ignoreCase", "bool", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "ignoreCase", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "ignoreCase", "bool", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "ignoreCase", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex", "int32_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue", "utility::string_t");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("replaceSlideTextOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("replaceSlideTextOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormatting) {
	utility::string_t paramName = utils->getTestValue("replaceTextFormatting", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormatting", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormatting", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormatting", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormatting", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceTextFormatting", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceTextFormatting", "storage", "utility::string_t");
	utils->initialize("replaceTextFormatting", "", "");
	std::shared_ptr<Document> result = utils->getSlidesApi()->replaceTextFormatting(paramName, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, replaceTextFormattingInvalidName) {
	utility::string_t paramName = utils->getTestValue("replaceTextFormatting", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormatting", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormatting", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormatting", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormatting", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceTextFormatting", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceTextFormatting", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("replaceTextFormatting", "name", "utility::string_t", paramName);
	utils->initialize("replaceTextFormatting", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormatting(paramName, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormatting", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingInvalidOldValue) {
	utility::string_t paramName = utils->getTestValue("replaceTextFormatting", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormatting", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormatting", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormatting", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormatting", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceTextFormatting", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceTextFormatting", "storage", "utility::string_t");
	paramOldValue = utils->getInvalidTestValue("replaceTextFormatting", "oldValue", "utility::string_t", paramOldValue);
	utils->initialize("replaceTextFormatting", "oldValue", "utility::string_t", paramOldValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormatting(paramName, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "oldValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "oldValue", "utility::string_t", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "oldValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "oldValue", "utility::string_t", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormatting", "oldValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingInvalidNewValue) {
	utility::string_t paramName = utils->getTestValue("replaceTextFormatting", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormatting", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormatting", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormatting", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormatting", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceTextFormatting", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceTextFormatting", "storage", "utility::string_t");
	paramNewValue = utils->getInvalidTestValue("replaceTextFormatting", "newValue", "utility::string_t", paramNewValue);
	utils->initialize("replaceTextFormatting", "newValue", "utility::string_t", paramNewValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormatting(paramName, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "newValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "newValue", "utility::string_t", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "newValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "newValue", "utility::string_t", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormatting", "newValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingInvalidPortionFormat) {
	utility::string_t paramName = utils->getTestValue("replaceTextFormatting", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormatting", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormatting", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormatting", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormatting", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceTextFormatting", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceTextFormatting", "storage", "utility::string_t");
	paramPortionFormat = utils->getInvalidTestValueForClass<>("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>", paramPortionFormat);
	utils->initialize("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>", paramPortionFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormatting(paramName, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>", paramPortionFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>", paramPortionFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingInvalidWithMasters) {
	utility::string_t paramName = utils->getTestValue("replaceTextFormatting", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormatting", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormatting", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormatting", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormatting", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceTextFormatting", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceTextFormatting", "storage", "utility::string_t");
	paramWithMasters = utils->getInvalidBoolTestValue("replaceTextFormatting", "withMasters", "bool", paramWithMasters).value();
	utils->initialize("replaceTextFormatting", "withMasters", "bool", paramWithMasters);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormatting(paramName, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "withMasters", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "withMasters", "bool", paramWithMasters);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "withMasters", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "withMasters", "bool", paramWithMasters);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormatting", "withMasters", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("replaceTextFormatting", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormatting", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormatting", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormatting", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormatting", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceTextFormatting", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceTextFormatting", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("replaceTextFormatting", "password", "utility::string_t", paramPassword);
	utils->initialize("replaceTextFormatting", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormatting(paramName, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormatting", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("replaceTextFormatting", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormatting", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormatting", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormatting", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormatting", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceTextFormatting", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceTextFormatting", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("replaceTextFormatting", "folder", "utility::string_t", paramFolder);
	utils->initialize("replaceTextFormatting", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormatting(paramName, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormatting", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("replaceTextFormatting", "name", "utility::string_t");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormatting", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormatting", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormatting", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormatting", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormatting", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("replaceTextFormatting", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("replaceTextFormatting", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("replaceTextFormatting", "storage", "utility::string_t", paramStorage);
	utils->initialize("replaceTextFormatting", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormatting(paramName, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormatting", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormatting", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormatting", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormattingOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormattingOnline", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormattingOnline", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormattingOnline", "password", "utility::string_t");
	utils->initialize("replaceTextFormattingOnline", "", "");
	HttpContent result = utils->getSlidesApi()->replaceTextFormattingOnline(paramDocument, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, replaceTextFormattingOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormattingOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormattingOnline", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormattingOnline", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormattingOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormattingOnline(paramDocument, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingOnlineInvalidOldValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormattingOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormattingOnline", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormattingOnline", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormattingOnline", "password", "utility::string_t");
	paramOldValue = utils->getInvalidTestValue("replaceTextFormattingOnline", "oldValue", "utility::string_t", paramOldValue);
	utils->initialize("replaceTextFormattingOnline", "oldValue", "utility::string_t", paramOldValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormattingOnline(paramDocument, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "oldValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "oldValue", "utility::string_t", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "oldValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "oldValue", "utility::string_t", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormattingOnline", "oldValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingOnlineInvalidNewValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormattingOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormattingOnline", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormattingOnline", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormattingOnline", "password", "utility::string_t");
	paramNewValue = utils->getInvalidTestValue("replaceTextFormattingOnline", "newValue", "utility::string_t", paramNewValue);
	utils->initialize("replaceTextFormattingOnline", "newValue", "utility::string_t", paramNewValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormattingOnline(paramDocument, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "newValue", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "newValue", "utility::string_t", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "newValue", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "newValue", "utility::string_t", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormattingOnline", "newValue", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingOnlineInvalidPortionFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormattingOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormattingOnline", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormattingOnline", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormattingOnline", "password", "utility::string_t");
	paramPortionFormat = utils->getInvalidTestValueForClass<>("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>", paramPortionFormat);
	utils->initialize("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>", paramPortionFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormattingOnline(paramDocument, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>", paramPortionFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>", paramPortionFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingOnlineInvalidWithMasters) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormattingOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormattingOnline", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormattingOnline", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormattingOnline", "password", "utility::string_t");
	paramWithMasters = utils->getInvalidBoolTestValue("replaceTextFormattingOnline", "withMasters", "bool", paramWithMasters).value();
	utils->initialize("replaceTextFormattingOnline", "withMasters", "bool", paramWithMasters);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormattingOnline(paramDocument, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "withMasters", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "withMasters", "bool", paramWithMasters);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "withMasters", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "withMasters", "bool", paramWithMasters);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormattingOnline", "withMasters", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceTextFormattingOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceTextFormattingOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramOldValue = utils->getTestValue("replaceTextFormattingOnline", "oldValue", "utility::string_t");
	utility::string_t paramNewValue = utils->getTestValue("replaceTextFormattingOnline", "newValue", "utility::string_t");
	std::shared_ptr<PortionFormat> paramPortionFormat = utils->getTestValueForClass<PortionFormat>("replaceTextFormattingOnline", "portionFormat", "std::shared_ptr<PortionFormat>");
	auto paramWithMasters = utils->getOptionalBoolTestValue("replaceTextFormattingOnline", "withMasters", "bool");
	utility::string_t paramPassword = utils->getTestValue("replaceTextFormattingOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("replaceTextFormattingOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("replaceTextFormattingOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->replaceTextFormattingOnline(paramDocument, paramOldValue, paramNewValue, paramPortionFormat, paramWithMasters, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceTextFormattingOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceTextFormattingOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceTextFormattingOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePortionAsMathMl) {
	utility::string_t paramName = utils->getTestValue("savePortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("savePortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("savePortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("savePortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("savePortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramOutPath = utils->getTestValue("savePortionAsMathMl", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("savePortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePortionAsMathMl", "storage", "utility::string_t");
	utils->initialize("savePortionAsMathMl", "", "");
	utils->getSlidesApi()->savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage).wait();
}

TEST_F(SlidesApiTest, savePortionAsMathMlInvalidName) {
	utility::string_t paramName = utils->getTestValue("savePortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("savePortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("savePortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("savePortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("savePortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramOutPath = utils->getTestValue("savePortionAsMathMl", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("savePortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePortionAsMathMl", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("savePortionAsMathMl", "name", "utility::string_t", paramName);
	utils->initialize("savePortionAsMathMl", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePortionAsMathMl", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePortionAsMathMlInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("savePortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("savePortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("savePortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("savePortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("savePortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramOutPath = utils->getTestValue("savePortionAsMathMl", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("savePortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePortionAsMathMl", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("savePortionAsMathMl", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("savePortionAsMathMl", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePortionAsMathMl", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePortionAsMathMlInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("savePortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("savePortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("savePortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("savePortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("savePortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramOutPath = utils->getTestValue("savePortionAsMathMl", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("savePortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePortionAsMathMl", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("savePortionAsMathMl", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("savePortionAsMathMl", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePortionAsMathMl", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePortionAsMathMlInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("savePortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("savePortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("savePortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("savePortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("savePortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramOutPath = utils->getTestValue("savePortionAsMathMl", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("savePortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePortionAsMathMl", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("savePortionAsMathMl", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("savePortionAsMathMl", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePortionAsMathMl", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePortionAsMathMlInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("savePortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("savePortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("savePortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("savePortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("savePortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramOutPath = utils->getTestValue("savePortionAsMathMl", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("savePortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePortionAsMathMl", "storage", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("savePortionAsMathMl", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("savePortionAsMathMl", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePortionAsMathMl", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePortionAsMathMlInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("savePortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("savePortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("savePortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("savePortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("savePortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramOutPath = utils->getTestValue("savePortionAsMathMl", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("savePortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePortionAsMathMl", "storage", "utility::string_t");
	paramOutPath = utils->getInvalidTestValue("savePortionAsMathMl", "outPath", "utility::string_t", paramOutPath);
	utils->initialize("savePortionAsMathMl", "outPath", "utility::string_t", paramOutPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "outPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "outPath", "utility::string_t", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "outPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "outPath", "utility::string_t", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePortionAsMathMl", "outPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePortionAsMathMlInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("savePortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("savePortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("savePortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("savePortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("savePortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramOutPath = utils->getTestValue("savePortionAsMathMl", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("savePortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePortionAsMathMl", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("savePortionAsMathMl", "password", "utility::string_t", paramPassword);
	utils->initialize("savePortionAsMathMl", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePortionAsMathMl", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePortionAsMathMlInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("savePortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("savePortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("savePortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("savePortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("savePortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramOutPath = utils->getTestValue("savePortionAsMathMl", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("savePortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePortionAsMathMl", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("savePortionAsMathMl", "folder", "utility::string_t", paramFolder);
	utils->initialize("savePortionAsMathMl", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePortionAsMathMl", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePortionAsMathMlInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("savePortionAsMathMl", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("savePortionAsMathMl", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("savePortionAsMathMl", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("savePortionAsMathMl", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("savePortionAsMathMl", "portionIndex", "int32_t");
	utility::string_t paramOutPath = utils->getTestValue("savePortionAsMathMl", "outPath", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("savePortionAsMathMl", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePortionAsMathMl", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePortionAsMathMl", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("savePortionAsMathMl", "storage", "utility::string_t", paramStorage);
	utils->initialize("savePortionAsMathMl", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePortionAsMathMl", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePortionAsMathMl", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePortionAsMathMl", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentation) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides", "std::vector<int32_t>");
	utils->initialize("savePresentation", "", "");
	utils->getSlidesApi()->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
}

TEST_F(SlidesApiTest, savePresentationInvalidName) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides", "std::vector<int32_t>");
	paramName = utils->getInvalidTestValue("savePresentation", "name", "utility::string_t", paramName);
	utils->initialize("savePresentation", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides", "std::vector<int32_t>");
	paramFormat = utils->getInvalidTestValue("savePresentation", "format", "utility::string_t", paramFormat);
	utils->initialize("savePresentation", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides", "std::vector<int32_t>");
	paramOutPath = utils->getInvalidTestValue("savePresentation", "outPath", "utility::string_t", paramOutPath);
	utils->initialize("savePresentation", "outPath", "utility::string_t", paramOutPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "outPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "outPath", "utility::string_t", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "outPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "outPath", "utility::string_t", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "outPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides", "std::vector<int32_t>");
	paramOptions = utils->getInvalidTestValueForClass<>("savePresentation", "options", "std::shared_ptr<ExportOptions>", paramOptions);
	utils->initialize("savePresentation", "options", "std::shared_ptr<ExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "options", "std::shared_ptr<ExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides", "std::vector<int32_t>");
	paramPassword = utils->getInvalidTestValue("savePresentation", "password", "utility::string_t", paramPassword);
	utils->initialize("savePresentation", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides", "std::vector<int32_t>");
	paramFolder = utils->getInvalidTestValue("savePresentation", "folder", "utility::string_t", paramFolder);
	utils->initialize("savePresentation", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides", "std::vector<int32_t>");
	paramStorage = utils->getInvalidTestValue("savePresentation", "storage", "utility::string_t", paramStorage);
	utils->initialize("savePresentation", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides", "std::vector<int32_t>");
	paramFontsFolder = utils->getInvalidTestValue("savePresentation", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("savePresentation", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidSlides) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name", "utility::string_t");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder", "utility::string_t");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides", "std::vector<int32_t>");
	paramSlides = utils->getInvalidIntVectorTestValue("savePresentation", "slides", "std::vector<int32_t>", paramSlides);
	utils->initialize("savePresentation", "slides", "std::vector<int32_t>", paramSlides);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "slides", "std::vector<int32_t>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "slides", "std::vector<int32_t>", paramSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "slides", "std::vector<int32_t>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "slides", "std::vector<int32_t>", paramSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "slides", "std::vector<int32_t>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShape) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	utils->initialize("saveShape", "", "");
	utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
}

TEST_F(SlidesApiTest, saveShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("saveShape", "name", "utility::string_t", paramName);
	utils->initialize("saveShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("saveShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("saveShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("saveShape", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("saveShape", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("saveShape", "format", "utility::string_t", paramFormat);
	utils->initialize("saveShape", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramOutPath = utils->getInvalidTestValue("saveShape", "outPath", "utility::string_t", paramOutPath);
	utils->initialize("saveShape", "outPath", "utility::string_t", paramOutPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "outPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "outPath", "utility::string_t", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "outPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "outPath", "utility::string_t", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "outPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramOptions = utils->getInvalidTestValueForClass<>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
	utils->initialize("saveShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "options", "std::shared_ptr<IShapeExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramScaleX = utils->getInvalidDoubleTestValue("saveShape", "scaleX", "double", paramScaleX).value();
	utils->initialize("saveShape", "scaleX", "double", paramScaleX);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "scaleX", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "scaleX", "double", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "scaleX", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "scaleX", "double", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "scaleX", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramScaleY = utils->getInvalidDoubleTestValue("saveShape", "scaleY", "double", paramScaleY).value();
	utils->initialize("saveShape", "scaleY", "double", paramScaleY);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "scaleY", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "scaleY", "double", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "scaleY", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "scaleY", "double", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "scaleY", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramBounds = utils->getInvalidTestValue("saveShape", "bounds", "utility::string_t", paramBounds);
	utils->initialize("saveShape", "bounds", "utility::string_t", paramBounds);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "bounds", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "bounds", "utility::string_t", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "bounds", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "bounds", "utility::string_t", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "bounds", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("saveShape", "password", "utility::string_t", paramPassword);
	utils->initialize("saveShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("saveShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("saveShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("saveShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("saveShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("saveShape", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("saveShape", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("saveShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("saveShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	utils->initialize("saveShapeOnline", "", "");
	utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramDocument = utils->getInvalidBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("saveShapeOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramSlideIndex = utils->getInvalidIntTestValue("saveShapeOnline", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("saveShapeOnline", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidShapeIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramShapeIndex = utils->getInvalidIntTestValue("saveShapeOnline", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("saveShapeOnline", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramFormat = utils->getInvalidTestValue("saveShapeOnline", "format", "utility::string_t", paramFormat);
	utils->initialize("saveShapeOnline", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidOutPath) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramOutPath = utils->getInvalidTestValue("saveShapeOnline", "outPath", "utility::string_t", paramOutPath);
	utils->initialize("saveShapeOnline", "outPath", "utility::string_t", paramOutPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "outPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "outPath", "utility::string_t", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "outPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "outPath", "utility::string_t", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "outPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidScaleX) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramScaleX = utils->getInvalidDoubleTestValue("saveShapeOnline", "scaleX", "double", paramScaleX).value();
	utils->initialize("saveShapeOnline", "scaleX", "double", paramScaleX);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "scaleX", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "scaleX", "double", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "scaleX", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "scaleX", "double", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "scaleX", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidScaleY) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramScaleY = utils->getInvalidDoubleTestValue("saveShapeOnline", "scaleY", "double", paramScaleY).value();
	utils->initialize("saveShapeOnline", "scaleY", "double", paramScaleY);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "scaleY", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "scaleY", "double", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "scaleY", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "scaleY", "double", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "scaleY", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidBounds) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramBounds = utils->getInvalidTestValue("saveShapeOnline", "bounds", "utility::string_t", paramBounds);
	utils->initialize("saveShapeOnline", "bounds", "utility::string_t", paramBounds);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "bounds", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "bounds", "utility::string_t", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "bounds", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "bounds", "utility::string_t", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "bounds", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramPassword = utils->getInvalidTestValue("saveShapeOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("saveShapeOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramStorage = utils->getInvalidTestValue("saveShapeOnline", "storage", "utility::string_t", paramStorage);
	utils->initialize("saveShapeOnline", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramFontsFolder = utils->getInvalidTestValue("saveShapeOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("saveShapeOnline", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidOptions) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath", "utility::string_t");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
	paramOptions = utils->getInvalidTestValueForClass<>("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
	utils->initialize("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "options", "std::shared_ptr<IShapeExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlide) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	utils->initialize("saveSlide", "", "");
	utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, saveSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	paramName = utils->getInvalidTestValue("saveSlide", "name", "utility::string_t", paramName);
	utils->initialize("saveSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("saveSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("saveSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("saveSlide", "format", "utility::string_t", paramFormat);
	utils->initialize("saveSlide", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	paramOutPath = utils->getInvalidTestValue("saveSlide", "outPath", "utility::string_t", paramOutPath);
	utils->initialize("saveSlide", "outPath", "utility::string_t", paramOutPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "outPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "outPath", "utility::string_t", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "outPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "outPath", "utility::string_t", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "outPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	paramOptions = utils->getInvalidTestValueForClass<>("saveSlide", "options", "std::shared_ptr<ExportOptions>", paramOptions);
	utils->initialize("saveSlide", "options", "std::shared_ptr<ExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "options", "std::shared_ptr<ExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	paramWidth = utils->getInvalidIntTestValue("saveSlide", "width", "int32_t", paramWidth).value();
	utils->initialize("saveSlide", "width", "int32_t", paramWidth);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "width", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "width", "int32_t", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "width", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "width", "int32_t", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "width", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	paramHeight = utils->getInvalidIntTestValue("saveSlide", "height", "int32_t", paramHeight).value();
	utils->initialize("saveSlide", "height", "int32_t", paramHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "height", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "height", "int32_t", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "height", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "height", "int32_t", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "height", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("saveSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("saveSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("saveSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("saveSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("saveSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("saveSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options", "std::shared_ptr<ExportOptions>");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("saveSlide", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("saveSlide", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	utils->initialize("saveSlideOnline", "", "");
	utils->getSlidesApi()->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramDocument = utils->getInvalidBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("saveSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramSlideIndex = utils->getInvalidIntTestValue("saveSlideOnline", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("saveSlideOnline", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramFormat = utils->getInvalidTestValue("saveSlideOnline", "format", "utility::string_t", paramFormat);
	utils->initialize("saveSlideOnline", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidOutPath) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramOutPath = utils->getInvalidTestValue("saveSlideOnline", "outPath", "utility::string_t", paramOutPath);
	utils->initialize("saveSlideOnline", "outPath", "utility::string_t", paramOutPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "outPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "outPath", "utility::string_t", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "outPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "outPath", "utility::string_t", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "outPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramWidth = utils->getInvalidIntTestValue("saveSlideOnline", "width", "int32_t", paramWidth).value();
	utils->initialize("saveSlideOnline", "width", "int32_t", paramWidth);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "width", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "width", "int32_t", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "width", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "width", "int32_t", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "width", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramHeight = utils->getInvalidIntTestValue("saveSlideOnline", "height", "int32_t", paramHeight).value();
	utils->initialize("saveSlideOnline", "height", "int32_t", paramHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "height", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "height", "int32_t", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "height", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "height", "int32_t", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "height", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramPassword = utils->getInvalidTestValue("saveSlideOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("saveSlideOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramStorage = utils->getInvalidTestValue("saveSlideOnline", "storage", "utility::string_t", paramStorage);
	utils->initialize("saveSlideOnline", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramFontsFolder = utils->getInvalidTestValue("saveSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("saveSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidOptions) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document", "std::shared_ptr<HttpContent>");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
	paramOptions = utils->getInvalidTestValueForClass<>("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
	utils->initialize("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "options", "std::shared_ptr<ExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShape) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	utils->initialize("saveSpecialSlideShape", "", "");
	utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("saveSpecialSlideShape", "name", "utility::string_t", paramName);
	utils->initialize("saveSpecialSlideShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("saveSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("saveSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("saveSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("saveSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("saveSpecialSlideShape", "format", "utility::string_t", paramFormat);
	utils->initialize("saveSpecialSlideShape", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramOutPath = utils->getInvalidTestValue("saveSpecialSlideShape", "outPath", "utility::string_t", paramOutPath);
	utils->initialize("saveSpecialSlideShape", "outPath", "utility::string_t", paramOutPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "outPath", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "outPath", "utility::string_t", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "outPath", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "outPath", "utility::string_t", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "outPath", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramOptions = utils->getInvalidTestValueForClass<>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
	utils->initialize("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramScaleX = utils->getInvalidDoubleTestValue("saveSpecialSlideShape", "scaleX", "double", paramScaleX).value();
	utils->initialize("saveSpecialSlideShape", "scaleX", "double", paramScaleX);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "scaleX", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "scaleX", "double", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "scaleX", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "scaleX", "double", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "scaleX", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramScaleY = utils->getInvalidDoubleTestValue("saveSpecialSlideShape", "scaleY", "double", paramScaleY).value();
	utils->initialize("saveSpecialSlideShape", "scaleY", "double", paramScaleY);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "scaleY", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "scaleY", "double", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "scaleY", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "scaleY", "double", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "scaleY", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramBounds = utils->getInvalidTestValue("saveSpecialSlideShape", "bounds", "utility::string_t", paramBounds);
	utils->initialize("saveSpecialSlideShape", "bounds", "utility::string_t", paramBounds);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "bounds", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "bounds", "utility::string_t", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "bounds", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "bounds", "utility::string_t", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "bounds", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("saveSpecialSlideShape", "password", "utility::string_t", paramPassword);
	utils->initialize("saveSpecialSlideShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("saveSpecialSlideShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("saveSpecialSlideShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("saveSpecialSlideShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("saveSpecialSlideShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("saveSpecialSlideShape", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSpecialSlideShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("saveSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("saveSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSpecialSlideShape", "shapeIndex", "int32_t");
	utility::string_t paramFormat = utils->getTestValue("saveSpecialSlideShape", "format", "utility::string_t");
	utility::string_t paramOutPath = utils->getTestValue("saveSpecialSlideShape", "outPath", "utility::string_t");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSpecialSlideShape", "options", "std::shared_ptr<IShapeExportOptions>");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleX", "double");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSpecialSlideShape", "scaleY", "double");
	utility::string_t paramBounds = utils->getTestValue("saveSpecialSlideShape", "bounds", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("saveSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("saveSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("saveSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSpecialSlideShape", "fontsFolder", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("saveSpecialSlideShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("saveSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("saveSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSpecialSlideShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimation) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex", "int32_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage", "utility::string_t");
	utils->initialize("setAnimation", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex", "int32_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setAnimation", "name", "utility::string_t", paramName);
	utils->initialize("setAnimation", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex", "int32_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("setAnimation", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("setAnimation", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimationInvalidAnimation) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex", "int32_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage", "utility::string_t");
	paramAnimation = utils->getInvalidTestValueForClass<>("setAnimation", "animation", "std::shared_ptr<SlideAnimation>", paramAnimation);
	utils->initialize("setAnimation", "animation", "std::shared_ptr<SlideAnimation>", paramAnimation);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "animation", "std::shared_ptr<SlideAnimation>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "animation", "std::shared_ptr<SlideAnimation>", paramAnimation);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "animation", "std::shared_ptr<SlideAnimation>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "animation", "std::shared_ptr<SlideAnimation>", paramAnimation);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "animation", "std::shared_ptr<SlideAnimation>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex", "int32_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setAnimation", "password", "utility::string_t", paramPassword);
	utils->initialize("setAnimation", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex", "int32_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setAnimation", "folder", "utility::string_t", paramFolder);
	utils->initialize("setAnimation", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex", "int32_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setAnimation", "storage", "utility::string_t", paramStorage);
	utils->initialize("setAnimation", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackground) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex", "int32_t");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background", "std::shared_ptr<SlideBackground>");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage", "utility::string_t");
	utils->initialize("setBackground", "", "");
	std::shared_ptr<SlideBackground> result = utils->getSlidesApi()->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setBackgroundInvalidName) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex", "int32_t");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background", "std::shared_ptr<SlideBackground>");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setBackground", "name", "utility::string_t", paramName);
	utils->initialize("setBackground", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex", "int32_t");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background", "std::shared_ptr<SlideBackground>");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("setBackground", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("setBackground", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundInvalidBackground) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex", "int32_t");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background", "std::shared_ptr<SlideBackground>");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage", "utility::string_t");
	paramBackground = utils->getInvalidTestValueForClass<>("setBackground", "background", "std::shared_ptr<SlideBackground>", paramBackground);
	utils->initialize("setBackground", "background", "std::shared_ptr<SlideBackground>", paramBackground);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "background", "std::shared_ptr<SlideBackground>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "background", "std::shared_ptr<SlideBackground>", paramBackground);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "background", "std::shared_ptr<SlideBackground>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "background", "std::shared_ptr<SlideBackground>", paramBackground);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "background", "std::shared_ptr<SlideBackground>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex", "int32_t");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background", "std::shared_ptr<SlideBackground>");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setBackground", "password", "utility::string_t", paramPassword);
	utils->initialize("setBackground", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex", "int32_t");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background", "std::shared_ptr<SlideBackground>");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setBackground", "folder", "utility::string_t", paramFolder);
	utils->initialize("setBackground", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex", "int32_t");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background", "std::shared_ptr<SlideBackground>");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setBackground", "storage", "utility::string_t", paramStorage);
	utils->initialize("setBackground", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColor) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex", "int32_t");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage", "utility::string_t");
	utils->initialize("setBackgroundColor", "", "");
	std::shared_ptr<SlideBackground> result = utils->getSlidesApi()->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidName) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex", "int32_t");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setBackgroundColor", "name", "utility::string_t", paramName);
	utils->initialize("setBackgroundColor", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex", "int32_t");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("setBackgroundColor", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("setBackgroundColor", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidColor) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex", "int32_t");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage", "utility::string_t");
	paramColor = utils->getInvalidTestValue("setBackgroundColor", "color", "utility::string_t", paramColor);
	utils->initialize("setBackgroundColor", "color", "utility::string_t", paramColor);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "color", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "color", "utility::string_t", paramColor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "color", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "color", "utility::string_t", paramColor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "color", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex", "int32_t");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setBackgroundColor", "password", "utility::string_t", paramPassword);
	utils->initialize("setBackgroundColor", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex", "int32_t");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setBackgroundColor", "folder", "utility::string_t", paramFolder);
	utils->initialize("setBackgroundColor", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex", "int32_t");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setBackgroundColor", "storage", "utility::string_t", paramStorage);
	utils->initialize("setBackgroundColor", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartAxis) {
	utility::string_t paramName = utils->getTestValue("setChartAxis", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartAxis", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartAxis", "shapeIndex", "int32_t");
	utility::string_t paramAxisType = utils->getTestValue("setChartAxis", "axisType", "utility::string_t");
	std::shared_ptr<Axis> paramAxis = utils->getTestValueForClass<Axis>("setChartAxis", "axis", "std::shared_ptr<Axis>");
	utility::string_t paramPassword = utils->getTestValue("setChartAxis", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartAxis", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartAxis", "storage", "utility::string_t");
	utils->initialize("setChartAxis", "", "");
	std::shared_ptr<Axis> result = utils->getSlidesApi()->setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setChartAxisInvalidName) {
	utility::string_t paramName = utils->getTestValue("setChartAxis", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartAxis", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartAxis", "shapeIndex", "int32_t");
	utility::string_t paramAxisType = utils->getTestValue("setChartAxis", "axisType", "utility::string_t");
	std::shared_ptr<Axis> paramAxis = utils->getTestValueForClass<Axis>("setChartAxis", "axis", "std::shared_ptr<Axis>");
	utility::string_t paramPassword = utils->getTestValue("setChartAxis", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartAxis", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartAxis", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setChartAxis", "name", "utility::string_t", paramName);
	utils->initialize("setChartAxis", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartAxis", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartAxisInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setChartAxis", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartAxis", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartAxis", "shapeIndex", "int32_t");
	utility::string_t paramAxisType = utils->getTestValue("setChartAxis", "axisType", "utility::string_t");
	std::shared_ptr<Axis> paramAxis = utils->getTestValueForClass<Axis>("setChartAxis", "axis", "std::shared_ptr<Axis>");
	utility::string_t paramPassword = utils->getTestValue("setChartAxis", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartAxis", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartAxis", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("setChartAxis", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("setChartAxis", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartAxis", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartAxisInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("setChartAxis", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartAxis", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartAxis", "shapeIndex", "int32_t");
	utility::string_t paramAxisType = utils->getTestValue("setChartAxis", "axisType", "utility::string_t");
	std::shared_ptr<Axis> paramAxis = utils->getTestValueForClass<Axis>("setChartAxis", "axis", "std::shared_ptr<Axis>");
	utility::string_t paramPassword = utils->getTestValue("setChartAxis", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartAxis", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartAxis", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("setChartAxis", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("setChartAxis", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartAxis", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartAxisInvalidAxisType) {
	utility::string_t paramName = utils->getTestValue("setChartAxis", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartAxis", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartAxis", "shapeIndex", "int32_t");
	utility::string_t paramAxisType = utils->getTestValue("setChartAxis", "axisType", "utility::string_t");
	std::shared_ptr<Axis> paramAxis = utils->getTestValueForClass<Axis>("setChartAxis", "axis", "std::shared_ptr<Axis>");
	utility::string_t paramPassword = utils->getTestValue("setChartAxis", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartAxis", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartAxis", "storage", "utility::string_t");
	paramAxisType = utils->getInvalidTestValue("setChartAxis", "axisType", "utility::string_t", paramAxisType);
	utils->initialize("setChartAxis", "axisType", "utility::string_t", paramAxisType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "axisType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "axisType", "utility::string_t", paramAxisType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "axisType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "axisType", "utility::string_t", paramAxisType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartAxis", "axisType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartAxisInvalidAxis) {
	utility::string_t paramName = utils->getTestValue("setChartAxis", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartAxis", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartAxis", "shapeIndex", "int32_t");
	utility::string_t paramAxisType = utils->getTestValue("setChartAxis", "axisType", "utility::string_t");
	std::shared_ptr<Axis> paramAxis = utils->getTestValueForClass<Axis>("setChartAxis", "axis", "std::shared_ptr<Axis>");
	utility::string_t paramPassword = utils->getTestValue("setChartAxis", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartAxis", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartAxis", "storage", "utility::string_t");
	paramAxis = utils->getInvalidTestValueForClass<>("setChartAxis", "axis", "std::shared_ptr<Axis>", paramAxis);
	utils->initialize("setChartAxis", "axis", "std::shared_ptr<Axis>", paramAxis);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "axis", "std::shared_ptr<Axis>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "axis", "std::shared_ptr<Axis>", paramAxis);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "axis", "std::shared_ptr<Axis>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "axis", "std::shared_ptr<Axis>", paramAxis);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartAxis", "axis", "std::shared_ptr<Axis>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartAxisInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setChartAxis", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartAxis", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartAxis", "shapeIndex", "int32_t");
	utility::string_t paramAxisType = utils->getTestValue("setChartAxis", "axisType", "utility::string_t");
	std::shared_ptr<Axis> paramAxis = utils->getTestValueForClass<Axis>("setChartAxis", "axis", "std::shared_ptr<Axis>");
	utility::string_t paramPassword = utils->getTestValue("setChartAxis", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartAxis", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartAxis", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setChartAxis", "password", "utility::string_t", paramPassword);
	utils->initialize("setChartAxis", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartAxis", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartAxisInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setChartAxis", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartAxis", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartAxis", "shapeIndex", "int32_t");
	utility::string_t paramAxisType = utils->getTestValue("setChartAxis", "axisType", "utility::string_t");
	std::shared_ptr<Axis> paramAxis = utils->getTestValueForClass<Axis>("setChartAxis", "axis", "std::shared_ptr<Axis>");
	utility::string_t paramPassword = utils->getTestValue("setChartAxis", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartAxis", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartAxis", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setChartAxis", "folder", "utility::string_t", paramFolder);
	utils->initialize("setChartAxis", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartAxis", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartAxisInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setChartAxis", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartAxis", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartAxis", "shapeIndex", "int32_t");
	utility::string_t paramAxisType = utils->getTestValue("setChartAxis", "axisType", "utility::string_t");
	std::shared_ptr<Axis> paramAxis = utils->getTestValueForClass<Axis>("setChartAxis", "axis", "std::shared_ptr<Axis>");
	utility::string_t paramPassword = utils->getTestValue("setChartAxis", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartAxis", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartAxis", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setChartAxis", "storage", "utility::string_t", paramStorage);
	utils->initialize("setChartAxis", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartAxis", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartAxis", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartAxis", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartLegend) {
	utility::string_t paramName = utils->getTestValue("setChartLegend", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartLegend", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartLegend", "shapeIndex", "int32_t");
	std::shared_ptr<Legend> paramLegend = utils->getTestValueForClass<Legend>("setChartLegend", "legend", "std::shared_ptr<Legend>");
	utility::string_t paramPassword = utils->getTestValue("setChartLegend", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartLegend", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartLegend", "storage", "utility::string_t");
	utils->initialize("setChartLegend", "", "");
	std::shared_ptr<Legend> result = utils->getSlidesApi()->setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setChartLegendInvalidName) {
	utility::string_t paramName = utils->getTestValue("setChartLegend", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartLegend", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartLegend", "shapeIndex", "int32_t");
	std::shared_ptr<Legend> paramLegend = utils->getTestValueForClass<Legend>("setChartLegend", "legend", "std::shared_ptr<Legend>");
	utility::string_t paramPassword = utils->getTestValue("setChartLegend", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartLegend", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartLegend", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setChartLegend", "name", "utility::string_t", paramName);
	utils->initialize("setChartLegend", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartLegend", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartLegendInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setChartLegend", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartLegend", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartLegend", "shapeIndex", "int32_t");
	std::shared_ptr<Legend> paramLegend = utils->getTestValueForClass<Legend>("setChartLegend", "legend", "std::shared_ptr<Legend>");
	utility::string_t paramPassword = utils->getTestValue("setChartLegend", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartLegend", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartLegend", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("setChartLegend", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("setChartLegend", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartLegend", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartLegendInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("setChartLegend", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartLegend", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartLegend", "shapeIndex", "int32_t");
	std::shared_ptr<Legend> paramLegend = utils->getTestValueForClass<Legend>("setChartLegend", "legend", "std::shared_ptr<Legend>");
	utility::string_t paramPassword = utils->getTestValue("setChartLegend", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartLegend", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartLegend", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("setChartLegend", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("setChartLegend", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartLegend", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartLegendInvalidLegend) {
	utility::string_t paramName = utils->getTestValue("setChartLegend", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartLegend", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartLegend", "shapeIndex", "int32_t");
	std::shared_ptr<Legend> paramLegend = utils->getTestValueForClass<Legend>("setChartLegend", "legend", "std::shared_ptr<Legend>");
	utility::string_t paramPassword = utils->getTestValue("setChartLegend", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartLegend", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartLegend", "storage", "utility::string_t");
	paramLegend = utils->getInvalidTestValueForClass<>("setChartLegend", "legend", "std::shared_ptr<Legend>", paramLegend);
	utils->initialize("setChartLegend", "legend", "std::shared_ptr<Legend>", paramLegend);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "legend", "std::shared_ptr<Legend>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "legend", "std::shared_ptr<Legend>", paramLegend);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "legend", "std::shared_ptr<Legend>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "legend", "std::shared_ptr<Legend>", paramLegend);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartLegend", "legend", "std::shared_ptr<Legend>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartLegendInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setChartLegend", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartLegend", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartLegend", "shapeIndex", "int32_t");
	std::shared_ptr<Legend> paramLegend = utils->getTestValueForClass<Legend>("setChartLegend", "legend", "std::shared_ptr<Legend>");
	utility::string_t paramPassword = utils->getTestValue("setChartLegend", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartLegend", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartLegend", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setChartLegend", "password", "utility::string_t", paramPassword);
	utils->initialize("setChartLegend", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartLegend", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartLegendInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setChartLegend", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartLegend", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartLegend", "shapeIndex", "int32_t");
	std::shared_ptr<Legend> paramLegend = utils->getTestValueForClass<Legend>("setChartLegend", "legend", "std::shared_ptr<Legend>");
	utility::string_t paramPassword = utils->getTestValue("setChartLegend", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartLegend", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartLegend", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setChartLegend", "folder", "utility::string_t", paramFolder);
	utils->initialize("setChartLegend", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartLegend", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartLegendInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setChartLegend", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartLegend", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartLegend", "shapeIndex", "int32_t");
	std::shared_ptr<Legend> paramLegend = utils->getTestValueForClass<Legend>("setChartLegend", "legend", "std::shared_ptr<Legend>");
	utility::string_t paramPassword = utils->getTestValue("setChartLegend", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartLegend", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartLegend", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setChartLegend", "storage", "utility::string_t", paramStorage);
	utils->initialize("setChartLegend", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartLegend", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartLegend", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartLegend", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartSeriesGroup) {
	utility::string_t paramName = utils->getTestValue("setChartSeriesGroup", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartSeriesGroup", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartSeriesGroup", "shapeIndex", "int32_t");
	int32_t paramSeriesGroupIndex = utils->getIntTestValue("setChartSeriesGroup", "seriesGroupIndex", "int32_t");
	std::shared_ptr<ChartSeriesGroup> paramSeriesGroup = utils->getTestValueForClass<ChartSeriesGroup>("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>");
	utility::string_t paramPassword = utils->getTestValue("setChartSeriesGroup", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartSeriesGroup", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartSeriesGroup", "storage", "utility::string_t");
	utils->initialize("setChartSeriesGroup", "", "");
	std::shared_ptr<Chart> result = utils->getSlidesApi()->setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setChartSeriesGroupInvalidName) {
	utility::string_t paramName = utils->getTestValue("setChartSeriesGroup", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartSeriesGroup", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartSeriesGroup", "shapeIndex", "int32_t");
	int32_t paramSeriesGroupIndex = utils->getIntTestValue("setChartSeriesGroup", "seriesGroupIndex", "int32_t");
	std::shared_ptr<ChartSeriesGroup> paramSeriesGroup = utils->getTestValueForClass<ChartSeriesGroup>("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>");
	utility::string_t paramPassword = utils->getTestValue("setChartSeriesGroup", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartSeriesGroup", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartSeriesGroup", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setChartSeriesGroup", "name", "utility::string_t", paramName);
	utils->initialize("setChartSeriesGroup", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartSeriesGroup", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartSeriesGroupInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setChartSeriesGroup", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartSeriesGroup", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartSeriesGroup", "shapeIndex", "int32_t");
	int32_t paramSeriesGroupIndex = utils->getIntTestValue("setChartSeriesGroup", "seriesGroupIndex", "int32_t");
	std::shared_ptr<ChartSeriesGroup> paramSeriesGroup = utils->getTestValueForClass<ChartSeriesGroup>("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>");
	utility::string_t paramPassword = utils->getTestValue("setChartSeriesGroup", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartSeriesGroup", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartSeriesGroup", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("setChartSeriesGroup", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("setChartSeriesGroup", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartSeriesGroup", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartSeriesGroupInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("setChartSeriesGroup", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartSeriesGroup", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartSeriesGroup", "shapeIndex", "int32_t");
	int32_t paramSeriesGroupIndex = utils->getIntTestValue("setChartSeriesGroup", "seriesGroupIndex", "int32_t");
	std::shared_ptr<ChartSeriesGroup> paramSeriesGroup = utils->getTestValueForClass<ChartSeriesGroup>("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>");
	utility::string_t paramPassword = utils->getTestValue("setChartSeriesGroup", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartSeriesGroup", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartSeriesGroup", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("setChartSeriesGroup", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("setChartSeriesGroup", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartSeriesGroup", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartSeriesGroupInvalidSeriesGroupIndex) {
	utility::string_t paramName = utils->getTestValue("setChartSeriesGroup", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartSeriesGroup", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartSeriesGroup", "shapeIndex", "int32_t");
	int32_t paramSeriesGroupIndex = utils->getIntTestValue("setChartSeriesGroup", "seriesGroupIndex", "int32_t");
	std::shared_ptr<ChartSeriesGroup> paramSeriesGroup = utils->getTestValueForClass<ChartSeriesGroup>("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>");
	utility::string_t paramPassword = utils->getTestValue("setChartSeriesGroup", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartSeriesGroup", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartSeriesGroup", "storage", "utility::string_t");
	paramSeriesGroupIndex = utils->getInvalidIntTestValue("setChartSeriesGroup", "seriesGroupIndex", "int32_t", paramSeriesGroupIndex).value();
	utils->initialize("setChartSeriesGroup", "seriesGroupIndex", "int32_t", paramSeriesGroupIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "seriesGroupIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "seriesGroupIndex", "int32_t", paramSeriesGroupIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "seriesGroupIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "seriesGroupIndex", "int32_t", paramSeriesGroupIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartSeriesGroup", "seriesGroupIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartSeriesGroupInvalidSeriesGroup) {
	utility::string_t paramName = utils->getTestValue("setChartSeriesGroup", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartSeriesGroup", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartSeriesGroup", "shapeIndex", "int32_t");
	int32_t paramSeriesGroupIndex = utils->getIntTestValue("setChartSeriesGroup", "seriesGroupIndex", "int32_t");
	std::shared_ptr<ChartSeriesGroup> paramSeriesGroup = utils->getTestValueForClass<ChartSeriesGroup>("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>");
	utility::string_t paramPassword = utils->getTestValue("setChartSeriesGroup", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartSeriesGroup", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartSeriesGroup", "storage", "utility::string_t");
	paramSeriesGroup = utils->getInvalidTestValueForClass<>("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>", paramSeriesGroup);
	utils->initialize("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>", paramSeriesGroup);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>", paramSeriesGroup);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>", paramSeriesGroup);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartSeriesGroupInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setChartSeriesGroup", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartSeriesGroup", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartSeriesGroup", "shapeIndex", "int32_t");
	int32_t paramSeriesGroupIndex = utils->getIntTestValue("setChartSeriesGroup", "seriesGroupIndex", "int32_t");
	std::shared_ptr<ChartSeriesGroup> paramSeriesGroup = utils->getTestValueForClass<ChartSeriesGroup>("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>");
	utility::string_t paramPassword = utils->getTestValue("setChartSeriesGroup", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartSeriesGroup", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartSeriesGroup", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setChartSeriesGroup", "password", "utility::string_t", paramPassword);
	utils->initialize("setChartSeriesGroup", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartSeriesGroup", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartSeriesGroupInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setChartSeriesGroup", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartSeriesGroup", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartSeriesGroup", "shapeIndex", "int32_t");
	int32_t paramSeriesGroupIndex = utils->getIntTestValue("setChartSeriesGroup", "seriesGroupIndex", "int32_t");
	std::shared_ptr<ChartSeriesGroup> paramSeriesGroup = utils->getTestValueForClass<ChartSeriesGroup>("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>");
	utility::string_t paramPassword = utils->getTestValue("setChartSeriesGroup", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartSeriesGroup", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartSeriesGroup", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setChartSeriesGroup", "folder", "utility::string_t", paramFolder);
	utils->initialize("setChartSeriesGroup", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartSeriesGroup", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartSeriesGroupInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setChartSeriesGroup", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartSeriesGroup", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartSeriesGroup", "shapeIndex", "int32_t");
	int32_t paramSeriesGroupIndex = utils->getIntTestValue("setChartSeriesGroup", "seriesGroupIndex", "int32_t");
	std::shared_ptr<ChartSeriesGroup> paramSeriesGroup = utils->getTestValueForClass<ChartSeriesGroup>("setChartSeriesGroup", "seriesGroup", "std::shared_ptr<ChartSeriesGroup>");
	utility::string_t paramPassword = utils->getTestValue("setChartSeriesGroup", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartSeriesGroup", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartSeriesGroup", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setChartSeriesGroup", "storage", "utility::string_t", paramStorage);
	utils->initialize("setChartSeriesGroup", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartSeriesGroup", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartSeriesGroup", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartSeriesGroup", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartWall) {
	utility::string_t paramName = utils->getTestValue("setChartWall", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartWall", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartWall", "shapeIndex", "int32_t");
	utility::string_t paramChartWallType = utils->getTestValue("setChartWall", "chartWallType", "utility::string_t");
	std::shared_ptr<ChartWall> paramChartWall = utils->getTestValueForClass<ChartWall>("setChartWall", "chartWall", "std::shared_ptr<ChartWall>");
	utility::string_t paramPassword = utils->getTestValue("setChartWall", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartWall", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartWall", "storage", "utility::string_t");
	utils->initialize("setChartWall", "", "");
	std::shared_ptr<ChartWall> result = utils->getSlidesApi()->setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setChartWallInvalidName) {
	utility::string_t paramName = utils->getTestValue("setChartWall", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartWall", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartWall", "shapeIndex", "int32_t");
	utility::string_t paramChartWallType = utils->getTestValue("setChartWall", "chartWallType", "utility::string_t");
	std::shared_ptr<ChartWall> paramChartWall = utils->getTestValueForClass<ChartWall>("setChartWall", "chartWall", "std::shared_ptr<ChartWall>");
	utility::string_t paramPassword = utils->getTestValue("setChartWall", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartWall", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartWall", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setChartWall", "name", "utility::string_t", paramName);
	utils->initialize("setChartWall", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartWall", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartWall", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartWall", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartWall", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartWall", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartWallInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setChartWall", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartWall", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartWall", "shapeIndex", "int32_t");
	utility::string_t paramChartWallType = utils->getTestValue("setChartWall", "chartWallType", "utility::string_t");
	std::shared_ptr<ChartWall> paramChartWall = utils->getTestValueForClass<ChartWall>("setChartWall", "chartWall", "std::shared_ptr<ChartWall>");
	utility::string_t paramPassword = utils->getTestValue("setChartWall", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartWall", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartWall", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("setChartWall", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("setChartWall", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartWall", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartWall", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartWall", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartWall", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartWall", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartWallInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("setChartWall", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartWall", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartWall", "shapeIndex", "int32_t");
	utility::string_t paramChartWallType = utils->getTestValue("setChartWall", "chartWallType", "utility::string_t");
	std::shared_ptr<ChartWall> paramChartWall = utils->getTestValueForClass<ChartWall>("setChartWall", "chartWall", "std::shared_ptr<ChartWall>");
	utility::string_t paramPassword = utils->getTestValue("setChartWall", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartWall", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartWall", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("setChartWall", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("setChartWall", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartWall", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartWall", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartWall", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartWall", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartWall", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartWallInvalidChartWallType) {
	utility::string_t paramName = utils->getTestValue("setChartWall", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartWall", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartWall", "shapeIndex", "int32_t");
	utility::string_t paramChartWallType = utils->getTestValue("setChartWall", "chartWallType", "utility::string_t");
	std::shared_ptr<ChartWall> paramChartWall = utils->getTestValueForClass<ChartWall>("setChartWall", "chartWall", "std::shared_ptr<ChartWall>");
	utility::string_t paramPassword = utils->getTestValue("setChartWall", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartWall", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartWall", "storage", "utility::string_t");
	paramChartWallType = utils->getInvalidTestValue("setChartWall", "chartWallType", "utility::string_t", paramChartWallType);
	utils->initialize("setChartWall", "chartWallType", "utility::string_t", paramChartWallType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartWall", "chartWallType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartWall", "chartWallType", "utility::string_t", paramChartWallType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartWall", "chartWallType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartWall", "chartWallType", "utility::string_t", paramChartWallType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartWall", "chartWallType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartWallInvalidChartWall) {
	utility::string_t paramName = utils->getTestValue("setChartWall", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartWall", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartWall", "shapeIndex", "int32_t");
	utility::string_t paramChartWallType = utils->getTestValue("setChartWall", "chartWallType", "utility::string_t");
	std::shared_ptr<ChartWall> paramChartWall = utils->getTestValueForClass<ChartWall>("setChartWall", "chartWall", "std::shared_ptr<ChartWall>");
	utility::string_t paramPassword = utils->getTestValue("setChartWall", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartWall", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartWall", "storage", "utility::string_t");
	paramChartWall = utils->getInvalidTestValueForClass<>("setChartWall", "chartWall", "std::shared_ptr<ChartWall>", paramChartWall);
	utils->initialize("setChartWall", "chartWall", "std::shared_ptr<ChartWall>", paramChartWall);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartWall", "chartWall", "std::shared_ptr<ChartWall>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartWall", "chartWall", "std::shared_ptr<ChartWall>", paramChartWall);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartWall", "chartWall", "std::shared_ptr<ChartWall>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartWall", "chartWall", "std::shared_ptr<ChartWall>", paramChartWall);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartWall", "chartWall", "std::shared_ptr<ChartWall>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartWallInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setChartWall", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartWall", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartWall", "shapeIndex", "int32_t");
	utility::string_t paramChartWallType = utils->getTestValue("setChartWall", "chartWallType", "utility::string_t");
	std::shared_ptr<ChartWall> paramChartWall = utils->getTestValueForClass<ChartWall>("setChartWall", "chartWall", "std::shared_ptr<ChartWall>");
	utility::string_t paramPassword = utils->getTestValue("setChartWall", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartWall", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartWall", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setChartWall", "password", "utility::string_t", paramPassword);
	utils->initialize("setChartWall", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartWall", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartWall", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartWall", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartWall", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartWall", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartWallInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setChartWall", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartWall", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartWall", "shapeIndex", "int32_t");
	utility::string_t paramChartWallType = utils->getTestValue("setChartWall", "chartWallType", "utility::string_t");
	std::shared_ptr<ChartWall> paramChartWall = utils->getTestValueForClass<ChartWall>("setChartWall", "chartWall", "std::shared_ptr<ChartWall>");
	utility::string_t paramPassword = utils->getTestValue("setChartWall", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartWall", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartWall", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setChartWall", "folder", "utility::string_t", paramFolder);
	utils->initialize("setChartWall", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartWall", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartWall", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartWall", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartWall", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartWall", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setChartWallInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setChartWall", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setChartWall", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setChartWall", "shapeIndex", "int32_t");
	utility::string_t paramChartWallType = utils->getTestValue("setChartWall", "chartWallType", "utility::string_t");
	std::shared_ptr<ChartWall> paramChartWall = utils->getTestValueForClass<ChartWall>("setChartWall", "chartWall", "std::shared_ptr<ChartWall>");
	utility::string_t paramPassword = utils->getTestValue("setChartWall", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setChartWall", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setChartWall", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setChartWall", "storage", "utility::string_t", paramStorage);
	utils->initialize("setChartWall", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setChartWall", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setChartWall", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setChartWall", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setChartWall", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setChartWall", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentProperties) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name", "utility::string_t");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage", "utility::string_t");
	utils->initialize("setDocumentProperties", "", "");
	std::shared_ptr<DocumentProperties> result = utils->getSlidesApi()->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setDocumentPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name", "utility::string_t");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setDocumentProperties", "name", "utility::string_t", paramName);
	utils->initialize("setDocumentProperties", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperties", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertiesInvalidProperties) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name", "utility::string_t");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage", "utility::string_t");
	paramProperties = utils->getInvalidTestValueForClass<>("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>", paramProperties);
	utils->initialize("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>", paramProperties);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>", paramProperties);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>", paramProperties);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name", "utility::string_t");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setDocumentProperties", "password", "utility::string_t", paramPassword);
	utils->initialize("setDocumentProperties", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperties", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name", "utility::string_t");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setDocumentProperties", "folder", "utility::string_t", paramFolder);
	utils->initialize("setDocumentProperties", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperties", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name", "utility::string_t");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties", "std::shared_ptr<DocumentProperties>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setDocumentProperties", "storage", "utility::string_t", paramStorage);
	utils->initialize("setDocumentProperties", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperties", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentProperty) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName", "utility::string_t");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage", "utility::string_t");
	utils->initialize("setDocumentProperty", "", "");
	std::shared_ptr<DocumentProperty> result = utils->getSlidesApi()->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidName) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName", "utility::string_t");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setDocumentProperty", "name", "utility::string_t", paramName);
	utils->initialize("setDocumentProperty", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidPropertyName) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName", "utility::string_t");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage", "utility::string_t");
	paramPropertyName = utils->getInvalidTestValue("setDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);
	utils->initialize("setDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "propertyName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "propertyName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "propertyName", "utility::string_t", paramPropertyName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "propertyName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidProperty) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName", "utility::string_t");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage", "utility::string_t");
	paramProperty = utils->getInvalidTestValueForClass<>("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>", paramProperty);
	utils->initialize("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>", paramProperty);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>", paramProperty);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>", paramProperty);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName", "utility::string_t");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setDocumentProperty", "password", "utility::string_t", paramPassword);
	utils->initialize("setDocumentProperty", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName", "utility::string_t");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setDocumentProperty", "folder", "utility::string_t", paramFolder);
	utils->initialize("setDocumentProperty", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name", "utility::string_t");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName", "utility::string_t");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property", "std::shared_ptr<DocumentProperty>");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setDocumentProperty", "storage", "utility::string_t", paramStorage);
	utils->initialize("setDocumentProperty", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFont) {
	utility::string_t paramName = utils->getTestValue("setEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFont", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFont", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFont", "fontsFolder", "utility::string_t");
	utils->initialize("setEmbeddedFont", "", "");
	std::shared_ptr<FontsData> result = utils->getSlidesApi()->setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setEmbeddedFontInvalidName) {
	utility::string_t paramName = utils->getTestValue("setEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFont", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFont", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFont", "fontsFolder", "utility::string_t");
	paramName = utils->getInvalidTestValue("setEmbeddedFont", "name", "utility::string_t", paramName);
	utils->initialize("setEmbeddedFont", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFont", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontInvalidFontName) {
	utility::string_t paramName = utils->getTestValue("setEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFont", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFont", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFont", "fontsFolder", "utility::string_t");
	paramFontName = utils->getInvalidTestValue("setEmbeddedFont", "fontName", "utility::string_t", paramFontName);
	utils->initialize("setEmbeddedFont", "fontName", "utility::string_t", paramFontName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "fontName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "fontName", "utility::string_t", paramFontName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "fontName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "fontName", "utility::string_t", paramFontName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFont", "fontName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontInvalidOnlyUsed) {
	utility::string_t paramName = utils->getTestValue("setEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFont", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFont", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFont", "fontsFolder", "utility::string_t");
	paramOnlyUsed = utils->getInvalidBoolTestValue("setEmbeddedFont", "onlyUsed", "bool", paramOnlyUsed).value();
	utils->initialize("setEmbeddedFont", "onlyUsed", "bool", paramOnlyUsed);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "onlyUsed", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "onlyUsed", "bool", paramOnlyUsed);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "onlyUsed", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "onlyUsed", "bool", paramOnlyUsed);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFont", "onlyUsed", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFont", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFont", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFont", "fontsFolder", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setEmbeddedFont", "password", "utility::string_t", paramPassword);
	utils->initialize("setEmbeddedFont", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFont", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFont", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFont", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFont", "fontsFolder", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setEmbeddedFont", "folder", "utility::string_t", paramFolder);
	utils->initialize("setEmbeddedFont", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFont", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFont", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFont", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFont", "fontsFolder", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setEmbeddedFont", "storage", "utility::string_t", paramStorage);
	utils->initialize("setEmbeddedFont", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFont", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("setEmbeddedFont", "name", "utility::string_t");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFont", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFont", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFont", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFont", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFont", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFont", "fontsFolder", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("setEmbeddedFont", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("setEmbeddedFont", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFont", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFont", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFont", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequest) {
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>");
	utility::string_t paramName = utils->getTestValue("setEmbeddedFontFromRequest", "name", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequest", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequest", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFontFromRequest", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFontFromRequest", "storage", "utility::string_t");
	utils->initialize("setEmbeddedFontFromRequest", "", "");
	std::shared_ptr<FontsData> result = utils->getSlidesApi()->setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequestInvalidFont) {
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>");
	utility::string_t paramName = utils->getTestValue("setEmbeddedFontFromRequest", "name", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequest", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequest", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFontFromRequest", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFontFromRequest", "storage", "utility::string_t");
	paramFont = utils->getInvalidBinaryTestValue("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>", paramFont);
	utils->initialize("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>", paramFont);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>", paramFont);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>", paramFont);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequestInvalidName) {
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>");
	utility::string_t paramName = utils->getTestValue("setEmbeddedFontFromRequest", "name", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequest", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequest", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFontFromRequest", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFontFromRequest", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setEmbeddedFontFromRequest", "name", "utility::string_t", paramName);
	utils->initialize("setEmbeddedFontFromRequest", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontFromRequest", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequestInvalidOnlyUsed) {
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>");
	utility::string_t paramName = utils->getTestValue("setEmbeddedFontFromRequest", "name", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequest", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequest", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFontFromRequest", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFontFromRequest", "storage", "utility::string_t");
	paramOnlyUsed = utils->getInvalidBoolTestValue("setEmbeddedFontFromRequest", "onlyUsed", "bool", paramOnlyUsed).value();
	utils->initialize("setEmbeddedFontFromRequest", "onlyUsed", "bool", paramOnlyUsed);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "onlyUsed", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "onlyUsed", "bool", paramOnlyUsed);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "onlyUsed", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "onlyUsed", "bool", paramOnlyUsed);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontFromRequest", "onlyUsed", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequestInvalidPassword) {
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>");
	utility::string_t paramName = utils->getTestValue("setEmbeddedFontFromRequest", "name", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequest", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequest", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFontFromRequest", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFontFromRequest", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setEmbeddedFontFromRequest", "password", "utility::string_t", paramPassword);
	utils->initialize("setEmbeddedFontFromRequest", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontFromRequest", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequestInvalidFolder) {
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>");
	utility::string_t paramName = utils->getTestValue("setEmbeddedFontFromRequest", "name", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequest", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequest", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFontFromRequest", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFontFromRequest", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setEmbeddedFontFromRequest", "folder", "utility::string_t", paramFolder);
	utils->initialize("setEmbeddedFontFromRequest", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontFromRequest", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequestInvalidStorage) {
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequest", "font", "std::shared_ptr<HttpContent>");
	utility::string_t paramName = utils->getTestValue("setEmbeddedFontFromRequest", "name", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequest", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequest", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setEmbeddedFontFromRequest", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setEmbeddedFontFromRequest", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setEmbeddedFontFromRequest", "storage", "utility::string_t", paramStorage);
	utils->initialize("setEmbeddedFontFromRequest", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequest", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequest", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontFromRequest", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequestOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequestOnline", "password", "utility::string_t");
	utils->initialize("setEmbeddedFontFromRequestOnline", "", "");
	HttpContent result = utils->getSlidesApi()->setEmbeddedFontFromRequestOnline(paramDocument, paramFont, paramOnlyUsed, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequestOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequestOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontFromRequestOnline(paramDocument, paramFont, paramOnlyUsed, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequestOnlineInvalidFont) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequestOnline", "password", "utility::string_t");
	paramFont = utils->getInvalidBinaryTestValue("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>", paramFont);
	utils->initialize("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>", paramFont);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontFromRequestOnline(paramDocument, paramFont, paramOnlyUsed, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>", paramFont);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>", paramFont);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequestOnlineInvalidOnlyUsed) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequestOnline", "password", "utility::string_t");
	paramOnlyUsed = utils->getInvalidBoolTestValue("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool", paramOnlyUsed).value();
	utils->initialize("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool", paramOnlyUsed);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontFromRequestOnline(paramDocument, paramFont, paramOnlyUsed, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool", paramOnlyUsed);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool", paramOnlyUsed);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontFromRequestOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setEmbeddedFontFromRequestOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<HttpContent> paramFont = utils->getBinaryTestValue("setEmbeddedFontFromRequestOnline", "font", "std::shared_ptr<HttpContent>");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontFromRequestOnline", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontFromRequestOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setEmbeddedFontFromRequestOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("setEmbeddedFontFromRequestOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontFromRequestOnline(paramDocument, paramFont, paramOnlyUsed, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequestOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequestOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontFromRequestOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontFromRequestOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontFromRequestOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFontOnline", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontOnline", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFontOnline", "fontsFolder", "utility::string_t");
	utils->initialize("setEmbeddedFontOnline", "", "");
	HttpContent result = utils->getSlidesApi()->setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, setEmbeddedFontOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFontOnline", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontOnline", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFontOnline", "fontsFolder", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontOnlineInvalidFontName) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFontOnline", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontOnline", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFontOnline", "fontsFolder", "utility::string_t");
	paramFontName = utils->getInvalidTestValue("setEmbeddedFontOnline", "fontName", "utility::string_t", paramFontName);
	utils->initialize("setEmbeddedFontOnline", "fontName", "utility::string_t", paramFontName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontOnline", "fontName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontOnline", "fontName", "utility::string_t", paramFontName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontOnline", "fontName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontOnline", "fontName", "utility::string_t", paramFontName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontOnline", "fontName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontOnlineInvalidOnlyUsed) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFontOnline", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontOnline", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFontOnline", "fontsFolder", "utility::string_t");
	paramOnlyUsed = utils->getInvalidBoolTestValue("setEmbeddedFontOnline", "onlyUsed", "bool", paramOnlyUsed).value();
	utils->initialize("setEmbeddedFontOnline", "onlyUsed", "bool", paramOnlyUsed);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontOnline", "onlyUsed", "bool");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontOnline", "onlyUsed", "bool", paramOnlyUsed);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontOnline", "onlyUsed", "bool");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontOnline", "onlyUsed", "bool", paramOnlyUsed);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontOnline", "onlyUsed", "bool"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFontOnline", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontOnline", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFontOnline", "fontsFolder", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setEmbeddedFontOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("setEmbeddedFontOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setEmbeddedFontOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setEmbeddedFontOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFontName = utils->getTestValue("setEmbeddedFontOnline", "fontName", "utility::string_t");
	auto paramOnlyUsed = utils->getOptionalBoolTestValue("setEmbeddedFontOnline", "onlyUsed", "bool");
	utility::string_t paramPassword = utils->getTestValue("setEmbeddedFontOnline", "password", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("setEmbeddedFontOnline", "fontsFolder", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("setEmbeddedFontOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("setEmbeddedFontOnline", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setEmbeddedFontOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setEmbeddedFontOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setEmbeddedFontOnline", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage", "utility::string_t");
	utils->initialize("setNotesSlideHeaderFooter", "", "");
	std::shared_ptr<NotesSlideHeaderFooter> result = utils->getSlidesApi()->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setNotesSlideHeaderFooter", "name", "utility::string_t", paramName);
	utils->initialize("setNotesSlideHeaderFooter", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("setNotesSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("setNotesSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>", paramDto);
	utils->initialize("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setNotesSlideHeaderFooter", "password", "utility::string_t", paramPassword);
	utils->initialize("setNotesSlideHeaderFooter", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setNotesSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
	utils->initialize("setNotesSlideHeaderFooter", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto", "std::shared_ptr<NotesSlideHeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setNotesSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
	utils->initialize("setNotesSlideHeaderFooter", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setPresentationHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name", "utility::string_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage", "utility::string_t");
	utils->initialize("setPresentationHeaderFooter", "", "");
	std::shared_ptr<Document> result = utils->getSlidesApi()->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setPresentationHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name", "utility::string_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setPresentationHeaderFooter", "name", "utility::string_t", paramName);
	utils->initialize("setPresentationHeaderFooter", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setPresentationHeaderFooter", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setPresentationHeaderFooterInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name", "utility::string_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>", paramDto);
	utils->initialize("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setPresentationHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name", "utility::string_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setPresentationHeaderFooter", "password", "utility::string_t", paramPassword);
	utils->initialize("setPresentationHeaderFooter", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setPresentationHeaderFooter", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setPresentationHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name", "utility::string_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setPresentationHeaderFooter", "folder", "utility::string_t", paramFolder);
	utils->initialize("setPresentationHeaderFooter", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setPresentationHeaderFooter", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setPresentationHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name", "utility::string_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setPresentationHeaderFooter", "storage", "utility::string_t", paramStorage);
	utils->initialize("setPresentationHeaderFooter", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setPresentationHeaderFooter", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtection) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name", "utility::string_t");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto", "std::shared_ptr<ProtectionProperties>");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage", "utility::string_t");
	utils->initialize("setProtection", "", "");
	std::shared_ptr<ProtectionProperties> result = utils->getSlidesApi()->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setProtectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name", "utility::string_t");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto", "std::shared_ptr<ProtectionProperties>");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setProtection", "name", "utility::string_t", paramName);
	utils->initialize("setProtection", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtection", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtection", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtection", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtection", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtection", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name", "utility::string_t");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto", "std::shared_ptr<ProtectionProperties>");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("setProtection", "dto", "std::shared_ptr<ProtectionProperties>", paramDto);
	utils->initialize("setProtection", "dto", "std::shared_ptr<ProtectionProperties>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtection", "dto", "std::shared_ptr<ProtectionProperties>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtection", "dto", "std::shared_ptr<ProtectionProperties>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtection", "dto", "std::shared_ptr<ProtectionProperties>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtection", "dto", "std::shared_ptr<ProtectionProperties>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtection", "dto", "std::shared_ptr<ProtectionProperties>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name", "utility::string_t");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto", "std::shared_ptr<ProtectionProperties>");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setProtection", "password", "utility::string_t", paramPassword);
	utils->initialize("setProtection", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtection", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtection", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtection", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtection", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtection", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name", "utility::string_t");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto", "std::shared_ptr<ProtectionProperties>");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setProtection", "folder", "utility::string_t", paramFolder);
	utils->initialize("setProtection", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtection", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtection", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtection", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtection", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtection", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name", "utility::string_t");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto", "std::shared_ptr<ProtectionProperties>");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setProtection", "storage", "utility::string_t", paramStorage);
	utils->initialize("setProtection", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtection", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtection", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtection", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtection", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtection", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setProtectionOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtectionOnline", "dto", "std::shared_ptr<ProtectionProperties>");
	utility::string_t paramPassword = utils->getTestValue("setProtectionOnline", "password", "utility::string_t");
	utils->initialize("setProtectionOnline", "", "");
	HttpContent result = utils->getSlidesApi()->setProtectionOnline(paramDocument, paramDto, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, setProtectionOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setProtectionOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtectionOnline", "dto", "std::shared_ptr<ProtectionProperties>");
	utility::string_t paramPassword = utils->getTestValue("setProtectionOnline", "password", "utility::string_t");
	paramDocument = utils->getInvalidBinaryTestValue("setProtectionOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("setProtectionOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setProtectionOnline(paramDocument, paramDto, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtectionOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionOnlineInvalidDto) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setProtectionOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtectionOnline", "dto", "std::shared_ptr<ProtectionProperties>");
	utility::string_t paramPassword = utils->getTestValue("setProtectionOnline", "password", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("setProtectionOnline", "dto", "std::shared_ptr<ProtectionProperties>", paramDto);
	utils->initialize("setProtectionOnline", "dto", "std::shared_ptr<ProtectionProperties>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setProtectionOnline(paramDocument, paramDto, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "dto", "std::shared_ptr<ProtectionProperties>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "dto", "std::shared_ptr<ProtectionProperties>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "dto", "std::shared_ptr<ProtectionProperties>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "dto", "std::shared_ptr<ProtectionProperties>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtectionOnline", "dto", "std::shared_ptr<ProtectionProperties>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setProtectionOnline", "document", "std::shared_ptr<HttpContent>");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtectionOnline", "dto", "std::shared_ptr<ProtectionProperties>");
	utility::string_t paramPassword = utils->getTestValue("setProtectionOnline", "password", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setProtectionOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("setProtectionOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setProtectionOnline(paramDocument, paramDto, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtectionOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSections) {
	utility::string_t paramName = utils->getTestValue("setSections", "name", "utility::string_t");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections", "std::shared_ptr<Sections>");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage", "utility::string_t");
	utils->initialize("setSections", "", "");
	std::shared_ptr<Sections> result = utils->getSlidesApi()->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setSectionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("setSections", "name", "utility::string_t");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections", "std::shared_ptr<Sections>");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setSections", "name", "utility::string_t", paramName);
	utils->initialize("setSections", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSections", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSections", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSections", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSections", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSections", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSectionsInvalidSections) {
	utility::string_t paramName = utils->getTestValue("setSections", "name", "utility::string_t");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections", "std::shared_ptr<Sections>");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage", "utility::string_t");
	paramSections = utils->getInvalidTestValueForClass<>("setSections", "sections", "std::shared_ptr<Sections>", paramSections);
	utils->initialize("setSections", "sections", "std::shared_ptr<Sections>", paramSections);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSections", "sections", "std::shared_ptr<Sections>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSections", "sections", "std::shared_ptr<Sections>", paramSections);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSections", "sections", "std::shared_ptr<Sections>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSections", "sections", "std::shared_ptr<Sections>", paramSections);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSections", "sections", "std::shared_ptr<Sections>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSectionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setSections", "name", "utility::string_t");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections", "std::shared_ptr<Sections>");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setSections", "password", "utility::string_t", paramPassword);
	utils->initialize("setSections", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSections", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSections", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSections", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSections", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSections", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSectionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setSections", "name", "utility::string_t");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections", "std::shared_ptr<Sections>");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setSections", "folder", "utility::string_t", paramFolder);
	utils->initialize("setSections", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSections", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSections", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSections", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSections", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSections", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSectionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setSections", "name", "utility::string_t");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections", "std::shared_ptr<Sections>");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setSections", "storage", "utility::string_t", paramStorage);
	utils->initialize("setSections", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSections", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSections", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSections", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSections", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSections", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setShapeGeometryPath) {
	utility::string_t paramName = utils->getTestValue("setShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setShapeGeometryPath", "shapeIndex", "int32_t");
	std::shared_ptr<GeometryPaths> paramDto = utils->getTestValueForClass<GeometryPaths>("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>");
	utility::string_t paramPassword = utils->getTestValue("setShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setShapeGeometryPath", "storage", "utility::string_t");
	utils->initialize("setShapeGeometryPath", "", "");
	std::shared_ptr<ShapeBase> result = utils->getSlidesApi()->setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setShapeGeometryPathInvalidName) {
	utility::string_t paramName = utils->getTestValue("setShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setShapeGeometryPath", "shapeIndex", "int32_t");
	std::shared_ptr<GeometryPaths> paramDto = utils->getTestValueForClass<GeometryPaths>("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>");
	utility::string_t paramPassword = utils->getTestValue("setShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setShapeGeometryPath", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setShapeGeometryPath", "name", "utility::string_t", paramName);
	utils->initialize("setShapeGeometryPath", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setShapeGeometryPath", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setShapeGeometryPathInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setShapeGeometryPath", "shapeIndex", "int32_t");
	std::shared_ptr<GeometryPaths> paramDto = utils->getTestValueForClass<GeometryPaths>("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>");
	utility::string_t paramPassword = utils->getTestValue("setShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setShapeGeometryPath", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("setShapeGeometryPath", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("setShapeGeometryPath", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setShapeGeometryPath", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setShapeGeometryPathInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("setShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setShapeGeometryPath", "shapeIndex", "int32_t");
	std::shared_ptr<GeometryPaths> paramDto = utils->getTestValueForClass<GeometryPaths>("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>");
	utility::string_t paramPassword = utils->getTestValue("setShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setShapeGeometryPath", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("setShapeGeometryPath", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("setShapeGeometryPath", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setShapeGeometryPath", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setShapeGeometryPathInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setShapeGeometryPath", "shapeIndex", "int32_t");
	std::shared_ptr<GeometryPaths> paramDto = utils->getTestValueForClass<GeometryPaths>("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>");
	utility::string_t paramPassword = utils->getTestValue("setShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setShapeGeometryPath", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>", paramDto);
	utils->initialize("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setShapeGeometryPathInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setShapeGeometryPath", "shapeIndex", "int32_t");
	std::shared_ptr<GeometryPaths> paramDto = utils->getTestValueForClass<GeometryPaths>("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>");
	utility::string_t paramPassword = utils->getTestValue("setShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setShapeGeometryPath", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setShapeGeometryPath", "password", "utility::string_t", paramPassword);
	utils->initialize("setShapeGeometryPath", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setShapeGeometryPath", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setShapeGeometryPathInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setShapeGeometryPath", "shapeIndex", "int32_t");
	std::shared_ptr<GeometryPaths> paramDto = utils->getTestValueForClass<GeometryPaths>("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>");
	utility::string_t paramPassword = utils->getTestValue("setShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setShapeGeometryPath", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setShapeGeometryPath", "folder", "utility::string_t", paramFolder);
	utils->initialize("setShapeGeometryPath", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setShapeGeometryPath", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setShapeGeometryPathInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setShapeGeometryPath", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setShapeGeometryPath", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("setShapeGeometryPath", "shapeIndex", "int32_t");
	std::shared_ptr<GeometryPaths> paramDto = utils->getTestValueForClass<GeometryPaths>("setShapeGeometryPath", "dto", "std::shared_ptr<GeometryPaths>");
	utility::string_t paramPassword = utils->getTestValue("setShapeGeometryPath", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setShapeGeometryPath", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setShapeGeometryPath", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setShapeGeometryPath", "storage", "utility::string_t", paramStorage);
	utils->initialize("setShapeGeometryPath", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setShapeGeometryPath", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setShapeGeometryPath", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setShapeGeometryPath", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage", "utility::string_t");
	utils->initialize("setSlideHeaderFooter", "", "");
	std::shared_ptr<HeaderFooter> result = utils->getSlidesApi()->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setSlideHeaderFooter", "name", "utility::string_t", paramName);
	utils->initialize("setSlideHeaderFooter", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("setSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("setSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>", paramDto);
	utils->initialize("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setSlideHeaderFooter", "password", "utility::string_t", paramPassword);
	utils->initialize("setSlideHeaderFooter", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
	utils->initialize("setSlideHeaderFooter", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex", "int32_t");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto", "std::shared_ptr<HeaderFooter>");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
	utils->initialize("setSlideHeaderFooter", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideProperties) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name", "utility::string_t");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage", "utility::string_t");
	utils->initialize("setSlideProperties", "", "");
	std::shared_ptr<SlideProperties> result = utils->getSlidesApi()->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setSlidePropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name", "utility::string_t");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setSlideProperties", "name", "utility::string_t", paramName);
	utils->initialize("setSlideProperties", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideProperties", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlidePropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name", "utility::string_t");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>", paramDto);
	utils->initialize("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlidePropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name", "utility::string_t");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setSlideProperties", "password", "utility::string_t", paramPassword);
	utils->initialize("setSlideProperties", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideProperties", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlidePropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name", "utility::string_t");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setSlideProperties", "folder", "utility::string_t", paramFolder);
	utils->initialize("setSlideProperties", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideProperties", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlidePropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name", "utility::string_t");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto", "std::shared_ptr<SlideProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setSlideProperties", "storage", "utility::string_t", paramStorage);
	utils->initialize("setSlideProperties", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideProperties", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideShowProperties) {
	utility::string_t paramName = utils->getTestValue("setSlideShowProperties", "name", "utility::string_t");
	std::shared_ptr<SlideShowProperties> paramDto = utils->getTestValueForClass<SlideShowProperties>("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideShowProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideShowProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideShowProperties", "storage", "utility::string_t");
	utils->initialize("setSlideShowProperties", "", "");
	std::shared_ptr<SlideShowProperties> result = utils->getSlidesApi()->setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setSlideShowPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("setSlideShowProperties", "name", "utility::string_t");
	std::shared_ptr<SlideShowProperties> paramDto = utils->getTestValueForClass<SlideShowProperties>("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideShowProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideShowProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideShowProperties", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setSlideShowProperties", "name", "utility::string_t", paramName);
	utils->initialize("setSlideShowProperties", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideShowProperties", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideShowProperties", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideShowProperties", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideShowProperties", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideShowProperties", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideShowPropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setSlideShowProperties", "name", "utility::string_t");
	std::shared_ptr<SlideShowProperties> paramDto = utils->getTestValueForClass<SlideShowProperties>("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideShowProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideShowProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideShowProperties", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>", paramDto);
	utils->initialize("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideShowPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setSlideShowProperties", "name", "utility::string_t");
	std::shared_ptr<SlideShowProperties> paramDto = utils->getTestValueForClass<SlideShowProperties>("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideShowProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideShowProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideShowProperties", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setSlideShowProperties", "password", "utility::string_t", paramPassword);
	utils->initialize("setSlideShowProperties", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideShowProperties", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideShowProperties", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideShowProperties", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideShowProperties", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideShowProperties", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideShowPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setSlideShowProperties", "name", "utility::string_t");
	std::shared_ptr<SlideShowProperties> paramDto = utils->getTestValueForClass<SlideShowProperties>("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideShowProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideShowProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideShowProperties", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setSlideShowProperties", "folder", "utility::string_t", paramFolder);
	utils->initialize("setSlideShowProperties", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideShowProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideShowProperties", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideShowProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideShowProperties", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideShowProperties", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideShowPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setSlideShowProperties", "name", "utility::string_t");
	std::shared_ptr<SlideShowProperties> paramDto = utils->getTestValueForClass<SlideShowProperties>("setSlideShowProperties", "dto", "std::shared_ptr<SlideShowProperties>");
	utility::string_t paramPassword = utils->getTestValue("setSlideShowProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSlideShowProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSlideShowProperties", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setSlideShowProperties", "storage", "utility::string_t", paramStorage);
	utils->initialize("setSlideShowProperties", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideShowProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideShowProperties", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideShowProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideShowProperties", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideShowProperties", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSpecialSlideAnimation) {
	utility::string_t paramName = utils->getTestValue("setSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("setSpecialSlideAnimation", "slideType", "utility::string_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSpecialSlideAnimation", "storage", "utility::string_t");
	utils->initialize("setSpecialSlideAnimation", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setSpecialSlideAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("setSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("setSpecialSlideAnimation", "slideType", "utility::string_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSpecialSlideAnimation", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setSpecialSlideAnimation", "name", "utility::string_t", paramName);
	utils->initialize("setSpecialSlideAnimation", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSpecialSlideAnimation", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSpecialSlideAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("setSpecialSlideAnimation", "slideType", "utility::string_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSpecialSlideAnimation", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("setSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("setSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSpecialSlideAnimation", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSpecialSlideAnimationInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("setSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("setSpecialSlideAnimation", "slideType", "utility::string_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSpecialSlideAnimation", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("setSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("setSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSpecialSlideAnimation", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSpecialSlideAnimationInvalidAnimation) {
	utility::string_t paramName = utils->getTestValue("setSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("setSpecialSlideAnimation", "slideType", "utility::string_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSpecialSlideAnimation", "storage", "utility::string_t");
	paramAnimation = utils->getInvalidTestValueForClass<>("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>", paramAnimation);
	utils->initialize("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>", paramAnimation);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>", paramAnimation);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>", paramAnimation);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSpecialSlideAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("setSpecialSlideAnimation", "slideType", "utility::string_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSpecialSlideAnimation", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setSpecialSlideAnimation", "password", "utility::string_t", paramPassword);
	utils->initialize("setSpecialSlideAnimation", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSpecialSlideAnimation", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSpecialSlideAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("setSpecialSlideAnimation", "slideType", "utility::string_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSpecialSlideAnimation", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);
	utils->initialize("setSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSpecialSlideAnimation", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSpecialSlideAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setSpecialSlideAnimation", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("setSpecialSlideAnimation", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("setSpecialSlideAnimation", "slideType", "utility::string_t");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setSpecialSlideAnimation", "animation", "std::shared_ptr<SlideAnimation>");
	utility::string_t paramPassword = utils->getTestValue("setSpecialSlideAnimation", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setSpecialSlideAnimation", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setSpecialSlideAnimation", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);
	utils->initialize("setSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSpecialSlideAnimation", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSpecialSlideAnimation", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSpecialSlideAnimation", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setViewProperties) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name", "utility::string_t");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto", "std::shared_ptr<ViewProperties>");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage", "utility::string_t");
	utils->initialize("setViewProperties", "", "");
	std::shared_ptr<ViewProperties> result = utils->getSlidesApi()->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setViewPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name", "utility::string_t");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto", "std::shared_ptr<ViewProperties>");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("setViewProperties", "name", "utility::string_t", paramName);
	utils->initialize("setViewProperties", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setViewProperties", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setViewPropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name", "utility::string_t");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto", "std::shared_ptr<ViewProperties>");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("setViewProperties", "dto", "std::shared_ptr<ViewProperties>", paramDto);
	utils->initialize("setViewProperties", "dto", "std::shared_ptr<ViewProperties>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "dto", "std::shared_ptr<ViewProperties>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "dto", "std::shared_ptr<ViewProperties>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "dto", "std::shared_ptr<ViewProperties>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "dto", "std::shared_ptr<ViewProperties>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setViewProperties", "dto", "std::shared_ptr<ViewProperties>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setViewPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name", "utility::string_t");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto", "std::shared_ptr<ViewProperties>");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("setViewProperties", "password", "utility::string_t", paramPassword);
	utils->initialize("setViewProperties", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setViewProperties", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setViewPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name", "utility::string_t");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto", "std::shared_ptr<ViewProperties>");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("setViewProperties", "folder", "utility::string_t", paramFolder);
	utils->initialize("setViewProperties", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setViewProperties", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setViewPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name", "utility::string_t");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto", "std::shared_ptr<ViewProperties>");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("setViewProperties", "storage", "utility::string_t", paramStorage);
	utils->initialize("setViewProperties", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setViewProperties", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, split) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	utils->initialize("split", "", "");
	std::shared_ptr<SplitDocumentResult> result = utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, splitInvalidName) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramName = utils->getInvalidTestValue("split", "name", "utility::string_t", paramName);
	utils->initialize("split", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramOptions = utils->getInvalidTestValueForClass<>("split", "options", "std::shared_ptr<ExportOptions>", paramOptions);
	utils->initialize("split", "options", "std::shared_ptr<ExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "options", "std::shared_ptr<ExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramFormat = utils->getInvalidTestValue("split", "format", "utility::string_t", paramFormat);
	utils->initialize("split", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramWidth = utils->getInvalidIntTestValue("split", "width", "int32_t", paramWidth).value();
	utils->initialize("split", "width", "int32_t", paramWidth);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "width", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "width", "int32_t", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "width", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "width", "int32_t", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "width", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramHeight = utils->getInvalidIntTestValue("split", "height", "int32_t", paramHeight).value();
	utils->initialize("split", "height", "int32_t", paramHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "height", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "height", "int32_t", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "height", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "height", "int32_t", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "height", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidFrom) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramFrom = utils->getInvalidIntTestValue("split", "from", "int32_t", paramFrom).value();
	utils->initialize("split", "from", "int32_t", paramFrom);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "from", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "from", "int32_t", paramFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "from", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "from", "int32_t", paramFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "from", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidTo) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramTo = utils->getInvalidIntTestValue("split", "to", "int32_t", paramTo).value();
	utils->initialize("split", "to", "int32_t", paramTo);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "to", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "to", "int32_t", paramTo);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "to", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "to", "int32_t", paramTo);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "to", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidDestFolder) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramDestFolder = utils->getInvalidTestValue("split", "destFolder", "utility::string_t", paramDestFolder);
	utils->initialize("split", "destFolder", "utility::string_t", paramDestFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "destFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "destFolder", "utility::string_t", paramDestFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "destFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "destFolder", "utility::string_t", paramDestFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "destFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("split", "password", "utility::string_t", paramPassword);
	utils->initialize("split", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("split", "folder", "utility::string_t", paramFolder);
	utils->initialize("split", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("split", "storage", "utility::string_t", paramStorage);
	utils->initialize("split", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("split", "name", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options", "std::shared_ptr<ExportOptions>");
	utility::string_t paramFormat = utils->getTestValue("split", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("split", "to", "int32_t");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("split", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("split", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("split", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder", "utility::string_t");
	paramFontsFolder = utils->getInvalidTestValue("split", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("split", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	utils->initialize("splitAndSaveOnline", "", "");
	std::shared_ptr<SplitDocumentResult> result = utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	paramDocument = utils->getInvalidBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	paramFormat = utils->getInvalidTestValue("splitAndSaveOnline", "format", "utility::string_t", paramFormat);
	utils->initialize("splitAndSaveOnline", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidDestFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	paramDestFolder = utils->getInvalidTestValue("splitAndSaveOnline", "destFolder", "utility::string_t", paramDestFolder);
	utils->initialize("splitAndSaveOnline", "destFolder", "utility::string_t", paramDestFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "destFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "destFolder", "utility::string_t", paramDestFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "destFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "destFolder", "utility::string_t", paramDestFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "destFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	paramWidth = utils->getInvalidIntTestValue("splitAndSaveOnline", "width", "int32_t", paramWidth).value();
	utils->initialize("splitAndSaveOnline", "width", "int32_t", paramWidth);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "width", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "width", "int32_t", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "width", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "width", "int32_t", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "width", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	paramHeight = utils->getInvalidIntTestValue("splitAndSaveOnline", "height", "int32_t", paramHeight).value();
	utils->initialize("splitAndSaveOnline", "height", "int32_t", paramHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "height", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "height", "int32_t", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "height", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "height", "int32_t", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "height", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidFrom) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	paramFrom = utils->getInvalidIntTestValue("splitAndSaveOnline", "from", "int32_t", paramFrom).value();
	utils->initialize("splitAndSaveOnline", "from", "int32_t", paramFrom);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "from", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "from", "int32_t", paramFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "from", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "from", "int32_t", paramFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "from", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidTo) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	paramTo = utils->getInvalidIntTestValue("splitAndSaveOnline", "to", "int32_t", paramTo).value();
	utils->initialize("splitAndSaveOnline", "to", "int32_t", paramTo);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "to", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "to", "int32_t", paramTo);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "to", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "to", "int32_t", paramTo);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "to", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	paramPassword = utils->getInvalidTestValue("splitAndSaveOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("splitAndSaveOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	paramStorage = utils->getInvalidTestValue("splitAndSaveOnline", "storage", "utility::string_t", paramStorage);
	utils->initialize("splitAndSaveOnline", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	paramFontsFolder = utils->getInvalidTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("splitAndSaveOnline", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidOptions) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format", "utility::string_t");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
	paramOptions = utils->getInvalidTestValueForClass<>("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
	utils->initialize("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "options", "std::shared_ptr<ExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitOnline", "options", "std::shared_ptr<ExportOptions>");
	utils->initialize("splitOnline", "", "");
	HttpContent result = utils->getSlidesApi()->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, splitOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitOnline", "options", "std::shared_ptr<ExportOptions>");
	paramDocument = utils->getInvalidBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
	utils->initialize("splitOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "document", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "document", "std::shared_ptr<HttpContent>", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "document", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitOnline", "options", "std::shared_ptr<ExportOptions>");
	paramFormat = utils->getInvalidTestValue("splitOnline", "format", "utility::string_t", paramFormat);
	utils->initialize("splitOnline", "format", "utility::string_t", paramFormat);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "format", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "format", "utility::string_t", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "format", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "format", "utility::string_t", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "format", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitOnline", "options", "std::shared_ptr<ExportOptions>");
	paramWidth = utils->getInvalidIntTestValue("splitOnline", "width", "int32_t", paramWidth).value();
	utils->initialize("splitOnline", "width", "int32_t", paramWidth);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "width", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "width", "int32_t", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "width", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "width", "int32_t", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "width", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitOnline", "options", "std::shared_ptr<ExportOptions>");
	paramHeight = utils->getInvalidIntTestValue("splitOnline", "height", "int32_t", paramHeight).value();
	utils->initialize("splitOnline", "height", "int32_t", paramHeight);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "height", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "height", "int32_t", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "height", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "height", "int32_t", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "height", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidFrom) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitOnline", "options", "std::shared_ptr<ExportOptions>");
	paramFrom = utils->getInvalidIntTestValue("splitOnline", "from", "int32_t", paramFrom).value();
	utils->initialize("splitOnline", "from", "int32_t", paramFrom);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "from", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "from", "int32_t", paramFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "from", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "from", "int32_t", paramFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "from", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidTo) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitOnline", "options", "std::shared_ptr<ExportOptions>");
	paramTo = utils->getInvalidIntTestValue("splitOnline", "to", "int32_t", paramTo).value();
	utils->initialize("splitOnline", "to", "int32_t", paramTo);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "to", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "to", "int32_t", paramTo);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "to", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "to", "int32_t", paramTo);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "to", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitOnline", "options", "std::shared_ptr<ExportOptions>");
	paramPassword = utils->getInvalidTestValue("splitOnline", "password", "utility::string_t", paramPassword);
	utils->initialize("splitOnline", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitOnline", "options", "std::shared_ptr<ExportOptions>");
	paramStorage = utils->getInvalidTestValue("splitOnline", "storage", "utility::string_t", paramStorage);
	utils->initialize("splitOnline", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitOnline", "options", "std::shared_ptr<ExportOptions>");
	paramFontsFolder = utils->getInvalidTestValue("splitOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
	utils->initialize("splitOnline", "fontsFolder", "utility::string_t", paramFontsFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "fontsFolder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "fontsFolder", "utility::string_t", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "fontsFolder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidOptions) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document", "std::shared_ptr<HttpContent>");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format", "utility::string_t");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width", "int32_t");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height", "int32_t");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from", "int32_t");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to", "int32_t");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage", "utility::string_t");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder", "utility::string_t");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("splitOnline", "options", "std::shared_ptr<ExportOptions>");
	paramOptions = utils->getInvalidTestValueForClass<>("splitOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
	utils->initialize("splitOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder, paramOptions).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "options", "std::shared_ptr<ExportOptions>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "options", "std::shared_ptr<ExportOptions>", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "options", "std::shared_ptr<ExportOptions>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitTableCell) {
	utility::string_t paramName = utils->getTestValue("splitTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("splitTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("splitTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("splitTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("splitTableCell", "cellIndex", "int32_t");
	utility::string_t paramSplitType = utils->getTestValue("splitTableCell", "splitType", "utility::string_t");
	double paramValue = utils->getDoubleTestValue("splitTableCell", "value", "double");
	utility::string_t paramPassword = utils->getTestValue("splitTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("splitTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitTableCell", "storage", "utility::string_t");
	utils->initialize("splitTableCell", "", "");
	std::shared_ptr<Table> result = utils->getSlidesApi()->splitTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramSplitType, paramValue, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, splitTableCellInvalidName) {
	utility::string_t paramName = utils->getTestValue("splitTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("splitTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("splitTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("splitTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("splitTableCell", "cellIndex", "int32_t");
	utility::string_t paramSplitType = utils->getTestValue("splitTableCell", "splitType", "utility::string_t");
	double paramValue = utils->getDoubleTestValue("splitTableCell", "value", "double");
	utility::string_t paramPassword = utils->getTestValue("splitTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("splitTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitTableCell", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("splitTableCell", "name", "utility::string_t", paramName);
	utils->initialize("splitTableCell", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramSplitType, paramValue, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitTableCell", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitTableCellInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("splitTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("splitTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("splitTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("splitTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("splitTableCell", "cellIndex", "int32_t");
	utility::string_t paramSplitType = utils->getTestValue("splitTableCell", "splitType", "utility::string_t");
	double paramValue = utils->getDoubleTestValue("splitTableCell", "value", "double");
	utility::string_t paramPassword = utils->getTestValue("splitTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("splitTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitTableCell", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("splitTableCell", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("splitTableCell", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramSplitType, paramValue, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitTableCell", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitTableCellInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("splitTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("splitTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("splitTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("splitTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("splitTableCell", "cellIndex", "int32_t");
	utility::string_t paramSplitType = utils->getTestValue("splitTableCell", "splitType", "utility::string_t");
	double paramValue = utils->getDoubleTestValue("splitTableCell", "value", "double");
	utility::string_t paramPassword = utils->getTestValue("splitTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("splitTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitTableCell", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("splitTableCell", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("splitTableCell", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramSplitType, paramValue, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitTableCell", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitTableCellInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("splitTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("splitTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("splitTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("splitTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("splitTableCell", "cellIndex", "int32_t");
	utility::string_t paramSplitType = utils->getTestValue("splitTableCell", "splitType", "utility::string_t");
	double paramValue = utils->getDoubleTestValue("splitTableCell", "value", "double");
	utility::string_t paramPassword = utils->getTestValue("splitTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("splitTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitTableCell", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("splitTableCell", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("splitTableCell", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramSplitType, paramValue, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitTableCell", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitTableCellInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("splitTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("splitTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("splitTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("splitTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("splitTableCell", "cellIndex", "int32_t");
	utility::string_t paramSplitType = utils->getTestValue("splitTableCell", "splitType", "utility::string_t");
	double paramValue = utils->getDoubleTestValue("splitTableCell", "value", "double");
	utility::string_t paramPassword = utils->getTestValue("splitTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("splitTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitTableCell", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("splitTableCell", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("splitTableCell", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramSplitType, paramValue, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitTableCell", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitTableCellInvalidSplitType) {
	utility::string_t paramName = utils->getTestValue("splitTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("splitTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("splitTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("splitTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("splitTableCell", "cellIndex", "int32_t");
	utility::string_t paramSplitType = utils->getTestValue("splitTableCell", "splitType", "utility::string_t");
	double paramValue = utils->getDoubleTestValue("splitTableCell", "value", "double");
	utility::string_t paramPassword = utils->getTestValue("splitTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("splitTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitTableCell", "storage", "utility::string_t");
	paramSplitType = utils->getInvalidTestValue("splitTableCell", "splitType", "utility::string_t", paramSplitType);
	utils->initialize("splitTableCell", "splitType", "utility::string_t", paramSplitType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramSplitType, paramValue, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "splitType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "splitType", "utility::string_t", paramSplitType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "splitType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "splitType", "utility::string_t", paramSplitType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitTableCell", "splitType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitTableCellInvalidValue) {
	utility::string_t paramName = utils->getTestValue("splitTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("splitTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("splitTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("splitTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("splitTableCell", "cellIndex", "int32_t");
	utility::string_t paramSplitType = utils->getTestValue("splitTableCell", "splitType", "utility::string_t");
	double paramValue = utils->getDoubleTestValue("splitTableCell", "value", "double");
	utility::string_t paramPassword = utils->getTestValue("splitTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("splitTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitTableCell", "storage", "utility::string_t");
	paramValue = utils->getInvalidDoubleTestValue("splitTableCell", "value", "double", paramValue).value();
	utils->initialize("splitTableCell", "value", "double", paramValue);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramSplitType, paramValue, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "value", "double");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "value", "double", paramValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "value", "double");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "value", "double", paramValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitTableCell", "value", "double"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitTableCellInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("splitTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("splitTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("splitTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("splitTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("splitTableCell", "cellIndex", "int32_t");
	utility::string_t paramSplitType = utils->getTestValue("splitTableCell", "splitType", "utility::string_t");
	double paramValue = utils->getDoubleTestValue("splitTableCell", "value", "double");
	utility::string_t paramPassword = utils->getTestValue("splitTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("splitTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitTableCell", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("splitTableCell", "password", "utility::string_t", paramPassword);
	utils->initialize("splitTableCell", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramSplitType, paramValue, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitTableCell", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitTableCellInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("splitTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("splitTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("splitTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("splitTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("splitTableCell", "cellIndex", "int32_t");
	utility::string_t paramSplitType = utils->getTestValue("splitTableCell", "splitType", "utility::string_t");
	double paramValue = utils->getDoubleTestValue("splitTableCell", "value", "double");
	utility::string_t paramPassword = utils->getTestValue("splitTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("splitTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitTableCell", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("splitTableCell", "folder", "utility::string_t", paramFolder);
	utils->initialize("splitTableCell", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramSplitType, paramValue, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitTableCell", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitTableCellInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("splitTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("splitTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("splitTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("splitTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("splitTableCell", "cellIndex", "int32_t");
	utility::string_t paramSplitType = utils->getTestValue("splitTableCell", "splitType", "utility::string_t");
	double paramValue = utils->getDoubleTestValue("splitTableCell", "value", "double");
	utility::string_t paramPassword = utils->getTestValue("splitTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("splitTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("splitTableCell", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("splitTableCell", "storage", "utility::string_t", paramStorage);
	utils->initialize("splitTableCell", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->splitTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramSplitType, paramValue, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitTableCell", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitTableCell", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitTableCell", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, storageExists) {
	utility::string_t paramStorageName = utils->getTestValue("storageExists", "storageName", "utility::string_t");
	utils->initialize("storageExists", "", "");
	std::shared_ptr<StorageExist> result = utils->getSlidesApi()->storageExists(paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, storageExistsInvalidStorageName) {
	utility::string_t paramStorageName = utils->getTestValue("storageExists", "storageName", "utility::string_t");
	paramStorageName = utils->getInvalidTestValue("storageExists", "storageName", "utility::string_t", paramStorageName);
	utils->initialize("storageExists", "storageName", "utility::string_t", paramStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->storageExists(paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("storageExists", "storageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("storageExists", "storageName", "utility::string_t", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("storageExists", "storageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("storageExists", "storageName", "utility::string_t", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("storageExists", "storageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage", "utility::string_t");
	utils->initialize("updateAnimationEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateAnimationEffect", "name", "utility::string_t", paramName);
	utils->initialize("updateAnimationEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateAnimationEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage", "utility::string_t");
	paramEffectIndex = utils->getInvalidIntTestValue("updateAnimationEffect", "effectIndex", "int32_t", paramEffectIndex).value();
	utils->initialize("updateAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "effectIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage", "utility::string_t");
	paramEffect = utils->getInvalidTestValueForClass<>("updateAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
	utils->initialize("updateAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "effect", "std::shared_ptr<Effect>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateAnimationEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("updateAnimationEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateAnimationEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateAnimationEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateAnimationEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateAnimationEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	utils->initialize("updateAnimationInteractiveSequenceEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
	utils->initialize("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSequenceIndex = utils->getInvalidIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex).value();
	utils->initialize("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramEffectIndex = utils->getInvalidIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex).value();
	utils->initialize("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramEffect = utils->getInvalidTestValueForClass<>("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
	utils->initialize("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategory) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage", "utility::string_t");
	utils->initialize("updateChartCategory", "", "");
	std::shared_ptr<Chart> result = utils->getSlidesApi()->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateChartCategory", "name", "utility::string_t", paramName);
	utils->initialize("updateChartCategory", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateChartCategory", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateChartCategory", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateChartCategory", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateChartCategory", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidCategoryIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage", "utility::string_t");
	paramCategoryIndex = utils->getInvalidIntTestValue("updateChartCategory", "categoryIndex", "int32_t", paramCategoryIndex).value();
	utils->initialize("updateChartCategory", "categoryIndex", "int32_t", paramCategoryIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "categoryIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "categoryIndex", "int32_t", paramCategoryIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "categoryIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "categoryIndex", "int32_t", paramCategoryIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "categoryIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidCategory) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage", "utility::string_t");
	paramCategory = utils->getInvalidTestValueForClass<>("updateChartCategory", "category", "std::shared_ptr<ChartCategory>", paramCategory);
	utils->initialize("updateChartCategory", "category", "std::shared_ptr<ChartCategory>", paramCategory);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "category", "std::shared_ptr<ChartCategory>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "category", "std::shared_ptr<ChartCategory>", paramCategory);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "category", "std::shared_ptr<ChartCategory>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "category", "std::shared_ptr<ChartCategory>", paramCategory);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "category", "std::shared_ptr<ChartCategory>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateChartCategory", "password", "utility::string_t", paramPassword);
	utils->initialize("updateChartCategory", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateChartCategory", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateChartCategory", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex", "int32_t");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex", "int32_t");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category", "std::shared_ptr<ChartCategory>");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateChartCategory", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateChartCategory", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPoint) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage", "utility::string_t");
	utils->initialize("updateChartDataPoint", "", "");
	std::shared_ptr<Chart> result = utils->getSlidesApi()->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateChartDataPoint", "name", "utility::string_t", paramName);
	utils->initialize("updateChartDataPoint", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateChartDataPoint", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateChartDataPoint", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage", "utility::string_t");
	paramSeriesIndex = utils->getInvalidIntTestValue("updateChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex).value();
	utils->initialize("updateChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "seriesIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "seriesIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "seriesIndex", "int32_t", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "seriesIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidPointIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage", "utility::string_t");
	paramPointIndex = utils->getInvalidIntTestValue("updateChartDataPoint", "pointIndex", "int32_t", paramPointIndex).value();
	utils->initialize("updateChartDataPoint", "pointIndex", "int32_t", paramPointIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "pointIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "pointIndex", "int32_t", paramPointIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "pointIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "pointIndex", "int32_t", paramPointIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "pointIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidDataPoint) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage", "utility::string_t");
	paramDataPoint = utils->getInvalidTestValueForClass<>("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>", paramDataPoint);
	utils->initialize("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>", paramDataPoint);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>", paramDataPoint);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>", paramDataPoint);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateChartDataPoint", "password", "utility::string_t", paramPassword);
	utils->initialize("updateChartDataPoint", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateChartDataPoint", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateChartDataPoint", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex", "int32_t");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex", "int32_t");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint", "std::shared_ptr<DataPoint>");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateChartDataPoint", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateChartDataPoint", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeries) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage", "utility::string_t");
	utils->initialize("updateChartSeries", "", "");
	std::shared_ptr<Chart> result = utils->getSlidesApi()->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateChartSeries", "name", "utility::string_t", paramName);
	utils->initialize("updateChartSeries", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateChartSeries", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateChartSeries", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateChartSeries", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateChartSeries", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage", "utility::string_t");
	paramSeriesIndex = utils->getInvalidIntTestValue("updateChartSeries", "seriesIndex", "int32_t", paramSeriesIndex).value();
	utils->initialize("updateChartSeries", "seriesIndex", "int32_t", paramSeriesIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "seriesIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "seriesIndex", "int32_t", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "seriesIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "seriesIndex", "int32_t", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "seriesIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidSeries) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage", "utility::string_t");
	paramSeries = utils->getInvalidTestValueForClass<>("updateChartSeries", "series", "std::shared_ptr<Series>", paramSeries);
	utils->initialize("updateChartSeries", "series", "std::shared_ptr<Series>", paramSeries);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "series", "std::shared_ptr<Series>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "series", "std::shared_ptr<Series>", paramSeries);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "series", "std::shared_ptr<Series>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "series", "std::shared_ptr<Series>", paramSeries);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "series", "std::shared_ptr<Series>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateChartSeries", "password", "utility::string_t", paramPassword);
	utils->initialize("updateChartSeries", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateChartSeries", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateChartSeries", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex", "int32_t");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex", "int32_t");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series", "std::shared_ptr<Series>");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateChartSeries", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateChartSeries", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlide) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex", "int32_t");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage", "utility::string_t");
	utils->initialize("updateLayoutSlide", "", "");
	std::shared_ptr<LayoutSlide> result = utils->getSlidesApi()->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex", "int32_t");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateLayoutSlide", "name", "utility::string_t", paramName);
	utils->initialize("updateLayoutSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex", "int32_t");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateLayoutSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateLayoutSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidSlideDto) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex", "int32_t");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage", "utility::string_t");
	paramSlideDto = utils->getInvalidTestValueForClass<>("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>", paramSlideDto);
	utils->initialize("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>", paramSlideDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>", paramSlideDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>", paramSlideDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex", "int32_t");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateLayoutSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("updateLayoutSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex", "int32_t");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateLayoutSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateLayoutSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex", "int32_t");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto", "std::shared_ptr<LayoutSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateLayoutSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateLayoutSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlide) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage", "utility::string_t");
	utils->initialize("updateNotesSlide", "", "");
	std::shared_ptr<NotesSlide> result = utils->getSlidesApi()->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateNotesSlide", "name", "utility::string_t", paramName);
	utils->initialize("updateNotesSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateNotesSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateNotesSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>", paramDto);
	utils->initialize("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateNotesSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("updateNotesSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateNotesSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateNotesSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex", "int32_t");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto", "std::shared_ptr<NotesSlide>");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateNotesSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateNotesSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraph) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateParagraph", "subShape", "utility::string_t");
	utils->initialize("updateParagraph", "", "");
	std::shared_ptr<Paragraph> result = utils->getSlidesApi()->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateParagraph", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateParagraph", "name", "utility::string_t", paramName);
	utils->initialize("updateParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateParagraph", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateParagraph", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateParagraph", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("updateParagraph", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("updateParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateParagraph", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("updateParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
	utils->initialize("updateParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "dto", "std::shared_ptr<Paragraph>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateParagraph", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("updateParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateParagraph", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateParagraph", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateParagraph", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("updateParagraph", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("updateParagraph", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortion) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updatePortion", "subShape", "utility::string_t");
	utils->initialize("updatePortion", "", "");
	std::shared_ptr<Portion> result = utils->getSlidesApi()->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updatePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updatePortion", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("updatePortion", "name", "utility::string_t", paramName);
	utils->initialize("updatePortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updatePortion", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updatePortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updatePortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updatePortion", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updatePortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updatePortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updatePortion", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("updatePortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("updatePortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updatePortion", "subShape", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("updatePortion", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("updatePortion", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updatePortion", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("updatePortion", "dto", "std::shared_ptr<Portion>", paramDto);
	utils->initialize("updatePortion", "dto", "std::shared_ptr<Portion>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "dto", "std::shared_ptr<Portion>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "dto", "std::shared_ptr<Portion>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "dto", "std::shared_ptr<Portion>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updatePortion", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updatePortion", "password", "utility::string_t", paramPassword);
	utils->initialize("updatePortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updatePortion", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updatePortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("updatePortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updatePortion", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updatePortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("updatePortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updatePortion", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("updatePortion", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("updatePortion", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSection) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex", "int32_t");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage", "utility::string_t");
	utils->initialize("updateSection", "", "");
	std::shared_ptr<Sections> result = utils->getSlidesApi()->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex", "int32_t");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateSection", "name", "utility::string_t", paramName);
	utils->initialize("updateSection", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSectionInvalidSectionIndex) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex", "int32_t");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage", "utility::string_t");
	paramSectionIndex = utils->getInvalidIntTestValue("updateSection", "sectionIndex", "int32_t", paramSectionIndex).value();
	utils->initialize("updateSection", "sectionIndex", "int32_t", paramSectionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "sectionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "sectionIndex", "int32_t", paramSectionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "sectionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "sectionIndex", "int32_t", paramSectionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "sectionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSectionInvalidSectionName) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex", "int32_t");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage", "utility::string_t");
	paramSectionName = utils->getInvalidTestValue("updateSection", "sectionName", "utility::string_t", paramSectionName);
	utils->initialize("updateSection", "sectionName", "utility::string_t", paramSectionName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "sectionName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "sectionName", "utility::string_t", paramSectionName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "sectionName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "sectionName", "utility::string_t", paramSectionName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "sectionName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex", "int32_t");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateSection", "password", "utility::string_t", paramPassword);
	utils->initialize("updateSection", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex", "int32_t");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateSection", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateSection", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name", "utility::string_t");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex", "int32_t");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName", "utility::string_t");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateSection", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateSection", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShape) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateShape", "subShape", "utility::string_t");
	utils->initialize("updateShape", "", "");
	std::shared_ptr<ShapeBase> result = utils->getSlidesApi()->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateShape", "name", "utility::string_t", paramName);
	utils->initialize("updateShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateShape", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateShape", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateShape", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateShape", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("updateShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
	utils->initialize("updateShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "dto", "std::shared_ptr<ShapeBase>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "dto", "std::shared_ptr<ShapeBase>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "dto", "std::shared_ptr<ShapeBase>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateShape", "password", "utility::string_t", paramPassword);
	utils->initialize("updateShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("updateShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("updateShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlide) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex", "int32_t");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto", "std::shared_ptr<Slide>");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage", "utility::string_t");
	utils->initialize("updateSlide", "", "");
	std::shared_ptr<Slide> result = utils->getSlidesApi()->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex", "int32_t");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto", "std::shared_ptr<Slide>");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateSlide", "name", "utility::string_t", paramName);
	utils->initialize("updateSlide", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex", "int32_t");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto", "std::shared_ptr<Slide>");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateSlide", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateSlide", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlideInvalidSlideDto) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex", "int32_t");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto", "std::shared_ptr<Slide>");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage", "utility::string_t");
	paramSlideDto = utils->getInvalidTestValueForClass<>("updateSlide", "slideDto", "std::shared_ptr<Slide>", paramSlideDto);
	utils->initialize("updateSlide", "slideDto", "std::shared_ptr<Slide>", paramSlideDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "slideDto", "std::shared_ptr<Slide>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "slideDto", "std::shared_ptr<Slide>", paramSlideDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "slideDto", "std::shared_ptr<Slide>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "slideDto", "std::shared_ptr<Slide>", paramSlideDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "slideDto", "std::shared_ptr<Slide>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex", "int32_t");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto", "std::shared_ptr<Slide>");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateSlide", "password", "utility::string_t", paramPassword);
	utils->initialize("updateSlide", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex", "int32_t");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto", "std::shared_ptr<Slide>");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateSlide", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateSlide", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex", "int32_t");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto", "std::shared_ptr<Slide>");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateSlide", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateSlide", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationEffect", "storage", "utility::string_t");
	utils->initialize("updateSpecialSlideAnimationEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);
	utils->initialize("updateSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationEffectInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramEffectIndex = utils->getInvalidIntTestValue("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t", paramEffectIndex).value();
	utils->initialize("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramEffect = utils->getInvalidTestValueForClass<>("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
	utils->initialize("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("updateSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationEffect", "slideType", "utility::string_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	utils->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "", "");
	std::shared_ptr<SlideAnimation> result = utils->getSlidesApi()->updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
	utils->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramSequenceIndex = utils->getInvalidIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex).value();
	utils->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramEffectIndex = utils->getInvalidIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex).value();
	utils->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramEffect = utils->getInvalidTestValueForClass<>("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
	utils->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
	utils->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "utility::string_t");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32_t");
	int32_t paramEffectIndex = utils->getIntTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32_t");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "std::shared_ptr<Effect>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideParagraph) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t");
	utils->initialize("updateSpecialSlideParagraph", "", "");
	std::shared_ptr<Paragraph> result = utils->getSlidesApi()->updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSpecialSlideParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateSpecialSlideParagraph", "name", "utility::string_t", paramName);
	utils->initialize("updateSpecialSlideParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideParagraphInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("updateSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideParagraph", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("updateSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideParagraph", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
	utils->initialize("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("updateSpecialSlideParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideParagraphInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideParagraph", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlideParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSpecialSlideParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideParagraph", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("updateSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("updateSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideParagraph", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideParagraph", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideParagraph", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlidePortion) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	utils->initialize("updateSpecialSlidePortion", "", "");
	std::shared_ptr<Portion> result = utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSpecialSlidePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateSpecialSlidePortion", "name", "utility::string_t", paramName);
	utils->initialize("updateSpecialSlidePortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlidePortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlidePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlidePortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlidePortionInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("updateSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlidePortion", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlidePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlidePortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlidePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("updateSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlidePortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlidePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("updateSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlidePortion", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlidePortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>", paramDto);
	utils->initialize("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlidePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateSpecialSlidePortion", "password", "utility::string_t", paramPassword);
	utils->initialize("updateSpecialSlidePortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlidePortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlidePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateSpecialSlidePortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlidePortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlidePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateSpecialSlidePortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlidePortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlidePortionInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlidePortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlidePortion", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlidePortion", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlidePortion", "shapeIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSpecialSlidePortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSpecialSlidePortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSpecialSlidePortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlidePortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlidePortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlidePortion", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("updateSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("updateSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlidePortion", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlidePortion", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlidePortion", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideShape) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideShape", "subShape", "utility::string_t");
	utils->initialize("updateSpecialSlideShape", "", "");
	std::shared_ptr<ShapeBase> result = utils->getSlidesApi()->updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSpecialSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideShape", "subShape", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateSpecialSlideShape", "name", "utility::string_t", paramName);
	utils->initialize("updateSpecialSlideShape", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideShape", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideShape", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideShapeInvalidSlideType) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideShape", "subShape", "utility::string_t");
	paramSlideType = utils->getInvalidTestValue("updateSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
	utils->initialize("updateSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "slideType", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "slideType", "utility::string_t", paramSlideType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideShape", "slideType", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideShape", "subShape", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideShape", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideShapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideShape", "subShape", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
	utils->initialize("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideShape", "subShape", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateSpecialSlideShape", "password", "utility::string_t", paramPassword);
	utils->initialize("updateSpecialSlideShape", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideShape", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideShape", "subShape", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateSpecialSlideShape", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateSpecialSlideShape", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideShape", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideShape", "subShape", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateSpecialSlideShape", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateSpecialSlideShape", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideShape", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSpecialSlideShapeInvalidSubShape) {
	utility::string_t paramName = utils->getTestValue("updateSpecialSlideShape", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSpecialSlideShape", "slideIndex", "int32_t");
	utility::string_t paramSlideType = utils->getTestValue("updateSpecialSlideShape", "slideType", "utility::string_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSpecialSlideShape", "shapeIndex", "int32_t");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSpecialSlideShape", "dto", "std::shared_ptr<ShapeBase>");
	utility::string_t paramPassword = utils->getTestValue("updateSpecialSlideShape", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateSpecialSlideShape", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateSpecialSlideShape", "storage", "utility::string_t");
	utility::string_t paramSubShape = utils->getTestValue("updateSpecialSlideShape", "subShape", "utility::string_t");
	paramSubShape = utils->getInvalidTestValue("updateSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
	utils->initialize("updateSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSpecialSlideShape", "subShape", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSpecialSlideShape", "subShape", "utility::string_t", paramSubShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSpecialSlideShape", "subShape", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCell) {
	utility::string_t paramName = utils->getTestValue("updateTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCell", "cellIndex", "int32_t");
	std::shared_ptr<TableCell> paramDto = utils->getTestValueForClass<TableCell>("updateTableCell", "dto", "std::shared_ptr<TableCell>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCell", "storage", "utility::string_t");
	utils->initialize("updateTableCell", "", "");
	std::shared_ptr<TableCell> result = utils->getSlidesApi()->updateTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateTableCellInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCell", "cellIndex", "int32_t");
	std::shared_ptr<TableCell> paramDto = utils->getTestValueForClass<TableCell>("updateTableCell", "dto", "std::shared_ptr<TableCell>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCell", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateTableCell", "name", "utility::string_t", paramName);
	utils->initialize("updateTableCell", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCell", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCell", "cellIndex", "int32_t");
	std::shared_ptr<TableCell> paramDto = utils->getTestValueForClass<TableCell>("updateTableCell", "dto", "std::shared_ptr<TableCell>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCell", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateTableCell", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateTableCell", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCell", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCell", "cellIndex", "int32_t");
	std::shared_ptr<TableCell> paramDto = utils->getTestValueForClass<TableCell>("updateTableCell", "dto", "std::shared_ptr<TableCell>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCell", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateTableCell", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateTableCell", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCell", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCell", "cellIndex", "int32_t");
	std::shared_ptr<TableCell> paramDto = utils->getTestValueForClass<TableCell>("updateTableCell", "dto", "std::shared_ptr<TableCell>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCell", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("updateTableCell", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("updateTableCell", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCell", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCell", "cellIndex", "int32_t");
	std::shared_ptr<TableCell> paramDto = utils->getTestValueForClass<TableCell>("updateTableCell", "dto", "std::shared_ptr<TableCell>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCell", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("updateTableCell", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("updateTableCell", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCell", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCell", "cellIndex", "int32_t");
	std::shared_ptr<TableCell> paramDto = utils->getTestValueForClass<TableCell>("updateTableCell", "dto", "std::shared_ptr<TableCell>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCell", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("updateTableCell", "dto", "std::shared_ptr<TableCell>", paramDto);
	utils->initialize("updateTableCell", "dto", "std::shared_ptr<TableCell>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "dto", "std::shared_ptr<TableCell>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "dto", "std::shared_ptr<TableCell>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "dto", "std::shared_ptr<TableCell>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "dto", "std::shared_ptr<TableCell>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCell", "dto", "std::shared_ptr<TableCell>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCell", "cellIndex", "int32_t");
	std::shared_ptr<TableCell> paramDto = utils->getTestValueForClass<TableCell>("updateTableCell", "dto", "std::shared_ptr<TableCell>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCell", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateTableCell", "password", "utility::string_t", paramPassword);
	utils->initialize("updateTableCell", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCell", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCell", "cellIndex", "int32_t");
	std::shared_ptr<TableCell> paramDto = utils->getTestValueForClass<TableCell>("updateTableCell", "dto", "std::shared_ptr<TableCell>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCell", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateTableCell", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateTableCell", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCell", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateTableCell", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCell", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCell", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCell", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCell", "cellIndex", "int32_t");
	std::shared_ptr<TableCell> paramDto = utils->getTestValueForClass<TableCell>("updateTableCell", "dto", "std::shared_ptr<TableCell>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCell", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCell", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCell", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateTableCell", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateTableCell", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCell(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCell", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCell", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCell", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellParagraph) {
	utility::string_t paramName = utils->getTestValue("updateTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellParagraph", "storage", "utility::string_t");
	utils->initialize("updateTableCellParagraph", "", "");
	std::shared_ptr<Paragraph> result = utils->getSlidesApi()->updateTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateTableCellParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellParagraph", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateTableCellParagraph", "name", "utility::string_t", paramName);
	utils->initialize("updateTableCellParagraph", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellParagraph", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellParagraph", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellParagraph", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellParagraph", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellParagraph", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellParagraphInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellParagraph", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("updateTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellParagraph", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellParagraphInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellParagraph", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("updateTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellParagraph", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellParagraph", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("updateTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellParagraph", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellParagraph", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
	utils->initialize("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellParagraph", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateTableCellParagraph", "password", "utility::string_t", paramPassword);
	utils->initialize("updateTableCellParagraph", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellParagraph", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellParagraph", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateTableCellParagraph", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateTableCellParagraph", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellParagraph", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateTableCellParagraph", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellParagraph", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellParagraph", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellParagraph", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellParagraph", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellParagraph", "paragraphIndex", "int32_t");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateTableCellParagraph", "dto", "std::shared_ptr<Paragraph>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellParagraph", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellParagraph", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellParagraph", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateTableCellParagraph", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateTableCellParagraph", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellParagraph(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellParagraph", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellParagraph", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellParagraph", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellPortion) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	utils->initialize("updateTableCellPortion", "", "");
	std::shared_ptr<Portion> result = utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateTableCellPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateTableCellPortion", "name", "utility::string_t", paramName);
	utils->initialize("updateTableCellPortion", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellPortion", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateTableCellPortion", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellPortion", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellPortion", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellPortionInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("updateTableCellPortion", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("updateTableCellPortion", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellPortion", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellPortionInvalidCellIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	paramCellIndex = utils->getInvalidIntTestValue("updateTableCellPortion", "cellIndex", "int32_t", paramCellIndex).value();
	utils->initialize("updateTableCellPortion", "cellIndex", "int32_t", paramCellIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "cellIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "cellIndex", "int32_t", paramCellIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "cellIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "cellIndex", "int32_t", paramCellIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellPortion", "cellIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	paramParagraphIndex = utils->getInvalidIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex).value();
	utils->initialize("updateTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "paragraphIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "paragraphIndex", "int32_t", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellPortion", "paragraphIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellPortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	paramPortionIndex = utils->getInvalidIntTestValue("updateTableCellPortion", "portionIndex", "int32_t", paramPortionIndex).value();
	utils->initialize("updateTableCellPortion", "portionIndex", "int32_t", paramPortionIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "portionIndex", "int32_t", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "portionIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "portionIndex", "int32_t", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellPortion", "portionIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellPortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>", paramDto);
	utils->initialize("updateTableCellPortion", "dto", "std::shared_ptr<Portion>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "dto", "std::shared_ptr<Portion>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "dto", "std::shared_ptr<Portion>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellPortion", "dto", "std::shared_ptr<Portion>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateTableCellPortion", "password", "utility::string_t", paramPassword);
	utils->initialize("updateTableCellPortion", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellPortion", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateTableCellPortion", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateTableCellPortion", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellPortion", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableCellPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateTableCellPortion", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableCellPortion", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableCellPortion", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableCellPortion", "rowIndex", "int32_t");
	int32_t paramCellIndex = utils->getIntTestValue("updateTableCellPortion", "cellIndex", "int32_t");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateTableCellPortion", "paragraphIndex", "int32_t");
	int32_t paramPortionIndex = utils->getIntTestValue("updateTableCellPortion", "portionIndex", "int32_t");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateTableCellPortion", "dto", "std::shared_ptr<Portion>");
	utility::string_t paramPassword = utils->getTestValue("updateTableCellPortion", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableCellPortion", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableCellPortion", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateTableCellPortion", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateTableCellPortion", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableCellPortion(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramCellIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableCellPortion", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableCellPortion", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableCellPortion", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableRow) {
	utility::string_t paramName = utils->getTestValue("updateTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableRow", "rowIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("updateTableRow", "dto", "std::shared_ptr<TableRow>");
	utility::string_t paramPassword = utils->getTestValue("updateTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableRow", "storage", "utility::string_t");
	utils->initialize("updateTableRow", "", "");
	std::shared_ptr<TableRow> result = utils->getSlidesApi()->updateTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateTableRowInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableRow", "rowIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("updateTableRow", "dto", "std::shared_ptr<TableRow>");
	utility::string_t paramPassword = utils->getTestValue("updateTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableRow", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateTableRow", "name", "utility::string_t", paramName);
	utils->initialize("updateTableRow", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableRow", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableRowInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableRow", "rowIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("updateTableRow", "dto", "std::shared_ptr<TableRow>");
	utility::string_t paramPassword = utils->getTestValue("updateTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableRow", "storage", "utility::string_t");
	paramSlideIndex = utils->getInvalidIntTestValue("updateTableRow", "slideIndex", "int32_t", paramSlideIndex).value();
	utils->initialize("updateTableRow", "slideIndex", "int32_t", paramSlideIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "slideIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "slideIndex", "int32_t", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "slideIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "slideIndex", "int32_t", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableRow", "slideIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableRowInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableRow", "rowIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("updateTableRow", "dto", "std::shared_ptr<TableRow>");
	utility::string_t paramPassword = utils->getTestValue("updateTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableRow", "storage", "utility::string_t");
	paramShapeIndex = utils->getInvalidIntTestValue("updateTableRow", "shapeIndex", "int32_t", paramShapeIndex).value();
	utils->initialize("updateTableRow", "shapeIndex", "int32_t", paramShapeIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "shapeIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "shapeIndex", "int32_t", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "shapeIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "shapeIndex", "int32_t", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableRow", "shapeIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableRowInvalidRowIndex) {
	utility::string_t paramName = utils->getTestValue("updateTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableRow", "rowIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("updateTableRow", "dto", "std::shared_ptr<TableRow>");
	utility::string_t paramPassword = utils->getTestValue("updateTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableRow", "storage", "utility::string_t");
	paramRowIndex = utils->getInvalidIntTestValue("updateTableRow", "rowIndex", "int32_t", paramRowIndex).value();
	utils->initialize("updateTableRow", "rowIndex", "int32_t", paramRowIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "rowIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "rowIndex", "int32_t", paramRowIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "rowIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "rowIndex", "int32_t", paramRowIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableRow", "rowIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableRowInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableRow", "rowIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("updateTableRow", "dto", "std::shared_ptr<TableRow>");
	utility::string_t paramPassword = utils->getTestValue("updateTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableRow", "storage", "utility::string_t");
	paramDto = utils->getInvalidTestValueForClass<>("updateTableRow", "dto", "std::shared_ptr<TableRow>", paramDto);
	utils->initialize("updateTableRow", "dto", "std::shared_ptr<TableRow>", paramDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "dto", "std::shared_ptr<TableRow>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "dto", "std::shared_ptr<TableRow>", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "dto", "std::shared_ptr<TableRow>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "dto", "std::shared_ptr<TableRow>", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableRow", "dto", "std::shared_ptr<TableRow>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableRowInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableRow", "rowIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("updateTableRow", "dto", "std::shared_ptr<TableRow>");
	utility::string_t paramPassword = utils->getTestValue("updateTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableRow", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateTableRow", "password", "utility::string_t", paramPassword);
	utils->initialize("updateTableRow", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableRow", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableRowInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableRow", "rowIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("updateTableRow", "dto", "std::shared_ptr<TableRow>");
	utility::string_t paramPassword = utils->getTestValue("updateTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableRow", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateTableRow", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateTableRow", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableRow", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateTableRowInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateTableRow", "name", "utility::string_t");
	int32_t paramSlideIndex = utils->getIntTestValue("updateTableRow", "slideIndex", "int32_t");
	int32_t paramShapeIndex = utils->getIntTestValue("updateTableRow", "shapeIndex", "int32_t");
	int32_t paramRowIndex = utils->getIntTestValue("updateTableRow", "rowIndex", "int32_t");
	std::shared_ptr<TableRow> paramDto = utils->getTestValueForClass<TableRow>("updateTableRow", "dto", "std::shared_ptr<TableRow>");
	utility::string_t paramPassword = utils->getTestValue("updateTableRow", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateTableRow", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateTableRow", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateTableRow", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateTableRow", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateTableRow(paramName, paramSlideIndex, paramShapeIndex, paramRowIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateTableRow", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateTableRow", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateTableRow", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateVbaModule) {
	utility::string_t paramName = utils->getTestValue("updateVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("updateVbaModule", "moduleIndex", "int32_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("updateVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateVbaModule", "storage", "utility::string_t");
	utils->initialize("updateVbaModule", "", "");
	std::shared_ptr<VbaModule> result = utils->getSlidesApi()->updateVbaModule(paramName, paramModuleIndex, paramModuleDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateVbaModuleInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("updateVbaModule", "moduleIndex", "int32_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("updateVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateVbaModule", "storage", "utility::string_t");
	paramName = utils->getInvalidTestValue("updateVbaModule", "name", "utility::string_t", paramName);
	utils->initialize("updateVbaModule", "name", "utility::string_t", paramName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateVbaModule(paramName, paramModuleIndex, paramModuleDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "name", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "name", "utility::string_t", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "name", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "name", "utility::string_t", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateVbaModule", "name", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateVbaModuleInvalidModuleIndex) {
	utility::string_t paramName = utils->getTestValue("updateVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("updateVbaModule", "moduleIndex", "int32_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("updateVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateVbaModule", "storage", "utility::string_t");
	paramModuleIndex = utils->getInvalidIntTestValue("updateVbaModule", "moduleIndex", "int32_t", paramModuleIndex).value();
	utils->initialize("updateVbaModule", "moduleIndex", "int32_t", paramModuleIndex);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateVbaModule(paramName, paramModuleIndex, paramModuleDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "moduleIndex", "int32_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "moduleIndex", "int32_t", paramModuleIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "moduleIndex", "int32_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "moduleIndex", "int32_t", paramModuleIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateVbaModule", "moduleIndex", "int32_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateVbaModuleInvalidModuleDto) {
	utility::string_t paramName = utils->getTestValue("updateVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("updateVbaModule", "moduleIndex", "int32_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("updateVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateVbaModule", "storage", "utility::string_t");
	paramModuleDto = utils->getInvalidTestValueForClass<>("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>", paramModuleDto);
	utils->initialize("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>", paramModuleDto);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateVbaModule(paramName, paramModuleIndex, paramModuleDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>", paramModuleDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>", paramModuleDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateVbaModuleInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("updateVbaModule", "moduleIndex", "int32_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("updateVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateVbaModule", "storage", "utility::string_t");
	paramPassword = utils->getInvalidTestValue("updateVbaModule", "password", "utility::string_t", paramPassword);
	utils->initialize("updateVbaModule", "password", "utility::string_t", paramPassword);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateVbaModule(paramName, paramModuleIndex, paramModuleDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "password", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "password", "utility::string_t", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "password", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "password", "utility::string_t", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateVbaModule", "password", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateVbaModuleInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("updateVbaModule", "moduleIndex", "int32_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("updateVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateVbaModule", "storage", "utility::string_t");
	paramFolder = utils->getInvalidTestValue("updateVbaModule", "folder", "utility::string_t", paramFolder);
	utils->initialize("updateVbaModule", "folder", "utility::string_t", paramFolder);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateVbaModule(paramName, paramModuleIndex, paramModuleDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "folder", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "folder", "utility::string_t", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "folder", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "folder", "utility::string_t", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateVbaModule", "folder", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateVbaModuleInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateVbaModule", "name", "utility::string_t");
	int32_t paramModuleIndex = utils->getIntTestValue("updateVbaModule", "moduleIndex", "int32_t");
	std::shared_ptr<VbaModule> paramModuleDto = utils->getTestValueForClass<VbaModule>("updateVbaModule", "moduleDto", "std::shared_ptr<VbaModule>");
	utility::string_t paramPassword = utils->getTestValue("updateVbaModule", "password", "utility::string_t");
	utility::string_t paramFolder = utils->getTestValue("updateVbaModule", "folder", "utility::string_t");
	utility::string_t paramStorage = utils->getTestValue("updateVbaModule", "storage", "utility::string_t");
	paramStorage = utils->getInvalidTestValue("updateVbaModule", "storage", "utility::string_t", paramStorage);
	utils->initialize("updateVbaModule", "storage", "utility::string_t", paramStorage);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->updateVbaModule(paramName, paramModuleIndex, paramModuleDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "storage", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "storage", "utility::string_t", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateVbaModule", "storage", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateVbaModule", "storage", "utility::string_t", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateVbaModule", "storage", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFile) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path", "utility::string_t");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file", "std::shared_ptr<HttpContent>");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName", "utility::string_t");
	utils->initialize("uploadFile", "", "");
	std::shared_ptr<FilesUploadResult> result = utils->getSlidesApi()->uploadFile(paramPath, paramFile, paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, uploadFileInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path", "utility::string_t");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file", "std::shared_ptr<HttpContent>");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName", "utility::string_t");
	paramPath = utils->getInvalidTestValue("uploadFile", "path", "utility::string_t", paramPath);
	utils->initialize("uploadFile", "path", "utility::string_t", paramPath);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->uploadFile(paramPath, paramFile, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "path", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "path", "utility::string_t", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "path", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "path", "utility::string_t", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "path", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFileInvalidFile) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path", "utility::string_t");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file", "std::shared_ptr<HttpContent>");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName", "utility::string_t");
	paramFile = utils->getInvalidBinaryTestValue("uploadFile", "file", "std::shared_ptr<HttpContent>", paramFile);
	utils->initialize("uploadFile", "file", "std::shared_ptr<HttpContent>", paramFile);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->uploadFile(paramPath, paramFile, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "file", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "file", "std::shared_ptr<HttpContent>", paramFile);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "file", "std::shared_ptr<HttpContent>");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "file", "std::shared_ptr<HttpContent>", paramFile);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "file", "std::shared_ptr<HttpContent>"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFileInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path", "utility::string_t");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file", "std::shared_ptr<HttpContent>");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName", "utility::string_t");
	paramStorageName = utils->getInvalidTestValue("uploadFile", "storageName", "utility::string_t", paramStorageName);
	utils->initialize("uploadFile", "storageName", "utility::string_t", paramStorageName);

	bool failed = true;
	try
	{
		utils->getSlidesApi()->uploadFile(paramPath, paramFile, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "storageName", "utility::string_t");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "storageName", "utility::string_t", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "storageName", "utility::string_t");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "storageName", "utility::string_t", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "storageName", "utility::string_t"))
	{
		FAIL() << "Must have failed";
	}
}
