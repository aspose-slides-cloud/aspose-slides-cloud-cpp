// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="ApiBase.cs">
//   Copyright (c) 2020 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------


#include "gtest/gtest.h"

#include "TestUtils.h"

using namespace asposeslidescloud::api;

class SlidesApiTest : public ::testing::Test
{
public:
	static SlidesApi* api;
	static TestUtils* utils;

	std::shared_ptr<CopyFileRequest> getCopyFileRequest()
	{
		std::shared_ptr<CopyFileRequest> request = std::make_shared<CopyFileRequest>();
		request->setSrcPath(utils->getTestValue("copyFile", "srcPath"));
		request->setDestPath(utils->getTestValue("copyFile", "destPath"));
		request->setSrcStorageName(utils->getTestValue("copyFile", "srcStorageName"));
		request->setDestStorageName(utils->getTestValue("copyFile", "destStorageName"));
		request->setVersionId(utils->getTestValue("copyFile", "versionId"));
		return request;
	}

	std::shared_ptr<CopyFolderRequest> getCopyFolderRequest()
	{
		std::shared_ptr<CopyFolderRequest> request = std::make_shared<CopyFolderRequest>();
		request->setSrcPath(utils->getTestValue("copyFolder", "srcPath"));
		request->setDestPath(utils->getTestValue("copyFolder", "destPath"));
		request->setSrcStorageName(utils->getTestValue("copyFolder", "srcStorageName"));
		request->setDestStorageName(utils->getTestValue("copyFolder", "destStorageName"));
		return request;
	}

	std::shared_ptr<CreateFolderRequest> getCreateFolderRequest()
	{
		std::shared_ptr<CreateFolderRequest> request = std::make_shared<CreateFolderRequest>();
		request->setPath(utils->getTestValue("createFolder", "path"));
		request->setStorageName(utils->getTestValue("createFolder", "storageName"));
		return request;
	}

	std::shared_ptr<DeleteChartCategoryRequest> getDeleteChartCategoryRequest()
	{
		std::shared_ptr<DeleteChartCategoryRequest> request = std::make_shared<DeleteChartCategoryRequest>();
		request->setName(utils->getTestValue("deleteChartCategory", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteChartCategory", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deleteChartCategory", "shapeIndex"));
		request->setCategoryIndex(utils->getIntTestValue("deleteChartCategory", "categoryIndex"));
		request->setPassword(utils->getTestValue("deleteChartCategory", "password"));
		request->setFolder(utils->getTestValue("deleteChartCategory", "folder"));
		request->setStorage(utils->getTestValue("deleteChartCategory", "storage"));
		return request;
	}

	std::shared_ptr<DeleteChartDataPointRequest> getDeleteChartDataPointRequest()
	{
		std::shared_ptr<DeleteChartDataPointRequest> request = std::make_shared<DeleteChartDataPointRequest>();
		request->setName(utils->getTestValue("deleteChartDataPoint", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteChartDataPoint", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deleteChartDataPoint", "shapeIndex"));
		request->setSeriesIndex(utils->getIntTestValue("deleteChartDataPoint", "seriesIndex"));
		request->setPointIndex(utils->getIntTestValue("deleteChartDataPoint", "pointIndex"));
		request->setPassword(utils->getTestValue("deleteChartDataPoint", "password"));
		request->setFolder(utils->getTestValue("deleteChartDataPoint", "folder"));
		request->setStorage(utils->getTestValue("deleteChartDataPoint", "storage"));
		return request;
	}

	std::shared_ptr<DeleteChartSeriesRequest> getDeleteChartSeriesRequest()
	{
		std::shared_ptr<DeleteChartSeriesRequest> request = std::make_shared<DeleteChartSeriesRequest>();
		request->setName(utils->getTestValue("deleteChartSeries", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteChartSeries", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deleteChartSeries", "shapeIndex"));
		request->setSeriesIndex(utils->getIntTestValue("deleteChartSeries", "seriesIndex"));
		request->setPassword(utils->getTestValue("deleteChartSeries", "password"));
		request->setFolder(utils->getTestValue("deleteChartSeries", "folder"));
		request->setStorage(utils->getTestValue("deleteChartSeries", "storage"));
		return request;
	}

	std::shared_ptr<DeleteFileRequest> getDeleteFileRequest()
	{
		std::shared_ptr<DeleteFileRequest> request = std::make_shared<DeleteFileRequest>();
		request->setPath(utils->getTestValue("deleteFile", "path"));
		request->setStorageName(utils->getTestValue("deleteFile", "storageName"));
		request->setVersionId(utils->getTestValue("deleteFile", "versionId"));
		return request;
	}

	std::shared_ptr<DeleteFolderRequest> getDeleteFolderRequest()
	{
		std::shared_ptr<DeleteFolderRequest> request = std::make_shared<DeleteFolderRequest>();
		request->setPath(utils->getTestValue("deleteFolder", "path"));
		request->setStorageName(utils->getTestValue("deleteFolder", "storageName"));
		auto valueForRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive");
		if (valueForRecursive != nullptr)
		{
			request->setRecursive(*valueForRecursive);
		}
		return request;
	}

	std::shared_ptr<DeleteNotesSlideRequest> getDeleteNotesSlideRequest()
	{
		std::shared_ptr<DeleteNotesSlideRequest> request = std::make_shared<DeleteNotesSlideRequest>();
		request->setName(utils->getTestValue("deleteNotesSlide", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteNotesSlide", "slideIndex"));
		request->setPassword(utils->getTestValue("deleteNotesSlide", "password"));
		request->setFolder(utils->getTestValue("deleteNotesSlide", "folder"));
		request->setStorage(utils->getTestValue("deleteNotesSlide", "storage"));
		return request;
	}

	std::shared_ptr<DeleteNotesSlideParagraphRequest> getDeleteNotesSlideParagraphRequest()
	{
		std::shared_ptr<DeleteNotesSlideParagraphRequest> request = std::make_shared<DeleteNotesSlideParagraphRequest>();
		request->setName(utils->getTestValue("deleteNotesSlideParagraph", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex"));
		request->setPassword(utils->getTestValue("deleteNotesSlideParagraph", "password"));
		request->setFolder(utils->getTestValue("deleteNotesSlideParagraph", "folder"));
		request->setStorage(utils->getTestValue("deleteNotesSlideParagraph", "storage"));
		return request;
	}

	std::shared_ptr<DeleteNotesSlideParagraphsRequest> getDeleteNotesSlideParagraphsRequest()
	{
		std::shared_ptr<DeleteNotesSlideParagraphsRequest> request = std::make_shared<DeleteNotesSlideParagraphsRequest>();
		request->setName(utils->getTestValue("deleteNotesSlideParagraphs", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex"));
		request->setParagraphs(utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs"));
		request->setPassword(utils->getTestValue("deleteNotesSlideParagraphs", "password"));
		request->setFolder(utils->getTestValue("deleteNotesSlideParagraphs", "folder"));
		request->setStorage(utils->getTestValue("deleteNotesSlideParagraphs", "storage"));
		return request;
	}

	std::shared_ptr<DeleteNotesSlidePortionRequest> getDeleteNotesSlidePortionRequest()
	{
		std::shared_ptr<DeleteNotesSlidePortionRequest> request = std::make_shared<DeleteNotesSlidePortionRequest>();
		request->setName(utils->getTestValue("deleteNotesSlidePortion", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex"));
		request->setPortionIndex(utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex"));
		request->setPassword(utils->getTestValue("deleteNotesSlidePortion", "password"));
		request->setFolder(utils->getTestValue("deleteNotesSlidePortion", "folder"));
		request->setStorage(utils->getTestValue("deleteNotesSlidePortion", "storage"));
		return request;
	}

	std::shared_ptr<DeleteNotesSlidePortionsRequest> getDeleteNotesSlidePortionsRequest()
	{
		std::shared_ptr<DeleteNotesSlidePortionsRequest> request = std::make_shared<DeleteNotesSlidePortionsRequest>();
		request->setName(utils->getTestValue("deleteNotesSlidePortions", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex"));
		request->setPortions(utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions"));
		request->setPassword(utils->getTestValue("deleteNotesSlidePortions", "password"));
		request->setFolder(utils->getTestValue("deleteNotesSlidePortions", "folder"));
		request->setStorage(utils->getTestValue("deleteNotesSlidePortions", "storage"));
		return request;
	}

	std::shared_ptr<DeleteNotesSlideShapeRequest> getDeleteNotesSlideShapeRequest()
	{
		std::shared_ptr<DeleteNotesSlideShapeRequest> request = std::make_shared<DeleteNotesSlideShapeRequest>();
		request->setName(utils->getTestValue("deleteNotesSlideShape", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteNotesSlideShape", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex"));
		request->setPassword(utils->getTestValue("deleteNotesSlideShape", "password"));
		request->setFolder(utils->getTestValue("deleteNotesSlideShape", "folder"));
		request->setStorage(utils->getTestValue("deleteNotesSlideShape", "storage"));
		return request;
	}

	std::shared_ptr<DeleteNotesSlideShapesRequest> getDeleteNotesSlideShapesRequest()
	{
		std::shared_ptr<DeleteNotesSlideShapesRequest> request = std::make_shared<DeleteNotesSlideShapesRequest>();
		request->setName(utils->getTestValue("deleteNotesSlideShapes", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex"));
		request->setShapes(utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes"));
		request->setPassword(utils->getTestValue("deleteNotesSlideShapes", "password"));
		request->setFolder(utils->getTestValue("deleteNotesSlideShapes", "folder"));
		request->setStorage(utils->getTestValue("deleteNotesSlideShapes", "storage"));
		return request;
	}

	std::shared_ptr<DeleteParagraphRequest> getDeleteParagraphRequest()
	{
		std::shared_ptr<DeleteParagraphRequest> request = std::make_shared<DeleteParagraphRequest>();
		request->setName(utils->getTestValue("deleteParagraph", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteParagraph", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deleteParagraph", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("deleteParagraph", "paragraphIndex"));
		request->setPassword(utils->getTestValue("deleteParagraph", "password"));
		request->setFolder(utils->getTestValue("deleteParagraph", "folder"));
		request->setStorage(utils->getTestValue("deleteParagraph", "storage"));
		return request;
	}

	std::shared_ptr<DeleteParagraphsRequest> getDeleteParagraphsRequest()
	{
		std::shared_ptr<DeleteParagraphsRequest> request = std::make_shared<DeleteParagraphsRequest>();
		request->setName(utils->getTestValue("deleteParagraphs", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteParagraphs", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deleteParagraphs", "shapeIndex"));
		request->setParagraphs(utils->getIntVectorTestValue("deleteParagraphs", "paragraphs"));
		request->setPassword(utils->getTestValue("deleteParagraphs", "password"));
		request->setFolder(utils->getTestValue("deleteParagraphs", "folder"));
		request->setStorage(utils->getTestValue("deleteParagraphs", "storage"));
		return request;
	}

	std::shared_ptr<DeletePortionRequest> getDeletePortionRequest()
	{
		std::shared_ptr<DeletePortionRequest> request = std::make_shared<DeletePortionRequest>();
		request->setName(utils->getTestValue("deletePortion", "name"));
		request->setSlideIndex(utils->getIntTestValue("deletePortion", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deletePortion", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("deletePortion", "paragraphIndex"));
		request->setPortionIndex(utils->getIntTestValue("deletePortion", "portionIndex"));
		request->setPassword(utils->getTestValue("deletePortion", "password"));
		request->setFolder(utils->getTestValue("deletePortion", "folder"));
		request->setStorage(utils->getTestValue("deletePortion", "storage"));
		return request;
	}

	std::shared_ptr<DeletePortionsRequest> getDeletePortionsRequest()
	{
		std::shared_ptr<DeletePortionsRequest> request = std::make_shared<DeletePortionsRequest>();
		request->setName(utils->getTestValue("deletePortions", "name"));
		request->setSlideIndex(utils->getIntTestValue("deletePortions", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deletePortions", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("deletePortions", "paragraphIndex"));
		request->setPortions(utils->getIntVectorTestValue("deletePortions", "portions"));
		request->setPassword(utils->getTestValue("deletePortions", "password"));
		request->setFolder(utils->getTestValue("deletePortions", "folder"));
		request->setStorage(utils->getTestValue("deletePortions", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSectionRequest> getDeleteSectionRequest()
	{
		std::shared_ptr<DeleteSectionRequest> request = std::make_shared<DeleteSectionRequest>();
		request->setName(utils->getTestValue("deleteSection", "name"));
		request->setSectionIndex(utils->getIntTestValue("deleteSection", "sectionIndex"));
		auto valueForWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
		if (valueForWithSlides != nullptr)
		{
			request->setWithSlides(*valueForWithSlides);
		}
		request->setPassword(utils->getTestValue("deleteSection", "password"));
		request->setFolder(utils->getTestValue("deleteSection", "folder"));
		request->setStorage(utils->getTestValue("deleteSection", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSectionsRequest> getDeleteSectionsRequest()
	{
		std::shared_ptr<DeleteSectionsRequest> request = std::make_shared<DeleteSectionsRequest>();
		request->setName(utils->getTestValue("deleteSections", "name"));
		request->setSections(utils->getIntVectorTestValue("deleteSections", "sections"));
		auto valueForWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
		if (valueForWithSlides != nullptr)
		{
			request->setWithSlides(*valueForWithSlides);
		}
		request->setPassword(utils->getTestValue("deleteSections", "password"));
		request->setFolder(utils->getTestValue("deleteSections", "folder"));
		request->setStorage(utils->getTestValue("deleteSections", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlideAnimationRequest> getDeleteSlideAnimationRequest()
	{
		std::shared_ptr<DeleteSlideAnimationRequest> request = std::make_shared<DeleteSlideAnimationRequest>();
		request->setName(utils->getTestValue("deleteSlideAnimation", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlideAnimation", "slideIndex"));
		request->setPassword(utils->getTestValue("deleteSlideAnimation", "password"));
		request->setFolder(utils->getTestValue("deleteSlideAnimation", "folder"));
		request->setStorage(utils->getTestValue("deleteSlideAnimation", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlideAnimationEffectRequest> getDeleteSlideAnimationEffectRequest()
	{
		std::shared_ptr<DeleteSlideAnimationEffectRequest> request = std::make_shared<DeleteSlideAnimationEffectRequest>();
		request->setName(utils->getTestValue("deleteSlideAnimationEffect", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlideAnimationEffect", "slideIndex"));
		request->setEffectIndex(utils->getIntTestValue("deleteSlideAnimationEffect", "effectIndex"));
		request->setPassword(utils->getTestValue("deleteSlideAnimationEffect", "password"));
		request->setFolder(utils->getTestValue("deleteSlideAnimationEffect", "folder"));
		request->setStorage(utils->getTestValue("deleteSlideAnimationEffect", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceRequest> getDeleteSlideAnimationInteractiveSequenceRequest()
	{
		std::shared_ptr<DeleteSlideAnimationInteractiveSequenceRequest> request = std::make_shared<DeleteSlideAnimationInteractiveSequenceRequest>();
		request->setName(utils->getTestValue("deleteSlideAnimationInteractiveSequence", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "slideIndex"));
		request->setSequenceIndex(utils->getIntTestValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex"));
		request->setPassword(utils->getTestValue("deleteSlideAnimationInteractiveSequence", "password"));
		request->setFolder(utils->getTestValue("deleteSlideAnimationInteractiveSequence", "folder"));
		request->setStorage(utils->getTestValue("deleteSlideAnimationInteractiveSequence", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceEffectRequest> getDeleteSlideAnimationInteractiveSequenceEffectRequest()
	{
		std::shared_ptr<DeleteSlideAnimationInteractiveSequenceEffectRequest> request = std::make_shared<DeleteSlideAnimationInteractiveSequenceEffectRequest>();
		request->setName(utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex"));
		request->setSequenceIndex(utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex"));
		request->setEffectIndex(utils->getIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex"));
		request->setPassword(utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "password"));
		request->setFolder(utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "folder"));
		request->setStorage(utils->getTestValue("deleteSlideAnimationInteractiveSequenceEffect", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlideAnimationInteractiveSequencesRequest> getDeleteSlideAnimationInteractiveSequencesRequest()
	{
		std::shared_ptr<DeleteSlideAnimationInteractiveSequencesRequest> request = std::make_shared<DeleteSlideAnimationInteractiveSequencesRequest>();
		request->setName(utils->getTestValue("deleteSlideAnimationInteractiveSequences", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlideAnimationInteractiveSequences", "slideIndex"));
		request->setPassword(utils->getTestValue("deleteSlideAnimationInteractiveSequences", "password"));
		request->setFolder(utils->getTestValue("deleteSlideAnimationInteractiveSequences", "folder"));
		request->setStorage(utils->getTestValue("deleteSlideAnimationInteractiveSequences", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlideAnimationMainSequenceRequest> getDeleteSlideAnimationMainSequenceRequest()
	{
		std::shared_ptr<DeleteSlideAnimationMainSequenceRequest> request = std::make_shared<DeleteSlideAnimationMainSequenceRequest>();
		request->setName(utils->getTestValue("deleteSlideAnimationMainSequence", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlideAnimationMainSequence", "slideIndex"));
		request->setPassword(utils->getTestValue("deleteSlideAnimationMainSequence", "password"));
		request->setFolder(utils->getTestValue("deleteSlideAnimationMainSequence", "folder"));
		request->setStorage(utils->getTestValue("deleteSlideAnimationMainSequence", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlideByIndexRequest> getDeleteSlideByIndexRequest()
	{
		std::shared_ptr<DeleteSlideByIndexRequest> request = std::make_shared<DeleteSlideByIndexRequest>();
		request->setName(utils->getTestValue("deleteSlideByIndex", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlideByIndex", "slideIndex"));
		request->setPassword(utils->getTestValue("deleteSlideByIndex", "password"));
		request->setFolder(utils->getTestValue("deleteSlideByIndex", "folder"));
		request->setStorage(utils->getTestValue("deleteSlideByIndex", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlideShapeRequest> getDeleteSlideShapeRequest()
	{
		std::shared_ptr<DeleteSlideShapeRequest> request = std::make_shared<DeleteSlideShapeRequest>();
		request->setName(utils->getTestValue("deleteSlideShape", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlideShape", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("deleteSlideShape", "shapeIndex"));
		request->setPassword(utils->getTestValue("deleteSlideShape", "password"));
		request->setFolder(utils->getTestValue("deleteSlideShape", "folder"));
		request->setStorage(utils->getTestValue("deleteSlideShape", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlideShapesRequest> getDeleteSlideShapesRequest()
	{
		std::shared_ptr<DeleteSlideShapesRequest> request = std::make_shared<DeleteSlideShapesRequest>();
		request->setName(utils->getTestValue("deleteSlideShapes", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlideShapes", "slideIndex"));
		request->setShapes(utils->getIntVectorTestValue("deleteSlideShapes", "shapes"));
		request->setPassword(utils->getTestValue("deleteSlideShapes", "password"));
		request->setFolder(utils->getTestValue("deleteSlideShapes", "folder"));
		request->setStorage(utils->getTestValue("deleteSlideShapes", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlideSubshapeRequest> getDeleteSlideSubshapeRequest()
	{
		std::shared_ptr<DeleteSlideSubshapeRequest> request = std::make_shared<DeleteSlideSubshapeRequest>();
		request->setName(utils->getTestValue("deleteSlideSubshape", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlideSubshape", "slideIndex"));
		request->setPath(utils->getTestValue("deleteSlideSubshape", "path"));
		request->setShapeIndex(utils->getIntTestValue("deleteSlideSubshape", "shapeIndex"));
		request->setPassword(utils->getTestValue("deleteSlideSubshape", "password"));
		request->setFolder(utils->getTestValue("deleteSlideSubshape", "folder"));
		request->setStorage(utils->getTestValue("deleteSlideSubshape", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlideSubshapesRequest> getDeleteSlideSubshapesRequest()
	{
		std::shared_ptr<DeleteSlideSubshapesRequest> request = std::make_shared<DeleteSlideSubshapesRequest>();
		request->setName(utils->getTestValue("deleteSlideSubshapes", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlideSubshapes", "slideIndex"));
		request->setPath(utils->getTestValue("deleteSlideSubshapes", "path"));
		request->setShapes(utils->getIntVectorTestValue("deleteSlideSubshapes", "shapes"));
		request->setPassword(utils->getTestValue("deleteSlideSubshapes", "password"));
		request->setFolder(utils->getTestValue("deleteSlideSubshapes", "folder"));
		request->setStorage(utils->getTestValue("deleteSlideSubshapes", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlidesCleanSlidesListRequest> getDeleteSlidesCleanSlidesListRequest()
	{
		std::shared_ptr<DeleteSlidesCleanSlidesListRequest> request = std::make_shared<DeleteSlidesCleanSlidesListRequest>();
		request->setName(utils->getTestValue("deleteSlidesCleanSlidesList", "name"));
		request->setSlides(utils->getIntVectorTestValue("deleteSlidesCleanSlidesList", "slides"));
		request->setPassword(utils->getTestValue("deleteSlidesCleanSlidesList", "password"));
		request->setFolder(utils->getTestValue("deleteSlidesCleanSlidesList", "folder"));
		request->setStorage(utils->getTestValue("deleteSlidesCleanSlidesList", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlidesDocumentPropertiesRequest> getDeleteSlidesDocumentPropertiesRequest()
	{
		std::shared_ptr<DeleteSlidesDocumentPropertiesRequest> request = std::make_shared<DeleteSlidesDocumentPropertiesRequest>();
		request->setName(utils->getTestValue("deleteSlidesDocumentProperties", "name"));
		request->setPassword(utils->getTestValue("deleteSlidesDocumentProperties", "password"));
		request->setFolder(utils->getTestValue("deleteSlidesDocumentProperties", "folder"));
		request->setStorage(utils->getTestValue("deleteSlidesDocumentProperties", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlidesDocumentPropertyRequest> getDeleteSlidesDocumentPropertyRequest()
	{
		std::shared_ptr<DeleteSlidesDocumentPropertyRequest> request = std::make_shared<DeleteSlidesDocumentPropertyRequest>();
		request->setName(utils->getTestValue("deleteSlidesDocumentProperty", "name"));
		request->setPropertyName(utils->getTestValue("deleteSlidesDocumentProperty", "propertyName"));
		request->setPassword(utils->getTestValue("deleteSlidesDocumentProperty", "password"));
		request->setFolder(utils->getTestValue("deleteSlidesDocumentProperty", "folder"));
		request->setStorage(utils->getTestValue("deleteSlidesDocumentProperty", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSlidesSlideBackgroundRequest> getDeleteSlidesSlideBackgroundRequest()
	{
		std::shared_ptr<DeleteSlidesSlideBackgroundRequest> request = std::make_shared<DeleteSlidesSlideBackgroundRequest>();
		request->setName(utils->getTestValue("deleteSlidesSlideBackground", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSlidesSlideBackground", "slideIndex"));
		request->setPassword(utils->getTestValue("deleteSlidesSlideBackground", "password"));
		request->setFolder(utils->getTestValue("deleteSlidesSlideBackground", "folder"));
		request->setStorage(utils->getTestValue("deleteSlidesSlideBackground", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSubshapeParagraphRequest> getDeleteSubshapeParagraphRequest()
	{
		std::shared_ptr<DeleteSubshapeParagraphRequest> request = std::make_shared<DeleteSubshapeParagraphRequest>();
		request->setName(utils->getTestValue("deleteSubshapeParagraph", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex"));
		request->setPath(utils->getTestValue("deleteSubshapeParagraph", "path"));
		request->setShapeIndex(utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex"));
		request->setPassword(utils->getTestValue("deleteSubshapeParagraph", "password"));
		request->setFolder(utils->getTestValue("deleteSubshapeParagraph", "folder"));
		request->setStorage(utils->getTestValue("deleteSubshapeParagraph", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSubshapeParagraphsRequest> getDeleteSubshapeParagraphsRequest()
	{
		std::shared_ptr<DeleteSubshapeParagraphsRequest> request = std::make_shared<DeleteSubshapeParagraphsRequest>();
		request->setName(utils->getTestValue("deleteSubshapeParagraphs", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex"));
		request->setPath(utils->getTestValue("deleteSubshapeParagraphs", "path"));
		request->setShapeIndex(utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex"));
		request->setParagraphs(utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs"));
		request->setPassword(utils->getTestValue("deleteSubshapeParagraphs", "password"));
		request->setFolder(utils->getTestValue("deleteSubshapeParagraphs", "folder"));
		request->setStorage(utils->getTestValue("deleteSubshapeParagraphs", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSubshapePortionRequest> getDeleteSubshapePortionRequest()
	{
		std::shared_ptr<DeleteSubshapePortionRequest> request = std::make_shared<DeleteSubshapePortionRequest>();
		request->setName(utils->getTestValue("deleteSubshapePortion", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSubshapePortion", "slideIndex"));
		request->setPath(utils->getTestValue("deleteSubshapePortion", "path"));
		request->setShapeIndex(utils->getIntTestValue("deleteSubshapePortion", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex"));
		request->setPortionIndex(utils->getIntTestValue("deleteSubshapePortion", "portionIndex"));
		request->setPassword(utils->getTestValue("deleteSubshapePortion", "password"));
		request->setFolder(utils->getTestValue("deleteSubshapePortion", "folder"));
		request->setStorage(utils->getTestValue("deleteSubshapePortion", "storage"));
		return request;
	}

	std::shared_ptr<DeleteSubshapePortionsRequest> getDeleteSubshapePortionsRequest()
	{
		std::shared_ptr<DeleteSubshapePortionsRequest> request = std::make_shared<DeleteSubshapePortionsRequest>();
		request->setName(utils->getTestValue("deleteSubshapePortions", "name"));
		request->setSlideIndex(utils->getIntTestValue("deleteSubshapePortions", "slideIndex"));
		request->setPath(utils->getTestValue("deleteSubshapePortions", "path"));
		request->setShapeIndex(utils->getIntTestValue("deleteSubshapePortions", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex"));
		request->setPortions(utils->getIntVectorTestValue("deleteSubshapePortions", "portions"));
		request->setPassword(utils->getTestValue("deleteSubshapePortions", "password"));
		request->setFolder(utils->getTestValue("deleteSubshapePortions", "folder"));
		request->setStorage(utils->getTestValue("deleteSubshapePortions", "storage"));
		return request;
	}

	std::shared_ptr<DownloadFileRequest> getDownloadFileRequest()
	{
		std::shared_ptr<DownloadFileRequest> request = std::make_shared<DownloadFileRequest>();
		request->setPath(utils->getTestValue("downloadFile", "path"));
		request->setStorageName(utils->getTestValue("downloadFile", "storageName"));
		request->setVersionId(utils->getTestValue("downloadFile", "versionId"));
		return request;
	}

	std::shared_ptr<GetDiscUsageRequest> getGetDiscUsageRequest()
	{
		std::shared_ptr<GetDiscUsageRequest> request = std::make_shared<GetDiscUsageRequest>();
		request->setStorageName(utils->getTestValue("getDiscUsage", "storageName"));
		return request;
	}

	std::shared_ptr<GetFileVersionsRequest> getGetFileVersionsRequest()
	{
		std::shared_ptr<GetFileVersionsRequest> request = std::make_shared<GetFileVersionsRequest>();
		request->setPath(utils->getTestValue("getFileVersions", "path"));
		request->setStorageName(utils->getTestValue("getFileVersions", "storageName"));
		return request;
	}

	std::shared_ptr<GetFilesListRequest> getGetFilesListRequest()
	{
		std::shared_ptr<GetFilesListRequest> request = std::make_shared<GetFilesListRequest>();
		request->setPath(utils->getTestValue("getFilesList", "path"));
		request->setStorageName(utils->getTestValue("getFilesList", "storageName"));
		return request;
	}

	std::shared_ptr<GetLayoutSlideRequest> getGetLayoutSlideRequest()
	{
		std::shared_ptr<GetLayoutSlideRequest> request = std::make_shared<GetLayoutSlideRequest>();
		request->setName(utils->getTestValue("getLayoutSlide", "name"));
		request->setSlideIndex(utils->getIntTestValue("getLayoutSlide", "slideIndex"));
		request->setPassword(utils->getTestValue("getLayoutSlide", "password"));
		request->setFolder(utils->getTestValue("getLayoutSlide", "folder"));
		request->setStorage(utils->getTestValue("getLayoutSlide", "storage"));
		return request;
	}

	std::shared_ptr<GetLayoutSlidesListRequest> getGetLayoutSlidesListRequest()
	{
		std::shared_ptr<GetLayoutSlidesListRequest> request = std::make_shared<GetLayoutSlidesListRequest>();
		request->setName(utils->getTestValue("getLayoutSlidesList", "name"));
		request->setPassword(utils->getTestValue("getLayoutSlidesList", "password"));
		request->setFolder(utils->getTestValue("getLayoutSlidesList", "folder"));
		request->setStorage(utils->getTestValue("getLayoutSlidesList", "storage"));
		return request;
	}

	std::shared_ptr<GetMasterSlideRequest> getGetMasterSlideRequest()
	{
		std::shared_ptr<GetMasterSlideRequest> request = std::make_shared<GetMasterSlideRequest>();
		request->setName(utils->getTestValue("getMasterSlide", "name"));
		request->setSlideIndex(utils->getIntTestValue("getMasterSlide", "slideIndex"));
		request->setPassword(utils->getTestValue("getMasterSlide", "password"));
		request->setFolder(utils->getTestValue("getMasterSlide", "folder"));
		request->setStorage(utils->getTestValue("getMasterSlide", "storage"));
		return request;
	}

	std::shared_ptr<GetMasterSlidesListRequest> getGetMasterSlidesListRequest()
	{
		std::shared_ptr<GetMasterSlidesListRequest> request = std::make_shared<GetMasterSlidesListRequest>();
		request->setName(utils->getTestValue("getMasterSlidesList", "name"));
		request->setPassword(utils->getTestValue("getMasterSlidesList", "password"));
		request->setFolder(utils->getTestValue("getMasterSlidesList", "folder"));
		request->setStorage(utils->getTestValue("getMasterSlidesList", "storage"));
		return request;
	}

	std::shared_ptr<GetNotesSlideRequest> getGetNotesSlideRequest()
	{
		std::shared_ptr<GetNotesSlideRequest> request = std::make_shared<GetNotesSlideRequest>();
		request->setName(utils->getTestValue("getNotesSlide", "name"));
		request->setSlideIndex(utils->getIntTestValue("getNotesSlide", "slideIndex"));
		request->setPassword(utils->getTestValue("getNotesSlide", "password"));
		request->setFolder(utils->getTestValue("getNotesSlide", "folder"));
		request->setStorage(utils->getTestValue("getNotesSlide", "storage"));
		return request;
	}

	std::shared_ptr<GetNotesSlideExistsRequest> getGetNotesSlideExistsRequest()
	{
		std::shared_ptr<GetNotesSlideExistsRequest> request = std::make_shared<GetNotesSlideExistsRequest>();
		request->setName(utils->getTestValue("getNotesSlideExists", "name"));
		request->setSlideIndex(utils->getIntTestValue("getNotesSlideExists", "slideIndex"));
		request->setPassword(utils->getTestValue("getNotesSlideExists", "password"));
		request->setFolder(utils->getTestValue("getNotesSlideExists", "folder"));
		request->setStorage(utils->getTestValue("getNotesSlideExists", "storage"));
		return request;
	}

	std::shared_ptr<GetNotesSlideHeaderFooterRequest> getGetNotesSlideHeaderFooterRequest()
	{
		std::shared_ptr<GetNotesSlideHeaderFooterRequest> request = std::make_shared<GetNotesSlideHeaderFooterRequest>();
		request->setName(utils->getTestValue("getNotesSlideHeaderFooter", "name"));
		request->setSlideIndex(utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex"));
		request->setPassword(utils->getTestValue("getNotesSlideHeaderFooter", "password"));
		request->setStorage(utils->getTestValue("getNotesSlideHeaderFooter", "storage"));
		request->setFolder(utils->getTestValue("getNotesSlideHeaderFooter", "folder"));
		return request;
	}

	std::shared_ptr<GetNotesSlideShapeRequest> getGetNotesSlideShapeRequest()
	{
		std::shared_ptr<GetNotesSlideShapeRequest> request = std::make_shared<GetNotesSlideShapeRequest>();
		request->setName(utils->getTestValue("getNotesSlideShape", "name"));
		request->setSlideIndex(utils->getIntTestValue("getNotesSlideShape", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("getNotesSlideShape", "shapeIndex"));
		request->setPassword(utils->getTestValue("getNotesSlideShape", "password"));
		request->setFolder(utils->getTestValue("getNotesSlideShape", "folder"));
		request->setStorage(utils->getTestValue("getNotesSlideShape", "storage"));
		return request;
	}

	std::shared_ptr<GetNotesSlideShapeParagraphRequest> getGetNotesSlideShapeParagraphRequest()
	{
		std::shared_ptr<GetNotesSlideShapeParagraphRequest> request = std::make_shared<GetNotesSlideShapeParagraphRequest>();
		request->setName(utils->getTestValue("getNotesSlideShapeParagraph", "name"));
		request->setSlideIndex(utils->getIntTestValue("getNotesSlideShapeParagraph", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("getNotesSlideShapeParagraph", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("getNotesSlideShapeParagraph", "paragraphIndex"));
		request->setPassword(utils->getTestValue("getNotesSlideShapeParagraph", "password"));
		request->setFolder(utils->getTestValue("getNotesSlideShapeParagraph", "folder"));
		request->setStorage(utils->getTestValue("getNotesSlideShapeParagraph", "storage"));
		return request;
	}

	std::shared_ptr<GetNotesSlideShapeParagraphsRequest> getGetNotesSlideShapeParagraphsRequest()
	{
		std::shared_ptr<GetNotesSlideShapeParagraphsRequest> request = std::make_shared<GetNotesSlideShapeParagraphsRequest>();
		request->setName(utils->getTestValue("getNotesSlideShapeParagraphs", "name"));
		request->setSlideIndex(utils->getIntTestValue("getNotesSlideShapeParagraphs", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("getNotesSlideShapeParagraphs", "shapeIndex"));
		request->setPassword(utils->getTestValue("getNotesSlideShapeParagraphs", "password"));
		request->setFolder(utils->getTestValue("getNotesSlideShapeParagraphs", "folder"));
		request->setStorage(utils->getTestValue("getNotesSlideShapeParagraphs", "storage"));
		return request;
	}

	std::shared_ptr<GetNotesSlideShapePortionRequest> getGetNotesSlideShapePortionRequest()
	{
		std::shared_ptr<GetNotesSlideShapePortionRequest> request = std::make_shared<GetNotesSlideShapePortionRequest>();
		request->setName(utils->getTestValue("getNotesSlideShapePortion", "name"));
		request->setSlideIndex(utils->getIntTestValue("getNotesSlideShapePortion", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("getNotesSlideShapePortion", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("getNotesSlideShapePortion", "paragraphIndex"));
		request->setPortionIndex(utils->getIntTestValue("getNotesSlideShapePortion", "portionIndex"));
		request->setPassword(utils->getTestValue("getNotesSlideShapePortion", "password"));
		request->setFolder(utils->getTestValue("getNotesSlideShapePortion", "folder"));
		request->setStorage(utils->getTestValue("getNotesSlideShapePortion", "storage"));
		return request;
	}

	std::shared_ptr<GetNotesSlideShapePortionsRequest> getGetNotesSlideShapePortionsRequest()
	{
		std::shared_ptr<GetNotesSlideShapePortionsRequest> request = std::make_shared<GetNotesSlideShapePortionsRequest>();
		request->setName(utils->getTestValue("getNotesSlideShapePortions", "name"));
		request->setSlideIndex(utils->getIntTestValue("getNotesSlideShapePortions", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("getNotesSlideShapePortions", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("getNotesSlideShapePortions", "paragraphIndex"));
		request->setPassword(utils->getTestValue("getNotesSlideShapePortions", "password"));
		request->setFolder(utils->getTestValue("getNotesSlideShapePortions", "folder"));
		request->setStorage(utils->getTestValue("getNotesSlideShapePortions", "storage"));
		return request;
	}

	std::shared_ptr<GetNotesSlideShapesRequest> getGetNotesSlideShapesRequest()
	{
		std::shared_ptr<GetNotesSlideShapesRequest> request = std::make_shared<GetNotesSlideShapesRequest>();
		request->setName(utils->getTestValue("getNotesSlideShapes", "name"));
		request->setSlideIndex(utils->getIntTestValue("getNotesSlideShapes", "slideIndex"));
		request->setPassword(utils->getTestValue("getNotesSlideShapes", "password"));
		request->setFolder(utils->getTestValue("getNotesSlideShapes", "folder"));
		request->setStorage(utils->getTestValue("getNotesSlideShapes", "storage"));
		return request;
	}

	std::shared_ptr<GetNotesSlideWithFormatRequest> getGetNotesSlideWithFormatRequest()
	{
		std::shared_ptr<GetNotesSlideWithFormatRequest> request = std::make_shared<GetNotesSlideWithFormatRequest>();
		request->setName(utils->getTestValue("getNotesSlideWithFormat", "name"));
		request->setSlideIndex(utils->getIntTestValue("getNotesSlideWithFormat", "slideIndex"));
		request->setFormat(utils->getTestValue("getNotesSlideWithFormat", "format"));
		auto valueForWidth = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "width");
		if (valueForWidth != nullptr)
		{
			request->setWidth(*valueForWidth);
		}
		auto valueForHeight = utils->getOptionalIntTestValue("getNotesSlideWithFormat", "height");
		if (valueForHeight != nullptr)
		{
			request->setHeight(*valueForHeight);
		}
		request->setPassword(utils->getTestValue("getNotesSlideWithFormat", "password"));
		request->setFolder(utils->getTestValue("getNotesSlideWithFormat", "folder"));
		request->setStorage(utils->getTestValue("getNotesSlideWithFormat", "storage"));
		request->setFontsFolder(utils->getTestValue("getNotesSlideWithFormat", "fontsFolder"));
		return request;
	}

	std::shared_ptr<GetParagraphPortionRequest> getGetParagraphPortionRequest()
	{
		std::shared_ptr<GetParagraphPortionRequest> request = std::make_shared<GetParagraphPortionRequest>();
		request->setName(utils->getTestValue("getParagraphPortion", "name"));
		request->setSlideIndex(utils->getIntTestValue("getParagraphPortion", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("getParagraphPortion", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("getParagraphPortion", "paragraphIndex"));
		request->setPortionIndex(utils->getIntTestValue("getParagraphPortion", "portionIndex"));
		request->setPassword(utils->getTestValue("getParagraphPortion", "password"));
		request->setFolder(utils->getTestValue("getParagraphPortion", "folder"));
		request->setStorage(utils->getTestValue("getParagraphPortion", "storage"));
		return request;
	}

	std::shared_ptr<GetParagraphPortionsRequest> getGetParagraphPortionsRequest()
	{
		std::shared_ptr<GetParagraphPortionsRequest> request = std::make_shared<GetParagraphPortionsRequest>();
		request->setName(utils->getTestValue("getParagraphPortions", "name"));
		request->setSlideIndex(utils->getIntTestValue("getParagraphPortions", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("getParagraphPortions", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("getParagraphPortions", "paragraphIndex"));
		request->setPassword(utils->getTestValue("getParagraphPortions", "password"));
		request->setFolder(utils->getTestValue("getParagraphPortions", "folder"));
		request->setStorage(utils->getTestValue("getParagraphPortions", "storage"));
		return request;
	}

	std::shared_ptr<GetSectionsRequest> getGetSectionsRequest()
	{
		std::shared_ptr<GetSectionsRequest> request = std::make_shared<GetSectionsRequest>();
		request->setName(utils->getTestValue("getSections", "name"));
		request->setPassword(utils->getTestValue("getSections", "password"));
		request->setFolder(utils->getTestValue("getSections", "folder"));
		request->setStorage(utils->getTestValue("getSections", "storage"));
		return request;
	}

	std::shared_ptr<GetSlideAnimationRequest> getGetSlideAnimationRequest()
	{
		std::shared_ptr<GetSlideAnimationRequest> request = std::make_shared<GetSlideAnimationRequest>();
		request->setName(utils->getTestValue("getSlideAnimation", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlideAnimation", "slideIndex"));
		auto valueForShapeIndex = utils->getOptionalIntTestValue("getSlideAnimation", "shapeIndex");
		if (valueForShapeIndex != nullptr)
		{
			request->setShapeIndex(*valueForShapeIndex);
		}
		request->setPassword(utils->getTestValue("getSlideAnimation", "password"));
		request->setFolder(utils->getTestValue("getSlideAnimation", "folder"));
		request->setStorage(utils->getTestValue("getSlideAnimation", "storage"));
		return request;
	}

	std::shared_ptr<GetSlideHeaderFooterRequest> getGetSlideHeaderFooterRequest()
	{
		std::shared_ptr<GetSlideHeaderFooterRequest> request = std::make_shared<GetSlideHeaderFooterRequest>();
		request->setName(utils->getTestValue("getSlideHeaderFooter", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlideHeaderFooter", "slideIndex"));
		request->setPassword(utils->getTestValue("getSlideHeaderFooter", "password"));
		request->setFolder(utils->getTestValue("getSlideHeaderFooter", "folder"));
		request->setStorage(utils->getTestValue("getSlideHeaderFooter", "storage"));
		return request;
	}

	std::shared_ptr<GetSlideShapeRequest> getGetSlideShapeRequest()
	{
		std::shared_ptr<GetSlideShapeRequest> request = std::make_shared<GetSlideShapeRequest>();
		request->setName(utils->getTestValue("getSlideShape", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlideShape", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("getSlideShape", "shapeIndex"));
		request->setPassword(utils->getTestValue("getSlideShape", "password"));
		request->setFolder(utils->getTestValue("getSlideShape", "folder"));
		request->setStorage(utils->getTestValue("getSlideShape", "storage"));
		return request;
	}

	std::shared_ptr<GetSlideShapeParagraphRequest> getGetSlideShapeParagraphRequest()
	{
		std::shared_ptr<GetSlideShapeParagraphRequest> request = std::make_shared<GetSlideShapeParagraphRequest>();
		request->setName(utils->getTestValue("getSlideShapeParagraph", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlideShapeParagraph", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("getSlideShapeParagraph", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("getSlideShapeParagraph", "paragraphIndex"));
		request->setPassword(utils->getTestValue("getSlideShapeParagraph", "password"));
		request->setFolder(utils->getTestValue("getSlideShapeParagraph", "folder"));
		request->setStorage(utils->getTestValue("getSlideShapeParagraph", "storage"));
		return request;
	}

	std::shared_ptr<GetSlideShapeParagraphsRequest> getGetSlideShapeParagraphsRequest()
	{
		std::shared_ptr<GetSlideShapeParagraphsRequest> request = std::make_shared<GetSlideShapeParagraphsRequest>();
		request->setName(utils->getTestValue("getSlideShapeParagraphs", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlideShapeParagraphs", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("getSlideShapeParagraphs", "shapeIndex"));
		request->setPassword(utils->getTestValue("getSlideShapeParagraphs", "password"));
		request->setFolder(utils->getTestValue("getSlideShapeParagraphs", "folder"));
		request->setStorage(utils->getTestValue("getSlideShapeParagraphs", "storage"));
		return request;
	}

	std::shared_ptr<GetSlideShapesRequest> getGetSlideShapesRequest()
	{
		std::shared_ptr<GetSlideShapesRequest> request = std::make_shared<GetSlideShapesRequest>();
		request->setName(utils->getTestValue("getSlideShapes", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlideShapes", "slideIndex"));
		request->setPassword(utils->getTestValue("getSlideShapes", "password"));
		request->setFolder(utils->getTestValue("getSlideShapes", "folder"));
		request->setStorage(utils->getTestValue("getSlideShapes", "storage"));
		return request;
	}

	std::shared_ptr<GetSlideSubshapeRequest> getGetSlideSubshapeRequest()
	{
		std::shared_ptr<GetSlideSubshapeRequest> request = std::make_shared<GetSlideSubshapeRequest>();
		request->setName(utils->getTestValue("getSlideSubshape", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlideSubshape", "slideIndex"));
		request->setPath(utils->getTestValue("getSlideSubshape", "path"));
		request->setShapeIndex(utils->getIntTestValue("getSlideSubshape", "shapeIndex"));
		request->setPassword(utils->getTestValue("getSlideSubshape", "password"));
		request->setFolder(utils->getTestValue("getSlideSubshape", "folder"));
		request->setStorage(utils->getTestValue("getSlideSubshape", "storage"));
		return request;
	}

	std::shared_ptr<GetSlideSubshapeParagraphRequest> getGetSlideSubshapeParagraphRequest()
	{
		std::shared_ptr<GetSlideSubshapeParagraphRequest> request = std::make_shared<GetSlideSubshapeParagraphRequest>();
		request->setName(utils->getTestValue("getSlideSubshapeParagraph", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlideSubshapeParagraph", "slideIndex"));
		request->setPath(utils->getTestValue("getSlideSubshapeParagraph", "path"));
		request->setShapeIndex(utils->getIntTestValue("getSlideSubshapeParagraph", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("getSlideSubshapeParagraph", "paragraphIndex"));
		request->setPassword(utils->getTestValue("getSlideSubshapeParagraph", "password"));
		request->setFolder(utils->getTestValue("getSlideSubshapeParagraph", "folder"));
		request->setStorage(utils->getTestValue("getSlideSubshapeParagraph", "storage"));
		return request;
	}

	std::shared_ptr<GetSlideSubshapeParagraphsRequest> getGetSlideSubshapeParagraphsRequest()
	{
		std::shared_ptr<GetSlideSubshapeParagraphsRequest> request = std::make_shared<GetSlideSubshapeParagraphsRequest>();
		request->setName(utils->getTestValue("getSlideSubshapeParagraphs", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlideSubshapeParagraphs", "slideIndex"));
		request->setPath(utils->getTestValue("getSlideSubshapeParagraphs", "path"));
		request->setShapeIndex(utils->getIntTestValue("getSlideSubshapeParagraphs", "shapeIndex"));
		request->setPassword(utils->getTestValue("getSlideSubshapeParagraphs", "password"));
		request->setFolder(utils->getTestValue("getSlideSubshapeParagraphs", "folder"));
		request->setStorage(utils->getTestValue("getSlideSubshapeParagraphs", "storage"));
		return request;
	}

	std::shared_ptr<GetSlideSubshapesRequest> getGetSlideSubshapesRequest()
	{
		std::shared_ptr<GetSlideSubshapesRequest> request = std::make_shared<GetSlideSubshapesRequest>();
		request->setName(utils->getTestValue("getSlideSubshapes", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlideSubshapes", "slideIndex"));
		request->setPath(utils->getTestValue("getSlideSubshapes", "path"));
		request->setPassword(utils->getTestValue("getSlideSubshapes", "password"));
		request->setFolder(utils->getTestValue("getSlideSubshapes", "folder"));
		request->setStorage(utils->getTestValue("getSlideSubshapes", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesDocumentRequest> getGetSlidesDocumentRequest()
	{
		std::shared_ptr<GetSlidesDocumentRequest> request = std::make_shared<GetSlidesDocumentRequest>();
		request->setName(utils->getTestValue("getSlidesDocument", "name"));
		request->setPassword(utils->getTestValue("getSlidesDocument", "password"));
		request->setStorage(utils->getTestValue("getSlidesDocument", "storage"));
		request->setFolder(utils->getTestValue("getSlidesDocument", "folder"));
		return request;
	}

	std::shared_ptr<GetSlidesDocumentPropertiesRequest> getGetSlidesDocumentPropertiesRequest()
	{
		std::shared_ptr<GetSlidesDocumentPropertiesRequest> request = std::make_shared<GetSlidesDocumentPropertiesRequest>();
		request->setName(utils->getTestValue("getSlidesDocumentProperties", "name"));
		request->setPassword(utils->getTestValue("getSlidesDocumentProperties", "password"));
		request->setFolder(utils->getTestValue("getSlidesDocumentProperties", "folder"));
		request->setStorage(utils->getTestValue("getSlidesDocumentProperties", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesDocumentPropertyRequest> getGetSlidesDocumentPropertyRequest()
	{
		std::shared_ptr<GetSlidesDocumentPropertyRequest> request = std::make_shared<GetSlidesDocumentPropertyRequest>();
		request->setName(utils->getTestValue("getSlidesDocumentProperty", "name"));
		request->setPropertyName(utils->getTestValue("getSlidesDocumentProperty", "propertyName"));
		request->setPassword(utils->getTestValue("getSlidesDocumentProperty", "password"));
		request->setFolder(utils->getTestValue("getSlidesDocumentProperty", "folder"));
		request->setStorage(utils->getTestValue("getSlidesDocumentProperty", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesImageWithDefaultFormatRequest> getGetSlidesImageWithDefaultFormatRequest()
	{
		std::shared_ptr<GetSlidesImageWithDefaultFormatRequest> request = std::make_shared<GetSlidesImageWithDefaultFormatRequest>();
		request->setName(utils->getTestValue("getSlidesImageWithDefaultFormat", "name"));
		request->setIndex(utils->getIntTestValue("getSlidesImageWithDefaultFormat", "index"));
		request->setPassword(utils->getTestValue("getSlidesImageWithDefaultFormat", "password"));
		request->setFolder(utils->getTestValue("getSlidesImageWithDefaultFormat", "folder"));
		request->setStorage(utils->getTestValue("getSlidesImageWithDefaultFormat", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesImageWithFormatRequest> getGetSlidesImageWithFormatRequest()
	{
		std::shared_ptr<GetSlidesImageWithFormatRequest> request = std::make_shared<GetSlidesImageWithFormatRequest>();
		request->setName(utils->getTestValue("getSlidesImageWithFormat", "name"));
		request->setIndex(utils->getIntTestValue("getSlidesImageWithFormat", "index"));
		request->setFormat(utils->getTestValue("getSlidesImageWithFormat", "format"));
		request->setPassword(utils->getTestValue("getSlidesImageWithFormat", "password"));
		request->setFolder(utils->getTestValue("getSlidesImageWithFormat", "folder"));
		request->setStorage(utils->getTestValue("getSlidesImageWithFormat", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesImagesRequest> getGetSlidesImagesRequest()
	{
		std::shared_ptr<GetSlidesImagesRequest> request = std::make_shared<GetSlidesImagesRequest>();
		request->setName(utils->getTestValue("getSlidesImages", "name"));
		request->setPassword(utils->getTestValue("getSlidesImages", "password"));
		request->setFolder(utils->getTestValue("getSlidesImages", "folder"));
		request->setStorage(utils->getTestValue("getSlidesImages", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesPlaceholderRequest> getGetSlidesPlaceholderRequest()
	{
		std::shared_ptr<GetSlidesPlaceholderRequest> request = std::make_shared<GetSlidesPlaceholderRequest>();
		request->setName(utils->getTestValue("getSlidesPlaceholder", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlidesPlaceholder", "slideIndex"));
		request->setPlaceholderIndex(utils->getIntTestValue("getSlidesPlaceholder", "placeholderIndex"));
		request->setPassword(utils->getTestValue("getSlidesPlaceholder", "password"));
		request->setFolder(utils->getTestValue("getSlidesPlaceholder", "folder"));
		request->setStorage(utils->getTestValue("getSlidesPlaceholder", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesPlaceholdersRequest> getGetSlidesPlaceholdersRequest()
	{
		std::shared_ptr<GetSlidesPlaceholdersRequest> request = std::make_shared<GetSlidesPlaceholdersRequest>();
		request->setName(utils->getTestValue("getSlidesPlaceholders", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlidesPlaceholders", "slideIndex"));
		request->setPassword(utils->getTestValue("getSlidesPlaceholders", "password"));
		request->setFolder(utils->getTestValue("getSlidesPlaceholders", "folder"));
		request->setStorage(utils->getTestValue("getSlidesPlaceholders", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesPresentationTextItemsRequest> getGetSlidesPresentationTextItemsRequest()
	{
		std::shared_ptr<GetSlidesPresentationTextItemsRequest> request = std::make_shared<GetSlidesPresentationTextItemsRequest>();
		request->setName(utils->getTestValue("getSlidesPresentationTextItems", "name"));
		auto valueForWithEmpty = utils->getOptionalBoolTestValue("getSlidesPresentationTextItems", "withEmpty");
		if (valueForWithEmpty != nullptr)
		{
			request->setWithEmpty(*valueForWithEmpty);
		}
		request->setPassword(utils->getTestValue("getSlidesPresentationTextItems", "password"));
		request->setFolder(utils->getTestValue("getSlidesPresentationTextItems", "folder"));
		request->setStorage(utils->getTestValue("getSlidesPresentationTextItems", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesSlideRequest> getGetSlidesSlideRequest()
	{
		std::shared_ptr<GetSlidesSlideRequest> request = std::make_shared<GetSlidesSlideRequest>();
		request->setName(utils->getTestValue("getSlidesSlide", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlidesSlide", "slideIndex"));
		request->setPassword(utils->getTestValue("getSlidesSlide", "password"));
		request->setFolder(utils->getTestValue("getSlidesSlide", "folder"));
		request->setStorage(utils->getTestValue("getSlidesSlide", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesSlideBackgroundRequest> getGetSlidesSlideBackgroundRequest()
	{
		std::shared_ptr<GetSlidesSlideBackgroundRequest> request = std::make_shared<GetSlidesSlideBackgroundRequest>();
		request->setName(utils->getTestValue("getSlidesSlideBackground", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlidesSlideBackground", "slideIndex"));
		request->setPassword(utils->getTestValue("getSlidesSlideBackground", "password"));
		request->setFolder(utils->getTestValue("getSlidesSlideBackground", "folder"));
		request->setStorage(utils->getTestValue("getSlidesSlideBackground", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesSlideCommentsRequest> getGetSlidesSlideCommentsRequest()
	{
		std::shared_ptr<GetSlidesSlideCommentsRequest> request = std::make_shared<GetSlidesSlideCommentsRequest>();
		request->setName(utils->getTestValue("getSlidesSlideComments", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlidesSlideComments", "slideIndex"));
		request->setPassword(utils->getTestValue("getSlidesSlideComments", "password"));
		request->setFolder(utils->getTestValue("getSlidesSlideComments", "folder"));
		request->setStorage(utils->getTestValue("getSlidesSlideComments", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesSlideImagesRequest> getGetSlidesSlideImagesRequest()
	{
		std::shared_ptr<GetSlidesSlideImagesRequest> request = std::make_shared<GetSlidesSlideImagesRequest>();
		request->setName(utils->getTestValue("getSlidesSlideImages", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlidesSlideImages", "slideIndex"));
		request->setPassword(utils->getTestValue("getSlidesSlideImages", "password"));
		request->setFolder(utils->getTestValue("getSlidesSlideImages", "folder"));
		request->setStorage(utils->getTestValue("getSlidesSlideImages", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesSlideTextItemsRequest> getGetSlidesSlideTextItemsRequest()
	{
		std::shared_ptr<GetSlidesSlideTextItemsRequest> request = std::make_shared<GetSlidesSlideTextItemsRequest>();
		request->setName(utils->getTestValue("getSlidesSlideTextItems", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlidesSlideTextItems", "slideIndex"));
		auto valueForWithEmpty = utils->getOptionalBoolTestValue("getSlidesSlideTextItems", "withEmpty");
		if (valueForWithEmpty != nullptr)
		{
			request->setWithEmpty(*valueForWithEmpty);
		}
		request->setPassword(utils->getTestValue("getSlidesSlideTextItems", "password"));
		request->setFolder(utils->getTestValue("getSlidesSlideTextItems", "folder"));
		request->setStorage(utils->getTestValue("getSlidesSlideTextItems", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesSlidesListRequest> getGetSlidesSlidesListRequest()
	{
		std::shared_ptr<GetSlidesSlidesListRequest> request = std::make_shared<GetSlidesSlidesListRequest>();
		request->setName(utils->getTestValue("getSlidesSlidesList", "name"));
		request->setPassword(utils->getTestValue("getSlidesSlidesList", "password"));
		request->setFolder(utils->getTestValue("getSlidesSlidesList", "folder"));
		request->setStorage(utils->getTestValue("getSlidesSlidesList", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesThemeRequest> getGetSlidesThemeRequest()
	{
		std::shared_ptr<GetSlidesThemeRequest> request = std::make_shared<GetSlidesThemeRequest>();
		request->setName(utils->getTestValue("getSlidesTheme", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlidesTheme", "slideIndex"));
		request->setPassword(utils->getTestValue("getSlidesTheme", "password"));
		request->setFolder(utils->getTestValue("getSlidesTheme", "folder"));
		request->setStorage(utils->getTestValue("getSlidesTheme", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesThemeColorSchemeRequest> getGetSlidesThemeColorSchemeRequest()
	{
		std::shared_ptr<GetSlidesThemeColorSchemeRequest> request = std::make_shared<GetSlidesThemeColorSchemeRequest>();
		request->setName(utils->getTestValue("getSlidesThemeColorScheme", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlidesThemeColorScheme", "slideIndex"));
		request->setPassword(utils->getTestValue("getSlidesThemeColorScheme", "password"));
		request->setFolder(utils->getTestValue("getSlidesThemeColorScheme", "folder"));
		request->setStorage(utils->getTestValue("getSlidesThemeColorScheme", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesThemeFontSchemeRequest> getGetSlidesThemeFontSchemeRequest()
	{
		std::shared_ptr<GetSlidesThemeFontSchemeRequest> request = std::make_shared<GetSlidesThemeFontSchemeRequest>();
		request->setName(utils->getTestValue("getSlidesThemeFontScheme", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlidesThemeFontScheme", "slideIndex"));
		request->setPassword(utils->getTestValue("getSlidesThemeFontScheme", "password"));
		request->setFolder(utils->getTestValue("getSlidesThemeFontScheme", "folder"));
		request->setStorage(utils->getTestValue("getSlidesThemeFontScheme", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesThemeFormatSchemeRequest> getGetSlidesThemeFormatSchemeRequest()
	{
		std::shared_ptr<GetSlidesThemeFormatSchemeRequest> request = std::make_shared<GetSlidesThemeFormatSchemeRequest>();
		request->setName(utils->getTestValue("getSlidesThemeFormatScheme", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSlidesThemeFormatScheme", "slideIndex"));
		request->setPassword(utils->getTestValue("getSlidesThemeFormatScheme", "password"));
		request->setFolder(utils->getTestValue("getSlidesThemeFormatScheme", "folder"));
		request->setStorage(utils->getTestValue("getSlidesThemeFormatScheme", "storage"));
		return request;
	}

	std::shared_ptr<GetSlidesViewPropertiesRequest> getGetSlidesViewPropertiesRequest()
	{
		std::shared_ptr<GetSlidesViewPropertiesRequest> request = std::make_shared<GetSlidesViewPropertiesRequest>();
		request->setName(utils->getTestValue("getSlidesViewProperties", "name"));
		request->setPassword(utils->getTestValue("getSlidesViewProperties", "password"));
		request->setFolder(utils->getTestValue("getSlidesViewProperties", "folder"));
		request->setStorage(utils->getTestValue("getSlidesViewProperties", "storage"));
		return request;
	}

	std::shared_ptr<GetSubshapeParagraphPortionRequest> getGetSubshapeParagraphPortionRequest()
	{
		std::shared_ptr<GetSubshapeParagraphPortionRequest> request = std::make_shared<GetSubshapeParagraphPortionRequest>();
		request->setName(utils->getTestValue("getSubshapeParagraphPortion", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSubshapeParagraphPortion", "slideIndex"));
		request->setPath(utils->getTestValue("getSubshapeParagraphPortion", "path"));
		request->setShapeIndex(utils->getIntTestValue("getSubshapeParagraphPortion", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("getSubshapeParagraphPortion", "paragraphIndex"));
		request->setPortionIndex(utils->getIntTestValue("getSubshapeParagraphPortion", "portionIndex"));
		request->setPassword(utils->getTestValue("getSubshapeParagraphPortion", "password"));
		request->setFolder(utils->getTestValue("getSubshapeParagraphPortion", "folder"));
		request->setStorage(utils->getTestValue("getSubshapeParagraphPortion", "storage"));
		return request;
	}

	std::shared_ptr<GetSubshapeParagraphPortionsRequest> getGetSubshapeParagraphPortionsRequest()
	{
		std::shared_ptr<GetSubshapeParagraphPortionsRequest> request = std::make_shared<GetSubshapeParagraphPortionsRequest>();
		request->setName(utils->getTestValue("getSubshapeParagraphPortions", "name"));
		request->setSlideIndex(utils->getIntTestValue("getSubshapeParagraphPortions", "slideIndex"));
		request->setPath(utils->getTestValue("getSubshapeParagraphPortions", "path"));
		request->setShapeIndex(utils->getIntTestValue("getSubshapeParagraphPortions", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("getSubshapeParagraphPortions", "paragraphIndex"));
		request->setPassword(utils->getTestValue("getSubshapeParagraphPortions", "password"));
		request->setFolder(utils->getTestValue("getSubshapeParagraphPortions", "folder"));
		request->setStorage(utils->getTestValue("getSubshapeParagraphPortions", "storage"));
		return request;
	}

	std::shared_ptr<MoveFileRequest> getMoveFileRequest()
	{
		std::shared_ptr<MoveFileRequest> request = std::make_shared<MoveFileRequest>();
		request->setSrcPath(utils->getTestValue("moveFile", "srcPath"));
		request->setDestPath(utils->getTestValue("moveFile", "destPath"));
		request->setSrcStorageName(utils->getTestValue("moveFile", "srcStorageName"));
		request->setDestStorageName(utils->getTestValue("moveFile", "destStorageName"));
		request->setVersionId(utils->getTestValue("moveFile", "versionId"));
		return request;
	}

	std::shared_ptr<MoveFolderRequest> getMoveFolderRequest()
	{
		std::shared_ptr<MoveFolderRequest> request = std::make_shared<MoveFolderRequest>();
		request->setSrcPath(utils->getTestValue("moveFolder", "srcPath"));
		request->setDestPath(utils->getTestValue("moveFolder", "destPath"));
		request->setSrcStorageName(utils->getTestValue("moveFolder", "srcStorageName"));
		request->setDestStorageName(utils->getTestValue("moveFolder", "destStorageName"));
		return request;
	}

	std::shared_ptr<ObjectExistsRequest> getObjectExistsRequest()
	{
		std::shared_ptr<ObjectExistsRequest> request = std::make_shared<ObjectExistsRequest>();
		request->setPath(utils->getTestValue("objectExists", "path"));
		request->setStorageName(utils->getTestValue("objectExists", "storageName"));
		request->setVersionId(utils->getTestValue("objectExists", "versionId"));
		return request;
	}

	std::shared_ptr<PostAddNewParagraphRequest> getPostAddNewParagraphRequest()
	{
		std::shared_ptr<PostAddNewParagraphRequest> request = std::make_shared<PostAddNewParagraphRequest>();
		request->setName(utils->getTestValue("postAddNewParagraph", "name"));
		request->setSlideIndex(utils->getIntTestValue("postAddNewParagraph", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("postAddNewParagraph", "shapeIndex"));
		request->setDto(utils->getTestValueForClass<Paragraph>("postAddNewParagraph", "dto"));
		request->setPassword(utils->getTestValue("postAddNewParagraph", "password"));
		request->setFolder(utils->getTestValue("postAddNewParagraph", "folder"));
		request->setStorage(utils->getTestValue("postAddNewParagraph", "storage"));
		auto valueForPosition = utils->getOptionalIntTestValue("postAddNewParagraph", "position");
		if (valueForPosition != nullptr)
		{
			request->setPosition(*valueForPosition);
		}
		return request;
	}

	std::shared_ptr<PostAddNewPortionRequest> getPostAddNewPortionRequest()
	{
		std::shared_ptr<PostAddNewPortionRequest> request = std::make_shared<PostAddNewPortionRequest>();
		request->setName(utils->getTestValue("postAddNewPortion", "name"));
		request->setSlideIndex(utils->getIntTestValue("postAddNewPortion", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("postAddNewPortion", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("postAddNewPortion", "paragraphIndex"));
		request->setDto(utils->getTestValueForClass<Portion>("postAddNewPortion", "dto"));
		request->setPassword(utils->getTestValue("postAddNewPortion", "password"));
		request->setFolder(utils->getTestValue("postAddNewPortion", "folder"));
		request->setStorage(utils->getTestValue("postAddNewPortion", "storage"));
		auto valueForPosition = utils->getOptionalIntTestValue("postAddNewPortion", "position");
		if (valueForPosition != nullptr)
		{
			request->setPosition(*valueForPosition);
		}
		return request;
	}

	std::shared_ptr<PostAddNewShapeRequest> getPostAddNewShapeRequest()
	{
		std::shared_ptr<PostAddNewShapeRequest> request = std::make_shared<PostAddNewShapeRequest>();
		request->setName(utils->getTestValue("postAddNewShape", "name"));
		request->setSlideIndex(utils->getIntTestValue("postAddNewShape", "slideIndex"));
		request->setDto(utils->getTestValueForClass<ShapeBase>("postAddNewShape", "dto"));
		request->setPassword(utils->getTestValue("postAddNewShape", "password"));
		request->setFolder(utils->getTestValue("postAddNewShape", "folder"));
		request->setStorage(utils->getTestValue("postAddNewShape", "storage"));
		auto valueForShapeToClone = utils->getOptionalIntTestValue("postAddNewShape", "shapeToClone");
		if (valueForShapeToClone != nullptr)
		{
			request->setShapeToClone(*valueForShapeToClone);
		}
		auto valueForPosition = utils->getOptionalIntTestValue("postAddNewShape", "position");
		if (valueForPosition != nullptr)
		{
			request->setPosition(*valueForPosition);
		}
		return request;
	}

	std::shared_ptr<PostAddNewSubshapeRequest> getPostAddNewSubshapeRequest()
	{
		std::shared_ptr<PostAddNewSubshapeRequest> request = std::make_shared<PostAddNewSubshapeRequest>();
		request->setName(utils->getTestValue("postAddNewSubshape", "name"));
		request->setSlideIndex(utils->getIntTestValue("postAddNewSubshape", "slideIndex"));
		request->setPath(utils->getTestValue("postAddNewSubshape", "path"));
		request->setDto(utils->getTestValueForClass<ShapeBase>("postAddNewSubshape", "dto"));
		request->setPassword(utils->getTestValue("postAddNewSubshape", "password"));
		request->setFolder(utils->getTestValue("postAddNewSubshape", "folder"));
		request->setStorage(utils->getTestValue("postAddNewSubshape", "storage"));
		auto valueForShapeToClone = utils->getOptionalIntTestValue("postAddNewSubshape", "shapeToClone");
		if (valueForShapeToClone != nullptr)
		{
			request->setShapeToClone(*valueForShapeToClone);
		}
		auto valueForPosition = utils->getOptionalIntTestValue("postAddNewSubshape", "position");
		if (valueForPosition != nullptr)
		{
			request->setPosition(*valueForPosition);
		}
		return request;
	}

	std::shared_ptr<PostAddNewSubshapeParagraphRequest> getPostAddNewSubshapeParagraphRequest()
	{
		std::shared_ptr<PostAddNewSubshapeParagraphRequest> request = std::make_shared<PostAddNewSubshapeParagraphRequest>();
		request->setName(utils->getTestValue("postAddNewSubshapeParagraph", "name"));
		request->setSlideIndex(utils->getIntTestValue("postAddNewSubshapeParagraph", "slideIndex"));
		request->setPath(utils->getTestValue("postAddNewSubshapeParagraph", "path"));
		request->setShapeIndex(utils->getIntTestValue("postAddNewSubshapeParagraph", "shapeIndex"));
		request->setDto(utils->getTestValueForClass<Paragraph>("postAddNewSubshapeParagraph", "dto"));
		request->setPassword(utils->getTestValue("postAddNewSubshapeParagraph", "password"));
		request->setFolder(utils->getTestValue("postAddNewSubshapeParagraph", "folder"));
		request->setStorage(utils->getTestValue("postAddNewSubshapeParagraph", "storage"));
		auto valueForPosition = utils->getOptionalIntTestValue("postAddNewSubshapeParagraph", "position");
		if (valueForPosition != nullptr)
		{
			request->setPosition(*valueForPosition);
		}
		return request;
	}

	std::shared_ptr<PostAddNewSubshapePortionRequest> getPostAddNewSubshapePortionRequest()
	{
		std::shared_ptr<PostAddNewSubshapePortionRequest> request = std::make_shared<PostAddNewSubshapePortionRequest>();
		request->setName(utils->getTestValue("postAddNewSubshapePortion", "name"));
		request->setSlideIndex(utils->getIntTestValue("postAddNewSubshapePortion", "slideIndex"));
		request->setPath(utils->getTestValue("postAddNewSubshapePortion", "path"));
		request->setShapeIndex(utils->getIntTestValue("postAddNewSubshapePortion", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("postAddNewSubshapePortion", "paragraphIndex"));
		request->setDto(utils->getTestValueForClass<Portion>("postAddNewSubshapePortion", "dto"));
		request->setPassword(utils->getTestValue("postAddNewSubshapePortion", "password"));
		request->setFolder(utils->getTestValue("postAddNewSubshapePortion", "folder"));
		request->setStorage(utils->getTestValue("postAddNewSubshapePortion", "storage"));
		auto valueForPosition = utils->getOptionalIntTestValue("postAddNewSubshapePortion", "position");
		if (valueForPosition != nullptr)
		{
			request->setPosition(*valueForPosition);
		}
		return request;
	}

	std::shared_ptr<PostAddNotesSlideRequest> getPostAddNotesSlideRequest()
	{
		std::shared_ptr<PostAddNotesSlideRequest> request = std::make_shared<PostAddNotesSlideRequest>();
		request->setName(utils->getTestValue("postAddNotesSlide", "name"));
		request->setSlideIndex(utils->getIntTestValue("postAddNotesSlide", "slideIndex"));
		request->setDto(utils->getTestValueForClass<NotesSlide>("postAddNotesSlide", "dto"));
		request->setPassword(utils->getTestValue("postAddNotesSlide", "password"));
		request->setFolder(utils->getTestValue("postAddNotesSlide", "folder"));
		request->setStorage(utils->getTestValue("postAddNotesSlide", "storage"));
		return request;
	}

	std::shared_ptr<PostChartCategoryRequest> getPostChartCategoryRequest()
	{
		std::shared_ptr<PostChartCategoryRequest> request = std::make_shared<PostChartCategoryRequest>();
		request->setName(utils->getTestValue("postChartCategory", "name"));
		request->setSlideIndex(utils->getIntTestValue("postChartCategory", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("postChartCategory", "shapeIndex"));
		request->setCategory(utils->getTestValueForClass<ChartCategory>("postChartCategory", "category"));
		request->setPassword(utils->getTestValue("postChartCategory", "password"));
		request->setFolder(utils->getTestValue("postChartCategory", "folder"));
		request->setStorage(utils->getTestValue("postChartCategory", "storage"));
		return request;
	}

	std::shared_ptr<PostChartDataPointRequest> getPostChartDataPointRequest()
	{
		std::shared_ptr<PostChartDataPointRequest> request = std::make_shared<PostChartDataPointRequest>();
		request->setName(utils->getTestValue("postChartDataPoint", "name"));
		request->setSlideIndex(utils->getIntTestValue("postChartDataPoint", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("postChartDataPoint", "shapeIndex"));
		request->setSeriesIndex(utils->getIntTestValue("postChartDataPoint", "seriesIndex"));
		request->setDataPoint(utils->getTestValueForClass<ScatterChartDataPoint>("postChartDataPoint", "dataPoint"));
		request->setPassword(utils->getTestValue("postChartDataPoint", "password"));
		request->setFolder(utils->getTestValue("postChartDataPoint", "folder"));
		request->setStorage(utils->getTestValue("postChartDataPoint", "storage"));
		return request;
	}

	std::shared_ptr<PostChartSeriesRequest> getPostChartSeriesRequest()
	{
		std::shared_ptr<PostChartSeriesRequest> request = std::make_shared<PostChartSeriesRequest>();
		request->setName(utils->getTestValue("postChartSeries", "name"));
		request->setSlideIndex(utils->getIntTestValue("postChartSeries", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("postChartSeries", "shapeIndex"));
		request->setSeries(utils->getTestValueForClass<Series>("postChartSeries", "series"));
		request->setPassword(utils->getTestValue("postChartSeries", "password"));
		request->setFolder(utils->getTestValue("postChartSeries", "folder"));
		request->setStorage(utils->getTestValue("postChartSeries", "storage"));
		return request;
	}

	std::shared_ptr<PostCopyLayoutSlideFromSourcePresentationRequest> getPostCopyLayoutSlideFromSourcePresentationRequest()
	{
		std::shared_ptr<PostCopyLayoutSlideFromSourcePresentationRequest> request = std::make_shared<PostCopyLayoutSlideFromSourcePresentationRequest>();
		request->setName(utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "name"));
		request->setCloneFrom(utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom"));
		request->setCloneFromPosition(utils->getIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition"));
		request->setCloneFromPassword(utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword"));
		request->setCloneFromStorage(utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage"));
		request->setPassword(utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "password"));
		request->setFolder(utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "folder"));
		request->setStorage(utils->getTestValue("postCopyLayoutSlideFromSourcePresentation", "storage"));
		return request;
	}

	std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> getPostCopyMasterSlideFromSourcePresentationRequest()
	{
		std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> request = std::make_shared<PostCopyMasterSlideFromSourcePresentationRequest>();
		request->setName(utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "name"));
		request->setCloneFrom(utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom"));
		request->setCloneFromPosition(utils->getIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition"));
		request->setCloneFromPassword(utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword"));
		request->setCloneFromStorage(utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage"));
		auto valueForApplyToAll = utils->getOptionalBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
		if (valueForApplyToAll != nullptr)
		{
			request->setApplyToAll(*valueForApplyToAll);
		}
		request->setPassword(utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "password"));
		request->setFolder(utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "folder"));
		request->setStorage(utils->getTestValue("postCopyMasterSlideFromSourcePresentation", "storage"));
		return request;
	}

	std::shared_ptr<PostGetNotesSlideRequest> getPostGetNotesSlideRequest()
	{
		std::shared_ptr<PostGetNotesSlideRequest> request = std::make_shared<PostGetNotesSlideRequest>();
		request->setDocument(utils->getBinaryTestValue("postGetNotesSlide", "document"));
		request->setSlideIndex(utils->getIntTestValue("postGetNotesSlide", "slideIndex"));
		request->setPassword(utils->getTestValue("postGetNotesSlide", "password"));
		return request;
	}

	std::shared_ptr<PostGetNotesSlideExistsRequest> getPostGetNotesSlideExistsRequest()
	{
		std::shared_ptr<PostGetNotesSlideExistsRequest> request = std::make_shared<PostGetNotesSlideExistsRequest>();
		request->setDocument(utils->getBinaryTestValue("postGetNotesSlideExists", "document"));
		request->setSlideIndex(utils->getIntTestValue("postGetNotesSlideExists", "slideIndex"));
		request->setPassword(utils->getTestValue("postGetNotesSlideExists", "password"));
		return request;
	}

	std::shared_ptr<PostGetNotesSlideWithFormatRequest> getPostGetNotesSlideWithFormatRequest()
	{
		std::shared_ptr<PostGetNotesSlideWithFormatRequest> request = std::make_shared<PostGetNotesSlideWithFormatRequest>();
		request->setDocument(utils->getBinaryTestValue("postGetNotesSlideWithFormat", "document"));
		request->setSlideIndex(utils->getIntTestValue("postGetNotesSlideWithFormat", "slideIndex"));
		request->setFormat(utils->getTestValue("postGetNotesSlideWithFormat", "format"));
		auto valueForWidth = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "width");
		if (valueForWidth != nullptr)
		{
			request->setWidth(*valueForWidth);
		}
		auto valueForHeight = utils->getOptionalIntTestValue("postGetNotesSlideWithFormat", "height");
		if (valueForHeight != nullptr)
		{
			request->setHeight(*valueForHeight);
		}
		request->setPassword(utils->getTestValue("postGetNotesSlideWithFormat", "password"));
		request->setFontsFolder(utils->getTestValue("postGetNotesSlideWithFormat", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PostNotesSlideAddNewParagraphRequest> getPostNotesSlideAddNewParagraphRequest()
	{
		std::shared_ptr<PostNotesSlideAddNewParagraphRequest> request = std::make_shared<PostNotesSlideAddNewParagraphRequest>();
		request->setName(utils->getTestValue("postNotesSlideAddNewParagraph", "name"));
		request->setSlideIndex(utils->getIntTestValue("postNotesSlideAddNewParagraph", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex"));
		request->setDto(utils->getTestValueForClass<Paragraph>("postNotesSlideAddNewParagraph", "dto"));
		request->setPassword(utils->getTestValue("postNotesSlideAddNewParagraph", "password"));
		request->setFolder(utils->getTestValue("postNotesSlideAddNewParagraph", "folder"));
		request->setStorage(utils->getTestValue("postNotesSlideAddNewParagraph", "storage"));
		auto valueForPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewParagraph", "position");
		if (valueForPosition != nullptr)
		{
			request->setPosition(*valueForPosition);
		}
		return request;
	}

	std::shared_ptr<PostNotesSlideAddNewPortionRequest> getPostNotesSlideAddNewPortionRequest()
	{
		std::shared_ptr<PostNotesSlideAddNewPortionRequest> request = std::make_shared<PostNotesSlideAddNewPortionRequest>();
		request->setName(utils->getTestValue("postNotesSlideAddNewPortion", "name"));
		request->setSlideIndex(utils->getIntTestValue("postNotesSlideAddNewPortion", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("postNotesSlideAddNewPortion", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex"));
		request->setDto(utils->getTestValueForClass<Portion>("postNotesSlideAddNewPortion", "dto"));
		request->setPassword(utils->getTestValue("postNotesSlideAddNewPortion", "password"));
		request->setFolder(utils->getTestValue("postNotesSlideAddNewPortion", "folder"));
		request->setStorage(utils->getTestValue("postNotesSlideAddNewPortion", "storage"));
		auto valueForPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewPortion", "position");
		if (valueForPosition != nullptr)
		{
			request->setPosition(*valueForPosition);
		}
		return request;
	}

	std::shared_ptr<PostNotesSlideAddNewShapeRequest> getPostNotesSlideAddNewShapeRequest()
	{
		std::shared_ptr<PostNotesSlideAddNewShapeRequest> request = std::make_shared<PostNotesSlideAddNewShapeRequest>();
		request->setName(utils->getTestValue("postNotesSlideAddNewShape", "name"));
		request->setSlideIndex(utils->getIntTestValue("postNotesSlideAddNewShape", "slideIndex"));
		request->setDto(utils->getTestValueForClass<ShapeBase>("postNotesSlideAddNewShape", "dto"));
		request->setPassword(utils->getTestValue("postNotesSlideAddNewShape", "password"));
		request->setFolder(utils->getTestValue("postNotesSlideAddNewShape", "folder"));
		request->setStorage(utils->getTestValue("postNotesSlideAddNewShape", "storage"));
		auto valueForShapeToClone = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "shapeToClone");
		if (valueForShapeToClone != nullptr)
		{
			request->setShapeToClone(*valueForShapeToClone);
		}
		auto valueForPosition = utils->getOptionalIntTestValue("postNotesSlideAddNewShape", "position");
		if (valueForPosition != nullptr)
		{
			request->setPosition(*valueForPosition);
		}
		return request;
	}

	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> getPostNotesSlideShapeSaveAsRequest()
	{
		std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = std::make_shared<PostNotesSlideShapeSaveAsRequest>();
		request->setName(utils->getTestValue("postNotesSlideShapeSaveAs", "name"));
		request->setSlideIndex(utils->getIntTestValue("postNotesSlideShapeSaveAs", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex"));
		request->setFormat(utils->getTestValue("postNotesSlideShapeSaveAs", "format"));
		request->setOptions(utils->getTestValueForClass<IShapeExportOptions>("postNotesSlideShapeSaveAs", "options"));
		request->setPassword(utils->getTestValue("postNotesSlideShapeSaveAs", "password"));
		request->setFolder(utils->getTestValue("postNotesSlideShapeSaveAs", "folder"));
		request->setStorage(utils->getTestValue("postNotesSlideShapeSaveAs", "storage"));
		auto valueForScaleX = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX");
		if (valueForScaleX != nullptr)
		{
			request->setScaleX(*valueForScaleX);
		}
		auto valueForScaleY = utils->getOptionalDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY");
		if (valueForScaleY != nullptr)
		{
			request->setScaleY(*valueForScaleY);
		}
		request->setBounds(utils->getTestValue("postNotesSlideShapeSaveAs", "bounds"));
		request->setFontsFolder(utils->getTestValue("postNotesSlideShapeSaveAs", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PostPresentationMergeRequest> getPostPresentationMergeRequest()
	{
		std::shared_ptr<PostPresentationMergeRequest> request = std::make_shared<PostPresentationMergeRequest>();
		request->setName(utils->getTestValue("postPresentationMerge", "name"));
		request->setRequest(utils->getTestValueForClass<PresentationsMergeRequest>("postPresentationMerge", "request"));
		request->setPassword(utils->getTestValue("postPresentationMerge", "password"));
		request->setStorage(utils->getTestValue("postPresentationMerge", "storage"));
		request->setFolder(utils->getTestValue("postPresentationMerge", "folder"));
		return request;
	}

	std::shared_ptr<PostSectionRequest> getPostSectionRequest()
	{
		std::shared_ptr<PostSectionRequest> request = std::make_shared<PostSectionRequest>();
		request->setName(utils->getTestValue("postSection", "name"));
		request->setSectionName(utils->getTestValue("postSection", "sectionName"));
		request->setSlideIndex(utils->getIntTestValue("postSection", "slideIndex"));
		request->setPassword(utils->getTestValue("postSection", "password"));
		request->setFolder(utils->getTestValue("postSection", "folder"));
		request->setStorage(utils->getTestValue("postSection", "storage"));
		return request;
	}

	std::shared_ptr<PostSectionMoveRequest> getPostSectionMoveRequest()
	{
		std::shared_ptr<PostSectionMoveRequest> request = std::make_shared<PostSectionMoveRequest>();
		request->setName(utils->getTestValue("postSectionMove", "name"));
		request->setSectionIndex(utils->getIntTestValue("postSectionMove", "sectionIndex"));
		request->setNewPosition(utils->getIntTestValue("postSectionMove", "newPosition"));
		request->setPassword(utils->getTestValue("postSectionMove", "password"));
		request->setFolder(utils->getTestValue("postSectionMove", "folder"));
		request->setStorage(utils->getTestValue("postSectionMove", "storage"));
		return request;
	}

	std::shared_ptr<PostShapeSaveAsRequest> getPostShapeSaveAsRequest()
	{
		std::shared_ptr<PostShapeSaveAsRequest> request = std::make_shared<PostShapeSaveAsRequest>();
		request->setName(utils->getTestValue("postShapeSaveAs", "name"));
		request->setSlideIndex(utils->getIntTestValue("postShapeSaveAs", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("postShapeSaveAs", "shapeIndex"));
		request->setFormat(utils->getTestValue("postShapeSaveAs", "format"));
		request->setOptions(utils->getTestValueForClass<IShapeExportOptions>("postShapeSaveAs", "options"));
		request->setPassword(utils->getTestValue("postShapeSaveAs", "password"));
		request->setFolder(utils->getTestValue("postShapeSaveAs", "folder"));
		request->setStorage(utils->getTestValue("postShapeSaveAs", "storage"));
		auto valueForScaleX = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleX");
		if (valueForScaleX != nullptr)
		{
			request->setScaleX(*valueForScaleX);
		}
		auto valueForScaleY = utils->getOptionalDoubleTestValue("postShapeSaveAs", "scaleY");
		if (valueForScaleY != nullptr)
		{
			request->setScaleY(*valueForScaleY);
		}
		request->setBounds(utils->getTestValue("postShapeSaveAs", "bounds"));
		request->setFontsFolder(utils->getTestValue("postShapeSaveAs", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PostSlideAnimationEffectRequest> getPostSlideAnimationEffectRequest()
	{
		std::shared_ptr<PostSlideAnimationEffectRequest> request = std::make_shared<PostSlideAnimationEffectRequest>();
		request->setName(utils->getTestValue("postSlideAnimationEffect", "name"));
		request->setSlideIndex(utils->getIntTestValue("postSlideAnimationEffect", "slideIndex"));
		request->setEffect(utils->getTestValueForClass<Effect>("postSlideAnimationEffect", "effect"));
		request->setPassword(utils->getTestValue("postSlideAnimationEffect", "password"));
		request->setFolder(utils->getTestValue("postSlideAnimationEffect", "folder"));
		request->setStorage(utils->getTestValue("postSlideAnimationEffect", "storage"));
		return request;
	}

	std::shared_ptr<PostSlideAnimationInteractiveSequenceRequest> getPostSlideAnimationInteractiveSequenceRequest()
	{
		std::shared_ptr<PostSlideAnimationInteractiveSequenceRequest> request = std::make_shared<PostSlideAnimationInteractiveSequenceRequest>();
		request->setName(utils->getTestValue("postSlideAnimationInteractiveSequence", "name"));
		request->setSlideIndex(utils->getIntTestValue("postSlideAnimationInteractiveSequence", "slideIndex"));
		request->setSequence(utils->getTestValueForClass<InteractiveSequence>("postSlideAnimationInteractiveSequence", "sequence"));
		request->setPassword(utils->getTestValue("postSlideAnimationInteractiveSequence", "password"));
		request->setFolder(utils->getTestValue("postSlideAnimationInteractiveSequence", "folder"));
		request->setStorage(utils->getTestValue("postSlideAnimationInteractiveSequence", "storage"));
		return request;
	}

	std::shared_ptr<PostSlideAnimationInteractiveSequenceEffectRequest> getPostSlideAnimationInteractiveSequenceEffectRequest()
	{
		std::shared_ptr<PostSlideAnimationInteractiveSequenceEffectRequest> request = std::make_shared<PostSlideAnimationInteractiveSequenceEffectRequest>();
		request->setName(utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "name"));
		request->setSlideIndex(utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex"));
		request->setSequenceIndex(utils->getIntTestValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex"));
		request->setEffect(utils->getTestValueForClass<Effect>("postSlideAnimationInteractiveSequenceEffect", "effect"));
		request->setPassword(utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "password"));
		request->setFolder(utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "folder"));
		request->setStorage(utils->getTestValue("postSlideAnimationInteractiveSequenceEffect", "storage"));
		return request;
	}

	std::shared_ptr<PostSlideSaveAsRequest> getPostSlideSaveAsRequest()
	{
		std::shared_ptr<PostSlideSaveAsRequest> request = std::make_shared<PostSlideSaveAsRequest>();
		request->setName(utils->getTestValue("postSlideSaveAs", "name"));
		request->setSlideIndex(utils->getIntTestValue("postSlideSaveAs", "slideIndex"));
		request->setFormat(utils->getTestValue("postSlideSaveAs", "format"));
		request->setOptions(utils->getTestValueForClass<ExportOptions>("postSlideSaveAs", "options"));
		auto valueForWidth = utils->getOptionalIntTestValue("postSlideSaveAs", "width");
		if (valueForWidth != nullptr)
		{
			request->setWidth(*valueForWidth);
		}
		auto valueForHeight = utils->getOptionalIntTestValue("postSlideSaveAs", "height");
		if (valueForHeight != nullptr)
		{
			request->setHeight(*valueForHeight);
		}
		request->setPassword(utils->getTestValue("postSlideSaveAs", "password"));
		request->setFolder(utils->getTestValue("postSlideSaveAs", "folder"));
		request->setStorage(utils->getTestValue("postSlideSaveAs", "storage"));
		request->setFontsFolder(utils->getTestValue("postSlideSaveAs", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PostSlidesAddRequest> getPostSlidesAddRequest()
	{
		std::shared_ptr<PostSlidesAddRequest> request = std::make_shared<PostSlidesAddRequest>();
		request->setName(utils->getTestValue("postSlidesAdd", "name"));
		auto valueForPosition = utils->getOptionalIntTestValue("postSlidesAdd", "position");
		if (valueForPosition != nullptr)
		{
			request->setPosition(*valueForPosition);
		}
		request->setPassword(utils->getTestValue("postSlidesAdd", "password"));
		request->setFolder(utils->getTestValue("postSlidesAdd", "folder"));
		request->setStorage(utils->getTestValue("postSlidesAdd", "storage"));
		request->setLayoutAlias(utils->getTestValue("postSlidesAdd", "layoutAlias"));
		return request;
	}

	std::shared_ptr<PostSlidesConvertRequest> getPostSlidesConvertRequest()
	{
		std::shared_ptr<PostSlidesConvertRequest> request = std::make_shared<PostSlidesConvertRequest>();
		request->setDocument(utils->getBinaryTestValue("postSlidesConvert", "document"));
		request->setFormat(utils->getTestValue("postSlidesConvert", "format"));
		request->setPassword(utils->getTestValue("postSlidesConvert", "password"));
		request->setFontsFolder(utils->getTestValue("postSlidesConvert", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PostSlidesCopyRequest> getPostSlidesCopyRequest()
	{
		std::shared_ptr<PostSlidesCopyRequest> request = std::make_shared<PostSlidesCopyRequest>();
		request->setName(utils->getTestValue("postSlidesCopy", "name"));
		request->setSlideToCopy(utils->getIntTestValue("postSlidesCopy", "slideToCopy"));
		auto valueForPosition = utils->getOptionalIntTestValue("postSlidesCopy", "position");
		if (valueForPosition != nullptr)
		{
			request->setPosition(*valueForPosition);
		}
		request->setSource(utils->getTestValue("postSlidesCopy", "source"));
		request->setSourcePassword(utils->getTestValue("postSlidesCopy", "sourcePassword"));
		request->setSourceStorage(utils->getTestValue("postSlidesCopy", "sourceStorage"));
		request->setPassword(utils->getTestValue("postSlidesCopy", "password"));
		request->setFolder(utils->getTestValue("postSlidesCopy", "folder"));
		request->setStorage(utils->getTestValue("postSlidesCopy", "storage"));
		return request;
	}

	std::shared_ptr<PostSlidesDocumentRequest> getPostSlidesDocumentRequest()
	{
		std::shared_ptr<PostSlidesDocumentRequest> request = std::make_shared<PostSlidesDocumentRequest>();
		request->setName(utils->getTestValue("postSlidesDocument", "name"));
		request->setData(utils->getBinaryTestValue("postSlidesDocument", "data"));
		request->setInputPassword(utils->getTestValue("postSlidesDocument", "inputPassword"));
		request->setPassword(utils->getTestValue("postSlidesDocument", "password"));
		request->setStorage(utils->getTestValue("postSlidesDocument", "storage"));
		request->setFolder(utils->getTestValue("postSlidesDocument", "folder"));
		return request;
	}

	std::shared_ptr<PostSlidesDocumentFromHtmlRequest> getPostSlidesDocumentFromHtmlRequest()
	{
		std::shared_ptr<PostSlidesDocumentFromHtmlRequest> request = std::make_shared<PostSlidesDocumentFromHtmlRequest>();
		request->setName(utils->getTestValue("postSlidesDocumentFromHtml", "name"));
		request->setHtml(utils->getTestValue("postSlidesDocumentFromHtml", "html"));
		request->setPassword(utils->getTestValue("postSlidesDocumentFromHtml", "password"));
		request->setStorage(utils->getTestValue("postSlidesDocumentFromHtml", "storage"));
		request->setFolder(utils->getTestValue("postSlidesDocumentFromHtml", "folder"));
		return request;
	}

	std::shared_ptr<PostSlidesDocumentFromSourceRequest> getPostSlidesDocumentFromSourceRequest()
	{
		std::shared_ptr<PostSlidesDocumentFromSourceRequest> request = std::make_shared<PostSlidesDocumentFromSourceRequest>();
		request->setName(utils->getTestValue("postSlidesDocumentFromSource", "name"));
		request->setSourcePath(utils->getTestValue("postSlidesDocumentFromSource", "sourcePath"));
		request->setSourcePassword(utils->getTestValue("postSlidesDocumentFromSource", "sourcePassword"));
		request->setSourceStorage(utils->getTestValue("postSlidesDocumentFromSource", "sourceStorage"));
		request->setPassword(utils->getTestValue("postSlidesDocumentFromSource", "password"));
		request->setStorage(utils->getTestValue("postSlidesDocumentFromSource", "storage"));
		request->setFolder(utils->getTestValue("postSlidesDocumentFromSource", "folder"));
		return request;
	}

	std::shared_ptr<PostSlidesDocumentFromTemplateRequest> getPostSlidesDocumentFromTemplateRequest()
	{
		std::shared_ptr<PostSlidesDocumentFromTemplateRequest> request = std::make_shared<PostSlidesDocumentFromTemplateRequest>();
		request->setName(utils->getTestValue("postSlidesDocumentFromTemplate", "name"));
		request->setTemplatePath(utils->getTestValue("postSlidesDocumentFromTemplate", "templatePath"));
		request->setData(utils->getTestValue("postSlidesDocumentFromTemplate", "data"));
		request->setTemplatePassword(utils->getTestValue("postSlidesDocumentFromTemplate", "templatePassword"));
		request->setTemplateStorage(utils->getTestValue("postSlidesDocumentFromTemplate", "templateStorage"));
		auto valueForIsImageDataEmbedded = utils->getOptionalBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
		if (valueForIsImageDataEmbedded != nullptr)
		{
			request->setIsImageDataEmbedded(*valueForIsImageDataEmbedded);
		}
		request->setPassword(utils->getTestValue("postSlidesDocumentFromTemplate", "password"));
		request->setStorage(utils->getTestValue("postSlidesDocumentFromTemplate", "storage"));
		request->setFolder(utils->getTestValue("postSlidesDocumentFromTemplate", "folder"));
		return request;
	}

	std::shared_ptr<PostSlidesPipelineRequest> getPostSlidesPipelineRequest()
	{
		std::shared_ptr<PostSlidesPipelineRequest> request = std::make_shared<PostSlidesPipelineRequest>();
		request->setPipeline(utils->getTestValueForClass<Pipeline>("postSlidesPipeline", "pipeline"));
		return request;
	}

	std::shared_ptr<PostSlidesPresentationReplaceTextRequest> getPostSlidesPresentationReplaceTextRequest()
	{
		std::shared_ptr<PostSlidesPresentationReplaceTextRequest> request = std::make_shared<PostSlidesPresentationReplaceTextRequest>();
		request->setName(utils->getTestValue("postSlidesPresentationReplaceText", "name"));
		request->setOldValue(utils->getTestValue("postSlidesPresentationReplaceText", "oldValue"));
		request->setNewValue(utils->getTestValue("postSlidesPresentationReplaceText", "newValue"));
		auto valueForIgnoreCase = utils->getOptionalBoolTestValue("postSlidesPresentationReplaceText", "ignoreCase");
		if (valueForIgnoreCase != nullptr)
		{
			request->setIgnoreCase(*valueForIgnoreCase);
		}
		request->setPassword(utils->getTestValue("postSlidesPresentationReplaceText", "password"));
		request->setFolder(utils->getTestValue("postSlidesPresentationReplaceText", "folder"));
		request->setStorage(utils->getTestValue("postSlidesPresentationReplaceText", "storage"));
		return request;
	}

	std::shared_ptr<PostSlidesReorderRequest> getPostSlidesReorderRequest()
	{
		std::shared_ptr<PostSlidesReorderRequest> request = std::make_shared<PostSlidesReorderRequest>();
		request->setName(utils->getTestValue("postSlidesReorder", "name"));
		request->setSlideIndex(utils->getIntTestValue("postSlidesReorder", "slideIndex"));
		request->setNewPosition(utils->getIntTestValue("postSlidesReorder", "newPosition"));
		request->setPassword(utils->getTestValue("postSlidesReorder", "password"));
		request->setFolder(utils->getTestValue("postSlidesReorder", "folder"));
		request->setStorage(utils->getTestValue("postSlidesReorder", "storage"));
		return request;
	}

	std::shared_ptr<PostSlidesReorderManyRequest> getPostSlidesReorderManyRequest()
	{
		std::shared_ptr<PostSlidesReorderManyRequest> request = std::make_shared<PostSlidesReorderManyRequest>();
		request->setName(utils->getTestValue("postSlidesReorderMany", "name"));
		request->setOldPositions(utils->getIntVectorTestValue("postSlidesReorderMany", "oldPositions"));
		request->setNewPositions(utils->getIntVectorTestValue("postSlidesReorderMany", "newPositions"));
		request->setPassword(utils->getTestValue("postSlidesReorderMany", "password"));
		request->setFolder(utils->getTestValue("postSlidesReorderMany", "folder"));
		request->setStorage(utils->getTestValue("postSlidesReorderMany", "storage"));
		return request;
	}

	std::shared_ptr<PostSlidesSaveAsRequest> getPostSlidesSaveAsRequest()
	{
		std::shared_ptr<PostSlidesSaveAsRequest> request = std::make_shared<PostSlidesSaveAsRequest>();
		request->setName(utils->getTestValue("postSlidesSaveAs", "name"));
		request->setFormat(utils->getTestValue("postSlidesSaveAs", "format"));
		request->setOptions(utils->getTestValueForClass<ExportOptions>("postSlidesSaveAs", "options"));
		request->setPassword(utils->getTestValue("postSlidesSaveAs", "password"));
		request->setStorage(utils->getTestValue("postSlidesSaveAs", "storage"));
		request->setFolder(utils->getTestValue("postSlidesSaveAs", "folder"));
		request->setFontsFolder(utils->getTestValue("postSlidesSaveAs", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PostSlidesSetDocumentPropertiesRequest> getPostSlidesSetDocumentPropertiesRequest()
	{
		std::shared_ptr<PostSlidesSetDocumentPropertiesRequest> request = std::make_shared<PostSlidesSetDocumentPropertiesRequest>();
		request->setName(utils->getTestValue("postSlidesSetDocumentProperties", "name"));
		request->setProperties(utils->getTestValueForClass<DocumentProperties>("postSlidesSetDocumentProperties", "properties"));
		request->setPassword(utils->getTestValue("postSlidesSetDocumentProperties", "password"));
		request->setFolder(utils->getTestValue("postSlidesSetDocumentProperties", "folder"));
		request->setStorage(utils->getTestValue("postSlidesSetDocumentProperties", "storage"));
		return request;
	}

	std::shared_ptr<PostSlidesSlideReplaceTextRequest> getPostSlidesSlideReplaceTextRequest()
	{
		std::shared_ptr<PostSlidesSlideReplaceTextRequest> request = std::make_shared<PostSlidesSlideReplaceTextRequest>();
		request->setName(utils->getTestValue("postSlidesSlideReplaceText", "name"));
		request->setSlideIndex(utils->getIntTestValue("postSlidesSlideReplaceText", "slideIndex"));
		request->setOldValue(utils->getTestValue("postSlidesSlideReplaceText", "oldValue"));
		request->setNewValue(utils->getTestValue("postSlidesSlideReplaceText", "newValue"));
		auto valueForIgnoreCase = utils->getOptionalBoolTestValue("postSlidesSlideReplaceText", "ignoreCase");
		if (valueForIgnoreCase != nullptr)
		{
			request->setIgnoreCase(*valueForIgnoreCase);
		}
		request->setPassword(utils->getTestValue("postSlidesSlideReplaceText", "password"));
		request->setFolder(utils->getTestValue("postSlidesSlideReplaceText", "folder"));
		request->setStorage(utils->getTestValue("postSlidesSlideReplaceText", "storage"));
		return request;
	}

	std::shared_ptr<PostSlidesSplitRequest> getPostSlidesSplitRequest()
	{
		std::shared_ptr<PostSlidesSplitRequest> request = std::make_shared<PostSlidesSplitRequest>();
		request->setName(utils->getTestValue("postSlidesSplit", "name"));
		request->setOptions(utils->getTestValueForClass<ExportOptions>("postSlidesSplit", "options"));
		request->setFormat(utils->getTestValue("postSlidesSplit", "format"));
		auto valueForWidth = utils->getOptionalIntTestValue("postSlidesSplit", "width");
		if (valueForWidth != nullptr)
		{
			request->setWidth(*valueForWidth);
		}
		auto valueForHeight = utils->getOptionalIntTestValue("postSlidesSplit", "height");
		if (valueForHeight != nullptr)
		{
			request->setHeight(*valueForHeight);
		}
		auto valueForTo = utils->getOptionalIntTestValue("postSlidesSplit", "to");
		if (valueForTo != nullptr)
		{
			request->setTo(*valueForTo);
		}
		auto valueForFrom = utils->getOptionalIntTestValue("postSlidesSplit", "from");
		if (valueForFrom != nullptr)
		{
			request->setFrom(*valueForFrom);
		}
		request->setDestFolder(utils->getTestValue("postSlidesSplit", "destFolder"));
		request->setPassword(utils->getTestValue("postSlidesSplit", "password"));
		request->setStorage(utils->getTestValue("postSlidesSplit", "storage"));
		request->setFolder(utils->getTestValue("postSlidesSplit", "folder"));
		request->setFontsFolder(utils->getTestValue("postSlidesSplit", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PostSubshapeSaveAsRequest> getPostSubshapeSaveAsRequest()
	{
		std::shared_ptr<PostSubshapeSaveAsRequest> request = std::make_shared<PostSubshapeSaveAsRequest>();
		request->setName(utils->getTestValue("postSubshapeSaveAs", "name"));
		request->setSlideIndex(utils->getIntTestValue("postSubshapeSaveAs", "slideIndex"));
		request->setPath(utils->getTestValue("postSubshapeSaveAs", "path"));
		request->setShapeIndex(utils->getIntTestValue("postSubshapeSaveAs", "shapeIndex"));
		request->setFormat(utils->getTestValue("postSubshapeSaveAs", "format"));
		request->setOptions(utils->getTestValueForClass<IShapeExportOptions>("postSubshapeSaveAs", "options"));
		request->setPassword(utils->getTestValue("postSubshapeSaveAs", "password"));
		request->setFolder(utils->getTestValue("postSubshapeSaveAs", "folder"));
		request->setStorage(utils->getTestValue("postSubshapeSaveAs", "storage"));
		auto valueForScaleX = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleX");
		if (valueForScaleX != nullptr)
		{
			request->setScaleX(*valueForScaleX);
		}
		auto valueForScaleY = utils->getOptionalDoubleTestValue("postSubshapeSaveAs", "scaleY");
		if (valueForScaleY != nullptr)
		{
			request->setScaleY(*valueForScaleY);
		}
		request->setBounds(utils->getTestValue("postSubshapeSaveAs", "bounds"));
		request->setFontsFolder(utils->getTestValue("postSubshapeSaveAs", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PutChartCategoryRequest> getPutChartCategoryRequest()
	{
		std::shared_ptr<PutChartCategoryRequest> request = std::make_shared<PutChartCategoryRequest>();
		request->setName(utils->getTestValue("putChartCategory", "name"));
		request->setSlideIndex(utils->getIntTestValue("putChartCategory", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("putChartCategory", "shapeIndex"));
		request->setCategoryIndex(utils->getIntTestValue("putChartCategory", "categoryIndex"));
		request->setCategory(utils->getTestValueForClass<ChartCategory>("putChartCategory", "category"));
		request->setPassword(utils->getTestValue("putChartCategory", "password"));
		request->setFolder(utils->getTestValue("putChartCategory", "folder"));
		request->setStorage(utils->getTestValue("putChartCategory", "storage"));
		return request;
	}

	std::shared_ptr<PutChartDataPointRequest> getPutChartDataPointRequest()
	{
		std::shared_ptr<PutChartDataPointRequest> request = std::make_shared<PutChartDataPointRequest>();
		request->setName(utils->getTestValue("putChartDataPoint", "name"));
		request->setSlideIndex(utils->getIntTestValue("putChartDataPoint", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("putChartDataPoint", "shapeIndex"));
		request->setSeriesIndex(utils->getIntTestValue("putChartDataPoint", "seriesIndex"));
		request->setPointIndex(utils->getIntTestValue("putChartDataPoint", "pointIndex"));
		request->setDataPoint(utils->getTestValueForClass<ScatterChartDataPoint>("putChartDataPoint", "dataPoint"));
		request->setPassword(utils->getTestValue("putChartDataPoint", "password"));
		request->setFolder(utils->getTestValue("putChartDataPoint", "folder"));
		request->setStorage(utils->getTestValue("putChartDataPoint", "storage"));
		return request;
	}

	std::shared_ptr<PutChartSeriesRequest> getPutChartSeriesRequest()
	{
		std::shared_ptr<PutChartSeriesRequest> request = std::make_shared<PutChartSeriesRequest>();
		request->setName(utils->getTestValue("putChartSeries", "name"));
		request->setSlideIndex(utils->getIntTestValue("putChartSeries", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("putChartSeries", "shapeIndex"));
		request->setSeriesIndex(utils->getIntTestValue("putChartSeries", "seriesIndex"));
		request->setSeries(utils->getTestValueForClass<Series>("putChartSeries", "series"));
		request->setPassword(utils->getTestValue("putChartSeries", "password"));
		request->setFolder(utils->getTestValue("putChartSeries", "folder"));
		request->setStorage(utils->getTestValue("putChartSeries", "storage"));
		return request;
	}

	std::shared_ptr<PutLayoutSlideRequest> getPutLayoutSlideRequest()
	{
		std::shared_ptr<PutLayoutSlideRequest> request = std::make_shared<PutLayoutSlideRequest>();
		request->setName(utils->getTestValue("putLayoutSlide", "name"));
		request->setSlideIndex(utils->getIntTestValue("putLayoutSlide", "slideIndex"));
		request->setSlideDto(utils->getTestValueForClass<LayoutSlide>("putLayoutSlide", "slideDto"));
		request->setPassword(utils->getTestValue("putLayoutSlide", "password"));
		request->setFolder(utils->getTestValue("putLayoutSlide", "folder"));
		request->setStorage(utils->getTestValue("putLayoutSlide", "storage"));
		return request;
	}

	std::shared_ptr<PutNotesSlideHeaderFooterRequest> getPutNotesSlideHeaderFooterRequest()
	{
		std::shared_ptr<PutNotesSlideHeaderFooterRequest> request = std::make_shared<PutNotesSlideHeaderFooterRequest>();
		request->setName(utils->getTestValue("putNotesSlideHeaderFooter", "name"));
		request->setSlideIndex(utils->getIntTestValue("putNotesSlideHeaderFooter", "slideIndex"));
		request->setDto(utils->getTestValueForClass<NotesSlideHeaderFooter>("putNotesSlideHeaderFooter", "dto"));
		request->setPassword(utils->getTestValue("putNotesSlideHeaderFooter", "password"));
		request->setStorage(utils->getTestValue("putNotesSlideHeaderFooter", "storage"));
		request->setFolder(utils->getTestValue("putNotesSlideHeaderFooter", "folder"));
		return request;
	}

	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> getPutNotesSlideShapeSaveAsRequest()
	{
		std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = std::make_shared<PutNotesSlideShapeSaveAsRequest>();
		request->setName(utils->getTestValue("putNotesSlideShapeSaveAs", "name"));
		request->setSlideIndex(utils->getIntTestValue("putNotesSlideShapeSaveAs", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex"));
		request->setFormat(utils->getTestValue("putNotesSlideShapeSaveAs", "format"));
		request->setOutPath(utils->getTestValue("putNotesSlideShapeSaveAs", "outPath"));
		request->setOptions(utils->getTestValueForClass<IShapeExportOptions>("putNotesSlideShapeSaveAs", "options"));
		request->setPassword(utils->getTestValue("putNotesSlideShapeSaveAs", "password"));
		request->setFolder(utils->getTestValue("putNotesSlideShapeSaveAs", "folder"));
		request->setStorage(utils->getTestValue("putNotesSlideShapeSaveAs", "storage"));
		auto valueForScaleX = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX");
		if (valueForScaleX != nullptr)
		{
			request->setScaleX(*valueForScaleX);
		}
		auto valueForScaleY = utils->getOptionalDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY");
		if (valueForScaleY != nullptr)
		{
			request->setScaleY(*valueForScaleY);
		}
		request->setBounds(utils->getTestValue("putNotesSlideShapeSaveAs", "bounds"));
		request->setFontsFolder(utils->getTestValue("putNotesSlideShapeSaveAs", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PutPresentationMergeRequest> getPutPresentationMergeRequest()
	{
		std::shared_ptr<PutPresentationMergeRequest> request = std::make_shared<PutPresentationMergeRequest>();
		request->setName(utils->getTestValue("putPresentationMerge", "name"));
		request->setRequest(utils->getTestValueForClass<OrderedMergeRequest>("putPresentationMerge", "request"));
		request->setPassword(utils->getTestValue("putPresentationMerge", "password"));
		request->setStorage(utils->getTestValue("putPresentationMerge", "storage"));
		request->setFolder(utils->getTestValue("putPresentationMerge", "folder"));
		return request;
	}

	std::shared_ptr<PutSectionRequest> getPutSectionRequest()
	{
		std::shared_ptr<PutSectionRequest> request = std::make_shared<PutSectionRequest>();
		request->setName(utils->getTestValue("putSection", "name"));
		request->setSectionIndex(utils->getIntTestValue("putSection", "sectionIndex"));
		request->setSectionName(utils->getTestValue("putSection", "sectionName"));
		request->setPassword(utils->getTestValue("putSection", "password"));
		request->setFolder(utils->getTestValue("putSection", "folder"));
		request->setStorage(utils->getTestValue("putSection", "storage"));
		return request;
	}

	std::shared_ptr<PutSectionsRequest> getPutSectionsRequest()
	{
		std::shared_ptr<PutSectionsRequest> request = std::make_shared<PutSectionsRequest>();
		request->setName(utils->getTestValue("putSections", "name"));
		request->setSections(utils->getTestValueForClass<Sections>("putSections", "sections"));
		request->setPassword(utils->getTestValue("putSections", "password"));
		request->setFolder(utils->getTestValue("putSections", "folder"));
		request->setStorage(utils->getTestValue("putSections", "storage"));
		return request;
	}

	std::shared_ptr<PutSetParagraphPortionPropertiesRequest> getPutSetParagraphPortionPropertiesRequest()
	{
		std::shared_ptr<PutSetParagraphPortionPropertiesRequest> request = std::make_shared<PutSetParagraphPortionPropertiesRequest>();
		request->setName(utils->getTestValue("putSetParagraphPortionProperties", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSetParagraphPortionProperties", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("putSetParagraphPortionProperties", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("putSetParagraphPortionProperties", "paragraphIndex"));
		request->setPortionIndex(utils->getIntTestValue("putSetParagraphPortionProperties", "portionIndex"));
		request->setDto(utils->getTestValueForClass<Portion>("putSetParagraphPortionProperties", "dto"));
		request->setPassword(utils->getTestValue("putSetParagraphPortionProperties", "password"));
		request->setFolder(utils->getTestValue("putSetParagraphPortionProperties", "folder"));
		request->setStorage(utils->getTestValue("putSetParagraphPortionProperties", "storage"));
		return request;
	}

	std::shared_ptr<PutSetParagraphPropertiesRequest> getPutSetParagraphPropertiesRequest()
	{
		std::shared_ptr<PutSetParagraphPropertiesRequest> request = std::make_shared<PutSetParagraphPropertiesRequest>();
		request->setName(utils->getTestValue("putSetParagraphProperties", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSetParagraphProperties", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("putSetParagraphProperties", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("putSetParagraphProperties", "paragraphIndex"));
		request->setDto(utils->getTestValueForClass<Paragraph>("putSetParagraphProperties", "dto"));
		request->setPassword(utils->getTestValue("putSetParagraphProperties", "password"));
		request->setFolder(utils->getTestValue("putSetParagraphProperties", "folder"));
		request->setStorage(utils->getTestValue("putSetParagraphProperties", "storage"));
		return request;
	}

	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> getPutSetSubshapeParagraphPortionPropertiesRequest()
	{
		std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = std::make_shared<PutSetSubshapeParagraphPortionPropertiesRequest>();
		request->setName(utils->getTestValue("putSetSubshapeParagraphPortionProperties", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex"));
		request->setPath(utils->getTestValue("putSetSubshapeParagraphPortionProperties", "path"));
		request->setShapeIndex(utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex"));
		request->setPortionIndex(utils->getIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex"));
		request->setDto(utils->getTestValueForClass<Portion>("putSetSubshapeParagraphPortionProperties", "dto"));
		request->setPassword(utils->getTestValue("putSetSubshapeParagraphPortionProperties", "password"));
		request->setFolder(utils->getTestValue("putSetSubshapeParagraphPortionProperties", "folder"));
		request->setStorage(utils->getTestValue("putSetSubshapeParagraphPortionProperties", "storage"));
		return request;
	}

	std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> getPutSetSubshapeParagraphPropertiesRequest()
	{
		std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> request = std::make_shared<PutSetSubshapeParagraphPropertiesRequest>();
		request->setName(utils->getTestValue("putSetSubshapeParagraphProperties", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSetSubshapeParagraphProperties", "slideIndex"));
		request->setPath(utils->getTestValue("putSetSubshapeParagraphProperties", "path"));
		request->setShapeIndex(utils->getIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex"));
		request->setDto(utils->getTestValueForClass<Paragraph>("putSetSubshapeParagraphProperties", "dto"));
		request->setPassword(utils->getTestValue("putSetSubshapeParagraphProperties", "password"));
		request->setFolder(utils->getTestValue("putSetSubshapeParagraphProperties", "folder"));
		request->setStorage(utils->getTestValue("putSetSubshapeParagraphProperties", "storage"));
		return request;
	}

	std::shared_ptr<PutShapeSaveAsRequest> getPutShapeSaveAsRequest()
	{
		std::shared_ptr<PutShapeSaveAsRequest> request = std::make_shared<PutShapeSaveAsRequest>();
		request->setName(utils->getTestValue("putShapeSaveAs", "name"));
		request->setSlideIndex(utils->getIntTestValue("putShapeSaveAs", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("putShapeSaveAs", "shapeIndex"));
		request->setFormat(utils->getTestValue("putShapeSaveAs", "format"));
		request->setOutPath(utils->getTestValue("putShapeSaveAs", "outPath"));
		request->setOptions(utils->getTestValueForClass<IShapeExportOptions>("putShapeSaveAs", "options"));
		request->setPassword(utils->getTestValue("putShapeSaveAs", "password"));
		request->setFolder(utils->getTestValue("putShapeSaveAs", "folder"));
		request->setStorage(utils->getTestValue("putShapeSaveAs", "storage"));
		auto valueForScaleX = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleX");
		if (valueForScaleX != nullptr)
		{
			request->setScaleX(*valueForScaleX);
		}
		auto valueForScaleY = utils->getOptionalDoubleTestValue("putShapeSaveAs", "scaleY");
		if (valueForScaleY != nullptr)
		{
			request->setScaleY(*valueForScaleY);
		}
		request->setBounds(utils->getTestValue("putShapeSaveAs", "bounds"));
		request->setFontsFolder(utils->getTestValue("putShapeSaveAs", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PutSlideAnimationRequest> getPutSlideAnimationRequest()
	{
		std::shared_ptr<PutSlideAnimationRequest> request = std::make_shared<PutSlideAnimationRequest>();
		request->setName(utils->getTestValue("putSlideAnimation", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSlideAnimation", "slideIndex"));
		request->setAnimation(utils->getTestValueForClass<SlideAnimation>("putSlideAnimation", "animation"));
		request->setPassword(utils->getTestValue("putSlideAnimation", "password"));
		request->setFolder(utils->getTestValue("putSlideAnimation", "folder"));
		request->setStorage(utils->getTestValue("putSlideAnimation", "storage"));
		return request;
	}

	std::shared_ptr<PutSlideAnimationEffectRequest> getPutSlideAnimationEffectRequest()
	{
		std::shared_ptr<PutSlideAnimationEffectRequest> request = std::make_shared<PutSlideAnimationEffectRequest>();
		request->setName(utils->getTestValue("putSlideAnimationEffect", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSlideAnimationEffect", "slideIndex"));
		request->setEffectIndex(utils->getIntTestValue("putSlideAnimationEffect", "effectIndex"));
		request->setEffect(utils->getTestValueForClass<Effect>("putSlideAnimationEffect", "effect"));
		request->setPassword(utils->getTestValue("putSlideAnimationEffect", "password"));
		request->setFolder(utils->getTestValue("putSlideAnimationEffect", "folder"));
		request->setStorage(utils->getTestValue("putSlideAnimationEffect", "storage"));
		return request;
	}

	std::shared_ptr<PutSlideAnimationInteractiveSequenceEffectRequest> getPutSlideAnimationInteractiveSequenceEffectRequest()
	{
		std::shared_ptr<PutSlideAnimationInteractiveSequenceEffectRequest> request = std::make_shared<PutSlideAnimationInteractiveSequenceEffectRequest>();
		request->setName(utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex"));
		request->setSequenceIndex(utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex"));
		request->setEffectIndex(utils->getIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex"));
		request->setEffect(utils->getTestValueForClass<Effect>("putSlideAnimationInteractiveSequenceEffect", "effect"));
		request->setPassword(utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "password"));
		request->setFolder(utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "folder"));
		request->setStorage(utils->getTestValue("putSlideAnimationInteractiveSequenceEffect", "storage"));
		return request;
	}

	std::shared_ptr<PutSlideHeaderFooterRequest> getPutSlideHeaderFooterRequest()
	{
		std::shared_ptr<PutSlideHeaderFooterRequest> request = std::make_shared<PutSlideHeaderFooterRequest>();
		request->setName(utils->getTestValue("putSlideHeaderFooter", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSlideHeaderFooter", "slideIndex"));
		request->setDto(utils->getTestValueForClass<HeaderFooter>("putSlideHeaderFooter", "dto"));
		request->setPassword(utils->getTestValue("putSlideHeaderFooter", "password"));
		request->setFolder(utils->getTestValue("putSlideHeaderFooter", "folder"));
		request->setStorage(utils->getTestValue("putSlideHeaderFooter", "storage"));
		return request;
	}

	std::shared_ptr<PutSlideSaveAsRequest> getPutSlideSaveAsRequest()
	{
		std::shared_ptr<PutSlideSaveAsRequest> request = std::make_shared<PutSlideSaveAsRequest>();
		request->setName(utils->getTestValue("putSlideSaveAs", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSlideSaveAs", "slideIndex"));
		request->setFormat(utils->getTestValue("putSlideSaveAs", "format"));
		request->setOutPath(utils->getTestValue("putSlideSaveAs", "outPath"));
		request->setOptions(utils->getTestValueForClass<ExportOptions>("putSlideSaveAs", "options"));
		auto valueForWidth = utils->getOptionalIntTestValue("putSlideSaveAs", "width");
		if (valueForWidth != nullptr)
		{
			request->setWidth(*valueForWidth);
		}
		auto valueForHeight = utils->getOptionalIntTestValue("putSlideSaveAs", "height");
		if (valueForHeight != nullptr)
		{
			request->setHeight(*valueForHeight);
		}
		request->setPassword(utils->getTestValue("putSlideSaveAs", "password"));
		request->setFolder(utils->getTestValue("putSlideSaveAs", "folder"));
		request->setStorage(utils->getTestValue("putSlideSaveAs", "storage"));
		request->setFontsFolder(utils->getTestValue("putSlideSaveAs", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PutSlideShapeInfoRequest> getPutSlideShapeInfoRequest()
	{
		std::shared_ptr<PutSlideShapeInfoRequest> request = std::make_shared<PutSlideShapeInfoRequest>();
		request->setName(utils->getTestValue("putSlideShapeInfo", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSlideShapeInfo", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("putSlideShapeInfo", "shapeIndex"));
		request->setDto(utils->getTestValueForClass<ShapeBase>("putSlideShapeInfo", "dto"));
		request->setPassword(utils->getTestValue("putSlideShapeInfo", "password"));
		request->setFolder(utils->getTestValue("putSlideShapeInfo", "folder"));
		request->setStorage(utils->getTestValue("putSlideShapeInfo", "storage"));
		return request;
	}

	std::shared_ptr<PutSlideSubshapeInfoRequest> getPutSlideSubshapeInfoRequest()
	{
		std::shared_ptr<PutSlideSubshapeInfoRequest> request = std::make_shared<PutSlideSubshapeInfoRequest>();
		request->setName(utils->getTestValue("putSlideSubshapeInfo", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSlideSubshapeInfo", "slideIndex"));
		request->setPath(utils->getTestValue("putSlideSubshapeInfo", "path"));
		request->setShapeIndex(utils->getIntTestValue("putSlideSubshapeInfo", "shapeIndex"));
		request->setDto(utils->getTestValueForClass<ShapeBase>("putSlideSubshapeInfo", "dto"));
		request->setPassword(utils->getTestValue("putSlideSubshapeInfo", "password"));
		request->setFolder(utils->getTestValue("putSlideSubshapeInfo", "folder"));
		request->setStorage(utils->getTestValue("putSlideSubshapeInfo", "storage"));
		return request;
	}

	std::shared_ptr<PutSlidesConvertRequest> getPutSlidesConvertRequest()
	{
		std::shared_ptr<PutSlidesConvertRequest> request = std::make_shared<PutSlidesConvertRequest>();
		request->setDocument(utils->getBinaryTestValue("putSlidesConvert", "document"));
		request->setFormat(utils->getTestValue("putSlidesConvert", "format"));
		request->setOutPath(utils->getTestValue("putSlidesConvert", "outPath"));
		request->setPassword(utils->getTestValue("putSlidesConvert", "password"));
		request->setFontsFolder(utils->getTestValue("putSlidesConvert", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PutSlidesDocumentFromHtmlRequest> getPutSlidesDocumentFromHtmlRequest()
	{
		std::shared_ptr<PutSlidesDocumentFromHtmlRequest> request = std::make_shared<PutSlidesDocumentFromHtmlRequest>();
		request->setName(utils->getTestValue("putSlidesDocumentFromHtml", "name"));
		request->setHtml(utils->getTestValue("putSlidesDocumentFromHtml", "html"));
		request->setPassword(utils->getTestValue("putSlidesDocumentFromHtml", "password"));
		request->setStorage(utils->getTestValue("putSlidesDocumentFromHtml", "storage"));
		request->setFolder(utils->getTestValue("putSlidesDocumentFromHtml", "folder"));
		return request;
	}

	std::shared_ptr<PutSlidesHeaderFooterRequest> getPutSlidesHeaderFooterRequest()
	{
		std::shared_ptr<PutSlidesHeaderFooterRequest> request = std::make_shared<PutSlidesHeaderFooterRequest>();
		request->setName(utils->getTestValue("putSlidesHeaderFooter", "name"));
		request->setDto(utils->getTestValueForClass<HeaderFooter>("putSlidesHeaderFooter", "dto"));
		request->setPassword(utils->getTestValue("putSlidesHeaderFooter", "password"));
		request->setStorage(utils->getTestValue("putSlidesHeaderFooter", "storage"));
		request->setFolder(utils->getTestValue("putSlidesHeaderFooter", "folder"));
		return request;
	}

	std::shared_ptr<PutSlidesSaveAsRequest> getPutSlidesSaveAsRequest()
	{
		std::shared_ptr<PutSlidesSaveAsRequest> request = std::make_shared<PutSlidesSaveAsRequest>();
		request->setName(utils->getTestValue("putSlidesSaveAs", "name"));
		request->setOutPath(utils->getTestValue("putSlidesSaveAs", "outPath"));
		request->setFormat(utils->getTestValue("putSlidesSaveAs", "format"));
		request->setOptions(utils->getTestValueForClass<ExportOptions>("putSlidesSaveAs", "options"));
		request->setPassword(utils->getTestValue("putSlidesSaveAs", "password"));
		request->setStorage(utils->getTestValue("putSlidesSaveAs", "storage"));
		request->setFolder(utils->getTestValue("putSlidesSaveAs", "folder"));
		request->setFontsFolder(utils->getTestValue("putSlidesSaveAs", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PutSlidesSetDocumentPropertyRequest> getPutSlidesSetDocumentPropertyRequest()
	{
		std::shared_ptr<PutSlidesSetDocumentPropertyRequest> request = std::make_shared<PutSlidesSetDocumentPropertyRequest>();
		request->setName(utils->getTestValue("putSlidesSetDocumentProperty", "name"));
		request->setPropertyName(utils->getTestValue("putSlidesSetDocumentProperty", "propertyName"));
		request->setProperty(utils->getTestValueForClass<DocumentProperty>("putSlidesSetDocumentProperty", "property"));
		request->setPassword(utils->getTestValue("putSlidesSetDocumentProperty", "password"));
		request->setFolder(utils->getTestValue("putSlidesSetDocumentProperty", "folder"));
		request->setStorage(utils->getTestValue("putSlidesSetDocumentProperty", "storage"));
		return request;
	}

	std::shared_ptr<PutSlidesSlideRequest> getPutSlidesSlideRequest()
	{
		std::shared_ptr<PutSlidesSlideRequest> request = std::make_shared<PutSlidesSlideRequest>();
		request->setName(utils->getTestValue("putSlidesSlide", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSlidesSlide", "slideIndex"));
		request->setSlideDto(utils->getTestValueForClass<Slide>("putSlidesSlide", "slideDto"));
		request->setPassword(utils->getTestValue("putSlidesSlide", "password"));
		request->setFolder(utils->getTestValue("putSlidesSlide", "folder"));
		request->setStorage(utils->getTestValue("putSlidesSlide", "storage"));
		return request;
	}

	std::shared_ptr<PutSlidesSlideBackgroundRequest> getPutSlidesSlideBackgroundRequest()
	{
		std::shared_ptr<PutSlidesSlideBackgroundRequest> request = std::make_shared<PutSlidesSlideBackgroundRequest>();
		request->setName(utils->getTestValue("putSlidesSlideBackground", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSlidesSlideBackground", "slideIndex"));
		request->setBackground(utils->getTestValueForClass<SlideBackground>("putSlidesSlideBackground", "background"));
		request->setFolder(utils->getTestValue("putSlidesSlideBackground", "folder"));
		request->setPassword(utils->getTestValue("putSlidesSlideBackground", "password"));
		request->setStorage(utils->getTestValue("putSlidesSlideBackground", "storage"));
		return request;
	}

	std::shared_ptr<PutSlidesSlideBackgroundColorRequest> getPutSlidesSlideBackgroundColorRequest()
	{
		std::shared_ptr<PutSlidesSlideBackgroundColorRequest> request = std::make_shared<PutSlidesSlideBackgroundColorRequest>();
		request->setName(utils->getTestValue("putSlidesSlideBackgroundColor", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSlidesSlideBackgroundColor", "slideIndex"));
		request->setColor(utils->getTestValue("putSlidesSlideBackgroundColor", "color"));
		request->setFolder(utils->getTestValue("putSlidesSlideBackgroundColor", "folder"));
		request->setPassword(utils->getTestValue("putSlidesSlideBackgroundColor", "password"));
		request->setStorage(utils->getTestValue("putSlidesSlideBackgroundColor", "storage"));
		return request;
	}

	std::shared_ptr<PutSlidesSlideSizeRequest> getPutSlidesSlideSizeRequest()
	{
		std::shared_ptr<PutSlidesSlideSizeRequest> request = std::make_shared<PutSlidesSlideSizeRequest>();
		request->setName(utils->getTestValue("putSlidesSlideSize", "name"));
		request->setPassword(utils->getTestValue("putSlidesSlideSize", "password"));
		request->setStorage(utils->getTestValue("putSlidesSlideSize", "storage"));
		request->setFolder(utils->getTestValue("putSlidesSlideSize", "folder"));
		auto valueForWidth = utils->getOptionalIntTestValue("putSlidesSlideSize", "width");
		if (valueForWidth != nullptr)
		{
			request->setWidth(*valueForWidth);
		}
		auto valueForHeight = utils->getOptionalIntTestValue("putSlidesSlideSize", "height");
		if (valueForHeight != nullptr)
		{
			request->setHeight(*valueForHeight);
		}
		request->setSizeType(utils->getTestValue("putSlidesSlideSize", "sizeType"));
		request->setScaleType(utils->getTestValue("putSlidesSlideSize", "scaleType"));
		return request;
	}

	std::shared_ptr<PutSlidesViewPropertiesRequest> getPutSlidesViewPropertiesRequest()
	{
		std::shared_ptr<PutSlidesViewPropertiesRequest> request = std::make_shared<PutSlidesViewPropertiesRequest>();
		request->setName(utils->getTestValue("putSlidesViewProperties", "name"));
		request->setDto(utils->getTestValueForClass<ViewProperties>("putSlidesViewProperties", "dto"));
		request->setPassword(utils->getTestValue("putSlidesViewProperties", "password"));
		request->setFolder(utils->getTestValue("putSlidesViewProperties", "folder"));
		request->setStorage(utils->getTestValue("putSlidesViewProperties", "storage"));
		return request;
	}

	std::shared_ptr<PutSubshapeSaveAsRequest> getPutSubshapeSaveAsRequest()
	{
		std::shared_ptr<PutSubshapeSaveAsRequest> request = std::make_shared<PutSubshapeSaveAsRequest>();
		request->setName(utils->getTestValue("putSubshapeSaveAs", "name"));
		request->setSlideIndex(utils->getIntTestValue("putSubshapeSaveAs", "slideIndex"));
		request->setPath(utils->getTestValue("putSubshapeSaveAs", "path"));
		request->setShapeIndex(utils->getIntTestValue("putSubshapeSaveAs", "shapeIndex"));
		request->setFormat(utils->getTestValue("putSubshapeSaveAs", "format"));
		request->setOutPath(utils->getTestValue("putSubshapeSaveAs", "outPath"));
		request->setOptions(utils->getTestValueForClass<IShapeExportOptions>("putSubshapeSaveAs", "options"));
		request->setPassword(utils->getTestValue("putSubshapeSaveAs", "password"));
		request->setFolder(utils->getTestValue("putSubshapeSaveAs", "folder"));
		request->setStorage(utils->getTestValue("putSubshapeSaveAs", "storage"));
		auto valueForScaleX = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleX");
		if (valueForScaleX != nullptr)
		{
			request->setScaleX(*valueForScaleX);
		}
		auto valueForScaleY = utils->getOptionalDoubleTestValue("putSubshapeSaveAs", "scaleY");
		if (valueForScaleY != nullptr)
		{
			request->setScaleY(*valueForScaleY);
		}
		request->setBounds(utils->getTestValue("putSubshapeSaveAs", "bounds"));
		request->setFontsFolder(utils->getTestValue("putSubshapeSaveAs", "fontsFolder"));
		return request;
	}

	std::shared_ptr<PutUpdateNotesSlideRequest> getPutUpdateNotesSlideRequest()
	{
		std::shared_ptr<PutUpdateNotesSlideRequest> request = std::make_shared<PutUpdateNotesSlideRequest>();
		request->setName(utils->getTestValue("putUpdateNotesSlide", "name"));
		request->setSlideIndex(utils->getIntTestValue("putUpdateNotesSlide", "slideIndex"));
		request->setDto(utils->getTestValueForClass<NotesSlide>("putUpdateNotesSlide", "dto"));
		request->setPassword(utils->getTestValue("putUpdateNotesSlide", "password"));
		request->setFolder(utils->getTestValue("putUpdateNotesSlide", "folder"));
		request->setStorage(utils->getTestValue("putUpdateNotesSlide", "storage"));
		return request;
	}

	std::shared_ptr<PutUpdateNotesSlideShapeRequest> getPutUpdateNotesSlideShapeRequest()
	{
		std::shared_ptr<PutUpdateNotesSlideShapeRequest> request = std::make_shared<PutUpdateNotesSlideShapeRequest>();
		request->setName(utils->getTestValue("putUpdateNotesSlideShape", "name"));
		request->setSlideIndex(utils->getIntTestValue("putUpdateNotesSlideShape", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("putUpdateNotesSlideShape", "shapeIndex"));
		request->setDto(utils->getTestValueForClass<ShapeBase>("putUpdateNotesSlideShape", "dto"));
		request->setPassword(utils->getTestValue("putUpdateNotesSlideShape", "password"));
		request->setFolder(utils->getTestValue("putUpdateNotesSlideShape", "folder"));
		request->setStorage(utils->getTestValue("putUpdateNotesSlideShape", "storage"));
		return request;
	}

	std::shared_ptr<PutUpdateNotesSlideShapeParagraphRequest> getPutUpdateNotesSlideShapeParagraphRequest()
	{
		std::shared_ptr<PutUpdateNotesSlideShapeParagraphRequest> request = std::make_shared<PutUpdateNotesSlideShapeParagraphRequest>();
		request->setName(utils->getTestValue("putUpdateNotesSlideShapeParagraph", "name"));
		request->setSlideIndex(utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex"));
		request->setDto(utils->getTestValueForClass<Paragraph>("putUpdateNotesSlideShapeParagraph", "dto"));
		request->setPassword(utils->getTestValue("putUpdateNotesSlideShapeParagraph", "password"));
		request->setFolder(utils->getTestValue("putUpdateNotesSlideShapeParagraph", "folder"));
		request->setStorage(utils->getTestValue("putUpdateNotesSlideShapeParagraph", "storage"));
		return request;
	}

	std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> getPutUpdateNotesSlideShapePortionRequest()
	{
		std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> request = std::make_shared<PutUpdateNotesSlideShapePortionRequest>();
		request->setName(utils->getTestValue("putUpdateNotesSlideShapePortion", "name"));
		request->setSlideIndex(utils->getIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex"));
		request->setShapeIndex(utils->getIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex"));
		request->setParagraphIndex(utils->getIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex"));
		request->setPortionIndex(utils->getIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex"));
		request->setDto(utils->getTestValueForClass<Portion>("putUpdateNotesSlideShapePortion", "dto"));
		request->setPassword(utils->getTestValue("putUpdateNotesSlideShapePortion", "password"));
		request->setFolder(utils->getTestValue("putUpdateNotesSlideShapePortion", "folder"));
		request->setStorage(utils->getTestValue("putUpdateNotesSlideShapePortion", "storage"));
		return request;
	}

	std::shared_ptr<StorageExistsRequest> getStorageExistsRequest()
	{
		std::shared_ptr<StorageExistsRequest> request = std::make_shared<StorageExistsRequest>();
		request->setStorageName(utils->getTestValue("storageExists", "storageName"));
		return request;
	}

	std::shared_ptr<UploadFileRequest> getUploadFileRequest()
	{
		std::shared_ptr<UploadFileRequest> request = std::make_shared<UploadFileRequest>();
		request->setPath(utils->getTestValue("uploadFile", "path"));
		request->setFile(utils->getBinaryTestValue("uploadFile", "file"));
		request->setStorageName(utils->getTestValue("uploadFile", "storageName"));
		return request;
	}

protected:
	void SetUp()
	{
		if (SlidesApiTest::api == nullptr)
		{
			std::ifstream rulesFile("testConfig.json");
			std::string rulesString;
			std::ostringstream rulesStream;
			rulesStream << rulesFile.rdbuf();
			rulesString = rulesStream.str();
			web::json::value config = web::json::value::parse(utility::conversions::to_string_t(rulesString));
			std::shared_ptr<ApiConfiguration> configuration = std::make_shared<ApiConfiguration>();
			if (config.has_field(utility::conversions::to_string_t("ClientId")))
			{
				configuration->setAppSid(config[utility::conversions::to_string_t("ClientId")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("ClientSecret")))
			{
				configuration->setAppKey(config[utility::conversions::to_string_t("ClientSecret")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("BaseUrl")))
			{
				configuration->setBaseUrl(config[utility::conversions::to_string_t("BaseUrl")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("AuthBaseUrl")))
			{
				configuration->setBaseAuthUrl(config[utility::conversions::to_string_t("AuthBaseUrl")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("Debug")))
			{
				configuration->setDebug(config[utility::conversions::to_string_t("Debug")].as_bool());
			}
			api = new SlidesApi(configuration);
			utils = new TestUtils(api);
		}
	}
};

SlidesApi* SlidesApiTest::api = nullptr;
TestUtils* SlidesApiTest::utils = nullptr;

TEST_F(SlidesApiTest, copyFile) {
	std::shared_ptr<CopyFileRequest> request = getCopyFileRequest();
	utils->initialize("copyFile", "");
	api->copyFile(request).wait();
}

TEST_F(SlidesApiTest, copyFileSrcPath) {
	std::shared_ptr<CopyFileRequest> request = getCopyFileRequest();
	request->setSrcPath(utils->getInvalidTestValue("copyFile", "srcPath", request->getSrcPath()));
	utils->initialize("copyFile", "srcPath", request->getSrcPath());

	bool failed = true;
	try
	{
		api->copyFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcPath", request->getSrcPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcPath", request->getSrcPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileDestPath) {
	std::shared_ptr<CopyFileRequest> request = getCopyFileRequest();
	request->setDestPath(utils->getInvalidTestValue("copyFile", "destPath", request->getDestPath()));
	utils->initialize("copyFile", "destPath", request->getDestPath());

	bool failed = true;
	try
	{
		api->copyFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "destPath", request->getDestPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "destPath", request->getDestPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileSrcStorageName) {
	std::shared_ptr<CopyFileRequest> request = getCopyFileRequest();
	request->setSrcStorageName(utils->getInvalidTestValue("copyFile", "srcStorageName", request->getSrcStorageName()));
	utils->initialize("copyFile", "srcStorageName", request->getSrcStorageName());

	bool failed = true;
	try
	{
		api->copyFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcStorageName", request->getSrcStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcStorageName", request->getSrcStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileDestStorageName) {
	std::shared_ptr<CopyFileRequest> request = getCopyFileRequest();
	request->setDestStorageName(utils->getInvalidTestValue("copyFile", "destStorageName", request->getDestStorageName()));
	utils->initialize("copyFile", "destStorageName", request->getDestStorageName());

	bool failed = true;
	try
	{
		api->copyFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "destStorageName", request->getDestStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "destStorageName", request->getDestStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileVersionId) {
	std::shared_ptr<CopyFileRequest> request = getCopyFileRequest();
	request->setVersionId(utils->getInvalidTestValue("copyFile", "versionId", request->getVersionId()));
	utils->initialize("copyFile", "versionId", request->getVersionId());

	bool failed = true;
	try
	{
		api->copyFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "versionId", request->getVersionId());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "versionId", request->getVersionId());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolder) {
	std::shared_ptr<CopyFolderRequest> request = getCopyFolderRequest();
	utils->initialize("copyFolder", "");
	api->copyFolder(request).wait();
}

TEST_F(SlidesApiTest, copyFolderSrcPath) {
	std::shared_ptr<CopyFolderRequest> request = getCopyFolderRequest();
	request->setSrcPath(utils->getInvalidTestValue("copyFolder", "srcPath", request->getSrcPath()));
	utils->initialize("copyFolder", "srcPath", request->getSrcPath());

	bool failed = true;
	try
	{
		api->copyFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcPath", request->getSrcPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcPath", request->getSrcPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderDestPath) {
	std::shared_ptr<CopyFolderRequest> request = getCopyFolderRequest();
	request->setDestPath(utils->getInvalidTestValue("copyFolder", "destPath", request->getDestPath()));
	utils->initialize("copyFolder", "destPath", request->getDestPath());

	bool failed = true;
	try
	{
		api->copyFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destPath", request->getDestPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destPath", request->getDestPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderSrcStorageName) {
	std::shared_ptr<CopyFolderRequest> request = getCopyFolderRequest();
	request->setSrcStorageName(utils->getInvalidTestValue("copyFolder", "srcStorageName", request->getSrcStorageName()));
	utils->initialize("copyFolder", "srcStorageName", request->getSrcStorageName());

	bool failed = true;
	try
	{
		api->copyFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcStorageName", request->getSrcStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcStorageName", request->getSrcStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderDestStorageName) {
	std::shared_ptr<CopyFolderRequest> request = getCopyFolderRequest();
	request->setDestStorageName(utils->getInvalidTestValue("copyFolder", "destStorageName", request->getDestStorageName()));
	utils->initialize("copyFolder", "destStorageName", request->getDestStorageName());

	bool failed = true;
	try
	{
		api->copyFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destStorageName", request->getDestStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destStorageName", request->getDestStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createFolder) {
	std::shared_ptr<CreateFolderRequest> request = getCreateFolderRequest();
	utils->initialize("createFolder", "");
	api->createFolder(request).wait();
}

TEST_F(SlidesApiTest, createFolderPath) {
	std::shared_ptr<CreateFolderRequest> request = getCreateFolderRequest();
	request->setPath(utils->getInvalidTestValue("createFolder", "path", request->getPath()));
	utils->initialize("createFolder", "path", request->getPath());

	bool failed = true;
	try
	{
		api->createFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createFolder", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createFolder", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createFolder", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createFolder", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createFolder", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createFolderStorageName) {
	std::shared_ptr<CreateFolderRequest> request = getCreateFolderRequest();
	request->setStorageName(utils->getInvalidTestValue("createFolder", "storageName", request->getStorageName()));
	utils->initialize("createFolder", "storageName", request->getStorageName());

	bool failed = true;
	try
	{
		api->createFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createFolder", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createFolder", "storageName", request->getStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createFolder", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createFolder", "storageName", request->getStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createFolder", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategory) {
	std::shared_ptr<DeleteChartCategoryRequest> request = getDeleteChartCategoryRequest();
	utils->initialize("deleteChartCategory", "");
	std::shared_ptr<Chart> result = api->deleteChartCategory(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartCategoryName) {
	std::shared_ptr<DeleteChartCategoryRequest> request = getDeleteChartCategoryRequest();
	request->setName(utils->getInvalidTestValue("deleteChartCategory", "name", request->getName()));
	utils->initialize("deleteChartCategory", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategorySlideIndex) {
	std::shared_ptr<DeleteChartCategoryRequest> request = getDeleteChartCategoryRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteChartCategory", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteChartCategory", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryShapeIndex) {
	std::shared_ptr<DeleteChartCategoryRequest> request = getDeleteChartCategoryRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteChartCategory", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteChartCategory", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryCategoryIndex) {
	std::shared_ptr<DeleteChartCategoryRequest> request = getDeleteChartCategoryRequest();
	request->setCategoryIndex(utils->getInvalidIntTestValue("deleteChartCategory", "categoryIndex", request->getCategoryIndex()));
	utils->initialize("deleteChartCategory", "categoryIndex", request->getCategoryIndex());

	bool failed = true;
	try
	{
		api->deleteChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "categoryIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "categoryIndex", request->getCategoryIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "categoryIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "categoryIndex", request->getCategoryIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "categoryIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryPassword) {
	std::shared_ptr<DeleteChartCategoryRequest> request = getDeleteChartCategoryRequest();
	request->setPassword(utils->getInvalidTestValue("deleteChartCategory", "password", request->getPassword()));
	utils->initialize("deleteChartCategory", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryFolder) {
	std::shared_ptr<DeleteChartCategoryRequest> request = getDeleteChartCategoryRequest();
	request->setFolder(utils->getInvalidTestValue("deleteChartCategory", "folder", request->getFolder()));
	utils->initialize("deleteChartCategory", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryStorage) {
	std::shared_ptr<DeleteChartCategoryRequest> request = getDeleteChartCategoryRequest();
	request->setStorage(utils->getInvalidTestValue("deleteChartCategory", "storage", request->getStorage()));
	utils->initialize("deleteChartCategory", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPoint) {
	std::shared_ptr<DeleteChartDataPointRequest> request = getDeleteChartDataPointRequest();
	utils->initialize("deleteChartDataPoint", "");
	std::shared_ptr<Chart> result = api->deleteChartDataPoint(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartDataPointName) {
	std::shared_ptr<DeleteChartDataPointRequest> request = getDeleteChartDataPointRequest();
	request->setName(utils->getInvalidTestValue("deleteChartDataPoint", "name", request->getName()));
	utils->initialize("deleteChartDataPoint", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointSlideIndex) {
	std::shared_ptr<DeleteChartDataPointRequest> request = getDeleteChartDataPointRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteChartDataPoint", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteChartDataPoint", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointShapeIndex) {
	std::shared_ptr<DeleteChartDataPointRequest> request = getDeleteChartDataPointRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteChartDataPoint", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteChartDataPoint", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointSeriesIndex) {
	std::shared_ptr<DeleteChartDataPointRequest> request = getDeleteChartDataPointRequest();
	request->setSeriesIndex(utils->getInvalidIntTestValue("deleteChartDataPoint", "seriesIndex", request->getSeriesIndex()));
	utils->initialize("deleteChartDataPoint", "seriesIndex", request->getSeriesIndex());

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "seriesIndex", request->getSeriesIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "seriesIndex", request->getSeriesIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointPointIndex) {
	std::shared_ptr<DeleteChartDataPointRequest> request = getDeleteChartDataPointRequest();
	request->setPointIndex(utils->getInvalidIntTestValue("deleteChartDataPoint", "pointIndex", request->getPointIndex()));
	utils->initialize("deleteChartDataPoint", "pointIndex", request->getPointIndex());

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "pointIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "pointIndex", request->getPointIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "pointIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "pointIndex", request->getPointIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "pointIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointPassword) {
	std::shared_ptr<DeleteChartDataPointRequest> request = getDeleteChartDataPointRequest();
	request->setPassword(utils->getInvalidTestValue("deleteChartDataPoint", "password", request->getPassword()));
	utils->initialize("deleteChartDataPoint", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointFolder) {
	std::shared_ptr<DeleteChartDataPointRequest> request = getDeleteChartDataPointRequest();
	request->setFolder(utils->getInvalidTestValue("deleteChartDataPoint", "folder", request->getFolder()));
	utils->initialize("deleteChartDataPoint", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointStorage) {
	std::shared_ptr<DeleteChartDataPointRequest> request = getDeleteChartDataPointRequest();
	request->setStorage(utils->getInvalidTestValue("deleteChartDataPoint", "storage", request->getStorage()));
	utils->initialize("deleteChartDataPoint", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeries) {
	std::shared_ptr<DeleteChartSeriesRequest> request = getDeleteChartSeriesRequest();
	utils->initialize("deleteChartSeries", "");
	std::shared_ptr<Chart> result = api->deleteChartSeries(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartSeriesName) {
	std::shared_ptr<DeleteChartSeriesRequest> request = getDeleteChartSeriesRequest();
	request->setName(utils->getInvalidTestValue("deleteChartSeries", "name", request->getName()));
	utils->initialize("deleteChartSeries", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesSlideIndex) {
	std::shared_ptr<DeleteChartSeriesRequest> request = getDeleteChartSeriesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteChartSeries", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteChartSeries", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesShapeIndex) {
	std::shared_ptr<DeleteChartSeriesRequest> request = getDeleteChartSeriesRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteChartSeries", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteChartSeries", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesSeriesIndex) {
	std::shared_ptr<DeleteChartSeriesRequest> request = getDeleteChartSeriesRequest();
	request->setSeriesIndex(utils->getInvalidIntTestValue("deleteChartSeries", "seriesIndex", request->getSeriesIndex()));
	utils->initialize("deleteChartSeries", "seriesIndex", request->getSeriesIndex());

	bool failed = true;
	try
	{
		api->deleteChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "seriesIndex", request->getSeriesIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "seriesIndex", request->getSeriesIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesPassword) {
	std::shared_ptr<DeleteChartSeriesRequest> request = getDeleteChartSeriesRequest();
	request->setPassword(utils->getInvalidTestValue("deleteChartSeries", "password", request->getPassword()));
	utils->initialize("deleteChartSeries", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesFolder) {
	std::shared_ptr<DeleteChartSeriesRequest> request = getDeleteChartSeriesRequest();
	request->setFolder(utils->getInvalidTestValue("deleteChartSeries", "folder", request->getFolder()));
	utils->initialize("deleteChartSeries", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesStorage) {
	std::shared_ptr<DeleteChartSeriesRequest> request = getDeleteChartSeriesRequest();
	request->setStorage(utils->getInvalidTestValue("deleteChartSeries", "storage", request->getStorage()));
	utils->initialize("deleteChartSeries", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFile) {
	std::shared_ptr<DeleteFileRequest> request = getDeleteFileRequest();
	utils->initialize("deleteFile", "");
	api->deleteFile(request).wait();
}

TEST_F(SlidesApiTest, deleteFilePath) {
	std::shared_ptr<DeleteFileRequest> request = getDeleteFileRequest();
	request->setPath(utils->getInvalidTestValue("deleteFile", "path", request->getPath()));
	utils->initialize("deleteFile", "path", request->getPath());

	bool failed = true;
	try
	{
		api->deleteFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFileStorageName) {
	std::shared_ptr<DeleteFileRequest> request = getDeleteFileRequest();
	request->setStorageName(utils->getInvalidTestValue("deleteFile", "storageName", request->getStorageName()));
	utils->initialize("deleteFile", "storageName", request->getStorageName());

	bool failed = true;
	try
	{
		api->deleteFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "storageName", request->getStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "storageName", request->getStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFileVersionId) {
	std::shared_ptr<DeleteFileRequest> request = getDeleteFileRequest();
	request->setVersionId(utils->getInvalidTestValue("deleteFile", "versionId", request->getVersionId()));
	utils->initialize("deleteFile", "versionId", request->getVersionId());

	bool failed = true;
	try
	{
		api->deleteFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "versionId", request->getVersionId());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "versionId", request->getVersionId());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolder) {
	std::shared_ptr<DeleteFolderRequest> request = getDeleteFolderRequest();
	utils->initialize("deleteFolder", "");
	api->deleteFolder(request).wait();
}

TEST_F(SlidesApiTest, deleteFolderPath) {
	std::shared_ptr<DeleteFolderRequest> request = getDeleteFolderRequest();
	request->setPath(utils->getInvalidTestValue("deleteFolder", "path", request->getPath()));
	utils->initialize("deleteFolder", "path", request->getPath());

	bool failed = true;
	try
	{
		api->deleteFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolderStorageName) {
	std::shared_ptr<DeleteFolderRequest> request = getDeleteFolderRequest();
	request->setStorageName(utils->getInvalidTestValue("deleteFolder", "storageName", request->getStorageName()));
	utils->initialize("deleteFolder", "storageName", request->getStorageName());

	bool failed = true;
	try
	{
		api->deleteFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "storageName", request->getStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "storageName", request->getStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolderRecursive) {
	std::shared_ptr<DeleteFolderRequest> request = getDeleteFolderRequest();
	request->setRecursive(utils->getInvalidBoolTestValue("deleteFolder", "recursive", request->getRecursive()));
	utils->initialize("deleteFolder", "recursive", request->getRecursive());

	bool failed = true;
	try
	{
		api->deleteFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "recursive");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "recursive", request->getRecursive());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "recursive");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "recursive", request->getRecursive());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "recursive"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlide) {
	std::shared_ptr<DeleteNotesSlideRequest> request = getDeleteNotesSlideRequest();
	utils->initialize("deleteNotesSlide", "");
	std::shared_ptr<Slide> result = api->deleteNotesSlide(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideName) {
	std::shared_ptr<DeleteNotesSlideRequest> request = getDeleteNotesSlideRequest();
	request->setName(utils->getInvalidTestValue("deleteNotesSlide", "name", request->getName()));
	utils->initialize("deleteNotesSlide", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideSlideIndex) {
	std::shared_ptr<DeleteNotesSlideRequest> request = getDeleteNotesSlideRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteNotesSlide", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteNotesSlide", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePassword) {
	std::shared_ptr<DeleteNotesSlideRequest> request = getDeleteNotesSlideRequest();
	request->setPassword(utils->getInvalidTestValue("deleteNotesSlide", "password", request->getPassword()));
	utils->initialize("deleteNotesSlide", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideFolder) {
	std::shared_ptr<DeleteNotesSlideRequest> request = getDeleteNotesSlideRequest();
	request->setFolder(utils->getInvalidTestValue("deleteNotesSlide", "folder", request->getFolder()));
	utils->initialize("deleteNotesSlide", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideStorage) {
	std::shared_ptr<DeleteNotesSlideRequest> request = getDeleteNotesSlideRequest();
	request->setStorage(utils->getInvalidTestValue("deleteNotesSlide", "storage", request->getStorage()));
	utils->initialize("deleteNotesSlide", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraph) {
	std::shared_ptr<DeleteNotesSlideParagraphRequest> request = getDeleteNotesSlideParagraphRequest();
	utils->initialize("deleteNotesSlideParagraph", "");
	std::shared_ptr<Paragraphs> result = api->deleteNotesSlideParagraph(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphName) {
	std::shared_ptr<DeleteNotesSlideParagraphRequest> request = getDeleteNotesSlideParagraphRequest();
	request->setName(utils->getInvalidTestValue("deleteNotesSlideParagraph", "name", request->getName()));
	utils->initialize("deleteNotesSlideParagraph", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphSlideIndex) {
	std::shared_ptr<DeleteNotesSlideParagraphRequest> request = getDeleteNotesSlideParagraphRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteNotesSlideParagraph", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteNotesSlideParagraph", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphShapeIndex) {
	std::shared_ptr<DeleteNotesSlideParagraphRequest> request = getDeleteNotesSlideParagraphRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteNotesSlideParagraph", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteNotesSlideParagraph", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphParagraphIndex) {
	std::shared_ptr<DeleteNotesSlideParagraphRequest> request = getDeleteNotesSlideParagraphRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("deleteNotesSlideParagraph", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("deleteNotesSlideParagraph", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphPassword) {
	std::shared_ptr<DeleteNotesSlideParagraphRequest> request = getDeleteNotesSlideParagraphRequest();
	request->setPassword(utils->getInvalidTestValue("deleteNotesSlideParagraph", "password", request->getPassword()));
	utils->initialize("deleteNotesSlideParagraph", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphFolder) {
	std::shared_ptr<DeleteNotesSlideParagraphRequest> request = getDeleteNotesSlideParagraphRequest();
	request->setFolder(utils->getInvalidTestValue("deleteNotesSlideParagraph", "folder", request->getFolder()));
	utils->initialize("deleteNotesSlideParagraph", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphStorage) {
	std::shared_ptr<DeleteNotesSlideParagraphRequest> request = getDeleteNotesSlideParagraphRequest();
	request->setStorage(utils->getInvalidTestValue("deleteNotesSlideParagraph", "storage", request->getStorage()));
	utils->initialize("deleteNotesSlideParagraph", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphs) {
	std::shared_ptr<DeleteNotesSlideParagraphsRequest> request = getDeleteNotesSlideParagraphsRequest();
	utils->initialize("deleteNotesSlideParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->deleteNotesSlideParagraphs(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsName) {
	std::shared_ptr<DeleteNotesSlideParagraphsRequest> request = getDeleteNotesSlideParagraphsRequest();
	request->setName(utils->getInvalidTestValue("deleteNotesSlideParagraphs", "name", request->getName()));
	utils->initialize("deleteNotesSlideParagraphs", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsSlideIndex) {
	std::shared_ptr<DeleteNotesSlideParagraphsRequest> request = getDeleteNotesSlideParagraphsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteNotesSlideParagraphs", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteNotesSlideParagraphs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsShapeIndex) {
	std::shared_ptr<DeleteNotesSlideParagraphsRequest> request = getDeleteNotesSlideParagraphsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteNotesSlideParagraphs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteNotesSlideParagraphs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsParagraphs) {
	std::shared_ptr<DeleteNotesSlideParagraphsRequest> request = getDeleteNotesSlideParagraphsRequest();
	request->setParagraphs(utils->getInvalidIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs", request->getParagraphs()));
	utils->initialize("deleteNotesSlideParagraphs", "paragraphs", request->getParagraphs());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "paragraphs");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "paragraphs", request->getParagraphs());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "paragraphs");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "paragraphs", request->getParagraphs());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "paragraphs"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsPassword) {
	std::shared_ptr<DeleteNotesSlideParagraphsRequest> request = getDeleteNotesSlideParagraphsRequest();
	request->setPassword(utils->getInvalidTestValue("deleteNotesSlideParagraphs", "password", request->getPassword()));
	utils->initialize("deleteNotesSlideParagraphs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsFolder) {
	std::shared_ptr<DeleteNotesSlideParagraphsRequest> request = getDeleteNotesSlideParagraphsRequest();
	request->setFolder(utils->getInvalidTestValue("deleteNotesSlideParagraphs", "folder", request->getFolder()));
	utils->initialize("deleteNotesSlideParagraphs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsStorage) {
	std::shared_ptr<DeleteNotesSlideParagraphsRequest> request = getDeleteNotesSlideParagraphsRequest();
	request->setStorage(utils->getInvalidTestValue("deleteNotesSlideParagraphs", "storage", request->getStorage()));
	utils->initialize("deleteNotesSlideParagraphs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortion) {
	std::shared_ptr<DeleteNotesSlidePortionRequest> request = getDeleteNotesSlidePortionRequest();
	utils->initialize("deleteNotesSlidePortion", "");
	std::shared_ptr<Portions> result = api->deleteNotesSlidePortion(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionName) {
	std::shared_ptr<DeleteNotesSlidePortionRequest> request = getDeleteNotesSlidePortionRequest();
	request->setName(utils->getInvalidTestValue("deleteNotesSlidePortion", "name", request->getName()));
	utils->initialize("deleteNotesSlidePortion", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionSlideIndex) {
	std::shared_ptr<DeleteNotesSlidePortionRequest> request = getDeleteNotesSlidePortionRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteNotesSlidePortion", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteNotesSlidePortion", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionShapeIndex) {
	std::shared_ptr<DeleteNotesSlidePortionRequest> request = getDeleteNotesSlidePortionRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteNotesSlidePortion", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteNotesSlidePortion", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionParagraphIndex) {
	std::shared_ptr<DeleteNotesSlidePortionRequest> request = getDeleteNotesSlidePortionRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("deleteNotesSlidePortion", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("deleteNotesSlidePortion", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionPortionIndex) {
	std::shared_ptr<DeleteNotesSlidePortionRequest> request = getDeleteNotesSlidePortionRequest();
	request->setPortionIndex(utils->getInvalidIntTestValue("deleteNotesSlidePortion", "portionIndex", request->getPortionIndex()));
	utils->initialize("deleteNotesSlidePortion", "portionIndex", request->getPortionIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "portionIndex", request->getPortionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "portionIndex", request->getPortionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionPassword) {
	std::shared_ptr<DeleteNotesSlidePortionRequest> request = getDeleteNotesSlidePortionRequest();
	request->setPassword(utils->getInvalidTestValue("deleteNotesSlidePortion", "password", request->getPassword()));
	utils->initialize("deleteNotesSlidePortion", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionFolder) {
	std::shared_ptr<DeleteNotesSlidePortionRequest> request = getDeleteNotesSlidePortionRequest();
	request->setFolder(utils->getInvalidTestValue("deleteNotesSlidePortion", "folder", request->getFolder()));
	utils->initialize("deleteNotesSlidePortion", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionStorage) {
	std::shared_ptr<DeleteNotesSlidePortionRequest> request = getDeleteNotesSlidePortionRequest();
	request->setStorage(utils->getInvalidTestValue("deleteNotesSlidePortion", "storage", request->getStorage()));
	utils->initialize("deleteNotesSlidePortion", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortions) {
	std::shared_ptr<DeleteNotesSlidePortionsRequest> request = getDeleteNotesSlidePortionsRequest();
	utils->initialize("deleteNotesSlidePortions", "");
	std::shared_ptr<Portions> result = api->deleteNotesSlidePortions(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsName) {
	std::shared_ptr<DeleteNotesSlidePortionsRequest> request = getDeleteNotesSlidePortionsRequest();
	request->setName(utils->getInvalidTestValue("deleteNotesSlidePortions", "name", request->getName()));
	utils->initialize("deleteNotesSlidePortions", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsSlideIndex) {
	std::shared_ptr<DeleteNotesSlidePortionsRequest> request = getDeleteNotesSlidePortionsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteNotesSlidePortions", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteNotesSlidePortions", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsShapeIndex) {
	std::shared_ptr<DeleteNotesSlidePortionsRequest> request = getDeleteNotesSlidePortionsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteNotesSlidePortions", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteNotesSlidePortions", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsParagraphIndex) {
	std::shared_ptr<DeleteNotesSlidePortionsRequest> request = getDeleteNotesSlidePortionsRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("deleteNotesSlidePortions", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("deleteNotesSlidePortions", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsPortions) {
	std::shared_ptr<DeleteNotesSlidePortionsRequest> request = getDeleteNotesSlidePortionsRequest();
	request->setPortions(utils->getInvalidIntVectorTestValue("deleteNotesSlidePortions", "portions", request->getPortions()));
	utils->initialize("deleteNotesSlidePortions", "portions", request->getPortions());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "portions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "portions", request->getPortions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "portions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "portions", request->getPortions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "portions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsPassword) {
	std::shared_ptr<DeleteNotesSlidePortionsRequest> request = getDeleteNotesSlidePortionsRequest();
	request->setPassword(utils->getInvalidTestValue("deleteNotesSlidePortions", "password", request->getPassword()));
	utils->initialize("deleteNotesSlidePortions", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsFolder) {
	std::shared_ptr<DeleteNotesSlidePortionsRequest> request = getDeleteNotesSlidePortionsRequest();
	request->setFolder(utils->getInvalidTestValue("deleteNotesSlidePortions", "folder", request->getFolder()));
	utils->initialize("deleteNotesSlidePortions", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsStorage) {
	std::shared_ptr<DeleteNotesSlidePortionsRequest> request = getDeleteNotesSlidePortionsRequest();
	request->setStorage(utils->getInvalidTestValue("deleteNotesSlidePortions", "storage", request->getStorage()));
	utils->initialize("deleteNotesSlidePortions", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShape) {
	std::shared_ptr<DeleteNotesSlideShapeRequest> request = getDeleteNotesSlideShapeRequest();
	utils->initialize("deleteNotesSlideShape", "");
	std::shared_ptr<Shapes> result = api->deleteNotesSlideShape(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeName) {
	std::shared_ptr<DeleteNotesSlideShapeRequest> request = getDeleteNotesSlideShapeRequest();
	request->setName(utils->getInvalidTestValue("deleteNotesSlideShape", "name", request->getName()));
	utils->initialize("deleteNotesSlideShape", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeSlideIndex) {
	std::shared_ptr<DeleteNotesSlideShapeRequest> request = getDeleteNotesSlideShapeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteNotesSlideShape", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteNotesSlideShape", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeShapeIndex) {
	std::shared_ptr<DeleteNotesSlideShapeRequest> request = getDeleteNotesSlideShapeRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteNotesSlideShape", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteNotesSlideShape", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapePassword) {
	std::shared_ptr<DeleteNotesSlideShapeRequest> request = getDeleteNotesSlideShapeRequest();
	request->setPassword(utils->getInvalidTestValue("deleteNotesSlideShape", "password", request->getPassword()));
	utils->initialize("deleteNotesSlideShape", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeFolder) {
	std::shared_ptr<DeleteNotesSlideShapeRequest> request = getDeleteNotesSlideShapeRequest();
	request->setFolder(utils->getInvalidTestValue("deleteNotesSlideShape", "folder", request->getFolder()));
	utils->initialize("deleteNotesSlideShape", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeStorage) {
	std::shared_ptr<DeleteNotesSlideShapeRequest> request = getDeleteNotesSlideShapeRequest();
	request->setStorage(utils->getInvalidTestValue("deleteNotesSlideShape", "storage", request->getStorage()));
	utils->initialize("deleteNotesSlideShape", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapes) {
	std::shared_ptr<DeleteNotesSlideShapesRequest> request = getDeleteNotesSlideShapesRequest();
	utils->initialize("deleteNotesSlideShapes", "");
	std::shared_ptr<Shapes> result = api->deleteNotesSlideShapes(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesName) {
	std::shared_ptr<DeleteNotesSlideShapesRequest> request = getDeleteNotesSlideShapesRequest();
	request->setName(utils->getInvalidTestValue("deleteNotesSlideShapes", "name", request->getName()));
	utils->initialize("deleteNotesSlideShapes", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesSlideIndex) {
	std::shared_ptr<DeleteNotesSlideShapesRequest> request = getDeleteNotesSlideShapesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteNotesSlideShapes", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteNotesSlideShapes", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesShapes) {
	std::shared_ptr<DeleteNotesSlideShapesRequest> request = getDeleteNotesSlideShapesRequest();
	request->setShapes(utils->getInvalidIntVectorTestValue("deleteNotesSlideShapes", "shapes", request->getShapes()));
	utils->initialize("deleteNotesSlideShapes", "shapes", request->getShapes());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "shapes");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "shapes", request->getShapes());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "shapes");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "shapes", request->getShapes());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "shapes"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesPassword) {
	std::shared_ptr<DeleteNotesSlideShapesRequest> request = getDeleteNotesSlideShapesRequest();
	request->setPassword(utils->getInvalidTestValue("deleteNotesSlideShapes", "password", request->getPassword()));
	utils->initialize("deleteNotesSlideShapes", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesFolder) {
	std::shared_ptr<DeleteNotesSlideShapesRequest> request = getDeleteNotesSlideShapesRequest();
	request->setFolder(utils->getInvalidTestValue("deleteNotesSlideShapes", "folder", request->getFolder()));
	utils->initialize("deleteNotesSlideShapes", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesStorage) {
	std::shared_ptr<DeleteNotesSlideShapesRequest> request = getDeleteNotesSlideShapesRequest();
	request->setStorage(utils->getInvalidTestValue("deleteNotesSlideShapes", "storage", request->getStorage()));
	utils->initialize("deleteNotesSlideShapes", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraph) {
	std::shared_ptr<DeleteParagraphRequest> request = getDeleteParagraphRequest();
	utils->initialize("deleteParagraph", "");
	std::shared_ptr<Paragraphs> result = api->deleteParagraph(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteParagraphName) {
	std::shared_ptr<DeleteParagraphRequest> request = getDeleteParagraphRequest();
	request->setName(utils->getInvalidTestValue("deleteParagraph", "name", request->getName()));
	utils->initialize("deleteParagraph", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphSlideIndex) {
	std::shared_ptr<DeleteParagraphRequest> request = getDeleteParagraphRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteParagraph", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteParagraph", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphShapeIndex) {
	std::shared_ptr<DeleteParagraphRequest> request = getDeleteParagraphRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteParagraph", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteParagraph", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphParagraphIndex) {
	std::shared_ptr<DeleteParagraphRequest> request = getDeleteParagraphRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("deleteParagraph", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("deleteParagraph", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->deleteParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphPassword) {
	std::shared_ptr<DeleteParagraphRequest> request = getDeleteParagraphRequest();
	request->setPassword(utils->getInvalidTestValue("deleteParagraph", "password", request->getPassword()));
	utils->initialize("deleteParagraph", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphFolder) {
	std::shared_ptr<DeleteParagraphRequest> request = getDeleteParagraphRequest();
	request->setFolder(utils->getInvalidTestValue("deleteParagraph", "folder", request->getFolder()));
	utils->initialize("deleteParagraph", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphStorage) {
	std::shared_ptr<DeleteParagraphRequest> request = getDeleteParagraphRequest();
	request->setStorage(utils->getInvalidTestValue("deleteParagraph", "storage", request->getStorage()));
	utils->initialize("deleteParagraph", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphs) {
	std::shared_ptr<DeleteParagraphsRequest> request = getDeleteParagraphsRequest();
	utils->initialize("deleteParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->deleteParagraphs(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteParagraphsName) {
	std::shared_ptr<DeleteParagraphsRequest> request = getDeleteParagraphsRequest();
	request->setName(utils->getInvalidTestValue("deleteParagraphs", "name", request->getName()));
	utils->initialize("deleteParagraphs", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsSlideIndex) {
	std::shared_ptr<DeleteParagraphsRequest> request = getDeleteParagraphsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteParagraphs", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteParagraphs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsShapeIndex) {
	std::shared_ptr<DeleteParagraphsRequest> request = getDeleteParagraphsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteParagraphs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteParagraphs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsParagraphs) {
	std::shared_ptr<DeleteParagraphsRequest> request = getDeleteParagraphsRequest();
	request->setParagraphs(utils->getInvalidIntVectorTestValue("deleteParagraphs", "paragraphs", request->getParagraphs()));
	utils->initialize("deleteParagraphs", "paragraphs", request->getParagraphs());

	bool failed = true;
	try
	{
		api->deleteParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "paragraphs");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "paragraphs", request->getParagraphs());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "paragraphs");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "paragraphs", request->getParagraphs());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "paragraphs"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsPassword) {
	std::shared_ptr<DeleteParagraphsRequest> request = getDeleteParagraphsRequest();
	request->setPassword(utils->getInvalidTestValue("deleteParagraphs", "password", request->getPassword()));
	utils->initialize("deleteParagraphs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsFolder) {
	std::shared_ptr<DeleteParagraphsRequest> request = getDeleteParagraphsRequest();
	request->setFolder(utils->getInvalidTestValue("deleteParagraphs", "folder", request->getFolder()));
	utils->initialize("deleteParagraphs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsStorage) {
	std::shared_ptr<DeleteParagraphsRequest> request = getDeleteParagraphsRequest();
	request->setStorage(utils->getInvalidTestValue("deleteParagraphs", "storage", request->getStorage()));
	utils->initialize("deleteParagraphs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortion) {
	std::shared_ptr<DeletePortionRequest> request = getDeletePortionRequest();
	utils->initialize("deletePortion", "");
	std::shared_ptr<Portions> result = api->deletePortion(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deletePortionName) {
	std::shared_ptr<DeletePortionRequest> request = getDeletePortionRequest();
	request->setName(utils->getInvalidTestValue("deletePortion", "name", request->getName()));
	utils->initialize("deletePortion", "name", request->getName());

	bool failed = true;
	try
	{
		api->deletePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionSlideIndex) {
	std::shared_ptr<DeletePortionRequest> request = getDeletePortionRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deletePortion", "slideIndex", request->getSlideIndex()));
	utils->initialize("deletePortion", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deletePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionShapeIndex) {
	std::shared_ptr<DeletePortionRequest> request = getDeletePortionRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deletePortion", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deletePortion", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deletePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionParagraphIndex) {
	std::shared_ptr<DeletePortionRequest> request = getDeletePortionRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("deletePortion", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("deletePortion", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->deletePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionPortionIndex) {
	std::shared_ptr<DeletePortionRequest> request = getDeletePortionRequest();
	request->setPortionIndex(utils->getInvalidIntTestValue("deletePortion", "portionIndex", request->getPortionIndex()));
	utils->initialize("deletePortion", "portionIndex", request->getPortionIndex());

	bool failed = true;
	try
	{
		api->deletePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "portionIndex", request->getPortionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "portionIndex", request->getPortionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionPassword) {
	std::shared_ptr<DeletePortionRequest> request = getDeletePortionRequest();
	request->setPassword(utils->getInvalidTestValue("deletePortion", "password", request->getPassword()));
	utils->initialize("deletePortion", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deletePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionFolder) {
	std::shared_ptr<DeletePortionRequest> request = getDeletePortionRequest();
	request->setFolder(utils->getInvalidTestValue("deletePortion", "folder", request->getFolder()));
	utils->initialize("deletePortion", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deletePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionStorage) {
	std::shared_ptr<DeletePortionRequest> request = getDeletePortionRequest();
	request->setStorage(utils->getInvalidTestValue("deletePortion", "storage", request->getStorage()));
	utils->initialize("deletePortion", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deletePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortions) {
	std::shared_ptr<DeletePortionsRequest> request = getDeletePortionsRequest();
	utils->initialize("deletePortions", "");
	std::shared_ptr<Portions> result = api->deletePortions(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deletePortionsName) {
	std::shared_ptr<DeletePortionsRequest> request = getDeletePortionsRequest();
	request->setName(utils->getInvalidTestValue("deletePortions", "name", request->getName()));
	utils->initialize("deletePortions", "name", request->getName());

	bool failed = true;
	try
	{
		api->deletePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsSlideIndex) {
	std::shared_ptr<DeletePortionsRequest> request = getDeletePortionsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deletePortions", "slideIndex", request->getSlideIndex()));
	utils->initialize("deletePortions", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deletePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsShapeIndex) {
	std::shared_ptr<DeletePortionsRequest> request = getDeletePortionsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deletePortions", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deletePortions", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deletePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsParagraphIndex) {
	std::shared_ptr<DeletePortionsRequest> request = getDeletePortionsRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("deletePortions", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("deletePortions", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->deletePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsPortions) {
	std::shared_ptr<DeletePortionsRequest> request = getDeletePortionsRequest();
	request->setPortions(utils->getInvalidIntVectorTestValue("deletePortions", "portions", request->getPortions()));
	utils->initialize("deletePortions", "portions", request->getPortions());

	bool failed = true;
	try
	{
		api->deletePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "portions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "portions", request->getPortions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "portions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "portions", request->getPortions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "portions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsPassword) {
	std::shared_ptr<DeletePortionsRequest> request = getDeletePortionsRequest();
	request->setPassword(utils->getInvalidTestValue("deletePortions", "password", request->getPassword()));
	utils->initialize("deletePortions", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deletePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsFolder) {
	std::shared_ptr<DeletePortionsRequest> request = getDeletePortionsRequest();
	request->setFolder(utils->getInvalidTestValue("deletePortions", "folder", request->getFolder()));
	utils->initialize("deletePortions", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deletePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsStorage) {
	std::shared_ptr<DeletePortionsRequest> request = getDeletePortionsRequest();
	request->setStorage(utils->getInvalidTestValue("deletePortions", "storage", request->getStorage()));
	utils->initialize("deletePortions", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deletePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSection) {
	std::shared_ptr<DeleteSectionRequest> request = getDeleteSectionRequest();
	utils->initialize("deleteSection", "");
	std::shared_ptr<Sections> result = api->deleteSection(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSectionName) {
	std::shared_ptr<DeleteSectionRequest> request = getDeleteSectionRequest();
	request->setName(utils->getInvalidTestValue("deleteSection", "name", request->getName()));
	utils->initialize("deleteSection", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionSectionIndex) {
	std::shared_ptr<DeleteSectionRequest> request = getDeleteSectionRequest();
	request->setSectionIndex(utils->getInvalidIntTestValue("deleteSection", "sectionIndex", request->getSectionIndex()));
	utils->initialize("deleteSection", "sectionIndex", request->getSectionIndex());

	bool failed = true;
	try
	{
		api->deleteSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "sectionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "sectionIndex", request->getSectionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "sectionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "sectionIndex", request->getSectionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "sectionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionWithSlides) {
	std::shared_ptr<DeleteSectionRequest> request = getDeleteSectionRequest();
	request->setWithSlides(utils->getInvalidBoolTestValue("deleteSection", "withSlides", request->getWithSlides()));
	utils->initialize("deleteSection", "withSlides", request->getWithSlides());

	bool failed = true;
	try
	{
		api->deleteSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "withSlides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "withSlides", request->getWithSlides());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "withSlides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "withSlides", request->getWithSlides());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "withSlides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionPassword) {
	std::shared_ptr<DeleteSectionRequest> request = getDeleteSectionRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSection", "password", request->getPassword()));
	utils->initialize("deleteSection", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionFolder) {
	std::shared_ptr<DeleteSectionRequest> request = getDeleteSectionRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSection", "folder", request->getFolder()));
	utils->initialize("deleteSection", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionStorage) {
	std::shared_ptr<DeleteSectionRequest> request = getDeleteSectionRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSection", "storage", request->getStorage()));
	utils->initialize("deleteSection", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSections) {
	std::shared_ptr<DeleteSectionsRequest> request = getDeleteSectionsRequest();
	utils->initialize("deleteSections", "");
	std::shared_ptr<Sections> result = api->deleteSections(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSectionsName) {
	std::shared_ptr<DeleteSectionsRequest> request = getDeleteSectionsRequest();
	request->setName(utils->getInvalidTestValue("deleteSections", "name", request->getName()));
	utils->initialize("deleteSections", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsSections) {
	std::shared_ptr<DeleteSectionsRequest> request = getDeleteSectionsRequest();
	request->setSections(utils->getInvalidIntVectorTestValue("deleteSections", "sections", request->getSections()));
	utils->initialize("deleteSections", "sections", request->getSections());

	bool failed = true;
	try
	{
		api->deleteSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "sections");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "sections", request->getSections());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "sections");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "sections", request->getSections());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "sections"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsWithSlides) {
	std::shared_ptr<DeleteSectionsRequest> request = getDeleteSectionsRequest();
	request->setWithSlides(utils->getInvalidBoolTestValue("deleteSections", "withSlides", request->getWithSlides()));
	utils->initialize("deleteSections", "withSlides", request->getWithSlides());

	bool failed = true;
	try
	{
		api->deleteSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "withSlides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "withSlides", request->getWithSlides());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "withSlides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "withSlides", request->getWithSlides());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "withSlides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsPassword) {
	std::shared_ptr<DeleteSectionsRequest> request = getDeleteSectionsRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSections", "password", request->getPassword()));
	utils->initialize("deleteSections", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsFolder) {
	std::shared_ptr<DeleteSectionsRequest> request = getDeleteSectionsRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSections", "folder", request->getFolder()));
	utils->initialize("deleteSections", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsStorage) {
	std::shared_ptr<DeleteSectionsRequest> request = getDeleteSectionsRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSections", "storage", request->getStorage()));
	utils->initialize("deleteSections", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimation) {
	std::shared_ptr<DeleteSlideAnimationRequest> request = getDeleteSlideAnimationRequest();
	utils->initialize("deleteSlideAnimation", "");
	std::shared_ptr<SlideAnimation> result = api->deleteSlideAnimation(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationName) {
	std::shared_ptr<DeleteSlideAnimationRequest> request = getDeleteSlideAnimationRequest();
	request->setName(utils->getInvalidTestValue("deleteSlideAnimation", "name", request->getName()));
	utils->initialize("deleteSlideAnimation", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationSlideIndex) {
	std::shared_ptr<DeleteSlideAnimationRequest> request = getDeleteSlideAnimationRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlideAnimation", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlideAnimation", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimation", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationPassword) {
	std::shared_ptr<DeleteSlideAnimationRequest> request = getDeleteSlideAnimationRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlideAnimation", "password", request->getPassword()));
	utils->initialize("deleteSlideAnimation", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationFolder) {
	std::shared_ptr<DeleteSlideAnimationRequest> request = getDeleteSlideAnimationRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlideAnimation", "folder", request->getFolder()));
	utils->initialize("deleteSlideAnimation", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationStorage) {
	std::shared_ptr<DeleteSlideAnimationRequest> request = getDeleteSlideAnimationRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlideAnimation", "storage", request->getStorage()));
	utils->initialize("deleteSlideAnimation", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimation", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffect) {
	std::shared_ptr<DeleteSlideAnimationEffectRequest> request = getDeleteSlideAnimationEffectRequest();
	utils->initialize("deleteSlideAnimationEffect", "");
	std::shared_ptr<SlideAnimation> result = api->deleteSlideAnimationEffect(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectName) {
	std::shared_ptr<DeleteSlideAnimationEffectRequest> request = getDeleteSlideAnimationEffectRequest();
	request->setName(utils->getInvalidTestValue("deleteSlideAnimationEffect", "name", request->getName()));
	utils->initialize("deleteSlideAnimationEffect", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectSlideIndex) {
	std::shared_ptr<DeleteSlideAnimationEffectRequest> request = getDeleteSlideAnimationEffectRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlideAnimationEffect", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlideAnimationEffect", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectEffectIndex) {
	std::shared_ptr<DeleteSlideAnimationEffectRequest> request = getDeleteSlideAnimationEffectRequest();
	request->setEffectIndex(utils->getInvalidIntTestValue("deleteSlideAnimationEffect", "effectIndex", request->getEffectIndex()));
	utils->initialize("deleteSlideAnimationEffect", "effectIndex", request->getEffectIndex());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "effectIndex", request->getEffectIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "effectIndex", request->getEffectIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectPassword) {
	std::shared_ptr<DeleteSlideAnimationEffectRequest> request = getDeleteSlideAnimationEffectRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlideAnimationEffect", "password", request->getPassword()));
	utils->initialize("deleteSlideAnimationEffect", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectFolder) {
	std::shared_ptr<DeleteSlideAnimationEffectRequest> request = getDeleteSlideAnimationEffectRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlideAnimationEffect", "folder", request->getFolder()));
	utils->initialize("deleteSlideAnimationEffect", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationEffectStorage) {
	std::shared_ptr<DeleteSlideAnimationEffectRequest> request = getDeleteSlideAnimationEffectRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlideAnimationEffect", "storage", request->getStorage()));
	utils->initialize("deleteSlideAnimationEffect", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationEffect", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequence) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceRequest> request = getDeleteSlideAnimationInteractiveSequenceRequest();
	utils->initialize("deleteSlideAnimationInteractiveSequence", "");
	std::shared_ptr<SlideAnimation> result = api->deleteSlideAnimationInteractiveSequence(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceName) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceRequest> request = getDeleteSlideAnimationInteractiveSequenceRequest();
	request->setName(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequence", "name", request->getName()));
	utils->initialize("deleteSlideAnimationInteractiveSequence", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceSlideIndex) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceRequest> request = getDeleteSlideAnimationInteractiveSequenceRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequence", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlideAnimationInteractiveSequence", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceSequenceIndex) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceRequest> request = getDeleteSlideAnimationInteractiveSequenceRequest();
	request->setSequenceIndex(utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex", request->getSequenceIndex()));
	utils->initialize("deleteSlideAnimationInteractiveSequence", "sequenceIndex", request->getSequenceIndex());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "sequenceIndex", request->getSequenceIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "sequenceIndex", request->getSequenceIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequencePassword) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceRequest> request = getDeleteSlideAnimationInteractiveSequenceRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequence", "password", request->getPassword()));
	utils->initialize("deleteSlideAnimationInteractiveSequence", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceFolder) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceRequest> request = getDeleteSlideAnimationInteractiveSequenceRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequence", "folder", request->getFolder()));
	utils->initialize("deleteSlideAnimationInteractiveSequence", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceStorage) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceRequest> request = getDeleteSlideAnimationInteractiveSequenceRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequence", "storage", request->getStorage()));
	utils->initialize("deleteSlideAnimationInteractiveSequence", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequence", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequence", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffect) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceEffectRequest> request = getDeleteSlideAnimationInteractiveSequenceEffectRequest();
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "");
	std::shared_ptr<SlideAnimation> result = api->deleteSlideAnimationInteractiveSequenceEffect(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectName) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceEffectRequest> request = getDeleteSlideAnimationInteractiveSequenceEffectRequest();
	request->setName(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequenceEffect", "name", request->getName()));
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectSlideIndex) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceEffectRequest> request = getDeleteSlideAnimationInteractiveSequenceEffectRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectSequenceIndex) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceEffectRequest> request = getDeleteSlideAnimationInteractiveSequenceEffectRequest();
	request->setSequenceIndex(utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex()));
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectEffectIndex) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceEffectRequest> request = getDeleteSlideAnimationInteractiveSequenceEffectRequest();
	request->setEffectIndex(utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", request->getEffectIndex()));
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", request->getEffectIndex());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", request->getEffectIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", request->getEffectIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectPassword) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceEffectRequest> request = getDeleteSlideAnimationInteractiveSequenceEffectRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequenceEffect", "password", request->getPassword()));
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectFolder) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceEffectRequest> request = getDeleteSlideAnimationInteractiveSequenceEffectRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder()));
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequenceEffectStorage) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequenceEffectRequest> request = getDeleteSlideAnimationInteractiveSequenceEffectRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage()));
	utils->initialize("deleteSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequenceEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequences) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequencesRequest> request = getDeleteSlideAnimationInteractiveSequencesRequest();
	utils->initialize("deleteSlideAnimationInteractiveSequences", "");
	std::shared_ptr<SlideAnimation> result = api->deleteSlideAnimationInteractiveSequences(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequencesName) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequencesRequest> request = getDeleteSlideAnimationInteractiveSequencesRequest();
	request->setName(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequences", "name", request->getName()));
	utils->initialize("deleteSlideAnimationInteractiveSequences", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequences(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequences", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequencesSlideIndex) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequencesRequest> request = getDeleteSlideAnimationInteractiveSequencesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlideAnimationInteractiveSequences", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlideAnimationInteractiveSequences", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequences(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequences", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequencesPassword) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequencesRequest> request = getDeleteSlideAnimationInteractiveSequencesRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequences", "password", request->getPassword()));
	utils->initialize("deleteSlideAnimationInteractiveSequences", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequences(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequences", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequencesFolder) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequencesRequest> request = getDeleteSlideAnimationInteractiveSequencesRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequences", "folder", request->getFolder()));
	utils->initialize("deleteSlideAnimationInteractiveSequences", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequences(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequences", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationInteractiveSequencesStorage) {
	std::shared_ptr<DeleteSlideAnimationInteractiveSequencesRequest> request = getDeleteSlideAnimationInteractiveSequencesRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlideAnimationInteractiveSequences", "storage", request->getStorage()));
	utils->initialize("deleteSlideAnimationInteractiveSequences", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationInteractiveSequences(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationInteractiveSequences", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationInteractiveSequences", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationInteractiveSequences", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequence) {
	std::shared_ptr<DeleteSlideAnimationMainSequenceRequest> request = getDeleteSlideAnimationMainSequenceRequest();
	utils->initialize("deleteSlideAnimationMainSequence", "");
	std::shared_ptr<SlideAnimation> result = api->deleteSlideAnimationMainSequence(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequenceName) {
	std::shared_ptr<DeleteSlideAnimationMainSequenceRequest> request = getDeleteSlideAnimationMainSequenceRequest();
	request->setName(utils->getInvalidTestValue("deleteSlideAnimationMainSequence", "name", request->getName()));
	utils->initialize("deleteSlideAnimationMainSequence", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationMainSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationMainSequence", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequenceSlideIndex) {
	std::shared_ptr<DeleteSlideAnimationMainSequenceRequest> request = getDeleteSlideAnimationMainSequenceRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlideAnimationMainSequence", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlideAnimationMainSequence", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationMainSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationMainSequence", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequencePassword) {
	std::shared_ptr<DeleteSlideAnimationMainSequenceRequest> request = getDeleteSlideAnimationMainSequenceRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlideAnimationMainSequence", "password", request->getPassword()));
	utils->initialize("deleteSlideAnimationMainSequence", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationMainSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationMainSequence", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequenceFolder) {
	std::shared_ptr<DeleteSlideAnimationMainSequenceRequest> request = getDeleteSlideAnimationMainSequenceRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlideAnimationMainSequence", "folder", request->getFolder()));
	utils->initialize("deleteSlideAnimationMainSequence", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationMainSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationMainSequence", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideAnimationMainSequenceStorage) {
	std::shared_ptr<DeleteSlideAnimationMainSequenceRequest> request = getDeleteSlideAnimationMainSequenceRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlideAnimationMainSequence", "storage", request->getStorage()));
	utils->initialize("deleteSlideAnimationMainSequence", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlideAnimationMainSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideAnimationMainSequence", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideAnimationMainSequence", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideAnimationMainSequence", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideByIndex) {
	std::shared_ptr<DeleteSlideByIndexRequest> request = getDeleteSlideByIndexRequest();
	utils->initialize("deleteSlideByIndex", "");
	std::shared_ptr<Slides> result = api->deleteSlideByIndex(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideByIndexName) {
	std::shared_ptr<DeleteSlideByIndexRequest> request = getDeleteSlideByIndexRequest();
	request->setName(utils->getInvalidTestValue("deleteSlideByIndex", "name", request->getName()));
	utils->initialize("deleteSlideByIndex", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlideByIndex(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideByIndex", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideByIndexSlideIndex) {
	std::shared_ptr<DeleteSlideByIndexRequest> request = getDeleteSlideByIndexRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlideByIndex", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlideByIndex", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlideByIndex(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideByIndex", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideByIndexPassword) {
	std::shared_ptr<DeleteSlideByIndexRequest> request = getDeleteSlideByIndexRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlideByIndex", "password", request->getPassword()));
	utils->initialize("deleteSlideByIndex", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlideByIndex(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideByIndex", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideByIndexFolder) {
	std::shared_ptr<DeleteSlideByIndexRequest> request = getDeleteSlideByIndexRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlideByIndex", "folder", request->getFolder()));
	utils->initialize("deleteSlideByIndex", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlideByIndex(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideByIndex", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideByIndexStorage) {
	std::shared_ptr<DeleteSlideByIndexRequest> request = getDeleteSlideByIndexRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlideByIndex", "storage", request->getStorage()));
	utils->initialize("deleteSlideByIndex", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlideByIndex(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideByIndex", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideByIndex", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideByIndex", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShape) {
	std::shared_ptr<DeleteSlideShapeRequest> request = getDeleteSlideShapeRequest();
	utils->initialize("deleteSlideShape", "");
	std::shared_ptr<Shapes> result = api->deleteSlideShape(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideShapeName) {
	std::shared_ptr<DeleteSlideShapeRequest> request = getDeleteSlideShapeRequest();
	request->setName(utils->getInvalidTestValue("deleteSlideShape", "name", request->getName()));
	utils->initialize("deleteSlideShape", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapeSlideIndex) {
	std::shared_ptr<DeleteSlideShapeRequest> request = getDeleteSlideShapeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlideShape", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlideShape", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapeShapeIndex) {
	std::shared_ptr<DeleteSlideShapeRequest> request = getDeleteSlideShapeRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteSlideShape", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteSlideShape", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapePassword) {
	std::shared_ptr<DeleteSlideShapeRequest> request = getDeleteSlideShapeRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlideShape", "password", request->getPassword()));
	utils->initialize("deleteSlideShape", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapeFolder) {
	std::shared_ptr<DeleteSlideShapeRequest> request = getDeleteSlideShapeRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlideShape", "folder", request->getFolder()));
	utils->initialize("deleteSlideShape", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapeStorage) {
	std::shared_ptr<DeleteSlideShapeRequest> request = getDeleteSlideShapeRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlideShape", "storage", request->getStorage()));
	utils->initialize("deleteSlideShape", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShape", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapes) {
	std::shared_ptr<DeleteSlideShapesRequest> request = getDeleteSlideShapesRequest();
	utils->initialize("deleteSlideShapes", "");
	std::shared_ptr<Shapes> result = api->deleteSlideShapes(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideShapesName) {
	std::shared_ptr<DeleteSlideShapesRequest> request = getDeleteSlideShapesRequest();
	request->setName(utils->getInvalidTestValue("deleteSlideShapes", "name", request->getName()));
	utils->initialize("deleteSlideShapes", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapesSlideIndex) {
	std::shared_ptr<DeleteSlideShapesRequest> request = getDeleteSlideShapesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlideShapes", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlideShapes", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapesShapes) {
	std::shared_ptr<DeleteSlideShapesRequest> request = getDeleteSlideShapesRequest();
	request->setShapes(utils->getInvalidIntVectorTestValue("deleteSlideShapes", "shapes", request->getShapes()));
	utils->initialize("deleteSlideShapes", "shapes", request->getShapes());

	bool failed = true;
	try
	{
		api->deleteSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "shapes");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "shapes", request->getShapes());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "shapes");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "shapes", request->getShapes());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "shapes"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapesPassword) {
	std::shared_ptr<DeleteSlideShapesRequest> request = getDeleteSlideShapesRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlideShapes", "password", request->getPassword()));
	utils->initialize("deleteSlideShapes", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapesFolder) {
	std::shared_ptr<DeleteSlideShapesRequest> request = getDeleteSlideShapesRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlideShapes", "folder", request->getFolder()));
	utils->initialize("deleteSlideShapes", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideShapesStorage) {
	std::shared_ptr<DeleteSlideShapesRequest> request = getDeleteSlideShapesRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlideShapes", "storage", request->getStorage()));
	utils->initialize("deleteSlideShapes", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideShapes", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshape) {
	std::shared_ptr<DeleteSlideSubshapeRequest> request = getDeleteSlideSubshapeRequest();
	utils->initialize("deleteSlideSubshape", "");
	std::shared_ptr<Shapes> result = api->deleteSlideSubshape(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideSubshapeName) {
	std::shared_ptr<DeleteSlideSubshapeRequest> request = getDeleteSlideSubshapeRequest();
	request->setName(utils->getInvalidTestValue("deleteSlideSubshape", "name", request->getName()));
	utils->initialize("deleteSlideSubshape", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapeSlideIndex) {
	std::shared_ptr<DeleteSlideSubshapeRequest> request = getDeleteSlideSubshapeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlideSubshape", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlideSubshape", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapePath) {
	std::shared_ptr<DeleteSlideSubshapeRequest> request = getDeleteSlideSubshapeRequest();
	request->setPath(utils->getInvalidTestValue("deleteSlideSubshape", "path", request->getPath()));
	utils->initialize("deleteSlideSubshape", "path", request->getPath());

	bool failed = true;
	try
	{
		api->deleteSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapeShapeIndex) {
	std::shared_ptr<DeleteSlideSubshapeRequest> request = getDeleteSlideSubshapeRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteSlideSubshape", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteSlideSubshape", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapePassword) {
	std::shared_ptr<DeleteSlideSubshapeRequest> request = getDeleteSlideSubshapeRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlideSubshape", "password", request->getPassword()));
	utils->initialize("deleteSlideSubshape", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapeFolder) {
	std::shared_ptr<DeleteSlideSubshapeRequest> request = getDeleteSlideSubshapeRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlideSubshape", "folder", request->getFolder()));
	utils->initialize("deleteSlideSubshape", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapeStorage) {
	std::shared_ptr<DeleteSlideSubshapeRequest> request = getDeleteSlideSubshapeRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlideSubshape", "storage", request->getStorage()));
	utils->initialize("deleteSlideSubshape", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshape", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapes) {
	std::shared_ptr<DeleteSlideSubshapesRequest> request = getDeleteSlideSubshapesRequest();
	utils->initialize("deleteSlideSubshapes", "");
	std::shared_ptr<Shapes> result = api->deleteSlideSubshapes(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideSubshapesName) {
	std::shared_ptr<DeleteSlideSubshapesRequest> request = getDeleteSlideSubshapesRequest();
	request->setName(utils->getInvalidTestValue("deleteSlideSubshapes", "name", request->getName()));
	utils->initialize("deleteSlideSubshapes", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesSlideIndex) {
	std::shared_ptr<DeleteSlideSubshapesRequest> request = getDeleteSlideSubshapesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlideSubshapes", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlideSubshapes", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesPath) {
	std::shared_ptr<DeleteSlideSubshapesRequest> request = getDeleteSlideSubshapesRequest();
	request->setPath(utils->getInvalidTestValue("deleteSlideSubshapes", "path", request->getPath()));
	utils->initialize("deleteSlideSubshapes", "path", request->getPath());

	bool failed = true;
	try
	{
		api->deleteSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesShapes) {
	std::shared_ptr<DeleteSlideSubshapesRequest> request = getDeleteSlideSubshapesRequest();
	request->setShapes(utils->getInvalidIntVectorTestValue("deleteSlideSubshapes", "shapes", request->getShapes()));
	utils->initialize("deleteSlideSubshapes", "shapes", request->getShapes());

	bool failed = true;
	try
	{
		api->deleteSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "shapes");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "shapes", request->getShapes());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "shapes");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "shapes", request->getShapes());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "shapes"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesPassword) {
	std::shared_ptr<DeleteSlideSubshapesRequest> request = getDeleteSlideSubshapesRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlideSubshapes", "password", request->getPassword()));
	utils->initialize("deleteSlideSubshapes", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesFolder) {
	std::shared_ptr<DeleteSlideSubshapesRequest> request = getDeleteSlideSubshapesRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlideSubshapes", "folder", request->getFolder()));
	utils->initialize("deleteSlideSubshapes", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideSubshapesStorage) {
	std::shared_ptr<DeleteSlideSubshapesRequest> request = getDeleteSlideSubshapesRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlideSubshapes", "storage", request->getStorage()));
	utils->initialize("deleteSlideSubshapes", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideSubshapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideSubshapes", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideSubshapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesList) {
	std::shared_ptr<DeleteSlidesCleanSlidesListRequest> request = getDeleteSlidesCleanSlidesListRequest();
	utils->initialize("deleteSlidesCleanSlidesList", "");
	std::shared_ptr<Slides> result = api->deleteSlidesCleanSlidesList(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesListName) {
	std::shared_ptr<DeleteSlidesCleanSlidesListRequest> request = getDeleteSlidesCleanSlidesListRequest();
	request->setName(utils->getInvalidTestValue("deleteSlidesCleanSlidesList", "name", request->getName()));
	utils->initialize("deleteSlidesCleanSlidesList", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlidesCleanSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesCleanSlidesList", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesListSlides) {
	std::shared_ptr<DeleteSlidesCleanSlidesListRequest> request = getDeleteSlidesCleanSlidesListRequest();
	request->setSlides(utils->getInvalidIntVectorTestValue("deleteSlidesCleanSlidesList", "slides", request->getSlides()));
	utils->initialize("deleteSlidesCleanSlidesList", "slides", request->getSlides());

	bool failed = true;
	try
	{
		api->deleteSlidesCleanSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "slides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "slides", request->getSlides());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "slides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "slides", request->getSlides());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesCleanSlidesList", "slides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesListPassword) {
	std::shared_ptr<DeleteSlidesCleanSlidesListRequest> request = getDeleteSlidesCleanSlidesListRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlidesCleanSlidesList", "password", request->getPassword()));
	utils->initialize("deleteSlidesCleanSlidesList", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlidesCleanSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesCleanSlidesList", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesListFolder) {
	std::shared_ptr<DeleteSlidesCleanSlidesListRequest> request = getDeleteSlidesCleanSlidesListRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlidesCleanSlidesList", "folder", request->getFolder()));
	utils->initialize("deleteSlidesCleanSlidesList", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlidesCleanSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesCleanSlidesList", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesCleanSlidesListStorage) {
	std::shared_ptr<DeleteSlidesCleanSlidesListRequest> request = getDeleteSlidesCleanSlidesListRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlidesCleanSlidesList", "storage", request->getStorage()));
	utils->initialize("deleteSlidesCleanSlidesList", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlidesCleanSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesCleanSlidesList", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesCleanSlidesList", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesCleanSlidesList", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentProperties) {
	std::shared_ptr<DeleteSlidesDocumentPropertiesRequest> request = getDeleteSlidesDocumentPropertiesRequest();
	utils->initialize("deleteSlidesDocumentProperties", "");
	std::shared_ptr<DocumentProperties> result = api->deleteSlidesDocumentProperties(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertiesName) {
	std::shared_ptr<DeleteSlidesDocumentPropertiesRequest> request = getDeleteSlidesDocumentPropertiesRequest();
	request->setName(utils->getInvalidTestValue("deleteSlidesDocumentProperties", "name", request->getName()));
	utils->initialize("deleteSlidesDocumentProperties", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlidesDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertiesPassword) {
	std::shared_ptr<DeleteSlidesDocumentPropertiesRequest> request = getDeleteSlidesDocumentPropertiesRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlidesDocumentProperties", "password", request->getPassword()));
	utils->initialize("deleteSlidesDocumentProperties", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlidesDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertiesFolder) {
	std::shared_ptr<DeleteSlidesDocumentPropertiesRequest> request = getDeleteSlidesDocumentPropertiesRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlidesDocumentProperties", "folder", request->getFolder()));
	utils->initialize("deleteSlidesDocumentProperties", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlidesDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertiesStorage) {
	std::shared_ptr<DeleteSlidesDocumentPropertiesRequest> request = getDeleteSlidesDocumentPropertiesRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlidesDocumentProperties", "storage", request->getStorage()));
	utils->initialize("deleteSlidesDocumentProperties", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlidesDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperties", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentProperty) {
	std::shared_ptr<DeleteSlidesDocumentPropertyRequest> request = getDeleteSlidesDocumentPropertyRequest();
	utils->initialize("deleteSlidesDocumentProperty", "");
	std::shared_ptr<DocumentProperties> result = api->deleteSlidesDocumentProperty(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertyName) {
	std::shared_ptr<DeleteSlidesDocumentPropertyRequest> request = getDeleteSlidesDocumentPropertyRequest();
	request->setName(utils->getInvalidTestValue("deleteSlidesDocumentProperty", "name", request->getName()));
	utils->initialize("deleteSlidesDocumentProperty", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlidesDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperty", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertyPropertyName) {
	std::shared_ptr<DeleteSlidesDocumentPropertyRequest> request = getDeleteSlidesDocumentPropertyRequest();
	request->setPropertyName(utils->getInvalidTestValue("deleteSlidesDocumentProperty", "propertyName", request->getPropertyName()));
	utils->initialize("deleteSlidesDocumentProperty", "propertyName", request->getPropertyName());

	bool failed = true;
	try
	{
		api->deleteSlidesDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "propertyName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "propertyName", request->getPropertyName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "propertyName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "propertyName", request->getPropertyName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperty", "propertyName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertyPassword) {
	std::shared_ptr<DeleteSlidesDocumentPropertyRequest> request = getDeleteSlidesDocumentPropertyRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlidesDocumentProperty", "password", request->getPassword()));
	utils->initialize("deleteSlidesDocumentProperty", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlidesDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperty", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertyFolder) {
	std::shared_ptr<DeleteSlidesDocumentPropertyRequest> request = getDeleteSlidesDocumentPropertyRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlidesDocumentProperty", "folder", request->getFolder()));
	utils->initialize("deleteSlidesDocumentProperty", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlidesDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperty", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesDocumentPropertyStorage) {
	std::shared_ptr<DeleteSlidesDocumentPropertyRequest> request = getDeleteSlidesDocumentPropertyRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlidesDocumentProperty", "storage", request->getStorage()));
	utils->initialize("deleteSlidesDocumentProperty", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlidesDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesDocumentProperty", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesDocumentProperty", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesDocumentProperty", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackground) {
	std::shared_ptr<DeleteSlidesSlideBackgroundRequest> request = getDeleteSlidesSlideBackgroundRequest();
	utils->initialize("deleteSlidesSlideBackground", "");
	std::shared_ptr<SlideBackground> result = api->deleteSlidesSlideBackground(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackgroundName) {
	std::shared_ptr<DeleteSlidesSlideBackgroundRequest> request = getDeleteSlidesSlideBackgroundRequest();
	request->setName(utils->getInvalidTestValue("deleteSlidesSlideBackground", "name", request->getName()));
	utils->initialize("deleteSlidesSlideBackground", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesSlideBackground", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackgroundSlideIndex) {
	std::shared_ptr<DeleteSlidesSlideBackgroundRequest> request = getDeleteSlidesSlideBackgroundRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSlidesSlideBackground", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSlidesSlideBackground", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesSlideBackground", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackgroundPassword) {
	std::shared_ptr<DeleteSlidesSlideBackgroundRequest> request = getDeleteSlidesSlideBackgroundRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSlidesSlideBackground", "password", request->getPassword()));
	utils->initialize("deleteSlidesSlideBackground", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesSlideBackground", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackgroundFolder) {
	std::shared_ptr<DeleteSlidesSlideBackgroundRequest> request = getDeleteSlidesSlideBackgroundRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSlidesSlideBackground", "folder", request->getFolder()));
	utils->initialize("deleteSlidesSlideBackground", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesSlideBackground", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesSlideBackgroundStorage) {
	std::shared_ptr<DeleteSlidesSlideBackgroundRequest> request = getDeleteSlidesSlideBackgroundRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSlidesSlideBackground", "storage", request->getStorage()));
	utils->initialize("deleteSlidesSlideBackground", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlidesSlideBackground", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlidesSlideBackground", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlidesSlideBackground", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraph) {
	std::shared_ptr<DeleteSubshapeParagraphRequest> request = getDeleteSubshapeParagraphRequest();
	utils->initialize("deleteSubshapeParagraph", "");
	std::shared_ptr<Paragraphs> result = api->deleteSubshapeParagraph(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphName) {
	std::shared_ptr<DeleteSubshapeParagraphRequest> request = getDeleteSubshapeParagraphRequest();
	request->setName(utils->getInvalidTestValue("deleteSubshapeParagraph", "name", request->getName()));
	utils->initialize("deleteSubshapeParagraph", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphSlideIndex) {
	std::shared_ptr<DeleteSubshapeParagraphRequest> request = getDeleteSubshapeParagraphRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSubshapeParagraph", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSubshapeParagraph", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphPath) {
	std::shared_ptr<DeleteSubshapeParagraphRequest> request = getDeleteSubshapeParagraphRequest();
	request->setPath(utils->getInvalidTestValue("deleteSubshapeParagraph", "path", request->getPath()));
	utils->initialize("deleteSubshapeParagraph", "path", request->getPath());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphShapeIndex) {
	std::shared_ptr<DeleteSubshapeParagraphRequest> request = getDeleteSubshapeParagraphRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteSubshapeParagraph", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteSubshapeParagraph", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphParagraphIndex) {
	std::shared_ptr<DeleteSubshapeParagraphRequest> request = getDeleteSubshapeParagraphRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("deleteSubshapeParagraph", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("deleteSubshapeParagraph", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphPassword) {
	std::shared_ptr<DeleteSubshapeParagraphRequest> request = getDeleteSubshapeParagraphRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSubshapeParagraph", "password", request->getPassword()));
	utils->initialize("deleteSubshapeParagraph", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphFolder) {
	std::shared_ptr<DeleteSubshapeParagraphRequest> request = getDeleteSubshapeParagraphRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSubshapeParagraph", "folder", request->getFolder()));
	utils->initialize("deleteSubshapeParagraph", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphStorage) {
	std::shared_ptr<DeleteSubshapeParagraphRequest> request = getDeleteSubshapeParagraphRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSubshapeParagraph", "storage", request->getStorage()));
	utils->initialize("deleteSubshapeParagraph", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphs) {
	std::shared_ptr<DeleteSubshapeParagraphsRequest> request = getDeleteSubshapeParagraphsRequest();
	utils->initialize("deleteSubshapeParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->deleteSubshapeParagraphs(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsName) {
	std::shared_ptr<DeleteSubshapeParagraphsRequest> request = getDeleteSubshapeParagraphsRequest();
	request->setName(utils->getInvalidTestValue("deleteSubshapeParagraphs", "name", request->getName()));
	utils->initialize("deleteSubshapeParagraphs", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsSlideIndex) {
	std::shared_ptr<DeleteSubshapeParagraphsRequest> request = getDeleteSubshapeParagraphsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSubshapeParagraphs", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSubshapeParagraphs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsPath) {
	std::shared_ptr<DeleteSubshapeParagraphsRequest> request = getDeleteSubshapeParagraphsRequest();
	request->setPath(utils->getInvalidTestValue("deleteSubshapeParagraphs", "path", request->getPath()));
	utils->initialize("deleteSubshapeParagraphs", "path", request->getPath());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsShapeIndex) {
	std::shared_ptr<DeleteSubshapeParagraphsRequest> request = getDeleteSubshapeParagraphsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteSubshapeParagraphs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteSubshapeParagraphs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsParagraphs) {
	std::shared_ptr<DeleteSubshapeParagraphsRequest> request = getDeleteSubshapeParagraphsRequest();
	request->setParagraphs(utils->getInvalidIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs", request->getParagraphs()));
	utils->initialize("deleteSubshapeParagraphs", "paragraphs", request->getParagraphs());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "paragraphs");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "paragraphs", request->getParagraphs());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "paragraphs");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "paragraphs", request->getParagraphs());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "paragraphs"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsPassword) {
	std::shared_ptr<DeleteSubshapeParagraphsRequest> request = getDeleteSubshapeParagraphsRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSubshapeParagraphs", "password", request->getPassword()));
	utils->initialize("deleteSubshapeParagraphs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsFolder) {
	std::shared_ptr<DeleteSubshapeParagraphsRequest> request = getDeleteSubshapeParagraphsRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSubshapeParagraphs", "folder", request->getFolder()));
	utils->initialize("deleteSubshapeParagraphs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsStorage) {
	std::shared_ptr<DeleteSubshapeParagraphsRequest> request = getDeleteSubshapeParagraphsRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSubshapeParagraphs", "storage", request->getStorage()));
	utils->initialize("deleteSubshapeParagraphs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortion) {
	std::shared_ptr<DeleteSubshapePortionRequest> request = getDeleteSubshapePortionRequest();
	utils->initialize("deleteSubshapePortion", "");
	std::shared_ptr<Portions> result = api->deleteSubshapePortion(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapePortionName) {
	std::shared_ptr<DeleteSubshapePortionRequest> request = getDeleteSubshapePortionRequest();
	request->setName(utils->getInvalidTestValue("deleteSubshapePortion", "name", request->getName()));
	utils->initialize("deleteSubshapePortion", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionSlideIndex) {
	std::shared_ptr<DeleteSubshapePortionRequest> request = getDeleteSubshapePortionRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSubshapePortion", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSubshapePortion", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionPath) {
	std::shared_ptr<DeleteSubshapePortionRequest> request = getDeleteSubshapePortionRequest();
	request->setPath(utils->getInvalidTestValue("deleteSubshapePortion", "path", request->getPath()));
	utils->initialize("deleteSubshapePortion", "path", request->getPath());

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionShapeIndex) {
	std::shared_ptr<DeleteSubshapePortionRequest> request = getDeleteSubshapePortionRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteSubshapePortion", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteSubshapePortion", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionParagraphIndex) {
	std::shared_ptr<DeleteSubshapePortionRequest> request = getDeleteSubshapePortionRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("deleteSubshapePortion", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("deleteSubshapePortion", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionPortionIndex) {
	std::shared_ptr<DeleteSubshapePortionRequest> request = getDeleteSubshapePortionRequest();
	request->setPortionIndex(utils->getInvalidIntTestValue("deleteSubshapePortion", "portionIndex", request->getPortionIndex()));
	utils->initialize("deleteSubshapePortion", "portionIndex", request->getPortionIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "portionIndex", request->getPortionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "portionIndex", request->getPortionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionPassword) {
	std::shared_ptr<DeleteSubshapePortionRequest> request = getDeleteSubshapePortionRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSubshapePortion", "password", request->getPassword()));
	utils->initialize("deleteSubshapePortion", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionFolder) {
	std::shared_ptr<DeleteSubshapePortionRequest> request = getDeleteSubshapePortionRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSubshapePortion", "folder", request->getFolder()));
	utils->initialize("deleteSubshapePortion", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionStorage) {
	std::shared_ptr<DeleteSubshapePortionRequest> request = getDeleteSubshapePortionRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSubshapePortion", "storage", request->getStorage()));
	utils->initialize("deleteSubshapePortion", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortions) {
	std::shared_ptr<DeleteSubshapePortionsRequest> request = getDeleteSubshapePortionsRequest();
	utils->initialize("deleteSubshapePortions", "");
	std::shared_ptr<Portions> result = api->deleteSubshapePortions(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapePortionsName) {
	std::shared_ptr<DeleteSubshapePortionsRequest> request = getDeleteSubshapePortionsRequest();
	request->setName(utils->getInvalidTestValue("deleteSubshapePortions", "name", request->getName()));
	utils->initialize("deleteSubshapePortions", "name", request->getName());

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsSlideIndex) {
	std::shared_ptr<DeleteSubshapePortionsRequest> request = getDeleteSubshapePortionsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("deleteSubshapePortions", "slideIndex", request->getSlideIndex()));
	utils->initialize("deleteSubshapePortions", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsPath) {
	std::shared_ptr<DeleteSubshapePortionsRequest> request = getDeleteSubshapePortionsRequest();
	request->setPath(utils->getInvalidTestValue("deleteSubshapePortions", "path", request->getPath()));
	utils->initialize("deleteSubshapePortions", "path", request->getPath());

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsShapeIndex) {
	std::shared_ptr<DeleteSubshapePortionsRequest> request = getDeleteSubshapePortionsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("deleteSubshapePortions", "shapeIndex", request->getShapeIndex()));
	utils->initialize("deleteSubshapePortions", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsParagraphIndex) {
	std::shared_ptr<DeleteSubshapePortionsRequest> request = getDeleteSubshapePortionsRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("deleteSubshapePortions", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("deleteSubshapePortions", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsPortions) {
	std::shared_ptr<DeleteSubshapePortionsRequest> request = getDeleteSubshapePortionsRequest();
	request->setPortions(utils->getInvalidIntVectorTestValue("deleteSubshapePortions", "portions", request->getPortions()));
	utils->initialize("deleteSubshapePortions", "portions", request->getPortions());

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "portions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "portions", request->getPortions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "portions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "portions", request->getPortions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "portions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsPassword) {
	std::shared_ptr<DeleteSubshapePortionsRequest> request = getDeleteSubshapePortionsRequest();
	request->setPassword(utils->getInvalidTestValue("deleteSubshapePortions", "password", request->getPassword()));
	utils->initialize("deleteSubshapePortions", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsFolder) {
	std::shared_ptr<DeleteSubshapePortionsRequest> request = getDeleteSubshapePortionsRequest();
	request->setFolder(utils->getInvalidTestValue("deleteSubshapePortions", "folder", request->getFolder()));
	utils->initialize("deleteSubshapePortions", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsStorage) {
	std::shared_ptr<DeleteSubshapePortionsRequest> request = getDeleteSubshapePortionsRequest();
	request->setStorage(utils->getInvalidTestValue("deleteSubshapePortions", "storage", request->getStorage()));
	utils->initialize("deleteSubshapePortions", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFile) {
	std::shared_ptr<DownloadFileRequest> request = getDownloadFileRequest();
	utils->initialize("downloadFile", "");
	HttpContent result = api->downloadFile(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadFilePath) {
	std::shared_ptr<DownloadFileRequest> request = getDownloadFileRequest();
	request->setPath(utils->getInvalidTestValue("downloadFile", "path", request->getPath()));
	utils->initialize("downloadFile", "path", request->getPath());

	bool failed = true;
	try
	{
		api->downloadFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFileStorageName) {
	std::shared_ptr<DownloadFileRequest> request = getDownloadFileRequest();
	request->setStorageName(utils->getInvalidTestValue("downloadFile", "storageName", request->getStorageName()));
	utils->initialize("downloadFile", "storageName", request->getStorageName());

	bool failed = true;
	try
	{
		api->downloadFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "storageName", request->getStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "storageName", request->getStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFileVersionId) {
	std::shared_ptr<DownloadFileRequest> request = getDownloadFileRequest();
	request->setVersionId(utils->getInvalidTestValue("downloadFile", "versionId", request->getVersionId()));
	utils->initialize("downloadFile", "versionId", request->getVersionId());

	bool failed = true;
	try
	{
		api->downloadFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "versionId", request->getVersionId());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "versionId", request->getVersionId());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDiscUsage) {
	std::shared_ptr<GetDiscUsageRequest> request = getGetDiscUsageRequest();
	utils->initialize("getDiscUsage", "");
	std::shared_ptr<DiscUsage> result = api->getDiscUsage(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getDiscUsageStorageName) {
	std::shared_ptr<GetDiscUsageRequest> request = getGetDiscUsageRequest();
	request->setStorageName(utils->getInvalidTestValue("getDiscUsage", "storageName", request->getStorageName()));
	utils->initialize("getDiscUsage", "storageName", request->getStorageName());

	bool failed = true;
	try
	{
		api->getDiscUsage(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDiscUsage", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDiscUsage", "storageName", request->getStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDiscUsage", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDiscUsage", "storageName", request->getStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDiscUsage", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFileVersions) {
	std::shared_ptr<GetFileVersionsRequest> request = getGetFileVersionsRequest();
	utils->initialize("getFileVersions", "");
	std::shared_ptr<FileVersions> result = api->getFileVersions(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFileVersionsPath) {
	std::shared_ptr<GetFileVersionsRequest> request = getGetFileVersionsRequest();
	request->setPath(utils->getInvalidTestValue("getFileVersions", "path", request->getPath()));
	utils->initialize("getFileVersions", "path", request->getPath());

	bool failed = true;
	try
	{
		api->getFileVersions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFileVersions", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFileVersionsStorageName) {
	std::shared_ptr<GetFileVersionsRequest> request = getGetFileVersionsRequest();
	request->setStorageName(utils->getInvalidTestValue("getFileVersions", "storageName", request->getStorageName()));
	utils->initialize("getFileVersions", "storageName", request->getStorageName());

	bool failed = true;
	try
	{
		api->getFileVersions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "storageName", request->getStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "storageName", request->getStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFileVersions", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFilesList) {
	std::shared_ptr<GetFilesListRequest> request = getGetFilesListRequest();
	utils->initialize("getFilesList", "");
	std::shared_ptr<FilesList> result = api->getFilesList(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFilesListPath) {
	std::shared_ptr<GetFilesListRequest> request = getGetFilesListRequest();
	request->setPath(utils->getInvalidTestValue("getFilesList", "path", request->getPath()));
	utils->initialize("getFilesList", "path", request->getPath());

	bool failed = true;
	try
	{
		api->getFilesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFilesList", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFilesList", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFilesList", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFilesList", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFilesList", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFilesListStorageName) {
	std::shared_ptr<GetFilesListRequest> request = getGetFilesListRequest();
	request->setStorageName(utils->getInvalidTestValue("getFilesList", "storageName", request->getStorageName()));
	utils->initialize("getFilesList", "storageName", request->getStorageName());

	bool failed = true;
	try
	{
		api->getFilesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFilesList", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFilesList", "storageName", request->getStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFilesList", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFilesList", "storageName", request->getStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFilesList", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlide) {
	std::shared_ptr<GetLayoutSlideRequest> request = getGetLayoutSlideRequest();
	utils->initialize("getLayoutSlide", "");
	std::shared_ptr<LayoutSlide> result = api->getLayoutSlide(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getLayoutSlideName) {
	std::shared_ptr<GetLayoutSlideRequest> request = getGetLayoutSlideRequest();
	request->setName(utils->getInvalidTestValue("getLayoutSlide", "name", request->getName()));
	utils->initialize("getLayoutSlide", "name", request->getName());

	bool failed = true;
	try
	{
		api->getLayoutSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideSlideIndex) {
	std::shared_ptr<GetLayoutSlideRequest> request = getGetLayoutSlideRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getLayoutSlide", "slideIndex", request->getSlideIndex()));
	utils->initialize("getLayoutSlide", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getLayoutSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidePassword) {
	std::shared_ptr<GetLayoutSlideRequest> request = getGetLayoutSlideRequest();
	request->setPassword(utils->getInvalidTestValue("getLayoutSlide", "password", request->getPassword()));
	utils->initialize("getLayoutSlide", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getLayoutSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideFolder) {
	std::shared_ptr<GetLayoutSlideRequest> request = getGetLayoutSlideRequest();
	request->setFolder(utils->getInvalidTestValue("getLayoutSlide", "folder", request->getFolder()));
	utils->initialize("getLayoutSlide", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getLayoutSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideStorage) {
	std::shared_ptr<GetLayoutSlideRequest> request = getGetLayoutSlideRequest();
	request->setStorage(utils->getInvalidTestValue("getLayoutSlide", "storage", request->getStorage()));
	utils->initialize("getLayoutSlide", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getLayoutSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesList) {
	std::shared_ptr<GetLayoutSlidesListRequest> request = getGetLayoutSlidesListRequest();
	utils->initialize("getLayoutSlidesList", "");
	std::shared_ptr<LayoutSlides> result = api->getLayoutSlidesList(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getLayoutSlidesListName) {
	std::shared_ptr<GetLayoutSlidesListRequest> request = getGetLayoutSlidesListRequest();
	request->setName(utils->getInvalidTestValue("getLayoutSlidesList", "name", request->getName()));
	utils->initialize("getLayoutSlidesList", "name", request->getName());

	bool failed = true;
	try
	{
		api->getLayoutSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlidesList", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesListPassword) {
	std::shared_ptr<GetLayoutSlidesListRequest> request = getGetLayoutSlidesListRequest();
	request->setPassword(utils->getInvalidTestValue("getLayoutSlidesList", "password", request->getPassword()));
	utils->initialize("getLayoutSlidesList", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getLayoutSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlidesList", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesListFolder) {
	std::shared_ptr<GetLayoutSlidesListRequest> request = getGetLayoutSlidesListRequest();
	request->setFolder(utils->getInvalidTestValue("getLayoutSlidesList", "folder", request->getFolder()));
	utils->initialize("getLayoutSlidesList", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getLayoutSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlidesList", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesListStorage) {
	std::shared_ptr<GetLayoutSlidesListRequest> request = getGetLayoutSlidesListRequest();
	request->setStorage(utils->getInvalidTestValue("getLayoutSlidesList", "storage", request->getStorage()));
	utils->initialize("getLayoutSlidesList", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getLayoutSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlidesList", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlidesList", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlidesList", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlide) {
	std::shared_ptr<GetMasterSlideRequest> request = getGetMasterSlideRequest();
	utils->initialize("getMasterSlide", "");
	std::shared_ptr<MasterSlide> result = api->getMasterSlide(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getMasterSlideName) {
	std::shared_ptr<GetMasterSlideRequest> request = getGetMasterSlideRequest();
	request->setName(utils->getInvalidTestValue("getMasterSlide", "name", request->getName()));
	utils->initialize("getMasterSlide", "name", request->getName());

	bool failed = true;
	try
	{
		api->getMasterSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideSlideIndex) {
	std::shared_ptr<GetMasterSlideRequest> request = getGetMasterSlideRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getMasterSlide", "slideIndex", request->getSlideIndex()));
	utils->initialize("getMasterSlide", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getMasterSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidePassword) {
	std::shared_ptr<GetMasterSlideRequest> request = getGetMasterSlideRequest();
	request->setPassword(utils->getInvalidTestValue("getMasterSlide", "password", request->getPassword()));
	utils->initialize("getMasterSlide", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getMasterSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideFolder) {
	std::shared_ptr<GetMasterSlideRequest> request = getGetMasterSlideRequest();
	request->setFolder(utils->getInvalidTestValue("getMasterSlide", "folder", request->getFolder()));
	utils->initialize("getMasterSlide", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getMasterSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideStorage) {
	std::shared_ptr<GetMasterSlideRequest> request = getGetMasterSlideRequest();
	request->setStorage(utils->getInvalidTestValue("getMasterSlide", "storage", request->getStorage()));
	utils->initialize("getMasterSlide", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getMasterSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesList) {
	std::shared_ptr<GetMasterSlidesListRequest> request = getGetMasterSlidesListRequest();
	utils->initialize("getMasterSlidesList", "");
	std::shared_ptr<MasterSlides> result = api->getMasterSlidesList(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getMasterSlidesListName) {
	std::shared_ptr<GetMasterSlidesListRequest> request = getGetMasterSlidesListRequest();
	request->setName(utils->getInvalidTestValue("getMasterSlidesList", "name", request->getName()));
	utils->initialize("getMasterSlidesList", "name", request->getName());

	bool failed = true;
	try
	{
		api->getMasterSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlidesList", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesListPassword) {
	std::shared_ptr<GetMasterSlidesListRequest> request = getGetMasterSlidesListRequest();
	request->setPassword(utils->getInvalidTestValue("getMasterSlidesList", "password", request->getPassword()));
	utils->initialize("getMasterSlidesList", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getMasterSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlidesList", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesListFolder) {
	std::shared_ptr<GetMasterSlidesListRequest> request = getGetMasterSlidesListRequest();
	request->setFolder(utils->getInvalidTestValue("getMasterSlidesList", "folder", request->getFolder()));
	utils->initialize("getMasterSlidesList", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getMasterSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlidesList", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesListStorage) {
	std::shared_ptr<GetMasterSlidesListRequest> request = getGetMasterSlidesListRequest();
	request->setStorage(utils->getInvalidTestValue("getMasterSlidesList", "storage", request->getStorage()));
	utils->initialize("getMasterSlidesList", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getMasterSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlidesList", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlidesList", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlidesList", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlide) {
	std::shared_ptr<GetNotesSlideRequest> request = getGetNotesSlideRequest();
	utils->initialize("getNotesSlide", "");
	std::shared_ptr<NotesSlide> result = api->getNotesSlide(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideName) {
	std::shared_ptr<GetNotesSlideRequest> request = getGetNotesSlideRequest();
	request->setName(utils->getInvalidTestValue("getNotesSlide", "name", request->getName()));
	utils->initialize("getNotesSlide", "name", request->getName());

	bool failed = true;
	try
	{
		api->getNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideSlideIndex) {
	std::shared_ptr<GetNotesSlideRequest> request = getGetNotesSlideRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getNotesSlide", "slideIndex", request->getSlideIndex()));
	utils->initialize("getNotesSlide", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePassword) {
	std::shared_ptr<GetNotesSlideRequest> request = getGetNotesSlideRequest();
	request->setPassword(utils->getInvalidTestValue("getNotesSlide", "password", request->getPassword()));
	utils->initialize("getNotesSlide", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideFolder) {
	std::shared_ptr<GetNotesSlideRequest> request = getGetNotesSlideRequest();
	request->setFolder(utils->getInvalidTestValue("getNotesSlide", "folder", request->getFolder()));
	utils->initialize("getNotesSlide", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideStorage) {
	std::shared_ptr<GetNotesSlideRequest> request = getGetNotesSlideRequest();
	request->setStorage(utils->getInvalidTestValue("getNotesSlide", "storage", request->getStorage()));
	utils->initialize("getNotesSlide", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideExists) {
	std::shared_ptr<GetNotesSlideExistsRequest> request = getGetNotesSlideExistsRequest();
	utils->initialize("getNotesSlideExists", "");
	std::shared_ptr<EntityExists> result = api->getNotesSlideExists(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideExistsName) {
	std::shared_ptr<GetNotesSlideExistsRequest> request = getGetNotesSlideExistsRequest();
	request->setName(utils->getInvalidTestValue("getNotesSlideExists", "name", request->getName()));
	utils->initialize("getNotesSlideExists", "name", request->getName());

	bool failed = true;
	try
	{
		api->getNotesSlideExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideExists", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideExistsSlideIndex) {
	std::shared_ptr<GetNotesSlideExistsRequest> request = getGetNotesSlideExistsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getNotesSlideExists", "slideIndex", request->getSlideIndex()));
	utils->initialize("getNotesSlideExists", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideExists", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideExistsPassword) {
	std::shared_ptr<GetNotesSlideExistsRequest> request = getGetNotesSlideExistsRequest();
	request->setPassword(utils->getInvalidTestValue("getNotesSlideExists", "password", request->getPassword()));
	utils->initialize("getNotesSlideExists", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getNotesSlideExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideExists", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideExistsFolder) {
	std::shared_ptr<GetNotesSlideExistsRequest> request = getGetNotesSlideExistsRequest();
	request->setFolder(utils->getInvalidTestValue("getNotesSlideExists", "folder", request->getFolder()));
	utils->initialize("getNotesSlideExists", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getNotesSlideExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideExists", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideExistsStorage) {
	std::shared_ptr<GetNotesSlideExistsRequest> request = getGetNotesSlideExistsRequest();
	request->setStorage(utils->getInvalidTestValue("getNotesSlideExists", "storage", request->getStorage()));
	utils->initialize("getNotesSlideExists", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getNotesSlideExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideExists", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideExists", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideExists", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooter) {
	std::shared_ptr<GetNotesSlideHeaderFooterRequest> request = getGetNotesSlideHeaderFooterRequest();
	utils->initialize("getNotesSlideHeaderFooter", "");
	std::shared_ptr<NotesSlideHeaderFooter> result = api->getNotesSlideHeaderFooter(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterName) {
	std::shared_ptr<GetNotesSlideHeaderFooterRequest> request = getGetNotesSlideHeaderFooterRequest();
	request->setName(utils->getInvalidTestValue("getNotesSlideHeaderFooter", "name", request->getName()));
	utils->initialize("getNotesSlideHeaderFooter", "name", request->getName());

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterSlideIndex) {
	std::shared_ptr<GetNotesSlideHeaderFooterRequest> request = getGetNotesSlideHeaderFooterRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getNotesSlideHeaderFooter", "slideIndex", request->getSlideIndex()));
	utils->initialize("getNotesSlideHeaderFooter", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterPassword) {
	std::shared_ptr<GetNotesSlideHeaderFooterRequest> request = getGetNotesSlideHeaderFooterRequest();
	request->setPassword(utils->getInvalidTestValue("getNotesSlideHeaderFooter", "password", request->getPassword()));
	utils->initialize("getNotesSlideHeaderFooter", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterStorage) {
	std::shared_ptr<GetNotesSlideHeaderFooterRequest> request = getGetNotesSlideHeaderFooterRequest();
	request->setStorage(utils->getInvalidTestValue("getNotesSlideHeaderFooter", "storage", request->getStorage()));
	utils->initialize("getNotesSlideHeaderFooter", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterFolder) {
	std::shared_ptr<GetNotesSlideHeaderFooterRequest> request = getGetNotesSlideHeaderFooterRequest();
	request->setFolder(utils->getInvalidTestValue("getNotesSlideHeaderFooter", "folder", request->getFolder()));
	utils->initialize("getNotesSlideHeaderFooter", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShape) {
	std::shared_ptr<GetNotesSlideShapeRequest> request = getGetNotesSlideShapeRequest();
	utils->initialize("getNotesSlideShape", "");
	std::shared_ptr<ShapeBase> result = api->getNotesSlideShape(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapeName) {
	std::shared_ptr<GetNotesSlideShapeRequest> request = getGetNotesSlideShapeRequest();
	request->setName(utils->getInvalidTestValue("getNotesSlideShape", "name", request->getName()));
	utils->initialize("getNotesSlideShape", "name", request->getName());

	bool failed = true;
	try
	{
		api->getNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeSlideIndex) {
	std::shared_ptr<GetNotesSlideShapeRequest> request = getGetNotesSlideShapeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getNotesSlideShape", "slideIndex", request->getSlideIndex()));
	utils->initialize("getNotesSlideShape", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeShapeIndex) {
	std::shared_ptr<GetNotesSlideShapeRequest> request = getGetNotesSlideShapeRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getNotesSlideShape", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getNotesSlideShape", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePassword) {
	std::shared_ptr<GetNotesSlideShapeRequest> request = getGetNotesSlideShapeRequest();
	request->setPassword(utils->getInvalidTestValue("getNotesSlideShape", "password", request->getPassword()));
	utils->initialize("getNotesSlideShape", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeFolder) {
	std::shared_ptr<GetNotesSlideShapeRequest> request = getGetNotesSlideShapeRequest();
	request->setFolder(utils->getInvalidTestValue("getNotesSlideShape", "folder", request->getFolder()));
	utils->initialize("getNotesSlideShape", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeStorage) {
	std::shared_ptr<GetNotesSlideShapeRequest> request = getGetNotesSlideShapeRequest();
	request->setStorage(utils->getInvalidTestValue("getNotesSlideShape", "storage", request->getStorage()));
	utils->initialize("getNotesSlideShape", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraph) {
	std::shared_ptr<GetNotesSlideShapeParagraphRequest> request = getGetNotesSlideShapeParagraphRequest();
	utils->initialize("getNotesSlideShapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->getNotesSlideShapeParagraph(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphName) {
	std::shared_ptr<GetNotesSlideShapeParagraphRequest> request = getGetNotesSlideShapeParagraphRequest();
	request->setName(utils->getInvalidTestValue("getNotesSlideShapeParagraph", "name", request->getName()));
	utils->initialize("getNotesSlideShapeParagraph", "name", request->getName());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphSlideIndex) {
	std::shared_ptr<GetNotesSlideShapeParagraphRequest> request = getGetNotesSlideShapeParagraphRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getNotesSlideShapeParagraph", "slideIndex", request->getSlideIndex()));
	utils->initialize("getNotesSlideShapeParagraph", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphShapeIndex) {
	std::shared_ptr<GetNotesSlideShapeParagraphRequest> request = getGetNotesSlideShapeParagraphRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getNotesSlideShapeParagraph", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getNotesSlideShapeParagraph", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphParagraphIndex) {
	std::shared_ptr<GetNotesSlideShapeParagraphRequest> request = getGetNotesSlideShapeParagraphRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("getNotesSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("getNotesSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphPassword) {
	std::shared_ptr<GetNotesSlideShapeParagraphRequest> request = getGetNotesSlideShapeParagraphRequest();
	request->setPassword(utils->getInvalidTestValue("getNotesSlideShapeParagraph", "password", request->getPassword()));
	utils->initialize("getNotesSlideShapeParagraph", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphFolder) {
	std::shared_ptr<GetNotesSlideShapeParagraphRequest> request = getGetNotesSlideShapeParagraphRequest();
	request->setFolder(utils->getInvalidTestValue("getNotesSlideShapeParagraph", "folder", request->getFolder()));
	utils->initialize("getNotesSlideShapeParagraph", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphStorage) {
	std::shared_ptr<GetNotesSlideShapeParagraphRequest> request = getGetNotesSlideShapeParagraphRequest();
	request->setStorage(utils->getInvalidTestValue("getNotesSlideShapeParagraph", "storage", request->getStorage()));
	utils->initialize("getNotesSlideShapeParagraph", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraph", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphs) {
	std::shared_ptr<GetNotesSlideShapeParagraphsRequest> request = getGetNotesSlideShapeParagraphsRequest();
	utils->initialize("getNotesSlideShapeParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->getNotesSlideShapeParagraphs(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsName) {
	std::shared_ptr<GetNotesSlideShapeParagraphsRequest> request = getGetNotesSlideShapeParagraphsRequest();
	request->setName(utils->getInvalidTestValue("getNotesSlideShapeParagraphs", "name", request->getName()));
	utils->initialize("getNotesSlideShapeParagraphs", "name", request->getName());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsSlideIndex) {
	std::shared_ptr<GetNotesSlideShapeParagraphsRequest> request = getGetNotesSlideShapeParagraphsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getNotesSlideShapeParagraphs", "slideIndex", request->getSlideIndex()));
	utils->initialize("getNotesSlideShapeParagraphs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsShapeIndex) {
	std::shared_ptr<GetNotesSlideShapeParagraphsRequest> request = getGetNotesSlideShapeParagraphsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getNotesSlideShapeParagraphs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getNotesSlideShapeParagraphs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsPassword) {
	std::shared_ptr<GetNotesSlideShapeParagraphsRequest> request = getGetNotesSlideShapeParagraphsRequest();
	request->setPassword(utils->getInvalidTestValue("getNotesSlideShapeParagraphs", "password", request->getPassword()));
	utils->initialize("getNotesSlideShapeParagraphs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsFolder) {
	std::shared_ptr<GetNotesSlideShapeParagraphsRequest> request = getGetNotesSlideShapeParagraphsRequest();
	request->setFolder(utils->getInvalidTestValue("getNotesSlideShapeParagraphs", "folder", request->getFolder()));
	utils->initialize("getNotesSlideShapeParagraphs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeParagraphsStorage) {
	std::shared_ptr<GetNotesSlideShapeParagraphsRequest> request = getGetNotesSlideShapeParagraphsRequest();
	request->setStorage(utils->getInvalidTestValue("getNotesSlideShapeParagraphs", "storage", request->getStorage()));
	utils->initialize("getNotesSlideShapeParagraphs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getNotesSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapeParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapeParagraphs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapeParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortion) {
	std::shared_ptr<GetNotesSlideShapePortionRequest> request = getGetNotesSlideShapePortionRequest();
	utils->initialize("getNotesSlideShapePortion", "");
	std::shared_ptr<Portion> result = api->getNotesSlideShapePortion(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionName) {
	std::shared_ptr<GetNotesSlideShapePortionRequest> request = getGetNotesSlideShapePortionRequest();
	request->setName(utils->getInvalidTestValue("getNotesSlideShapePortion", "name", request->getName()));
	utils->initialize("getNotesSlideShapePortion", "name", request->getName());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionSlideIndex) {
	std::shared_ptr<GetNotesSlideShapePortionRequest> request = getGetNotesSlideShapePortionRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getNotesSlideShapePortion", "slideIndex", request->getSlideIndex()));
	utils->initialize("getNotesSlideShapePortion", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionShapeIndex) {
	std::shared_ptr<GetNotesSlideShapePortionRequest> request = getGetNotesSlideShapePortionRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getNotesSlideShapePortion", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getNotesSlideShapePortion", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionParagraphIndex) {
	std::shared_ptr<GetNotesSlideShapePortionRequest> request = getGetNotesSlideShapePortionRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("getNotesSlideShapePortion", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("getNotesSlideShapePortion", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionPortionIndex) {
	std::shared_ptr<GetNotesSlideShapePortionRequest> request = getGetNotesSlideShapePortionRequest();
	request->setPortionIndex(utils->getInvalidIntTestValue("getNotesSlideShapePortion", "portionIndex", request->getPortionIndex()));
	utils->initialize("getNotesSlideShapePortion", "portionIndex", request->getPortionIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "portionIndex", request->getPortionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "portionIndex", request->getPortionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionPassword) {
	std::shared_ptr<GetNotesSlideShapePortionRequest> request = getGetNotesSlideShapePortionRequest();
	request->setPassword(utils->getInvalidTestValue("getNotesSlideShapePortion", "password", request->getPassword()));
	utils->initialize("getNotesSlideShapePortion", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionFolder) {
	std::shared_ptr<GetNotesSlideShapePortionRequest> request = getGetNotesSlideShapePortionRequest();
	request->setFolder(utils->getInvalidTestValue("getNotesSlideShapePortion", "folder", request->getFolder()));
	utils->initialize("getNotesSlideShapePortion", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionStorage) {
	std::shared_ptr<GetNotesSlideShapePortionRequest> request = getGetNotesSlideShapePortionRequest();
	request->setStorage(utils->getInvalidTestValue("getNotesSlideShapePortion", "storage", request->getStorage()));
	utils->initialize("getNotesSlideShapePortion", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortion", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortions) {
	std::shared_ptr<GetNotesSlideShapePortionsRequest> request = getGetNotesSlideShapePortionsRequest();
	utils->initialize("getNotesSlideShapePortions", "");
	std::shared_ptr<Portions> result = api->getNotesSlideShapePortions(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsName) {
	std::shared_ptr<GetNotesSlideShapePortionsRequest> request = getGetNotesSlideShapePortionsRequest();
	request->setName(utils->getInvalidTestValue("getNotesSlideShapePortions", "name", request->getName()));
	utils->initialize("getNotesSlideShapePortions", "name", request->getName());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsSlideIndex) {
	std::shared_ptr<GetNotesSlideShapePortionsRequest> request = getGetNotesSlideShapePortionsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getNotesSlideShapePortions", "slideIndex", request->getSlideIndex()));
	utils->initialize("getNotesSlideShapePortions", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsShapeIndex) {
	std::shared_ptr<GetNotesSlideShapePortionsRequest> request = getGetNotesSlideShapePortionsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getNotesSlideShapePortions", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getNotesSlideShapePortions", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsParagraphIndex) {
	std::shared_ptr<GetNotesSlideShapePortionsRequest> request = getGetNotesSlideShapePortionsRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("getNotesSlideShapePortions", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("getNotesSlideShapePortions", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsPassword) {
	std::shared_ptr<GetNotesSlideShapePortionsRequest> request = getGetNotesSlideShapePortionsRequest();
	request->setPassword(utils->getInvalidTestValue("getNotesSlideShapePortions", "password", request->getPassword()));
	utils->initialize("getNotesSlideShapePortions", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsFolder) {
	std::shared_ptr<GetNotesSlideShapePortionsRequest> request = getGetNotesSlideShapePortionsRequest();
	request->setFolder(utils->getInvalidTestValue("getNotesSlideShapePortions", "folder", request->getFolder()));
	utils->initialize("getNotesSlideShapePortions", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapePortionsStorage) {
	std::shared_ptr<GetNotesSlideShapePortionsRequest> request = getGetNotesSlideShapePortionsRequest();
	request->setStorage(utils->getInvalidTestValue("getNotesSlideShapePortions", "storage", request->getStorage()));
	utils->initialize("getNotesSlideShapePortions", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getNotesSlideShapePortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapePortions", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapes) {
	std::shared_ptr<GetNotesSlideShapesRequest> request = getGetNotesSlideShapesRequest();
	utils->initialize("getNotesSlideShapes", "");
	std::shared_ptr<Shapes> result = api->getNotesSlideShapes(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapesName) {
	std::shared_ptr<GetNotesSlideShapesRequest> request = getGetNotesSlideShapesRequest();
	request->setName(utils->getInvalidTestValue("getNotesSlideShapes", "name", request->getName()));
	utils->initialize("getNotesSlideShapes", "name", request->getName());

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesSlideIndex) {
	std::shared_ptr<GetNotesSlideShapesRequest> request = getGetNotesSlideShapesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getNotesSlideShapes", "slideIndex", request->getSlideIndex()));
	utils->initialize("getNotesSlideShapes", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesPassword) {
	std::shared_ptr<GetNotesSlideShapesRequest> request = getGetNotesSlideShapesRequest();
	request->setPassword(utils->getInvalidTestValue("getNotesSlideShapes", "password", request->getPassword()));
	utils->initialize("getNotesSlideShapes", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesFolder) {
	std::shared_ptr<GetNotesSlideShapesRequest> request = getGetNotesSlideShapesRequest();
	request->setFolder(utils->getInvalidTestValue("getNotesSlideShapes", "folder", request->getFolder()));
	utils->initialize("getNotesSlideShapes", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesStorage) {
	std::shared_ptr<GetNotesSlideShapesRequest> request = getGetNotesSlideShapesRequest();
	request->setStorage(utils->getInvalidTestValue("getNotesSlideShapes", "storage", request->getStorage()));
	utils->initialize("getNotesSlideShapes", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormat) {
	std::shared_ptr<GetNotesSlideWithFormatRequest> request = getGetNotesSlideWithFormatRequest();
	utils->initialize("getNotesSlideWithFormat", "");
	HttpContent result = api->getNotesSlideWithFormat(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatName) {
	std::shared_ptr<GetNotesSlideWithFormatRequest> request = getGetNotesSlideWithFormatRequest();
	request->setName(utils->getInvalidTestValue("getNotesSlideWithFormat", "name", request->getName()));
	utils->initialize("getNotesSlideWithFormat", "name", request->getName());

	bool failed = true;
	try
	{
		api->getNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatSlideIndex) {
	std::shared_ptr<GetNotesSlideWithFormatRequest> request = getGetNotesSlideWithFormatRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getNotesSlideWithFormat", "slideIndex", request->getSlideIndex()));
	utils->initialize("getNotesSlideWithFormat", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatFormat) {
	std::shared_ptr<GetNotesSlideWithFormatRequest> request = getGetNotesSlideWithFormatRequest();
	request->setFormat(utils->getInvalidTestValue("getNotesSlideWithFormat", "format", request->getFormat()));
	utils->initialize("getNotesSlideWithFormat", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->getNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatWidth) {
	std::shared_ptr<GetNotesSlideWithFormatRequest> request = getGetNotesSlideWithFormatRequest();
	request->setWidth(utils->getInvalidIntTestValue("getNotesSlideWithFormat", "width", request->getWidth()));
	utils->initialize("getNotesSlideWithFormat", "width", request->getWidth());

	bool failed = true;
	try
	{
		api->getNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "width", request->getWidth());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "width", request->getWidth());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatHeight) {
	std::shared_ptr<GetNotesSlideWithFormatRequest> request = getGetNotesSlideWithFormatRequest();
	request->setHeight(utils->getInvalidIntTestValue("getNotesSlideWithFormat", "height", request->getHeight()));
	utils->initialize("getNotesSlideWithFormat", "height", request->getHeight());

	bool failed = true;
	try
	{
		api->getNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "height", request->getHeight());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "height", request->getHeight());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatPassword) {
	std::shared_ptr<GetNotesSlideWithFormatRequest> request = getGetNotesSlideWithFormatRequest();
	request->setPassword(utils->getInvalidTestValue("getNotesSlideWithFormat", "password", request->getPassword()));
	utils->initialize("getNotesSlideWithFormat", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatFolder) {
	std::shared_ptr<GetNotesSlideWithFormatRequest> request = getGetNotesSlideWithFormatRequest();
	request->setFolder(utils->getInvalidTestValue("getNotesSlideWithFormat", "folder", request->getFolder()));
	utils->initialize("getNotesSlideWithFormat", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatStorage) {
	std::shared_ptr<GetNotesSlideWithFormatRequest> request = getGetNotesSlideWithFormatRequest();
	request->setStorage(utils->getInvalidTestValue("getNotesSlideWithFormat", "storage", request->getStorage()));
	utils->initialize("getNotesSlideWithFormat", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideWithFormatFontsFolder) {
	std::shared_ptr<GetNotesSlideWithFormatRequest> request = getGetNotesSlideWithFormatRequest();
	request->setFontsFolder(utils->getInvalidTestValue("getNotesSlideWithFormat", "fontsFolder", request->getFontsFolder()));
	utils->initialize("getNotesSlideWithFormat", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->getNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideWithFormat", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideWithFormat", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideWithFormat", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortion) {
	std::shared_ptr<GetParagraphPortionRequest> request = getGetParagraphPortionRequest();
	utils->initialize("getParagraphPortion", "");
	std::shared_ptr<Portion> result = api->getParagraphPortion(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getParagraphPortionName) {
	std::shared_ptr<GetParagraphPortionRequest> request = getGetParagraphPortionRequest();
	request->setName(utils->getInvalidTestValue("getParagraphPortion", "name", request->getName()));
	utils->initialize("getParagraphPortion", "name", request->getName());

	bool failed = true;
	try
	{
		api->getParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionSlideIndex) {
	std::shared_ptr<GetParagraphPortionRequest> request = getGetParagraphPortionRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getParagraphPortion", "slideIndex", request->getSlideIndex()));
	utils->initialize("getParagraphPortion", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionShapeIndex) {
	std::shared_ptr<GetParagraphPortionRequest> request = getGetParagraphPortionRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getParagraphPortion", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getParagraphPortion", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionParagraphIndex) {
	std::shared_ptr<GetParagraphPortionRequest> request = getGetParagraphPortionRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("getParagraphPortion", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("getParagraphPortion", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->getParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionPortionIndex) {
	std::shared_ptr<GetParagraphPortionRequest> request = getGetParagraphPortionRequest();
	request->setPortionIndex(utils->getInvalidIntTestValue("getParagraphPortion", "portionIndex", request->getPortionIndex()));
	utils->initialize("getParagraphPortion", "portionIndex", request->getPortionIndex());

	bool failed = true;
	try
	{
		api->getParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "portionIndex", request->getPortionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "portionIndex", request->getPortionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionPassword) {
	std::shared_ptr<GetParagraphPortionRequest> request = getGetParagraphPortionRequest();
	request->setPassword(utils->getInvalidTestValue("getParagraphPortion", "password", request->getPassword()));
	utils->initialize("getParagraphPortion", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionFolder) {
	std::shared_ptr<GetParagraphPortionRequest> request = getGetParagraphPortionRequest();
	request->setFolder(utils->getInvalidTestValue("getParagraphPortion", "folder", request->getFolder()));
	utils->initialize("getParagraphPortion", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionStorage) {
	std::shared_ptr<GetParagraphPortionRequest> request = getGetParagraphPortionRequest();
	request->setStorage(utils->getInvalidTestValue("getParagraphPortion", "storage", request->getStorage()));
	utils->initialize("getParagraphPortion", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortion", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortions) {
	std::shared_ptr<GetParagraphPortionsRequest> request = getGetParagraphPortionsRequest();
	utils->initialize("getParagraphPortions", "");
	std::shared_ptr<Portions> result = api->getParagraphPortions(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getParagraphPortionsName) {
	std::shared_ptr<GetParagraphPortionsRequest> request = getGetParagraphPortionsRequest();
	request->setName(utils->getInvalidTestValue("getParagraphPortions", "name", request->getName()));
	utils->initialize("getParagraphPortions", "name", request->getName());

	bool failed = true;
	try
	{
		api->getParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsSlideIndex) {
	std::shared_ptr<GetParagraphPortionsRequest> request = getGetParagraphPortionsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getParagraphPortions", "slideIndex", request->getSlideIndex()));
	utils->initialize("getParagraphPortions", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsShapeIndex) {
	std::shared_ptr<GetParagraphPortionsRequest> request = getGetParagraphPortionsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getParagraphPortions", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getParagraphPortions", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsParagraphIndex) {
	std::shared_ptr<GetParagraphPortionsRequest> request = getGetParagraphPortionsRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("getParagraphPortions", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("getParagraphPortions", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->getParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsPassword) {
	std::shared_ptr<GetParagraphPortionsRequest> request = getGetParagraphPortionsRequest();
	request->setPassword(utils->getInvalidTestValue("getParagraphPortions", "password", request->getPassword()));
	utils->initialize("getParagraphPortions", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsFolder) {
	std::shared_ptr<GetParagraphPortionsRequest> request = getGetParagraphPortionsRequest();
	request->setFolder(utils->getInvalidTestValue("getParagraphPortions", "folder", request->getFolder()));
	utils->initialize("getParagraphPortions", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphPortionsStorage) {
	std::shared_ptr<GetParagraphPortionsRequest> request = getGetParagraphPortionsRequest();
	request->setStorage(utils->getInvalidTestValue("getParagraphPortions", "storage", request->getStorage()));
	utils->initialize("getParagraphPortions", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphPortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphPortions", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphPortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSections) {
	std::shared_ptr<GetSectionsRequest> request = getGetSectionsRequest();
	utils->initialize("getSections", "");
	std::shared_ptr<Sections> result = api->getSections(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSectionsName) {
	std::shared_ptr<GetSectionsRequest> request = getGetSectionsRequest();
	request->setName(utils->getInvalidTestValue("getSections", "name", request->getName()));
	utils->initialize("getSections", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsPassword) {
	std::shared_ptr<GetSectionsRequest> request = getGetSectionsRequest();
	request->setPassword(utils->getInvalidTestValue("getSections", "password", request->getPassword()));
	utils->initialize("getSections", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsFolder) {
	std::shared_ptr<GetSectionsRequest> request = getGetSectionsRequest();
	request->setFolder(utils->getInvalidTestValue("getSections", "folder", request->getFolder()));
	utils->initialize("getSections", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsStorage) {
	std::shared_ptr<GetSectionsRequest> request = getGetSectionsRequest();
	request->setStorage(utils->getInvalidTestValue("getSections", "storage", request->getStorage()));
	utils->initialize("getSections", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimation) {
	std::shared_ptr<GetSlideAnimationRequest> request = getGetSlideAnimationRequest();
	utils->initialize("getSlideAnimation", "");
	std::shared_ptr<SlideAnimation> result = api->getSlideAnimation(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideAnimationName) {
	std::shared_ptr<GetSlideAnimationRequest> request = getGetSlideAnimationRequest();
	request->setName(utils->getInvalidTestValue("getSlideAnimation", "name", request->getName()));
	utils->initialize("getSlideAnimation", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimationSlideIndex) {
	std::shared_ptr<GetSlideAnimationRequest> request = getGetSlideAnimationRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlideAnimation", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlideAnimation", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimationShapeIndex) {
	std::shared_ptr<GetSlideAnimationRequest> request = getGetSlideAnimationRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getSlideAnimation", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getSlideAnimation", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimationPassword) {
	std::shared_ptr<GetSlideAnimationRequest> request = getGetSlideAnimationRequest();
	request->setPassword(utils->getInvalidTestValue("getSlideAnimation", "password", request->getPassword()));
	utils->initialize("getSlideAnimation", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimationFolder) {
	std::shared_ptr<GetSlideAnimationRequest> request = getGetSlideAnimationRequest();
	request->setFolder(utils->getInvalidTestValue("getSlideAnimation", "folder", request->getFolder()));
	utils->initialize("getSlideAnimation", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideAnimationStorage) {
	std::shared_ptr<GetSlideAnimationRequest> request = getGetSlideAnimationRequest();
	request->setStorage(utils->getInvalidTestValue("getSlideAnimation", "storage", request->getStorage()));
	utils->initialize("getSlideAnimation", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideAnimation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideAnimation", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideAnimation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooter) {
	std::shared_ptr<GetSlideHeaderFooterRequest> request = getGetSlideHeaderFooterRequest();
	utils->initialize("getSlideHeaderFooter", "");
	std::shared_ptr<HeaderFooter> result = api->getSlideHeaderFooter(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideHeaderFooterName) {
	std::shared_ptr<GetSlideHeaderFooterRequest> request = getGetSlideHeaderFooterRequest();
	request->setName(utils->getInvalidTestValue("getSlideHeaderFooter", "name", request->getName()));
	utils->initialize("getSlideHeaderFooter", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterSlideIndex) {
	std::shared_ptr<GetSlideHeaderFooterRequest> request = getGetSlideHeaderFooterRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlideHeaderFooter", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlideHeaderFooter", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterPassword) {
	std::shared_ptr<GetSlideHeaderFooterRequest> request = getGetSlideHeaderFooterRequest();
	request->setPassword(utils->getInvalidTestValue("getSlideHeaderFooter", "password", request->getPassword()));
	utils->initialize("getSlideHeaderFooter", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterFolder) {
	std::shared_ptr<GetSlideHeaderFooterRequest> request = getGetSlideHeaderFooterRequest();
	request->setFolder(utils->getInvalidTestValue("getSlideHeaderFooter", "folder", request->getFolder()));
	utils->initialize("getSlideHeaderFooter", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterStorage) {
	std::shared_ptr<GetSlideHeaderFooterRequest> request = getGetSlideHeaderFooterRequest();
	request->setStorage(utils->getInvalidTestValue("getSlideHeaderFooter", "storage", request->getStorage()));
	utils->initialize("getSlideHeaderFooter", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShape) {
	std::shared_ptr<GetSlideShapeRequest> request = getGetSlideShapeRequest();
	utils->initialize("getSlideShape", "");
	std::shared_ptr<ShapeBase> result = api->getSlideShape(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideShapeName) {
	std::shared_ptr<GetSlideShapeRequest> request = getGetSlideShapeRequest();
	request->setName(utils->getInvalidTestValue("getSlideShape", "name", request->getName()));
	utils->initialize("getSlideShape", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeSlideIndex) {
	std::shared_ptr<GetSlideShapeRequest> request = getGetSlideShapeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlideShape", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlideShape", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeShapeIndex) {
	std::shared_ptr<GetSlideShapeRequest> request = getGetSlideShapeRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getSlideShape", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getSlideShape", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapePassword) {
	std::shared_ptr<GetSlideShapeRequest> request = getGetSlideShapeRequest();
	request->setPassword(utils->getInvalidTestValue("getSlideShape", "password", request->getPassword()));
	utils->initialize("getSlideShape", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeFolder) {
	std::shared_ptr<GetSlideShapeRequest> request = getGetSlideShapeRequest();
	request->setFolder(utils->getInvalidTestValue("getSlideShape", "folder", request->getFolder()));
	utils->initialize("getSlideShape", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeStorage) {
	std::shared_ptr<GetSlideShapeRequest> request = getGetSlideShapeRequest();
	request->setStorage(utils->getInvalidTestValue("getSlideShape", "storage", request->getStorage()));
	utils->initialize("getSlideShape", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShape", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraph) {
	std::shared_ptr<GetSlideShapeParagraphRequest> request = getGetSlideShapeParagraphRequest();
	utils->initialize("getSlideShapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->getSlideShapeParagraph(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideShapeParagraphName) {
	std::shared_ptr<GetSlideShapeParagraphRequest> request = getGetSlideShapeParagraphRequest();
	request->setName(utils->getInvalidTestValue("getSlideShapeParagraph", "name", request->getName()));
	utils->initialize("getSlideShapeParagraph", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphSlideIndex) {
	std::shared_ptr<GetSlideShapeParagraphRequest> request = getGetSlideShapeParagraphRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlideShapeParagraph", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlideShapeParagraph", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphShapeIndex) {
	std::shared_ptr<GetSlideShapeParagraphRequest> request = getGetSlideShapeParagraphRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getSlideShapeParagraph", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getSlideShapeParagraph", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphParagraphIndex) {
	std::shared_ptr<GetSlideShapeParagraphRequest> request = getGetSlideShapeParagraphRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("getSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("getSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphPassword) {
	std::shared_ptr<GetSlideShapeParagraphRequest> request = getGetSlideShapeParagraphRequest();
	request->setPassword(utils->getInvalidTestValue("getSlideShapeParagraph", "password", request->getPassword()));
	utils->initialize("getSlideShapeParagraph", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphFolder) {
	std::shared_ptr<GetSlideShapeParagraphRequest> request = getGetSlideShapeParagraphRequest();
	request->setFolder(utils->getInvalidTestValue("getSlideShapeParagraph", "folder", request->getFolder()));
	utils->initialize("getSlideShapeParagraph", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphStorage) {
	std::shared_ptr<GetSlideShapeParagraphRequest> request = getGetSlideShapeParagraphRequest();
	request->setStorage(utils->getInvalidTestValue("getSlideShapeParagraph", "storage", request->getStorage()));
	utils->initialize("getSlideShapeParagraph", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraph", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphs) {
	std::shared_ptr<GetSlideShapeParagraphsRequest> request = getGetSlideShapeParagraphsRequest();
	utils->initialize("getSlideShapeParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->getSlideShapeParagraphs(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsName) {
	std::shared_ptr<GetSlideShapeParagraphsRequest> request = getGetSlideShapeParagraphsRequest();
	request->setName(utils->getInvalidTestValue("getSlideShapeParagraphs", "name", request->getName()));
	utils->initialize("getSlideShapeParagraphs", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsSlideIndex) {
	std::shared_ptr<GetSlideShapeParagraphsRequest> request = getGetSlideShapeParagraphsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlideShapeParagraphs", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlideShapeParagraphs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsShapeIndex) {
	std::shared_ptr<GetSlideShapeParagraphsRequest> request = getGetSlideShapeParagraphsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getSlideShapeParagraphs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getSlideShapeParagraphs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsPassword) {
	std::shared_ptr<GetSlideShapeParagraphsRequest> request = getGetSlideShapeParagraphsRequest();
	request->setPassword(utils->getInvalidTestValue("getSlideShapeParagraphs", "password", request->getPassword()));
	utils->initialize("getSlideShapeParagraphs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsFolder) {
	std::shared_ptr<GetSlideShapeParagraphsRequest> request = getGetSlideShapeParagraphsRequest();
	request->setFolder(utils->getInvalidTestValue("getSlideShapeParagraphs", "folder", request->getFolder()));
	utils->initialize("getSlideShapeParagraphs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapeParagraphsStorage) {
	std::shared_ptr<GetSlideShapeParagraphsRequest> request = getGetSlideShapeParagraphsRequest();
	request->setStorage(utils->getInvalidTestValue("getSlideShapeParagraphs", "storage", request->getStorage()));
	utils->initialize("getSlideShapeParagraphs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlideShapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapeParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapeParagraphs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapeParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapes) {
	std::shared_ptr<GetSlideShapesRequest> request = getGetSlideShapesRequest();
	utils->initialize("getSlideShapes", "");
	std::shared_ptr<Shapes> result = api->getSlideShapes(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideShapesName) {
	std::shared_ptr<GetSlideShapesRequest> request = getGetSlideShapesRequest();
	request->setName(utils->getInvalidTestValue("getSlideShapes", "name", request->getName()));
	utils->initialize("getSlideShapes", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapesSlideIndex) {
	std::shared_ptr<GetSlideShapesRequest> request = getGetSlideShapesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlideShapes", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlideShapes", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapesPassword) {
	std::shared_ptr<GetSlideShapesRequest> request = getGetSlideShapesRequest();
	request->setPassword(utils->getInvalidTestValue("getSlideShapes", "password", request->getPassword()));
	utils->initialize("getSlideShapes", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapesFolder) {
	std::shared_ptr<GetSlideShapesRequest> request = getGetSlideShapesRequest();
	request->setFolder(utils->getInvalidTestValue("getSlideShapes", "folder", request->getFolder()));
	utils->initialize("getSlideShapes", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideShapesStorage) {
	std::shared_ptr<GetSlideShapesRequest> request = getGetSlideShapesRequest();
	request->setStorage(utils->getInvalidTestValue("getSlideShapes", "storage", request->getStorage()));
	utils->initialize("getSlideShapes", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlideShapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideShapes", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshape) {
	std::shared_ptr<GetSlideSubshapeRequest> request = getGetSlideSubshapeRequest();
	utils->initialize("getSlideSubshape", "");
	std::shared_ptr<ShapeBase> result = api->getSlideSubshape(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideSubshapeName) {
	std::shared_ptr<GetSlideSubshapeRequest> request = getGetSlideSubshapeRequest();
	request->setName(utils->getInvalidTestValue("getSlideSubshape", "name", request->getName()));
	utils->initialize("getSlideSubshape", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeSlideIndex) {
	std::shared_ptr<GetSlideSubshapeRequest> request = getGetSlideSubshapeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlideSubshape", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlideSubshape", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapePath) {
	std::shared_ptr<GetSlideSubshapeRequest> request = getGetSlideSubshapeRequest();
	request->setPath(utils->getInvalidTestValue("getSlideSubshape", "path", request->getPath()));
	utils->initialize("getSlideSubshape", "path", request->getPath());

	bool failed = true;
	try
	{
		api->getSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeShapeIndex) {
	std::shared_ptr<GetSlideSubshapeRequest> request = getGetSlideSubshapeRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getSlideSubshape", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getSlideSubshape", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapePassword) {
	std::shared_ptr<GetSlideSubshapeRequest> request = getGetSlideSubshapeRequest();
	request->setPassword(utils->getInvalidTestValue("getSlideSubshape", "password", request->getPassword()));
	utils->initialize("getSlideSubshape", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeFolder) {
	std::shared_ptr<GetSlideSubshapeRequest> request = getGetSlideSubshapeRequest();
	request->setFolder(utils->getInvalidTestValue("getSlideSubshape", "folder", request->getFolder()));
	utils->initialize("getSlideSubshape", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeStorage) {
	std::shared_ptr<GetSlideSubshapeRequest> request = getGetSlideSubshapeRequest();
	request->setStorage(utils->getInvalidTestValue("getSlideSubshape", "storage", request->getStorage()));
	utils->initialize("getSlideSubshape", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlideSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshape", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraph) {
	std::shared_ptr<GetSlideSubshapeParagraphRequest> request = getGetSlideSubshapeParagraphRequest();
	utils->initialize("getSlideSubshapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->getSlideSubshapeParagraph(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphName) {
	std::shared_ptr<GetSlideSubshapeParagraphRequest> request = getGetSlideSubshapeParagraphRequest();
	request->setName(utils->getInvalidTestValue("getSlideSubshapeParagraph", "name", request->getName()));
	utils->initialize("getSlideSubshapeParagraph", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphSlideIndex) {
	std::shared_ptr<GetSlideSubshapeParagraphRequest> request = getGetSlideSubshapeParagraphRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlideSubshapeParagraph", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlideSubshapeParagraph", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphPath) {
	std::shared_ptr<GetSlideSubshapeParagraphRequest> request = getGetSlideSubshapeParagraphRequest();
	request->setPath(utils->getInvalidTestValue("getSlideSubshapeParagraph", "path", request->getPath()));
	utils->initialize("getSlideSubshapeParagraph", "path", request->getPath());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphShapeIndex) {
	std::shared_ptr<GetSlideSubshapeParagraphRequest> request = getGetSlideSubshapeParagraphRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getSlideSubshapeParagraph", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getSlideSubshapeParagraph", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphParagraphIndex) {
	std::shared_ptr<GetSlideSubshapeParagraphRequest> request = getGetSlideSubshapeParagraphRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("getSlideSubshapeParagraph", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("getSlideSubshapeParagraph", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphPassword) {
	std::shared_ptr<GetSlideSubshapeParagraphRequest> request = getGetSlideSubshapeParagraphRequest();
	request->setPassword(utils->getInvalidTestValue("getSlideSubshapeParagraph", "password", request->getPassword()));
	utils->initialize("getSlideSubshapeParagraph", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphFolder) {
	std::shared_ptr<GetSlideSubshapeParagraphRequest> request = getGetSlideSubshapeParagraphRequest();
	request->setFolder(utils->getInvalidTestValue("getSlideSubshapeParagraph", "folder", request->getFolder()));
	utils->initialize("getSlideSubshapeParagraph", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphStorage) {
	std::shared_ptr<GetSlideSubshapeParagraphRequest> request = getGetSlideSubshapeParagraphRequest();
	request->setStorage(utils->getInvalidTestValue("getSlideSubshapeParagraph", "storage", request->getStorage()));
	utils->initialize("getSlideSubshapeParagraph", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraph", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphs) {
	std::shared_ptr<GetSlideSubshapeParagraphsRequest> request = getGetSlideSubshapeParagraphsRequest();
	utils->initialize("getSlideSubshapeParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->getSlideSubshapeParagraphs(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsName) {
	std::shared_ptr<GetSlideSubshapeParagraphsRequest> request = getGetSlideSubshapeParagraphsRequest();
	request->setName(utils->getInvalidTestValue("getSlideSubshapeParagraphs", "name", request->getName()));
	utils->initialize("getSlideSubshapeParagraphs", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsSlideIndex) {
	std::shared_ptr<GetSlideSubshapeParagraphsRequest> request = getGetSlideSubshapeParagraphsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlideSubshapeParagraphs", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlideSubshapeParagraphs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsPath) {
	std::shared_ptr<GetSlideSubshapeParagraphsRequest> request = getGetSlideSubshapeParagraphsRequest();
	request->setPath(utils->getInvalidTestValue("getSlideSubshapeParagraphs", "path", request->getPath()));
	utils->initialize("getSlideSubshapeParagraphs", "path", request->getPath());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsShapeIndex) {
	std::shared_ptr<GetSlideSubshapeParagraphsRequest> request = getGetSlideSubshapeParagraphsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getSlideSubshapeParagraphs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getSlideSubshapeParagraphs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsPassword) {
	std::shared_ptr<GetSlideSubshapeParagraphsRequest> request = getGetSlideSubshapeParagraphsRequest();
	request->setPassword(utils->getInvalidTestValue("getSlideSubshapeParagraphs", "password", request->getPassword()));
	utils->initialize("getSlideSubshapeParagraphs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsFolder) {
	std::shared_ptr<GetSlideSubshapeParagraphsRequest> request = getGetSlideSubshapeParagraphsRequest();
	request->setFolder(utils->getInvalidTestValue("getSlideSubshapeParagraphs", "folder", request->getFolder()));
	utils->initialize("getSlideSubshapeParagraphs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapeParagraphsStorage) {
	std::shared_ptr<GetSlideSubshapeParagraphsRequest> request = getGetSlideSubshapeParagraphsRequest();
	request->setStorage(utils->getInvalidTestValue("getSlideSubshapeParagraphs", "storage", request->getStorage()));
	utils->initialize("getSlideSubshapeParagraphs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlideSubshapeParagraphs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapeParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapeParagraphs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapeParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapes) {
	std::shared_ptr<GetSlideSubshapesRequest> request = getGetSlideSubshapesRequest();
	utils->initialize("getSlideSubshapes", "");
	std::shared_ptr<Shapes> result = api->getSlideSubshapes(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideSubshapesName) {
	std::shared_ptr<GetSlideSubshapesRequest> request = getGetSlideSubshapesRequest();
	request->setName(utils->getInvalidTestValue("getSlideSubshapes", "name", request->getName()));
	utils->initialize("getSlideSubshapes", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapesSlideIndex) {
	std::shared_ptr<GetSlideSubshapesRequest> request = getGetSlideSubshapesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlideSubshapes", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlideSubshapes", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapesPath) {
	std::shared_ptr<GetSlideSubshapesRequest> request = getGetSlideSubshapesRequest();
	request->setPath(utils->getInvalidTestValue("getSlideSubshapes", "path", request->getPath()));
	utils->initialize("getSlideSubshapes", "path", request->getPath());

	bool failed = true;
	try
	{
		api->getSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapesPassword) {
	std::shared_ptr<GetSlideSubshapesRequest> request = getGetSlideSubshapesRequest();
	request->setPassword(utils->getInvalidTestValue("getSlideSubshapes", "password", request->getPassword()));
	utils->initialize("getSlideSubshapes", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapesFolder) {
	std::shared_ptr<GetSlideSubshapesRequest> request = getGetSlideSubshapesRequest();
	request->setFolder(utils->getInvalidTestValue("getSlideSubshapes", "folder", request->getFolder()));
	utils->initialize("getSlideSubshapes", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideSubshapesStorage) {
	std::shared_ptr<GetSlideSubshapesRequest> request = getGetSlideSubshapesRequest();
	request->setStorage(utils->getInvalidTestValue("getSlideSubshapes", "storage", request->getStorage()));
	utils->initialize("getSlideSubshapes", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlideSubshapes(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideSubshapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideSubshapes", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideSubshapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesApiInfo) {
	utils->initialize("getSlidesApiInfo", "");
	std::shared_ptr<ApiInfo> result = api->getSlidesApiInfo().get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesDocument) {
	std::shared_ptr<GetSlidesDocumentRequest> request = getGetSlidesDocumentRequest();
	utils->initialize("getSlidesDocument", "");
	std::shared_ptr<Document> result = api->getSlidesDocument(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesDocumentName) {
	std::shared_ptr<GetSlidesDocumentRequest> request = getGetSlidesDocumentRequest();
	request->setName(utils->getInvalidTestValue("getSlidesDocument", "name", request->getName()));
	utils->initialize("getSlidesDocument", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesDocument(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocument", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPassword) {
	std::shared_ptr<GetSlidesDocumentRequest> request = getGetSlidesDocumentRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesDocument", "password", request->getPassword()));
	utils->initialize("getSlidesDocument", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesDocument(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocument", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentStorage) {
	std::shared_ptr<GetSlidesDocumentRequest> request = getGetSlidesDocumentRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesDocument", "storage", request->getStorage()));
	utils->initialize("getSlidesDocument", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesDocument(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocument", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentFolder) {
	std::shared_ptr<GetSlidesDocumentRequest> request = getGetSlidesDocumentRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesDocument", "folder", request->getFolder()));
	utils->initialize("getSlidesDocument", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesDocument(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocument", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocument", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocument", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentProperties) {
	std::shared_ptr<GetSlidesDocumentPropertiesRequest> request = getGetSlidesDocumentPropertiesRequest();
	utils->initialize("getSlidesDocumentProperties", "");
	std::shared_ptr<DocumentProperties> result = api->getSlidesDocumentProperties(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertiesName) {
	std::shared_ptr<GetSlidesDocumentPropertiesRequest> request = getGetSlidesDocumentPropertiesRequest();
	request->setName(utils->getInvalidTestValue("getSlidesDocumentProperties", "name", request->getName()));
	utils->initialize("getSlidesDocumentProperties", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertiesPassword) {
	std::shared_ptr<GetSlidesDocumentPropertiesRequest> request = getGetSlidesDocumentPropertiesRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesDocumentProperties", "password", request->getPassword()));
	utils->initialize("getSlidesDocumentProperties", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertiesFolder) {
	std::shared_ptr<GetSlidesDocumentPropertiesRequest> request = getGetSlidesDocumentPropertiesRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesDocumentProperties", "folder", request->getFolder()));
	utils->initialize("getSlidesDocumentProperties", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertiesStorage) {
	std::shared_ptr<GetSlidesDocumentPropertiesRequest> request = getGetSlidesDocumentPropertiesRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesDocumentProperties", "storage", request->getStorage()));
	utils->initialize("getSlidesDocumentProperties", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperties", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentProperty) {
	std::shared_ptr<GetSlidesDocumentPropertyRequest> request = getGetSlidesDocumentPropertyRequest();
	utils->initialize("getSlidesDocumentProperty", "");
	std::shared_ptr<DocumentProperty> result = api->getSlidesDocumentProperty(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertyName) {
	std::shared_ptr<GetSlidesDocumentPropertyRequest> request = getGetSlidesDocumentPropertyRequest();
	request->setName(utils->getInvalidTestValue("getSlidesDocumentProperty", "name", request->getName()));
	utils->initialize("getSlidesDocumentProperty", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperty", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertyPropertyName) {
	std::shared_ptr<GetSlidesDocumentPropertyRequest> request = getGetSlidesDocumentPropertyRequest();
	request->setPropertyName(utils->getInvalidTestValue("getSlidesDocumentProperty", "propertyName", request->getPropertyName()));
	utils->initialize("getSlidesDocumentProperty", "propertyName", request->getPropertyName());

	bool failed = true;
	try
	{
		api->getSlidesDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "propertyName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "propertyName", request->getPropertyName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "propertyName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "propertyName", request->getPropertyName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperty", "propertyName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertyPassword) {
	std::shared_ptr<GetSlidesDocumentPropertyRequest> request = getGetSlidesDocumentPropertyRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesDocumentProperty", "password", request->getPassword()));
	utils->initialize("getSlidesDocumentProperty", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperty", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertyFolder) {
	std::shared_ptr<GetSlidesDocumentPropertyRequest> request = getGetSlidesDocumentPropertyRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesDocumentProperty", "folder", request->getFolder()));
	utils->initialize("getSlidesDocumentProperty", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperty", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesDocumentPropertyStorage) {
	std::shared_ptr<GetSlidesDocumentPropertyRequest> request = getGetSlidesDocumentPropertyRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesDocumentProperty", "storage", request->getStorage()));
	utils->initialize("getSlidesDocumentProperty", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesDocumentProperty", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesDocumentProperty", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesDocumentProperty", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormat) {
	std::shared_ptr<GetSlidesImageWithDefaultFormatRequest> request = getGetSlidesImageWithDefaultFormatRequest();
	utils->initialize("getSlidesImageWithDefaultFormat", "");
	HttpContent result = api->getSlidesImageWithDefaultFormat(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormatName) {
	std::shared_ptr<GetSlidesImageWithDefaultFormatRequest> request = getGetSlidesImageWithDefaultFormatRequest();
	request->setName(utils->getInvalidTestValue("getSlidesImageWithDefaultFormat", "name", request->getName()));
	utils->initialize("getSlidesImageWithDefaultFormat", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesImageWithDefaultFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithDefaultFormat", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormatIndex) {
	std::shared_ptr<GetSlidesImageWithDefaultFormatRequest> request = getGetSlidesImageWithDefaultFormatRequest();
	request->setIndex(utils->getInvalidIntTestValue("getSlidesImageWithDefaultFormat", "index", request->getIndex()));
	utils->initialize("getSlidesImageWithDefaultFormat", "index", request->getIndex());

	bool failed = true;
	try
	{
		api->getSlidesImageWithDefaultFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "index");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "index", request->getIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "index");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "index", request->getIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithDefaultFormat", "index"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormatPassword) {
	std::shared_ptr<GetSlidesImageWithDefaultFormatRequest> request = getGetSlidesImageWithDefaultFormatRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesImageWithDefaultFormat", "password", request->getPassword()));
	utils->initialize("getSlidesImageWithDefaultFormat", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesImageWithDefaultFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithDefaultFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormatFolder) {
	std::shared_ptr<GetSlidesImageWithDefaultFormatRequest> request = getGetSlidesImageWithDefaultFormatRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesImageWithDefaultFormat", "folder", request->getFolder()));
	utils->initialize("getSlidesImageWithDefaultFormat", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesImageWithDefaultFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithDefaultFormat", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithDefaultFormatStorage) {
	std::shared_ptr<GetSlidesImageWithDefaultFormatRequest> request = getGetSlidesImageWithDefaultFormatRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesImageWithDefaultFormat", "storage", request->getStorage()));
	utils->initialize("getSlidesImageWithDefaultFormat", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesImageWithDefaultFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithDefaultFormat", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithDefaultFormat", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithDefaultFormat", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormat) {
	std::shared_ptr<GetSlidesImageWithFormatRequest> request = getGetSlidesImageWithFormatRequest();
	utils->initialize("getSlidesImageWithFormat", "");
	HttpContent result = api->getSlidesImageWithFormat(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatName) {
	std::shared_ptr<GetSlidesImageWithFormatRequest> request = getGetSlidesImageWithFormatRequest();
	request->setName(utils->getInvalidTestValue("getSlidesImageWithFormat", "name", request->getName()));
	utils->initialize("getSlidesImageWithFormat", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesImageWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatIndex) {
	std::shared_ptr<GetSlidesImageWithFormatRequest> request = getGetSlidesImageWithFormatRequest();
	request->setIndex(utils->getInvalidIntTestValue("getSlidesImageWithFormat", "index", request->getIndex()));
	utils->initialize("getSlidesImageWithFormat", "index", request->getIndex());

	bool failed = true;
	try
	{
		api->getSlidesImageWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "index");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "index", request->getIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "index");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "index", request->getIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "index"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatFormat) {
	std::shared_ptr<GetSlidesImageWithFormatRequest> request = getGetSlidesImageWithFormatRequest();
	request->setFormat(utils->getInvalidTestValue("getSlidesImageWithFormat", "format", request->getFormat()));
	utils->initialize("getSlidesImageWithFormat", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->getSlidesImageWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatPassword) {
	std::shared_ptr<GetSlidesImageWithFormatRequest> request = getGetSlidesImageWithFormatRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesImageWithFormat", "password", request->getPassword()));
	utils->initialize("getSlidesImageWithFormat", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesImageWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatFolder) {
	std::shared_ptr<GetSlidesImageWithFormatRequest> request = getGetSlidesImageWithFormatRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesImageWithFormat", "folder", request->getFolder()));
	utils->initialize("getSlidesImageWithFormat", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesImageWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImageWithFormatStorage) {
	std::shared_ptr<GetSlidesImageWithFormatRequest> request = getGetSlidesImageWithFormatRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesImageWithFormat", "storage", request->getStorage()));
	utils->initialize("getSlidesImageWithFormat", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesImageWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImageWithFormat", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImageWithFormat", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImageWithFormat", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImages) {
	std::shared_ptr<GetSlidesImagesRequest> request = getGetSlidesImagesRequest();
	utils->initialize("getSlidesImages", "");
	std::shared_ptr<Images> result = api->getSlidesImages(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesImagesName) {
	std::shared_ptr<GetSlidesImagesRequest> request = getGetSlidesImagesRequest();
	request->setName(utils->getInvalidTestValue("getSlidesImages", "name", request->getName()));
	utils->initialize("getSlidesImages", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesImages(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImages", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImagesPassword) {
	std::shared_ptr<GetSlidesImagesRequest> request = getGetSlidesImagesRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesImages", "password", request->getPassword()));
	utils->initialize("getSlidesImages", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesImages(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImages", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImagesFolder) {
	std::shared_ptr<GetSlidesImagesRequest> request = getGetSlidesImagesRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesImages", "folder", request->getFolder()));
	utils->initialize("getSlidesImages", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesImages(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImages", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesImagesStorage) {
	std::shared_ptr<GetSlidesImagesRequest> request = getGetSlidesImagesRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesImages", "storage", request->getStorage()));
	utils->initialize("getSlidesImages", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesImages(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesImages", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesImages", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesImages", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholder) {
	std::shared_ptr<GetSlidesPlaceholderRequest> request = getGetSlidesPlaceholderRequest();
	utils->initialize("getSlidesPlaceholder", "");
	std::shared_ptr<Placeholder> result = api->getSlidesPlaceholder(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesPlaceholderName) {
	std::shared_ptr<GetSlidesPlaceholderRequest> request = getGetSlidesPlaceholderRequest();
	request->setName(utils->getInvalidTestValue("getSlidesPlaceholder", "name", request->getName()));
	utils->initialize("getSlidesPlaceholder", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesPlaceholder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholderSlideIndex) {
	std::shared_ptr<GetSlidesPlaceholderRequest> request = getGetSlidesPlaceholderRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlidesPlaceholder", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlidesPlaceholder", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlidesPlaceholder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholderPlaceholderIndex) {
	std::shared_ptr<GetSlidesPlaceholderRequest> request = getGetSlidesPlaceholderRequest();
	request->setPlaceholderIndex(utils->getInvalidIntTestValue("getSlidesPlaceholder", "placeholderIndex", request->getPlaceholderIndex()));
	utils->initialize("getSlidesPlaceholder", "placeholderIndex", request->getPlaceholderIndex());

	bool failed = true;
	try
	{
		api->getSlidesPlaceholder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "placeholderIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "placeholderIndex", request->getPlaceholderIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "placeholderIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "placeholderIndex", request->getPlaceholderIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "placeholderIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholderPassword) {
	std::shared_ptr<GetSlidesPlaceholderRequest> request = getGetSlidesPlaceholderRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesPlaceholder", "password", request->getPassword()));
	utils->initialize("getSlidesPlaceholder", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesPlaceholder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholderFolder) {
	std::shared_ptr<GetSlidesPlaceholderRequest> request = getGetSlidesPlaceholderRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesPlaceholder", "folder", request->getFolder()));
	utils->initialize("getSlidesPlaceholder", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesPlaceholder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholderStorage) {
	std::shared_ptr<GetSlidesPlaceholderRequest> request = getGetSlidesPlaceholderRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesPlaceholder", "storage", request->getStorage()));
	utils->initialize("getSlidesPlaceholder", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesPlaceholder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholder", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholder", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholder", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholders) {
	std::shared_ptr<GetSlidesPlaceholdersRequest> request = getGetSlidesPlaceholdersRequest();
	utils->initialize("getSlidesPlaceholders", "");
	std::shared_ptr<Placeholders> result = api->getSlidesPlaceholders(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesPlaceholdersName) {
	std::shared_ptr<GetSlidesPlaceholdersRequest> request = getGetSlidesPlaceholdersRequest();
	request->setName(utils->getInvalidTestValue("getSlidesPlaceholders", "name", request->getName()));
	utils->initialize("getSlidesPlaceholders", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesPlaceholders(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholders", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholdersSlideIndex) {
	std::shared_ptr<GetSlidesPlaceholdersRequest> request = getGetSlidesPlaceholdersRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlidesPlaceholders", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlidesPlaceholders", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlidesPlaceholders(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholders", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholdersPassword) {
	std::shared_ptr<GetSlidesPlaceholdersRequest> request = getGetSlidesPlaceholdersRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesPlaceholders", "password", request->getPassword()));
	utils->initialize("getSlidesPlaceholders", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesPlaceholders(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholders", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholdersFolder) {
	std::shared_ptr<GetSlidesPlaceholdersRequest> request = getGetSlidesPlaceholdersRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesPlaceholders", "folder", request->getFolder()));
	utils->initialize("getSlidesPlaceholders", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesPlaceholders(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholders", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPlaceholdersStorage) {
	std::shared_ptr<GetSlidesPlaceholdersRequest> request = getGetSlidesPlaceholdersRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesPlaceholders", "storage", request->getStorage()));
	utils->initialize("getSlidesPlaceholders", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesPlaceholders(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPlaceholders", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPlaceholders", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPlaceholders", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItems) {
	std::shared_ptr<GetSlidesPresentationTextItemsRequest> request = getGetSlidesPresentationTextItemsRequest();
	utils->initialize("getSlidesPresentationTextItems", "");
	std::shared_ptr<TextItems> result = api->getSlidesPresentationTextItems(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItemsName) {
	std::shared_ptr<GetSlidesPresentationTextItemsRequest> request = getGetSlidesPresentationTextItemsRequest();
	request->setName(utils->getInvalidTestValue("getSlidesPresentationTextItems", "name", request->getName()));
	utils->initialize("getSlidesPresentationTextItems", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesPresentationTextItems(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPresentationTextItems", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItemsWithEmpty) {
	std::shared_ptr<GetSlidesPresentationTextItemsRequest> request = getGetSlidesPresentationTextItemsRequest();
	request->setWithEmpty(utils->getInvalidBoolTestValue("getSlidesPresentationTextItems", "withEmpty", request->getWithEmpty()));
	utils->initialize("getSlidesPresentationTextItems", "withEmpty", request->getWithEmpty());

	bool failed = true;
	try
	{
		api->getSlidesPresentationTextItems(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "withEmpty");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "withEmpty", request->getWithEmpty());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "withEmpty");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "withEmpty", request->getWithEmpty());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPresentationTextItems", "withEmpty"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItemsPassword) {
	std::shared_ptr<GetSlidesPresentationTextItemsRequest> request = getGetSlidesPresentationTextItemsRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesPresentationTextItems", "password", request->getPassword()));
	utils->initialize("getSlidesPresentationTextItems", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesPresentationTextItems(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPresentationTextItems", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItemsFolder) {
	std::shared_ptr<GetSlidesPresentationTextItemsRequest> request = getGetSlidesPresentationTextItemsRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesPresentationTextItems", "folder", request->getFolder()));
	utils->initialize("getSlidesPresentationTextItems", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesPresentationTextItems(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPresentationTextItems", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesPresentationTextItemsStorage) {
	std::shared_ptr<GetSlidesPresentationTextItemsRequest> request = getGetSlidesPresentationTextItemsRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesPresentationTextItems", "storage", request->getStorage()));
	utils->initialize("getSlidesPresentationTextItems", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesPresentationTextItems(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesPresentationTextItems", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesPresentationTextItems", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesPresentationTextItems", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlide) {
	std::shared_ptr<GetSlidesSlideRequest> request = getGetSlidesSlideRequest();
	utils->initialize("getSlidesSlide", "");
	std::shared_ptr<Slide> result = api->getSlidesSlide(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlideName) {
	std::shared_ptr<GetSlidesSlideRequest> request = getGetSlidesSlideRequest();
	request->setName(utils->getInvalidTestValue("getSlidesSlide", "name", request->getName()));
	utils->initialize("getSlidesSlide", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideSlideIndex) {
	std::shared_ptr<GetSlidesSlideRequest> request = getGetSlidesSlideRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlidesSlide", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlidesSlide", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlidesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidePassword) {
	std::shared_ptr<GetSlidesSlideRequest> request = getGetSlidesSlideRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesSlide", "password", request->getPassword()));
	utils->initialize("getSlidesSlide", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideFolder) {
	std::shared_ptr<GetSlidesSlideRequest> request = getGetSlidesSlideRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesSlide", "folder", request->getFolder()));
	utils->initialize("getSlidesSlide", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideStorage) {
	std::shared_ptr<GetSlidesSlideRequest> request = getGetSlidesSlideRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesSlide", "storage", request->getStorage()));
	utils->initialize("getSlidesSlide", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlide", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideBackground) {
	std::shared_ptr<GetSlidesSlideBackgroundRequest> request = getGetSlidesSlideBackgroundRequest();
	utils->initialize("getSlidesSlideBackground", "");
	std::shared_ptr<SlideBackground> result = api->getSlidesSlideBackground(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlideBackgroundName) {
	std::shared_ptr<GetSlidesSlideBackgroundRequest> request = getGetSlidesSlideBackgroundRequest();
	request->setName(utils->getInvalidTestValue("getSlidesSlideBackground", "name", request->getName()));
	utils->initialize("getSlidesSlideBackground", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideBackground", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideBackgroundSlideIndex) {
	std::shared_ptr<GetSlidesSlideBackgroundRequest> request = getGetSlidesSlideBackgroundRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlidesSlideBackground", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlidesSlideBackground", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideBackground", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideBackgroundPassword) {
	std::shared_ptr<GetSlidesSlideBackgroundRequest> request = getGetSlidesSlideBackgroundRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesSlideBackground", "password", request->getPassword()));
	utils->initialize("getSlidesSlideBackground", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideBackground", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideBackgroundFolder) {
	std::shared_ptr<GetSlidesSlideBackgroundRequest> request = getGetSlidesSlideBackgroundRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesSlideBackground", "folder", request->getFolder()));
	utils->initialize("getSlidesSlideBackground", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideBackground", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideBackgroundStorage) {
	std::shared_ptr<GetSlidesSlideBackgroundRequest> request = getGetSlidesSlideBackgroundRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesSlideBackground", "storage", request->getStorage()));
	utils->initialize("getSlidesSlideBackground", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideBackground", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideBackground", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideBackground", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideComments) {
	std::shared_ptr<GetSlidesSlideCommentsRequest> request = getGetSlidesSlideCommentsRequest();
	utils->initialize("getSlidesSlideComments", "");
	std::shared_ptr<SlideComments> result = api->getSlidesSlideComments(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlideCommentsName) {
	std::shared_ptr<GetSlidesSlideCommentsRequest> request = getGetSlidesSlideCommentsRequest();
	request->setName(utils->getInvalidTestValue("getSlidesSlideComments", "name", request->getName()));
	utils->initialize("getSlidesSlideComments", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesSlideComments(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideComments", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideCommentsSlideIndex) {
	std::shared_ptr<GetSlidesSlideCommentsRequest> request = getGetSlidesSlideCommentsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlidesSlideComments", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlidesSlideComments", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlidesSlideComments(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideComments", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideCommentsPassword) {
	std::shared_ptr<GetSlidesSlideCommentsRequest> request = getGetSlidesSlideCommentsRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesSlideComments", "password", request->getPassword()));
	utils->initialize("getSlidesSlideComments", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesSlideComments(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideComments", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideCommentsFolder) {
	std::shared_ptr<GetSlidesSlideCommentsRequest> request = getGetSlidesSlideCommentsRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesSlideComments", "folder", request->getFolder()));
	utils->initialize("getSlidesSlideComments", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesSlideComments(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideComments", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideCommentsStorage) {
	std::shared_ptr<GetSlidesSlideCommentsRequest> request = getGetSlidesSlideCommentsRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesSlideComments", "storage", request->getStorage()));
	utils->initialize("getSlidesSlideComments", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesSlideComments(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideComments", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideComments", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideComments", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideImages) {
	std::shared_ptr<GetSlidesSlideImagesRequest> request = getGetSlidesSlideImagesRequest();
	utils->initialize("getSlidesSlideImages", "");
	std::shared_ptr<Images> result = api->getSlidesSlideImages(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlideImagesName) {
	std::shared_ptr<GetSlidesSlideImagesRequest> request = getGetSlidesSlideImagesRequest();
	request->setName(utils->getInvalidTestValue("getSlidesSlideImages", "name", request->getName()));
	utils->initialize("getSlidesSlideImages", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesSlideImages(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideImages", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideImagesSlideIndex) {
	std::shared_ptr<GetSlidesSlideImagesRequest> request = getGetSlidesSlideImagesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlidesSlideImages", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlidesSlideImages", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlidesSlideImages(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideImages", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideImagesPassword) {
	std::shared_ptr<GetSlidesSlideImagesRequest> request = getGetSlidesSlideImagesRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesSlideImages", "password", request->getPassword()));
	utils->initialize("getSlidesSlideImages", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesSlideImages(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideImages", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideImagesFolder) {
	std::shared_ptr<GetSlidesSlideImagesRequest> request = getGetSlidesSlideImagesRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesSlideImages", "folder", request->getFolder()));
	utils->initialize("getSlidesSlideImages", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesSlideImages(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideImages", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideImagesStorage) {
	std::shared_ptr<GetSlidesSlideImagesRequest> request = getGetSlidesSlideImagesRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesSlideImages", "storage", request->getStorage()));
	utils->initialize("getSlidesSlideImages", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesSlideImages(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideImages", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideImages", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideImages", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItems) {
	std::shared_ptr<GetSlidesSlideTextItemsRequest> request = getGetSlidesSlideTextItemsRequest();
	utils->initialize("getSlidesSlideTextItems", "");
	std::shared_ptr<TextItems> result = api->getSlidesSlideTextItems(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsName) {
	std::shared_ptr<GetSlidesSlideTextItemsRequest> request = getGetSlidesSlideTextItemsRequest();
	request->setName(utils->getInvalidTestValue("getSlidesSlideTextItems", "name", request->getName()));
	utils->initialize("getSlidesSlideTextItems", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesSlideTextItems(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsSlideIndex) {
	std::shared_ptr<GetSlidesSlideTextItemsRequest> request = getGetSlidesSlideTextItemsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlidesSlideTextItems", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlidesSlideTextItems", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlidesSlideTextItems(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsWithEmpty) {
	std::shared_ptr<GetSlidesSlideTextItemsRequest> request = getGetSlidesSlideTextItemsRequest();
	request->setWithEmpty(utils->getInvalidBoolTestValue("getSlidesSlideTextItems", "withEmpty", request->getWithEmpty()));
	utils->initialize("getSlidesSlideTextItems", "withEmpty", request->getWithEmpty());

	bool failed = true;
	try
	{
		api->getSlidesSlideTextItems(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "withEmpty");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "withEmpty", request->getWithEmpty());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "withEmpty");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "withEmpty", request->getWithEmpty());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "withEmpty"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsPassword) {
	std::shared_ptr<GetSlidesSlideTextItemsRequest> request = getGetSlidesSlideTextItemsRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesSlideTextItems", "password", request->getPassword()));
	utils->initialize("getSlidesSlideTextItems", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesSlideTextItems(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsFolder) {
	std::shared_ptr<GetSlidesSlideTextItemsRequest> request = getGetSlidesSlideTextItemsRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesSlideTextItems", "folder", request->getFolder()));
	utils->initialize("getSlidesSlideTextItems", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesSlideTextItems(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlideTextItemsStorage) {
	std::shared_ptr<GetSlidesSlideTextItemsRequest> request = getGetSlidesSlideTextItemsRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesSlideTextItems", "storage", request->getStorage()));
	utils->initialize("getSlidesSlideTextItems", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesSlideTextItems(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlideTextItems", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlideTextItems", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlideTextItems", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidesList) {
	std::shared_ptr<GetSlidesSlidesListRequest> request = getGetSlidesSlidesListRequest();
	utils->initialize("getSlidesSlidesList", "");
	std::shared_ptr<Slides> result = api->getSlidesSlidesList(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesSlidesListName) {
	std::shared_ptr<GetSlidesSlidesListRequest> request = getGetSlidesSlidesListRequest();
	request->setName(utils->getInvalidTestValue("getSlidesSlidesList", "name", request->getName()));
	utils->initialize("getSlidesSlidesList", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlidesList", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidesListPassword) {
	std::shared_ptr<GetSlidesSlidesListRequest> request = getGetSlidesSlidesListRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesSlidesList", "password", request->getPassword()));
	utils->initialize("getSlidesSlidesList", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlidesList", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidesListFolder) {
	std::shared_ptr<GetSlidesSlidesListRequest> request = getGetSlidesSlidesListRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesSlidesList", "folder", request->getFolder()));
	utils->initialize("getSlidesSlidesList", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlidesList", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesSlidesListStorage) {
	std::shared_ptr<GetSlidesSlidesListRequest> request = getGetSlidesSlidesListRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesSlidesList", "storage", request->getStorage()));
	utils->initialize("getSlidesSlidesList", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesSlidesList(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesSlidesList", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesSlidesList", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesSlidesList", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesTheme) {
	std::shared_ptr<GetSlidesThemeRequest> request = getGetSlidesThemeRequest();
	utils->initialize("getSlidesTheme", "");
	std::shared_ptr<Theme> result = api->getSlidesTheme(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesThemeName) {
	std::shared_ptr<GetSlidesThemeRequest> request = getGetSlidesThemeRequest();
	request->setName(utils->getInvalidTestValue("getSlidesTheme", "name", request->getName()));
	utils->initialize("getSlidesTheme", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesTheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesTheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeSlideIndex) {
	std::shared_ptr<GetSlidesThemeRequest> request = getGetSlidesThemeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlidesTheme", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlidesTheme", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlidesTheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesTheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemePassword) {
	std::shared_ptr<GetSlidesThemeRequest> request = getGetSlidesThemeRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesTheme", "password", request->getPassword()));
	utils->initialize("getSlidesTheme", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesTheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesTheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFolder) {
	std::shared_ptr<GetSlidesThemeRequest> request = getGetSlidesThemeRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesTheme", "folder", request->getFolder()));
	utils->initialize("getSlidesTheme", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesTheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesTheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeStorage) {
	std::shared_ptr<GetSlidesThemeRequest> request = getGetSlidesThemeRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesTheme", "storage", request->getStorage()));
	utils->initialize("getSlidesTheme", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesTheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesTheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesTheme", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesTheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeColorScheme) {
	std::shared_ptr<GetSlidesThemeColorSchemeRequest> request = getGetSlidesThemeColorSchemeRequest();
	utils->initialize("getSlidesThemeColorScheme", "");
	std::shared_ptr<ColorScheme> result = api->getSlidesThemeColorScheme(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesThemeColorSchemeName) {
	std::shared_ptr<GetSlidesThemeColorSchemeRequest> request = getGetSlidesThemeColorSchemeRequest();
	request->setName(utils->getInvalidTestValue("getSlidesThemeColorScheme", "name", request->getName()));
	utils->initialize("getSlidesThemeColorScheme", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesThemeColorScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeColorScheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeColorSchemeSlideIndex) {
	std::shared_ptr<GetSlidesThemeColorSchemeRequest> request = getGetSlidesThemeColorSchemeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlidesThemeColorScheme", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlidesThemeColorScheme", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlidesThemeColorScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeColorScheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeColorSchemePassword) {
	std::shared_ptr<GetSlidesThemeColorSchemeRequest> request = getGetSlidesThemeColorSchemeRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesThemeColorScheme", "password", request->getPassword()));
	utils->initialize("getSlidesThemeColorScheme", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesThemeColorScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeColorScheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeColorSchemeFolder) {
	std::shared_ptr<GetSlidesThemeColorSchemeRequest> request = getGetSlidesThemeColorSchemeRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesThemeColorScheme", "folder", request->getFolder()));
	utils->initialize("getSlidesThemeColorScheme", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesThemeColorScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeColorScheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeColorSchemeStorage) {
	std::shared_ptr<GetSlidesThemeColorSchemeRequest> request = getGetSlidesThemeColorSchemeRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesThemeColorScheme", "storage", request->getStorage()));
	utils->initialize("getSlidesThemeColorScheme", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesThemeColorScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeColorScheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeColorScheme", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeColorScheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFontScheme) {
	std::shared_ptr<GetSlidesThemeFontSchemeRequest> request = getGetSlidesThemeFontSchemeRequest();
	utils->initialize("getSlidesThemeFontScheme", "");
	std::shared_ptr<FontScheme> result = api->getSlidesThemeFontScheme(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesThemeFontSchemeName) {
	std::shared_ptr<GetSlidesThemeFontSchemeRequest> request = getGetSlidesThemeFontSchemeRequest();
	request->setName(utils->getInvalidTestValue("getSlidesThemeFontScheme", "name", request->getName()));
	utils->initialize("getSlidesThemeFontScheme", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesThemeFontScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFontScheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFontSchemeSlideIndex) {
	std::shared_ptr<GetSlidesThemeFontSchemeRequest> request = getGetSlidesThemeFontSchemeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlidesThemeFontScheme", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlidesThemeFontScheme", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlidesThemeFontScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFontScheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFontSchemePassword) {
	std::shared_ptr<GetSlidesThemeFontSchemeRequest> request = getGetSlidesThemeFontSchemeRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesThemeFontScheme", "password", request->getPassword()));
	utils->initialize("getSlidesThemeFontScheme", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesThemeFontScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFontScheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFontSchemeFolder) {
	std::shared_ptr<GetSlidesThemeFontSchemeRequest> request = getGetSlidesThemeFontSchemeRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesThemeFontScheme", "folder", request->getFolder()));
	utils->initialize("getSlidesThemeFontScheme", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesThemeFontScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFontScheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFontSchemeStorage) {
	std::shared_ptr<GetSlidesThemeFontSchemeRequest> request = getGetSlidesThemeFontSchemeRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesThemeFontScheme", "storage", request->getStorage()));
	utils->initialize("getSlidesThemeFontScheme", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesThemeFontScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFontScheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFontScheme", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFontScheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFormatScheme) {
	std::shared_ptr<GetSlidesThemeFormatSchemeRequest> request = getGetSlidesThemeFormatSchemeRequest();
	utils->initialize("getSlidesThemeFormatScheme", "");
	std::shared_ptr<FormatScheme> result = api->getSlidesThemeFormatScheme(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesThemeFormatSchemeName) {
	std::shared_ptr<GetSlidesThemeFormatSchemeRequest> request = getGetSlidesThemeFormatSchemeRequest();
	request->setName(utils->getInvalidTestValue("getSlidesThemeFormatScheme", "name", request->getName()));
	utils->initialize("getSlidesThemeFormatScheme", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesThemeFormatScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFormatScheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFormatSchemeSlideIndex) {
	std::shared_ptr<GetSlidesThemeFormatSchemeRequest> request = getGetSlidesThemeFormatSchemeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSlidesThemeFormatScheme", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSlidesThemeFormatScheme", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSlidesThemeFormatScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFormatScheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFormatSchemePassword) {
	std::shared_ptr<GetSlidesThemeFormatSchemeRequest> request = getGetSlidesThemeFormatSchemeRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesThemeFormatScheme", "password", request->getPassword()));
	utils->initialize("getSlidesThemeFormatScheme", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesThemeFormatScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFormatScheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFormatSchemeFolder) {
	std::shared_ptr<GetSlidesThemeFormatSchemeRequest> request = getGetSlidesThemeFormatSchemeRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesThemeFormatScheme", "folder", request->getFolder()));
	utils->initialize("getSlidesThemeFormatScheme", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesThemeFormatScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFormatScheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesThemeFormatSchemeStorage) {
	std::shared_ptr<GetSlidesThemeFormatSchemeRequest> request = getGetSlidesThemeFormatSchemeRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesThemeFormatScheme", "storage", request->getStorage()));
	utils->initialize("getSlidesThemeFormatScheme", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesThemeFormatScheme(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesThemeFormatScheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesThemeFormatScheme", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesThemeFormatScheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesViewProperties) {
	std::shared_ptr<GetSlidesViewPropertiesRequest> request = getGetSlidesViewPropertiesRequest();
	utils->initialize("getSlidesViewProperties", "");
	std::shared_ptr<ViewProperties> result = api->getSlidesViewProperties(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesViewPropertiesName) {
	std::shared_ptr<GetSlidesViewPropertiesRequest> request = getGetSlidesViewPropertiesRequest();
	request->setName(utils->getInvalidTestValue("getSlidesViewProperties", "name", request->getName()));
	utils->initialize("getSlidesViewProperties", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSlidesViewProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesViewProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesViewPropertiesPassword) {
	std::shared_ptr<GetSlidesViewPropertiesRequest> request = getGetSlidesViewPropertiesRequest();
	request->setPassword(utils->getInvalidTestValue("getSlidesViewProperties", "password", request->getPassword()));
	utils->initialize("getSlidesViewProperties", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSlidesViewProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesViewProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesViewPropertiesFolder) {
	std::shared_ptr<GetSlidesViewPropertiesRequest> request = getGetSlidesViewPropertiesRequest();
	request->setFolder(utils->getInvalidTestValue("getSlidesViewProperties", "folder", request->getFolder()));
	utils->initialize("getSlidesViewProperties", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSlidesViewProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesViewProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesViewPropertiesStorage) {
	std::shared_ptr<GetSlidesViewPropertiesRequest> request = getGetSlidesViewPropertiesRequest();
	request->setStorage(utils->getInvalidTestValue("getSlidesViewProperties", "storage", request->getStorage()));
	utils->initialize("getSlidesViewProperties", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSlidesViewProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlidesViewProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlidesViewProperties", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlidesViewProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortion) {
	std::shared_ptr<GetSubshapeParagraphPortionRequest> request = getGetSubshapeParagraphPortionRequest();
	utils->initialize("getSubshapeParagraphPortion", "");
	std::shared_ptr<Portion> result = api->getSubshapeParagraphPortion(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionName) {
	std::shared_ptr<GetSubshapeParagraphPortionRequest> request = getGetSubshapeParagraphPortionRequest();
	request->setName(utils->getInvalidTestValue("getSubshapeParagraphPortion", "name", request->getName()));
	utils->initialize("getSubshapeParagraphPortion", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionSlideIndex) {
	std::shared_ptr<GetSubshapeParagraphPortionRequest> request = getGetSubshapeParagraphPortionRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSubshapeParagraphPortion", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSubshapeParagraphPortion", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionPath) {
	std::shared_ptr<GetSubshapeParagraphPortionRequest> request = getGetSubshapeParagraphPortionRequest();
	request->setPath(utils->getInvalidTestValue("getSubshapeParagraphPortion", "path", request->getPath()));
	utils->initialize("getSubshapeParagraphPortion", "path", request->getPath());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionShapeIndex) {
	std::shared_ptr<GetSubshapeParagraphPortionRequest> request = getGetSubshapeParagraphPortionRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getSubshapeParagraphPortion", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getSubshapeParagraphPortion", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionParagraphIndex) {
	std::shared_ptr<GetSubshapeParagraphPortionRequest> request = getGetSubshapeParagraphPortionRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("getSubshapeParagraphPortion", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("getSubshapeParagraphPortion", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionPortionIndex) {
	std::shared_ptr<GetSubshapeParagraphPortionRequest> request = getGetSubshapeParagraphPortionRequest();
	request->setPortionIndex(utils->getInvalidIntTestValue("getSubshapeParagraphPortion", "portionIndex", request->getPortionIndex()));
	utils->initialize("getSubshapeParagraphPortion", "portionIndex", request->getPortionIndex());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "portionIndex", request->getPortionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "portionIndex", request->getPortionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionPassword) {
	std::shared_ptr<GetSubshapeParagraphPortionRequest> request = getGetSubshapeParagraphPortionRequest();
	request->setPassword(utils->getInvalidTestValue("getSubshapeParagraphPortion", "password", request->getPassword()));
	utils->initialize("getSubshapeParagraphPortion", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionFolder) {
	std::shared_ptr<GetSubshapeParagraphPortionRequest> request = getGetSubshapeParagraphPortionRequest();
	request->setFolder(utils->getInvalidTestValue("getSubshapeParagraphPortion", "folder", request->getFolder()));
	utils->initialize("getSubshapeParagraphPortion", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionStorage) {
	std::shared_ptr<GetSubshapeParagraphPortionRequest> request = getGetSubshapeParagraphPortionRequest();
	request->setStorage(utils->getInvalidTestValue("getSubshapeParagraphPortion", "storage", request->getStorage()));
	utils->initialize("getSubshapeParagraphPortion", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortion", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortions) {
	std::shared_ptr<GetSubshapeParagraphPortionsRequest> request = getGetSubshapeParagraphPortionsRequest();
	utils->initialize("getSubshapeParagraphPortions", "");
	std::shared_ptr<Portions> result = api->getSubshapeParagraphPortions(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsName) {
	std::shared_ptr<GetSubshapeParagraphPortionsRequest> request = getGetSubshapeParagraphPortionsRequest();
	request->setName(utils->getInvalidTestValue("getSubshapeParagraphPortions", "name", request->getName()));
	utils->initialize("getSubshapeParagraphPortions", "name", request->getName());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsSlideIndex) {
	std::shared_ptr<GetSubshapeParagraphPortionsRequest> request = getGetSubshapeParagraphPortionsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("getSubshapeParagraphPortions", "slideIndex", request->getSlideIndex()));
	utils->initialize("getSubshapeParagraphPortions", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsPath) {
	std::shared_ptr<GetSubshapeParagraphPortionsRequest> request = getGetSubshapeParagraphPortionsRequest();
	request->setPath(utils->getInvalidTestValue("getSubshapeParagraphPortions", "path", request->getPath()));
	utils->initialize("getSubshapeParagraphPortions", "path", request->getPath());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsShapeIndex) {
	std::shared_ptr<GetSubshapeParagraphPortionsRequest> request = getGetSubshapeParagraphPortionsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("getSubshapeParagraphPortions", "shapeIndex", request->getShapeIndex()));
	utils->initialize("getSubshapeParagraphPortions", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsParagraphIndex) {
	std::shared_ptr<GetSubshapeParagraphPortionsRequest> request = getGetSubshapeParagraphPortionsRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("getSubshapeParagraphPortions", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("getSubshapeParagraphPortions", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsPassword) {
	std::shared_ptr<GetSubshapeParagraphPortionsRequest> request = getGetSubshapeParagraphPortionsRequest();
	request->setPassword(utils->getInvalidTestValue("getSubshapeParagraphPortions", "password", request->getPassword()));
	utils->initialize("getSubshapeParagraphPortions", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsFolder) {
	std::shared_ptr<GetSubshapeParagraphPortionsRequest> request = getGetSubshapeParagraphPortionsRequest();
	request->setFolder(utils->getInvalidTestValue("getSubshapeParagraphPortions", "folder", request->getFolder()));
	utils->initialize("getSubshapeParagraphPortions", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphPortionsStorage) {
	std::shared_ptr<GetSubshapeParagraphPortionsRequest> request = getGetSubshapeParagraphPortionsRequest();
	request->setStorage(utils->getInvalidTestValue("getSubshapeParagraphPortions", "storage", request->getStorage()));
	utils->initialize("getSubshapeParagraphPortions", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->getSubshapeParagraphPortions(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphPortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphPortions", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphPortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFile) {
	std::shared_ptr<MoveFileRequest> request = getMoveFileRequest();
	utils->initialize("moveFile", "");
	api->moveFile(request).wait();
}

TEST_F(SlidesApiTest, moveFileSrcPath) {
	std::shared_ptr<MoveFileRequest> request = getMoveFileRequest();
	request->setSrcPath(utils->getInvalidTestValue("moveFile", "srcPath", request->getSrcPath()));
	utils->initialize("moveFile", "srcPath", request->getSrcPath());

	bool failed = true;
	try
	{
		api->moveFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcPath", request->getSrcPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcPath", request->getSrcPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileDestPath) {
	std::shared_ptr<MoveFileRequest> request = getMoveFileRequest();
	request->setDestPath(utils->getInvalidTestValue("moveFile", "destPath", request->getDestPath()));
	utils->initialize("moveFile", "destPath", request->getDestPath());

	bool failed = true;
	try
	{
		api->moveFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "destPath", request->getDestPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "destPath", request->getDestPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileSrcStorageName) {
	std::shared_ptr<MoveFileRequest> request = getMoveFileRequest();
	request->setSrcStorageName(utils->getInvalidTestValue("moveFile", "srcStorageName", request->getSrcStorageName()));
	utils->initialize("moveFile", "srcStorageName", request->getSrcStorageName());

	bool failed = true;
	try
	{
		api->moveFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcStorageName", request->getSrcStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcStorageName", request->getSrcStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileDestStorageName) {
	std::shared_ptr<MoveFileRequest> request = getMoveFileRequest();
	request->setDestStorageName(utils->getInvalidTestValue("moveFile", "destStorageName", request->getDestStorageName()));
	utils->initialize("moveFile", "destStorageName", request->getDestStorageName());

	bool failed = true;
	try
	{
		api->moveFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "destStorageName", request->getDestStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "destStorageName", request->getDestStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileVersionId) {
	std::shared_ptr<MoveFileRequest> request = getMoveFileRequest();
	request->setVersionId(utils->getInvalidTestValue("moveFile", "versionId", request->getVersionId()));
	utils->initialize("moveFile", "versionId", request->getVersionId());

	bool failed = true;
	try
	{
		api->moveFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "versionId", request->getVersionId());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "versionId", request->getVersionId());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolder) {
	std::shared_ptr<MoveFolderRequest> request = getMoveFolderRequest();
	utils->initialize("moveFolder", "");
	api->moveFolder(request).wait();
}

TEST_F(SlidesApiTest, moveFolderSrcPath) {
	std::shared_ptr<MoveFolderRequest> request = getMoveFolderRequest();
	request->setSrcPath(utils->getInvalidTestValue("moveFolder", "srcPath", request->getSrcPath()));
	utils->initialize("moveFolder", "srcPath", request->getSrcPath());

	bool failed = true;
	try
	{
		api->moveFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcPath", request->getSrcPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcPath", request->getSrcPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderDestPath) {
	std::shared_ptr<MoveFolderRequest> request = getMoveFolderRequest();
	request->setDestPath(utils->getInvalidTestValue("moveFolder", "destPath", request->getDestPath()));
	utils->initialize("moveFolder", "destPath", request->getDestPath());

	bool failed = true;
	try
	{
		api->moveFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destPath", request->getDestPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destPath", request->getDestPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderSrcStorageName) {
	std::shared_ptr<MoveFolderRequest> request = getMoveFolderRequest();
	request->setSrcStorageName(utils->getInvalidTestValue("moveFolder", "srcStorageName", request->getSrcStorageName()));
	utils->initialize("moveFolder", "srcStorageName", request->getSrcStorageName());

	bool failed = true;
	try
	{
		api->moveFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcStorageName", request->getSrcStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcStorageName", request->getSrcStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderDestStorageName) {
	std::shared_ptr<MoveFolderRequest> request = getMoveFolderRequest();
	request->setDestStorageName(utils->getInvalidTestValue("moveFolder", "destStorageName", request->getDestStorageName()));
	utils->initialize("moveFolder", "destStorageName", request->getDestStorageName());

	bool failed = true;
	try
	{
		api->moveFolder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destStorageName", request->getDestStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destStorageName", request->getDestStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExists) {
	std::shared_ptr<ObjectExistsRequest> request = getObjectExistsRequest();
	utils->initialize("objectExists", "");
	std::shared_ptr<ObjectExist> result = api->objectExists(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, objectExistsPath) {
	std::shared_ptr<ObjectExistsRequest> request = getObjectExistsRequest();
	request->setPath(utils->getInvalidTestValue("objectExists", "path", request->getPath()));
	utils->initialize("objectExists", "path", request->getPath());

	bool failed = true;
	try
	{
		api->objectExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExistsStorageName) {
	std::shared_ptr<ObjectExistsRequest> request = getObjectExistsRequest();
	request->setStorageName(utils->getInvalidTestValue("objectExists", "storageName", request->getStorageName()));
	utils->initialize("objectExists", "storageName", request->getStorageName());

	bool failed = true;
	try
	{
		api->objectExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "storageName", request->getStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "storageName", request->getStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExistsVersionId) {
	std::shared_ptr<ObjectExistsRequest> request = getObjectExistsRequest();
	request->setVersionId(utils->getInvalidTestValue("objectExists", "versionId", request->getVersionId()));
	utils->initialize("objectExists", "versionId", request->getVersionId());

	bool failed = true;
	try
	{
		api->objectExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "versionId", request->getVersionId());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "versionId", request->getVersionId());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraph) {
	std::shared_ptr<PostAddNewParagraphRequest> request = getPostAddNewParagraphRequest();
	utils->initialize("postAddNewParagraph", "");
	std::shared_ptr<Paragraph> result = api->postAddNewParagraph(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewParagraphName) {
	std::shared_ptr<PostAddNewParagraphRequest> request = getPostAddNewParagraphRequest();
	request->setName(utils->getInvalidTestValue("postAddNewParagraph", "name", request->getName()));
	utils->initialize("postAddNewParagraph", "name", request->getName());

	bool failed = true;
	try
	{
		api->postAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphSlideIndex) {
	std::shared_ptr<PostAddNewParagraphRequest> request = getPostAddNewParagraphRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postAddNewParagraph", "slideIndex", request->getSlideIndex()));
	utils->initialize("postAddNewParagraph", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphShapeIndex) {
	std::shared_ptr<PostAddNewParagraphRequest> request = getPostAddNewParagraphRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postAddNewParagraph", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postAddNewParagraph", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphDto) {
	std::shared_ptr<PostAddNewParagraphRequest> request = getPostAddNewParagraphRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("postAddNewParagraph", "dto", request->getDto()));
	utils->initialize("postAddNewParagraph", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->postAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphPassword) {
	std::shared_ptr<PostAddNewParagraphRequest> request = getPostAddNewParagraphRequest();
	request->setPassword(utils->getInvalidTestValue("postAddNewParagraph", "password", request->getPassword()));
	utils->initialize("postAddNewParagraph", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphFolder) {
	std::shared_ptr<PostAddNewParagraphRequest> request = getPostAddNewParagraphRequest();
	request->setFolder(utils->getInvalidTestValue("postAddNewParagraph", "folder", request->getFolder()));
	utils->initialize("postAddNewParagraph", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphStorage) {
	std::shared_ptr<PostAddNewParagraphRequest> request = getPostAddNewParagraphRequest();
	request->setStorage(utils->getInvalidTestValue("postAddNewParagraph", "storage", request->getStorage()));
	utils->initialize("postAddNewParagraph", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewParagraphPosition) {
	std::shared_ptr<PostAddNewParagraphRequest> request = getPostAddNewParagraphRequest();
	request->setPosition(utils->getInvalidIntTestValue("postAddNewParagraph", "position", request->getPosition()));
	utils->initialize("postAddNewParagraph", "position", request->getPosition());

	bool failed = true;
	try
	{
		api->postAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "position", request->getPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewParagraph", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewParagraph", "position", request->getPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewParagraph", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortion) {
	std::shared_ptr<PostAddNewPortionRequest> request = getPostAddNewPortionRequest();
	utils->initialize("postAddNewPortion", "");
	std::shared_ptr<Portion> result = api->postAddNewPortion(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewPortionName) {
	std::shared_ptr<PostAddNewPortionRequest> request = getPostAddNewPortionRequest();
	request->setName(utils->getInvalidTestValue("postAddNewPortion", "name", request->getName()));
	utils->initialize("postAddNewPortion", "name", request->getName());

	bool failed = true;
	try
	{
		api->postAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionSlideIndex) {
	std::shared_ptr<PostAddNewPortionRequest> request = getPostAddNewPortionRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postAddNewPortion", "slideIndex", request->getSlideIndex()));
	utils->initialize("postAddNewPortion", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionShapeIndex) {
	std::shared_ptr<PostAddNewPortionRequest> request = getPostAddNewPortionRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postAddNewPortion", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postAddNewPortion", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionParagraphIndex) {
	std::shared_ptr<PostAddNewPortionRequest> request = getPostAddNewPortionRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("postAddNewPortion", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("postAddNewPortion", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->postAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionDto) {
	std::shared_ptr<PostAddNewPortionRequest> request = getPostAddNewPortionRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("postAddNewPortion", "dto", request->getDto()));
	utils->initialize("postAddNewPortion", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->postAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionPassword) {
	std::shared_ptr<PostAddNewPortionRequest> request = getPostAddNewPortionRequest();
	request->setPassword(utils->getInvalidTestValue("postAddNewPortion", "password", request->getPassword()));
	utils->initialize("postAddNewPortion", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionFolder) {
	std::shared_ptr<PostAddNewPortionRequest> request = getPostAddNewPortionRequest();
	request->setFolder(utils->getInvalidTestValue("postAddNewPortion", "folder", request->getFolder()));
	utils->initialize("postAddNewPortion", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionStorage) {
	std::shared_ptr<PostAddNewPortionRequest> request = getPostAddNewPortionRequest();
	request->setStorage(utils->getInvalidTestValue("postAddNewPortion", "storage", request->getStorage()));
	utils->initialize("postAddNewPortion", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewPortionPosition) {
	std::shared_ptr<PostAddNewPortionRequest> request = getPostAddNewPortionRequest();
	request->setPosition(utils->getInvalidIntTestValue("postAddNewPortion", "position", request->getPosition()));
	utils->initialize("postAddNewPortion", "position", request->getPosition());

	bool failed = true;
	try
	{
		api->postAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "position", request->getPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewPortion", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewPortion", "position", request->getPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewPortion", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShape) {
	std::shared_ptr<PostAddNewShapeRequest> request = getPostAddNewShapeRequest();
	utils->initialize("postAddNewShape", "");
	std::shared_ptr<ShapeBase> result = api->postAddNewShape(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewShapeName) {
	std::shared_ptr<PostAddNewShapeRequest> request = getPostAddNewShapeRequest();
	request->setName(utils->getInvalidTestValue("postAddNewShape", "name", request->getName()));
	utils->initialize("postAddNewShape", "name", request->getName());

	bool failed = true;
	try
	{
		api->postAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeSlideIndex) {
	std::shared_ptr<PostAddNewShapeRequest> request = getPostAddNewShapeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postAddNewShape", "slideIndex", request->getSlideIndex()));
	utils->initialize("postAddNewShape", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeDto) {
	std::shared_ptr<PostAddNewShapeRequest> request = getPostAddNewShapeRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("postAddNewShape", "dto", request->getDto()));
	utils->initialize("postAddNewShape", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->postAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapePassword) {
	std::shared_ptr<PostAddNewShapeRequest> request = getPostAddNewShapeRequest();
	request->setPassword(utils->getInvalidTestValue("postAddNewShape", "password", request->getPassword()));
	utils->initialize("postAddNewShape", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeFolder) {
	std::shared_ptr<PostAddNewShapeRequest> request = getPostAddNewShapeRequest();
	request->setFolder(utils->getInvalidTestValue("postAddNewShape", "folder", request->getFolder()));
	utils->initialize("postAddNewShape", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeStorage) {
	std::shared_ptr<PostAddNewShapeRequest> request = getPostAddNewShapeRequest();
	request->setStorage(utils->getInvalidTestValue("postAddNewShape", "storage", request->getStorage()));
	utils->initialize("postAddNewShape", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapeShapeToClone) {
	std::shared_ptr<PostAddNewShapeRequest> request = getPostAddNewShapeRequest();
	request->setShapeToClone(utils->getInvalidIntTestValue("postAddNewShape", "shapeToClone", request->getShapeToClone()));
	utils->initialize("postAddNewShape", "shapeToClone", request->getShapeToClone());

	bool failed = true;
	try
	{
		api->postAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "shapeToClone");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "shapeToClone", request->getShapeToClone());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "shapeToClone");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "shapeToClone", request->getShapeToClone());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "shapeToClone"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewShapePosition) {
	std::shared_ptr<PostAddNewShapeRequest> request = getPostAddNewShapeRequest();
	request->setPosition(utils->getInvalidIntTestValue("postAddNewShape", "position", request->getPosition()));
	utils->initialize("postAddNewShape", "position", request->getPosition());

	bool failed = true;
	try
	{
		api->postAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "position", request->getPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewShape", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewShape", "position", request->getPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewShape", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshape) {
	std::shared_ptr<PostAddNewSubshapeRequest> request = getPostAddNewSubshapeRequest();
	utils->initialize("postAddNewSubshape", "");
	std::shared_ptr<ShapeBase> result = api->postAddNewSubshape(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewSubshapeName) {
	std::shared_ptr<PostAddNewSubshapeRequest> request = getPostAddNewSubshapeRequest();
	request->setName(utils->getInvalidTestValue("postAddNewSubshape", "name", request->getName()));
	utils->initialize("postAddNewSubshape", "name", request->getName());

	bool failed = true;
	try
	{
		api->postAddNewSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeSlideIndex) {
	std::shared_ptr<PostAddNewSubshapeRequest> request = getPostAddNewSubshapeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postAddNewSubshape", "slideIndex", request->getSlideIndex()));
	utils->initialize("postAddNewSubshape", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postAddNewSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePath) {
	std::shared_ptr<PostAddNewSubshapeRequest> request = getPostAddNewSubshapeRequest();
	request->setPath(utils->getInvalidTestValue("postAddNewSubshape", "path", request->getPath()));
	utils->initialize("postAddNewSubshape", "path", request->getPath());

	bool failed = true;
	try
	{
		api->postAddNewSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeDto) {
	std::shared_ptr<PostAddNewSubshapeRequest> request = getPostAddNewSubshapeRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("postAddNewSubshape", "dto", request->getDto()));
	utils->initialize("postAddNewSubshape", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->postAddNewSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePassword) {
	std::shared_ptr<PostAddNewSubshapeRequest> request = getPostAddNewSubshapeRequest();
	request->setPassword(utils->getInvalidTestValue("postAddNewSubshape", "password", request->getPassword()));
	utils->initialize("postAddNewSubshape", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postAddNewSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeFolder) {
	std::shared_ptr<PostAddNewSubshapeRequest> request = getPostAddNewSubshapeRequest();
	request->setFolder(utils->getInvalidTestValue("postAddNewSubshape", "folder", request->getFolder()));
	utils->initialize("postAddNewSubshape", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postAddNewSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeStorage) {
	std::shared_ptr<PostAddNewSubshapeRequest> request = getPostAddNewSubshapeRequest();
	request->setStorage(utils->getInvalidTestValue("postAddNewSubshape", "storage", request->getStorage()));
	utils->initialize("postAddNewSubshape", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postAddNewSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeShapeToClone) {
	std::shared_ptr<PostAddNewSubshapeRequest> request = getPostAddNewSubshapeRequest();
	request->setShapeToClone(utils->getInvalidIntTestValue("postAddNewSubshape", "shapeToClone", request->getShapeToClone()));
	utils->initialize("postAddNewSubshape", "shapeToClone", request->getShapeToClone());

	bool failed = true;
	try
	{
		api->postAddNewSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "shapeToClone");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "shapeToClone", request->getShapeToClone());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "shapeToClone");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "shapeToClone", request->getShapeToClone());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "shapeToClone"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePosition) {
	std::shared_ptr<PostAddNewSubshapeRequest> request = getPostAddNewSubshapeRequest();
	request->setPosition(utils->getInvalidIntTestValue("postAddNewSubshape", "position", request->getPosition()));
	utils->initialize("postAddNewSubshape", "position", request->getPosition());

	bool failed = true;
	try
	{
		api->postAddNewSubshape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "position", request->getPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshape", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshape", "position", request->getPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshape", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraph) {
	std::shared_ptr<PostAddNewSubshapeParagraphRequest> request = getPostAddNewSubshapeParagraphRequest();
	utils->initialize("postAddNewSubshapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->postAddNewSubshapeParagraph(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphName) {
	std::shared_ptr<PostAddNewSubshapeParagraphRequest> request = getPostAddNewSubshapeParagraphRequest();
	request->setName(utils->getInvalidTestValue("postAddNewSubshapeParagraph", "name", request->getName()));
	utils->initialize("postAddNewSubshapeParagraph", "name", request->getName());

	bool failed = true;
	try
	{
		api->postAddNewSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphSlideIndex) {
	std::shared_ptr<PostAddNewSubshapeParagraphRequest> request = getPostAddNewSubshapeParagraphRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postAddNewSubshapeParagraph", "slideIndex", request->getSlideIndex()));
	utils->initialize("postAddNewSubshapeParagraph", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postAddNewSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphPath) {
	std::shared_ptr<PostAddNewSubshapeParagraphRequest> request = getPostAddNewSubshapeParagraphRequest();
	request->setPath(utils->getInvalidTestValue("postAddNewSubshapeParagraph", "path", request->getPath()));
	utils->initialize("postAddNewSubshapeParagraph", "path", request->getPath());

	bool failed = true;
	try
	{
		api->postAddNewSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphShapeIndex) {
	std::shared_ptr<PostAddNewSubshapeParagraphRequest> request = getPostAddNewSubshapeParagraphRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postAddNewSubshapeParagraph", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postAddNewSubshapeParagraph", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postAddNewSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphDto) {
	std::shared_ptr<PostAddNewSubshapeParagraphRequest> request = getPostAddNewSubshapeParagraphRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("postAddNewSubshapeParagraph", "dto", request->getDto()));
	utils->initialize("postAddNewSubshapeParagraph", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->postAddNewSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphPassword) {
	std::shared_ptr<PostAddNewSubshapeParagraphRequest> request = getPostAddNewSubshapeParagraphRequest();
	request->setPassword(utils->getInvalidTestValue("postAddNewSubshapeParagraph", "password", request->getPassword()));
	utils->initialize("postAddNewSubshapeParagraph", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postAddNewSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphFolder) {
	std::shared_ptr<PostAddNewSubshapeParagraphRequest> request = getPostAddNewSubshapeParagraphRequest();
	request->setFolder(utils->getInvalidTestValue("postAddNewSubshapeParagraph", "folder", request->getFolder()));
	utils->initialize("postAddNewSubshapeParagraph", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postAddNewSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphStorage) {
	std::shared_ptr<PostAddNewSubshapeParagraphRequest> request = getPostAddNewSubshapeParagraphRequest();
	request->setStorage(utils->getInvalidTestValue("postAddNewSubshapeParagraph", "storage", request->getStorage()));
	utils->initialize("postAddNewSubshapeParagraph", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postAddNewSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapeParagraphPosition) {
	std::shared_ptr<PostAddNewSubshapeParagraphRequest> request = getPostAddNewSubshapeParagraphRequest();
	request->setPosition(utils->getInvalidIntTestValue("postAddNewSubshapeParagraph", "position", request->getPosition()));
	utils->initialize("postAddNewSubshapeParagraph", "position", request->getPosition());

	bool failed = true;
	try
	{
		api->postAddNewSubshapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "position", request->getPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapeParagraph", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapeParagraph", "position", request->getPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapeParagraph", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortion) {
	std::shared_ptr<PostAddNewSubshapePortionRequest> request = getPostAddNewSubshapePortionRequest();
	utils->initialize("postAddNewSubshapePortion", "");
	std::shared_ptr<Portion> result = api->postAddNewSubshapePortion(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionName) {
	std::shared_ptr<PostAddNewSubshapePortionRequest> request = getPostAddNewSubshapePortionRequest();
	request->setName(utils->getInvalidTestValue("postAddNewSubshapePortion", "name", request->getName()));
	utils->initialize("postAddNewSubshapePortion", "name", request->getName());

	bool failed = true;
	try
	{
		api->postAddNewSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionSlideIndex) {
	std::shared_ptr<PostAddNewSubshapePortionRequest> request = getPostAddNewSubshapePortionRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postAddNewSubshapePortion", "slideIndex", request->getSlideIndex()));
	utils->initialize("postAddNewSubshapePortion", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postAddNewSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionPath) {
	std::shared_ptr<PostAddNewSubshapePortionRequest> request = getPostAddNewSubshapePortionRequest();
	request->setPath(utils->getInvalidTestValue("postAddNewSubshapePortion", "path", request->getPath()));
	utils->initialize("postAddNewSubshapePortion", "path", request->getPath());

	bool failed = true;
	try
	{
		api->postAddNewSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionShapeIndex) {
	std::shared_ptr<PostAddNewSubshapePortionRequest> request = getPostAddNewSubshapePortionRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postAddNewSubshapePortion", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postAddNewSubshapePortion", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postAddNewSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionParagraphIndex) {
	std::shared_ptr<PostAddNewSubshapePortionRequest> request = getPostAddNewSubshapePortionRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("postAddNewSubshapePortion", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("postAddNewSubshapePortion", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->postAddNewSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionDto) {
	std::shared_ptr<PostAddNewSubshapePortionRequest> request = getPostAddNewSubshapePortionRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("postAddNewSubshapePortion", "dto", request->getDto()));
	utils->initialize("postAddNewSubshapePortion", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->postAddNewSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionPassword) {
	std::shared_ptr<PostAddNewSubshapePortionRequest> request = getPostAddNewSubshapePortionRequest();
	request->setPassword(utils->getInvalidTestValue("postAddNewSubshapePortion", "password", request->getPassword()));
	utils->initialize("postAddNewSubshapePortion", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postAddNewSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionFolder) {
	std::shared_ptr<PostAddNewSubshapePortionRequest> request = getPostAddNewSubshapePortionRequest();
	request->setFolder(utils->getInvalidTestValue("postAddNewSubshapePortion", "folder", request->getFolder()));
	utils->initialize("postAddNewSubshapePortion", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postAddNewSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionStorage) {
	std::shared_ptr<PostAddNewSubshapePortionRequest> request = getPostAddNewSubshapePortionRequest();
	request->setStorage(utils->getInvalidTestValue("postAddNewSubshapePortion", "storage", request->getStorage()));
	utils->initialize("postAddNewSubshapePortion", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postAddNewSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNewSubshapePortionPosition) {
	std::shared_ptr<PostAddNewSubshapePortionRequest> request = getPostAddNewSubshapePortionRequest();
	request->setPosition(utils->getInvalidIntTestValue("postAddNewSubshapePortion", "position", request->getPosition()));
	utils->initialize("postAddNewSubshapePortion", "position", request->getPosition());

	bool failed = true;
	try
	{
		api->postAddNewSubshapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "position", request->getPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNewSubshapePortion", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNewSubshapePortion", "position", request->getPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNewSubshapePortion", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlide) {
	std::shared_ptr<PostAddNotesSlideRequest> request = getPostAddNotesSlideRequest();
	utils->initialize("postAddNotesSlide", "");
	std::shared_ptr<NotesSlide> result = api->postAddNotesSlide(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postAddNotesSlideName) {
	std::shared_ptr<PostAddNotesSlideRequest> request = getPostAddNotesSlideRequest();
	request->setName(utils->getInvalidTestValue("postAddNotesSlide", "name", request->getName()));
	utils->initialize("postAddNotesSlide", "name", request->getName());

	bool failed = true;
	try
	{
		api->postAddNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlideSlideIndex) {
	std::shared_ptr<PostAddNotesSlideRequest> request = getPostAddNotesSlideRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postAddNotesSlide", "slideIndex", request->getSlideIndex()));
	utils->initialize("postAddNotesSlide", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postAddNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlideDto) {
	std::shared_ptr<PostAddNotesSlideRequest> request = getPostAddNotesSlideRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("postAddNotesSlide", "dto", request->getDto()));
	utils->initialize("postAddNotesSlide", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->postAddNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlidePassword) {
	std::shared_ptr<PostAddNotesSlideRequest> request = getPostAddNotesSlideRequest();
	request->setPassword(utils->getInvalidTestValue("postAddNotesSlide", "password", request->getPassword()));
	utils->initialize("postAddNotesSlide", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postAddNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlideFolder) {
	std::shared_ptr<PostAddNotesSlideRequest> request = getPostAddNotesSlideRequest();
	request->setFolder(utils->getInvalidTestValue("postAddNotesSlide", "folder", request->getFolder()));
	utils->initialize("postAddNotesSlide", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postAddNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postAddNotesSlideStorage) {
	std::shared_ptr<PostAddNotesSlideRequest> request = getPostAddNotesSlideRequest();
	request->setStorage(utils->getInvalidTestValue("postAddNotesSlide", "storage", request->getStorage()));
	utils->initialize("postAddNotesSlide", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postAddNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postAddNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postAddNotesSlide", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postAddNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategory) {
	std::shared_ptr<PostChartCategoryRequest> request = getPostChartCategoryRequest();
	utils->initialize("postChartCategory", "");
	std::shared_ptr<Chart> result = api->postChartCategory(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postChartCategoryName) {
	std::shared_ptr<PostChartCategoryRequest> request = getPostChartCategoryRequest();
	request->setName(utils->getInvalidTestValue("postChartCategory", "name", request->getName()));
	utils->initialize("postChartCategory", "name", request->getName());

	bool failed = true;
	try
	{
		api->postChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategorySlideIndex) {
	std::shared_ptr<PostChartCategoryRequest> request = getPostChartCategoryRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postChartCategory", "slideIndex", request->getSlideIndex()));
	utils->initialize("postChartCategory", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategoryShapeIndex) {
	std::shared_ptr<PostChartCategoryRequest> request = getPostChartCategoryRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postChartCategory", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postChartCategory", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategoryCategory) {
	std::shared_ptr<PostChartCategoryRequest> request = getPostChartCategoryRequest();
	request->setCategory(utils->getInvalidTestValueForClass<>("postChartCategory", "category", request->getCategory()));
	utils->initialize("postChartCategory", "category", request->getCategory());

	bool failed = true;
	try
	{
		api->postChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "category");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "category", request->getCategory());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "category");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "category", request->getCategory());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "category"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategoryPassword) {
	std::shared_ptr<PostChartCategoryRequest> request = getPostChartCategoryRequest();
	request->setPassword(utils->getInvalidTestValue("postChartCategory", "password", request->getPassword()));
	utils->initialize("postChartCategory", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategoryFolder) {
	std::shared_ptr<PostChartCategoryRequest> request = getPostChartCategoryRequest();
	request->setFolder(utils->getInvalidTestValue("postChartCategory", "folder", request->getFolder()));
	utils->initialize("postChartCategory", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartCategoryStorage) {
	std::shared_ptr<PostChartCategoryRequest> request = getPostChartCategoryRequest();
	request->setStorage(utils->getInvalidTestValue("postChartCategory", "storage", request->getStorage()));
	utils->initialize("postChartCategory", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartCategory", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartCategory", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartCategory", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPoint) {
	std::shared_ptr<PostChartDataPointRequest> request = getPostChartDataPointRequest();
	utils->initialize("postChartDataPoint", "");
	std::shared_ptr<Chart> result = api->postChartDataPoint(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postChartDataPointName) {
	std::shared_ptr<PostChartDataPointRequest> request = getPostChartDataPointRequest();
	request->setName(utils->getInvalidTestValue("postChartDataPoint", "name", request->getName()));
	utils->initialize("postChartDataPoint", "name", request->getName());

	bool failed = true;
	try
	{
		api->postChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointSlideIndex) {
	std::shared_ptr<PostChartDataPointRequest> request = getPostChartDataPointRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postChartDataPoint", "slideIndex", request->getSlideIndex()));
	utils->initialize("postChartDataPoint", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointShapeIndex) {
	std::shared_ptr<PostChartDataPointRequest> request = getPostChartDataPointRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postChartDataPoint", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postChartDataPoint", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointSeriesIndex) {
	std::shared_ptr<PostChartDataPointRequest> request = getPostChartDataPointRequest();
	request->setSeriesIndex(utils->getInvalidIntTestValue("postChartDataPoint", "seriesIndex", request->getSeriesIndex()));
	utils->initialize("postChartDataPoint", "seriesIndex", request->getSeriesIndex());

	bool failed = true;
	try
	{
		api->postChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "seriesIndex", request->getSeriesIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "seriesIndex", request->getSeriesIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointDataPoint) {
	std::shared_ptr<PostChartDataPointRequest> request = getPostChartDataPointRequest();
	request->setDataPoint(utils->getInvalidTestValueForClass<>("postChartDataPoint", "dataPoint", request->getDataPoint()));
	utils->initialize("postChartDataPoint", "dataPoint", request->getDataPoint());

	bool failed = true;
	try
	{
		api->postChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "dataPoint");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "dataPoint", request->getDataPoint());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "dataPoint");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "dataPoint", request->getDataPoint());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "dataPoint"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointPassword) {
	std::shared_ptr<PostChartDataPointRequest> request = getPostChartDataPointRequest();
	request->setPassword(utils->getInvalidTestValue("postChartDataPoint", "password", request->getPassword()));
	utils->initialize("postChartDataPoint", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointFolder) {
	std::shared_ptr<PostChartDataPointRequest> request = getPostChartDataPointRequest();
	request->setFolder(utils->getInvalidTestValue("postChartDataPoint", "folder", request->getFolder()));
	utils->initialize("postChartDataPoint", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartDataPointStorage) {
	std::shared_ptr<PostChartDataPointRequest> request = getPostChartDataPointRequest();
	request->setStorage(utils->getInvalidTestValue("postChartDataPoint", "storage", request->getStorage()));
	utils->initialize("postChartDataPoint", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartDataPoint", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartDataPoint", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartDataPoint", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeries) {
	std::shared_ptr<PostChartSeriesRequest> request = getPostChartSeriesRequest();
	utils->initialize("postChartSeries", "");
	std::shared_ptr<Chart> result = api->postChartSeries(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postChartSeriesName) {
	std::shared_ptr<PostChartSeriesRequest> request = getPostChartSeriesRequest();
	request->setName(utils->getInvalidTestValue("postChartSeries", "name", request->getName()));
	utils->initialize("postChartSeries", "name", request->getName());

	bool failed = true;
	try
	{
		api->postChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesSlideIndex) {
	std::shared_ptr<PostChartSeriesRequest> request = getPostChartSeriesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postChartSeries", "slideIndex", request->getSlideIndex()));
	utils->initialize("postChartSeries", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesShapeIndex) {
	std::shared_ptr<PostChartSeriesRequest> request = getPostChartSeriesRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postChartSeries", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postChartSeries", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesSeries) {
	std::shared_ptr<PostChartSeriesRequest> request = getPostChartSeriesRequest();
	request->setSeries(utils->getInvalidTestValueForClass<>("postChartSeries", "series", request->getSeries()));
	utils->initialize("postChartSeries", "series", request->getSeries());

	bool failed = true;
	try
	{
		api->postChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "series");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "series", request->getSeries());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "series");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "series", request->getSeries());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "series"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesPassword) {
	std::shared_ptr<PostChartSeriesRequest> request = getPostChartSeriesRequest();
	request->setPassword(utils->getInvalidTestValue("postChartSeries", "password", request->getPassword()));
	utils->initialize("postChartSeries", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesFolder) {
	std::shared_ptr<PostChartSeriesRequest> request = getPostChartSeriesRequest();
	request->setFolder(utils->getInvalidTestValue("postChartSeries", "folder", request->getFolder()));
	utils->initialize("postChartSeries", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postChartSeriesStorage) {
	std::shared_ptr<PostChartSeriesRequest> request = getPostChartSeriesRequest();
	request->setStorage(utils->getInvalidTestValue("postChartSeries", "storage", request->getStorage()));
	utils->initialize("postChartSeries", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postChartSeries", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postChartSeries", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postChartSeries", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentation) {
	std::shared_ptr<PostCopyLayoutSlideFromSourcePresentationRequest> request = getPostCopyLayoutSlideFromSourcePresentationRequest();
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "");
	std::shared_ptr<LayoutSlide> result = api->postCopyLayoutSlideFromSourcePresentation(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationName) {
	std::shared_ptr<PostCopyLayoutSlideFromSourcePresentationRequest> request = getPostCopyLayoutSlideFromSourcePresentationRequest();
	request->setName(utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "name", request->getName()));
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "name", request->getName());

	bool failed = true;
	try
	{
		api->postCopyLayoutSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationCloneFrom) {
	std::shared_ptr<PostCopyLayoutSlideFromSourcePresentationRequest> request = getPostCopyLayoutSlideFromSourcePresentationRequest();
	request->setCloneFrom(utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", request->getCloneFrom()));
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", request->getCloneFrom());

	bool failed = true;
	try
	{
		api->postCopyLayoutSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", request->getCloneFrom());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", request->getCloneFrom());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "cloneFrom"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationCloneFromPosition) {
	std::shared_ptr<PostCopyLayoutSlideFromSourcePresentationRequest> request = getPostCopyLayoutSlideFromSourcePresentationRequest();
	request->setCloneFromPosition(utils->getInvalidIntTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", request->getCloneFromPosition()));
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", request->getCloneFromPosition());

	bool failed = true;
	try
	{
		api->postCopyLayoutSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", request->getCloneFromPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", request->getCloneFromPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationCloneFromPassword) {
	std::shared_ptr<PostCopyLayoutSlideFromSourcePresentationRequest> request = getPostCopyLayoutSlideFromSourcePresentationRequest();
	request->setCloneFromPassword(utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", request->getCloneFromPassword()));
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", request->getCloneFromPassword());

	bool failed = true;
	try
	{
		api->postCopyLayoutSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", request->getCloneFromPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", request->getCloneFromPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationCloneFromStorage) {
	std::shared_ptr<PostCopyLayoutSlideFromSourcePresentationRequest> request = getPostCopyLayoutSlideFromSourcePresentationRequest();
	request->setCloneFromStorage(utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", request->getCloneFromStorage()));
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", request->getCloneFromStorage());

	bool failed = true;
	try
	{
		api->postCopyLayoutSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", request->getCloneFromStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", request->getCloneFromStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationPassword) {
	std::shared_ptr<PostCopyLayoutSlideFromSourcePresentationRequest> request = getPostCopyLayoutSlideFromSourcePresentationRequest();
	request->setPassword(utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "password", request->getPassword()));
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postCopyLayoutSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationFolder) {
	std::shared_ptr<PostCopyLayoutSlideFromSourcePresentationRequest> request = getPostCopyLayoutSlideFromSourcePresentationRequest();
	request->setFolder(utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "folder", request->getFolder()));
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postCopyLayoutSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyLayoutSlideFromSourcePresentationStorage) {
	std::shared_ptr<PostCopyLayoutSlideFromSourcePresentationRequest> request = getPostCopyLayoutSlideFromSourcePresentationRequest();
	request->setStorage(utils->getInvalidTestValue("postCopyLayoutSlideFromSourcePresentation", "storage", request->getStorage()));
	utils->initialize("postCopyLayoutSlideFromSourcePresentation", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postCopyLayoutSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyLayoutSlideFromSourcePresentation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyLayoutSlideFromSourcePresentation", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyLayoutSlideFromSourcePresentation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentation) {
	std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> request = getPostCopyMasterSlideFromSourcePresentationRequest();
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "");
	std::shared_ptr<MasterSlide> result = api->postCopyMasterSlideFromSourcePresentation(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationName) {
	std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> request = getPostCopyMasterSlideFromSourcePresentationRequest();
	request->setName(utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "name", request->getName()));
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "name", request->getName());

	bool failed = true;
	try
	{
		api->postCopyMasterSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationCloneFrom) {
	std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> request = getPostCopyMasterSlideFromSourcePresentationRequest();
	request->setCloneFrom(utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom", request->getCloneFrom()));
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "cloneFrom", request->getCloneFrom());

	bool failed = true;
	try
	{
		api->postCopyMasterSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFrom", request->getCloneFrom());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFrom", request->getCloneFrom());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "cloneFrom"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationCloneFromPosition) {
	std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> request = getPostCopyMasterSlideFromSourcePresentationRequest();
	request->setCloneFromPosition(utils->getInvalidIntTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", request->getCloneFromPosition()));
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", request->getCloneFromPosition());

	bool failed = true;
	try
	{
		api->postCopyMasterSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", request->getCloneFromPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", request->getCloneFromPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationCloneFromPassword) {
	std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> request = getPostCopyMasterSlideFromSourcePresentationRequest();
	request->setCloneFromPassword(utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", request->getCloneFromPassword()));
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", request->getCloneFromPassword());

	bool failed = true;
	try
	{
		api->postCopyMasterSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", request->getCloneFromPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", request->getCloneFromPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationCloneFromStorage) {
	std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> request = getPostCopyMasterSlideFromSourcePresentationRequest();
	request->setCloneFromStorage(utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", request->getCloneFromStorage()));
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", request->getCloneFromStorage());

	bool failed = true;
	try
	{
		api->postCopyMasterSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", request->getCloneFromStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", request->getCloneFromStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationApplyToAll) {
	std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> request = getPostCopyMasterSlideFromSourcePresentationRequest();
	request->setApplyToAll(utils->getInvalidBoolTestValue("postCopyMasterSlideFromSourcePresentation", "applyToAll", request->getApplyToAll()));
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "applyToAll", request->getApplyToAll());

	bool failed = true;
	try
	{
		api->postCopyMasterSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "applyToAll");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "applyToAll", request->getApplyToAll());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "applyToAll");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "applyToAll", request->getApplyToAll());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "applyToAll"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationPassword) {
	std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> request = getPostCopyMasterSlideFromSourcePresentationRequest();
	request->setPassword(utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "password", request->getPassword()));
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postCopyMasterSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationFolder) {
	std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> request = getPostCopyMasterSlideFromSourcePresentationRequest();
	request->setFolder(utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "folder", request->getFolder()));
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postCopyMasterSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postCopyMasterSlideFromSourcePresentationStorage) {
	std::shared_ptr<PostCopyMasterSlideFromSourcePresentationRequest> request = getPostCopyMasterSlideFromSourcePresentationRequest();
	request->setStorage(utils->getInvalidTestValue("postCopyMasterSlideFromSourcePresentation", "storage", request->getStorage()));
	utils->initialize("postCopyMasterSlideFromSourcePresentation", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postCopyMasterSlideFromSourcePresentation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postCopyMasterSlideFromSourcePresentation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postCopyMasterSlideFromSourcePresentation", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postCopyMasterSlideFromSourcePresentation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlide) {
	std::shared_ptr<PostGetNotesSlideRequest> request = getPostGetNotesSlideRequest();
	utils->initialize("postGetNotesSlide", "");
	std::shared_ptr<NotesSlide> result = api->postGetNotesSlide(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postGetNotesSlideDocument) {
	std::shared_ptr<PostGetNotesSlideRequest> request = getPostGetNotesSlideRequest();
	request->setDocument(utils->getInvalidBinaryTestValue("postGetNotesSlide", "document", request->getDocument()));
	utils->initialize("postGetNotesSlide", "document", request->getDocument());

	bool failed = true;
	try
	{
		api->postGetNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "document", request->getDocument());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "document", request->getDocument());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlide", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideSlideIndex) {
	std::shared_ptr<PostGetNotesSlideRequest> request = getPostGetNotesSlideRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postGetNotesSlide", "slideIndex", request->getSlideIndex()));
	utils->initialize("postGetNotesSlide", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postGetNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlidePassword) {
	std::shared_ptr<PostGetNotesSlideRequest> request = getPostGetNotesSlideRequest();
	request->setPassword(utils->getInvalidTestValue("postGetNotesSlide", "password", request->getPassword()));
	utils->initialize("postGetNotesSlide", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postGetNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlide", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideExists) {
	std::shared_ptr<PostGetNotesSlideExistsRequest> request = getPostGetNotesSlideExistsRequest();
	utils->initialize("postGetNotesSlideExists", "");
	std::shared_ptr<EntityExists> result = api->postGetNotesSlideExists(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postGetNotesSlideExistsDocument) {
	std::shared_ptr<PostGetNotesSlideExistsRequest> request = getPostGetNotesSlideExistsRequest();
	request->setDocument(utils->getInvalidBinaryTestValue("postGetNotesSlideExists", "document", request->getDocument()));
	utils->initialize("postGetNotesSlideExists", "document", request->getDocument());

	bool failed = true;
	try
	{
		api->postGetNotesSlideExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "document", request->getDocument());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "document", request->getDocument());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideExists", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideExistsSlideIndex) {
	std::shared_ptr<PostGetNotesSlideExistsRequest> request = getPostGetNotesSlideExistsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postGetNotesSlideExists", "slideIndex", request->getSlideIndex()));
	utils->initialize("postGetNotesSlideExists", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postGetNotesSlideExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideExists", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideExistsPassword) {
	std::shared_ptr<PostGetNotesSlideExistsRequest> request = getPostGetNotesSlideExistsRequest();
	request->setPassword(utils->getInvalidTestValue("postGetNotesSlideExists", "password", request->getPassword()));
	utils->initialize("postGetNotesSlideExists", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postGetNotesSlideExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideExists", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideExists", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideExists", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormat) {
	std::shared_ptr<PostGetNotesSlideWithFormatRequest> request = getPostGetNotesSlideWithFormatRequest();
	utils->initialize("postGetNotesSlideWithFormat", "");
	HttpContent result = api->postGetNotesSlideWithFormat(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatDocument) {
	std::shared_ptr<PostGetNotesSlideWithFormatRequest> request = getPostGetNotesSlideWithFormatRequest();
	request->setDocument(utils->getInvalidBinaryTestValue("postGetNotesSlideWithFormat", "document", request->getDocument()));
	utils->initialize("postGetNotesSlideWithFormat", "document", request->getDocument());

	bool failed = true;
	try
	{
		api->postGetNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "document", request->getDocument());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "document", request->getDocument());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatSlideIndex) {
	std::shared_ptr<PostGetNotesSlideWithFormatRequest> request = getPostGetNotesSlideWithFormatRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postGetNotesSlideWithFormat", "slideIndex", request->getSlideIndex()));
	utils->initialize("postGetNotesSlideWithFormat", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postGetNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatFormat) {
	std::shared_ptr<PostGetNotesSlideWithFormatRequest> request = getPostGetNotesSlideWithFormatRequest();
	request->setFormat(utils->getInvalidTestValue("postGetNotesSlideWithFormat", "format", request->getFormat()));
	utils->initialize("postGetNotesSlideWithFormat", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->postGetNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatWidth) {
	std::shared_ptr<PostGetNotesSlideWithFormatRequest> request = getPostGetNotesSlideWithFormatRequest();
	request->setWidth(utils->getInvalidIntTestValue("postGetNotesSlideWithFormat", "width", request->getWidth()));
	utils->initialize("postGetNotesSlideWithFormat", "width", request->getWidth());

	bool failed = true;
	try
	{
		api->postGetNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "width", request->getWidth());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "width", request->getWidth());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatHeight) {
	std::shared_ptr<PostGetNotesSlideWithFormatRequest> request = getPostGetNotesSlideWithFormatRequest();
	request->setHeight(utils->getInvalidIntTestValue("postGetNotesSlideWithFormat", "height", request->getHeight()));
	utils->initialize("postGetNotesSlideWithFormat", "height", request->getHeight());

	bool failed = true;
	try
	{
		api->postGetNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "height", request->getHeight());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "height", request->getHeight());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatPassword) {
	std::shared_ptr<PostGetNotesSlideWithFormatRequest> request = getPostGetNotesSlideWithFormatRequest();
	request->setPassword(utils->getInvalidTestValue("postGetNotesSlideWithFormat", "password", request->getPassword()));
	utils->initialize("postGetNotesSlideWithFormat", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postGetNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postGetNotesSlideWithFormatFontsFolder) {
	std::shared_ptr<PostGetNotesSlideWithFormatRequest> request = getPostGetNotesSlideWithFormatRequest();
	request->setFontsFolder(utils->getInvalidTestValue("postGetNotesSlideWithFormat", "fontsFolder", request->getFontsFolder()));
	utils->initialize("postGetNotesSlideWithFormat", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->postGetNotesSlideWithFormat(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postGetNotesSlideWithFormat", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postGetNotesSlideWithFormat", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postGetNotesSlideWithFormat", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraph) {
	std::shared_ptr<PostNotesSlideAddNewParagraphRequest> request = getPostNotesSlideAddNewParagraphRequest();
	utils->initialize("postNotesSlideAddNewParagraph", "");
	std::shared_ptr<Paragraph> result = api->postNotesSlideAddNewParagraph(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphName) {
	std::shared_ptr<PostNotesSlideAddNewParagraphRequest> request = getPostNotesSlideAddNewParagraphRequest();
	request->setName(utils->getInvalidTestValue("postNotesSlideAddNewParagraph", "name", request->getName()));
	utils->initialize("postNotesSlideAddNewParagraph", "name", request->getName());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphSlideIndex) {
	std::shared_ptr<PostNotesSlideAddNewParagraphRequest> request = getPostNotesSlideAddNewParagraphRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postNotesSlideAddNewParagraph", "slideIndex", request->getSlideIndex()));
	utils->initialize("postNotesSlideAddNewParagraph", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphShapeIndex) {
	std::shared_ptr<PostNotesSlideAddNewParagraphRequest> request = getPostNotesSlideAddNewParagraphRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postNotesSlideAddNewParagraph", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postNotesSlideAddNewParagraph", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphDto) {
	std::shared_ptr<PostNotesSlideAddNewParagraphRequest> request = getPostNotesSlideAddNewParagraphRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("postNotesSlideAddNewParagraph", "dto", request->getDto()));
	utils->initialize("postNotesSlideAddNewParagraph", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphPassword) {
	std::shared_ptr<PostNotesSlideAddNewParagraphRequest> request = getPostNotesSlideAddNewParagraphRequest();
	request->setPassword(utils->getInvalidTestValue("postNotesSlideAddNewParagraph", "password", request->getPassword()));
	utils->initialize("postNotesSlideAddNewParagraph", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphFolder) {
	std::shared_ptr<PostNotesSlideAddNewParagraphRequest> request = getPostNotesSlideAddNewParagraphRequest();
	request->setFolder(utils->getInvalidTestValue("postNotesSlideAddNewParagraph", "folder", request->getFolder()));
	utils->initialize("postNotesSlideAddNewParagraph", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphStorage) {
	std::shared_ptr<PostNotesSlideAddNewParagraphRequest> request = getPostNotesSlideAddNewParagraphRequest();
	request->setStorage(utils->getInvalidTestValue("postNotesSlideAddNewParagraph", "storage", request->getStorage()));
	utils->initialize("postNotesSlideAddNewParagraph", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewParagraphPosition) {
	std::shared_ptr<PostNotesSlideAddNewParagraphRequest> request = getPostNotesSlideAddNewParagraphRequest();
	request->setPosition(utils->getInvalidIntTestValue("postNotesSlideAddNewParagraph", "position", request->getPosition()));
	utils->initialize("postNotesSlideAddNewParagraph", "position", request->getPosition());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "position", request->getPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewParagraph", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewParagraph", "position", request->getPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewParagraph", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortion) {
	std::shared_ptr<PostNotesSlideAddNewPortionRequest> request = getPostNotesSlideAddNewPortionRequest();
	utils->initialize("postNotesSlideAddNewPortion", "");
	std::shared_ptr<Portion> result = api->postNotesSlideAddNewPortion(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionName) {
	std::shared_ptr<PostNotesSlideAddNewPortionRequest> request = getPostNotesSlideAddNewPortionRequest();
	request->setName(utils->getInvalidTestValue("postNotesSlideAddNewPortion", "name", request->getName()));
	utils->initialize("postNotesSlideAddNewPortion", "name", request->getName());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionSlideIndex) {
	std::shared_ptr<PostNotesSlideAddNewPortionRequest> request = getPostNotesSlideAddNewPortionRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postNotesSlideAddNewPortion", "slideIndex", request->getSlideIndex()));
	utils->initialize("postNotesSlideAddNewPortion", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionShapeIndex) {
	std::shared_ptr<PostNotesSlideAddNewPortionRequest> request = getPostNotesSlideAddNewPortionRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postNotesSlideAddNewPortion", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postNotesSlideAddNewPortion", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionParagraphIndex) {
	std::shared_ptr<PostNotesSlideAddNewPortionRequest> request = getPostNotesSlideAddNewPortionRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("postNotesSlideAddNewPortion", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("postNotesSlideAddNewPortion", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionDto) {
	std::shared_ptr<PostNotesSlideAddNewPortionRequest> request = getPostNotesSlideAddNewPortionRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("postNotesSlideAddNewPortion", "dto", request->getDto()));
	utils->initialize("postNotesSlideAddNewPortion", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionPassword) {
	std::shared_ptr<PostNotesSlideAddNewPortionRequest> request = getPostNotesSlideAddNewPortionRequest();
	request->setPassword(utils->getInvalidTestValue("postNotesSlideAddNewPortion", "password", request->getPassword()));
	utils->initialize("postNotesSlideAddNewPortion", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionFolder) {
	std::shared_ptr<PostNotesSlideAddNewPortionRequest> request = getPostNotesSlideAddNewPortionRequest();
	request->setFolder(utils->getInvalidTestValue("postNotesSlideAddNewPortion", "folder", request->getFolder()));
	utils->initialize("postNotesSlideAddNewPortion", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionStorage) {
	std::shared_ptr<PostNotesSlideAddNewPortionRequest> request = getPostNotesSlideAddNewPortionRequest();
	request->setStorage(utils->getInvalidTestValue("postNotesSlideAddNewPortion", "storage", request->getStorage()));
	utils->initialize("postNotesSlideAddNewPortion", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewPortionPosition) {
	std::shared_ptr<PostNotesSlideAddNewPortionRequest> request = getPostNotesSlideAddNewPortionRequest();
	request->setPosition(utils->getInvalidIntTestValue("postNotesSlideAddNewPortion", "position", request->getPosition()));
	utils->initialize("postNotesSlideAddNewPortion", "position", request->getPosition());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewPortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "position", request->getPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewPortion", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewPortion", "position", request->getPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewPortion", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShape) {
	std::shared_ptr<PostNotesSlideAddNewShapeRequest> request = getPostNotesSlideAddNewShapeRequest();
	utils->initialize("postNotesSlideAddNewShape", "");
	std::shared_ptr<ShapeBase> result = api->postNotesSlideAddNewShape(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeName) {
	std::shared_ptr<PostNotesSlideAddNewShapeRequest> request = getPostNotesSlideAddNewShapeRequest();
	request->setName(utils->getInvalidTestValue("postNotesSlideAddNewShape", "name", request->getName()));
	utils->initialize("postNotesSlideAddNewShape", "name", request->getName());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeSlideIndex) {
	std::shared_ptr<PostNotesSlideAddNewShapeRequest> request = getPostNotesSlideAddNewShapeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postNotesSlideAddNewShape", "slideIndex", request->getSlideIndex()));
	utils->initialize("postNotesSlideAddNewShape", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeDto) {
	std::shared_ptr<PostNotesSlideAddNewShapeRequest> request = getPostNotesSlideAddNewShapeRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("postNotesSlideAddNewShape", "dto", request->getDto()));
	utils->initialize("postNotesSlideAddNewShape", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapePassword) {
	std::shared_ptr<PostNotesSlideAddNewShapeRequest> request = getPostNotesSlideAddNewShapeRequest();
	request->setPassword(utils->getInvalidTestValue("postNotesSlideAddNewShape", "password", request->getPassword()));
	utils->initialize("postNotesSlideAddNewShape", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeFolder) {
	std::shared_ptr<PostNotesSlideAddNewShapeRequest> request = getPostNotesSlideAddNewShapeRequest();
	request->setFolder(utils->getInvalidTestValue("postNotesSlideAddNewShape", "folder", request->getFolder()));
	utils->initialize("postNotesSlideAddNewShape", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeStorage) {
	std::shared_ptr<PostNotesSlideAddNewShapeRequest> request = getPostNotesSlideAddNewShapeRequest();
	request->setStorage(utils->getInvalidTestValue("postNotesSlideAddNewShape", "storage", request->getStorage()));
	utils->initialize("postNotesSlideAddNewShape", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapeShapeToClone) {
	std::shared_ptr<PostNotesSlideAddNewShapeRequest> request = getPostNotesSlideAddNewShapeRequest();
	request->setShapeToClone(utils->getInvalidIntTestValue("postNotesSlideAddNewShape", "shapeToClone", request->getShapeToClone()));
	utils->initialize("postNotesSlideAddNewShape", "shapeToClone", request->getShapeToClone());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "shapeToClone");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "shapeToClone", request->getShapeToClone());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "shapeToClone");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "shapeToClone", request->getShapeToClone());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "shapeToClone"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideAddNewShapePosition) {
	std::shared_ptr<PostNotesSlideAddNewShapeRequest> request = getPostNotesSlideAddNewShapeRequest();
	request->setPosition(utils->getInvalidIntTestValue("postNotesSlideAddNewShape", "position", request->getPosition()));
	utils->initialize("postNotesSlideAddNewShape", "position", request->getPosition());

	bool failed = true;
	try
	{
		api->postNotesSlideAddNewShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "position", request->getPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideAddNewShape", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideAddNewShape", "position", request->getPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideAddNewShape", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAs) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	utils->initialize("postNotesSlideShapeSaveAs", "");
	HttpContent result = api->postNotesSlideShapeSaveAs(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsName) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setName(utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "name", request->getName()));
	utils->initialize("postNotesSlideShapeSaveAs", "name", request->getName());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsSlideIndex) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postNotesSlideShapeSaveAs", "slideIndex", request->getSlideIndex()));
	utils->initialize("postNotesSlideShapeSaveAs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsShapeIndex) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postNotesSlideShapeSaveAs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postNotesSlideShapeSaveAs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsFormat) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setFormat(utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "format", request->getFormat()));
	utils->initialize("postNotesSlideShapeSaveAs", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsOptions) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setOptions(utils->getInvalidTestValueForClass<>("postNotesSlideShapeSaveAs", "options", request->getOptions()));
	utils->initialize("postNotesSlideShapeSaveAs", "options", request->getOptions());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "options", request->getOptions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "options", request->getOptions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsPassword) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setPassword(utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "password", request->getPassword()));
	utils->initialize("postNotesSlideShapeSaveAs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsFolder) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setFolder(utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "folder", request->getFolder()));
	utils->initialize("postNotesSlideShapeSaveAs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsStorage) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setStorage(utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "storage", request->getStorage()));
	utils->initialize("postNotesSlideShapeSaveAs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsScaleX) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setScaleX(utils->getInvalidDoubleTestValue("postNotesSlideShapeSaveAs", "scaleX", request->getScaleX()));
	utils->initialize("postNotesSlideShapeSaveAs", "scaleX", request->getScaleX());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "scaleX", request->getScaleX());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "scaleX", request->getScaleX());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsScaleY) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setScaleY(utils->getInvalidDoubleTestValue("postNotesSlideShapeSaveAs", "scaleY", request->getScaleY()));
	utils->initialize("postNotesSlideShapeSaveAs", "scaleY", request->getScaleY());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "scaleY", request->getScaleY());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "scaleY", request->getScaleY());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsBounds) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setBounds(utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "bounds", request->getBounds()));
	utils->initialize("postNotesSlideShapeSaveAs", "bounds", request->getBounds());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "bounds", request->getBounds());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "bounds", request->getBounds());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postNotesSlideShapeSaveAsFontsFolder) {
	std::shared_ptr<PostNotesSlideShapeSaveAsRequest> request = getPostNotesSlideShapeSaveAsRequest();
	request->setFontsFolder(utils->getInvalidTestValue("postNotesSlideShapeSaveAs", "fontsFolder", request->getFontsFolder()));
	utils->initialize("postNotesSlideShapeSaveAs", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->postNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postNotesSlideShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postNotesSlideShapeSaveAs", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postNotesSlideShapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationMerge) {
	std::shared_ptr<PostPresentationMergeRequest> request = getPostPresentationMergeRequest();
	utils->initialize("postPresentationMerge", "");
	std::shared_ptr<Document> result = api->postPresentationMerge(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postPresentationMergeName) {
	std::shared_ptr<PostPresentationMergeRequest> request = getPostPresentationMergeRequest();
	request->setName(utils->getInvalidTestValue("postPresentationMerge", "name", request->getName()));
	utils->initialize("postPresentationMerge", "name", request->getName());

	bool failed = true;
	try
	{
		api->postPresentationMerge(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationMerge", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationMergeRequest) {
	std::shared_ptr<PostPresentationMergeRequest> request = getPostPresentationMergeRequest();
	request->setRequest(utils->getInvalidTestValueForClass<>("postPresentationMerge", "request", request->getRequest()));
	utils->initialize("postPresentationMerge", "request", request->getRequest());

	bool failed = true;
	try
	{
		api->postPresentationMerge(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "request");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "request", request->getRequest());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "request");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "request", request->getRequest());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationMerge", "request"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationMergePassword) {
	std::shared_ptr<PostPresentationMergeRequest> request = getPostPresentationMergeRequest();
	request->setPassword(utils->getInvalidTestValue("postPresentationMerge", "password", request->getPassword()));
	utils->initialize("postPresentationMerge", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postPresentationMerge(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationMerge", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationMergeStorage) {
	std::shared_ptr<PostPresentationMergeRequest> request = getPostPresentationMergeRequest();
	request->setStorage(utils->getInvalidTestValue("postPresentationMerge", "storage", request->getStorage()));
	utils->initialize("postPresentationMerge", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postPresentationMerge(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationMerge", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postPresentationMergeFolder) {
	std::shared_ptr<PostPresentationMergeRequest> request = getPostPresentationMergeRequest();
	request->setFolder(utils->getInvalidTestValue("postPresentationMerge", "folder", request->getFolder()));
	utils->initialize("postPresentationMerge", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postPresentationMerge(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postPresentationMerge", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postPresentationMerge", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postPresentationMerge", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSection) {
	std::shared_ptr<PostSectionRequest> request = getPostSectionRequest();
	utils->initialize("postSection", "");
	std::shared_ptr<Sections> result = api->postSection(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSectionName) {
	std::shared_ptr<PostSectionRequest> request = getPostSectionRequest();
	request->setName(utils->getInvalidTestValue("postSection", "name", request->getName()));
	utils->initialize("postSection", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionSectionName) {
	std::shared_ptr<PostSectionRequest> request = getPostSectionRequest();
	request->setSectionName(utils->getInvalidTestValue("postSection", "sectionName", request->getSectionName()));
	utils->initialize("postSection", "sectionName", request->getSectionName());

	bool failed = true;
	try
	{
		api->postSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "sectionName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "sectionName", request->getSectionName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "sectionName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "sectionName", request->getSectionName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "sectionName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionSlideIndex) {
	std::shared_ptr<PostSectionRequest> request = getPostSectionRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postSection", "slideIndex", request->getSlideIndex()));
	utils->initialize("postSection", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionPassword) {
	std::shared_ptr<PostSectionRequest> request = getPostSectionRequest();
	request->setPassword(utils->getInvalidTestValue("postSection", "password", request->getPassword()));
	utils->initialize("postSection", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionFolder) {
	std::shared_ptr<PostSectionRequest> request = getPostSectionRequest();
	request->setFolder(utils->getInvalidTestValue("postSection", "folder", request->getFolder()));
	utils->initialize("postSection", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionStorage) {
	std::shared_ptr<PostSectionRequest> request = getPostSectionRequest();
	request->setStorage(utils->getInvalidTestValue("postSection", "storage", request->getStorage()));
	utils->initialize("postSection", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSection", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSection", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMove) {
	std::shared_ptr<PostSectionMoveRequest> request = getPostSectionMoveRequest();
	utils->initialize("postSectionMove", "");
	std::shared_ptr<Sections> result = api->postSectionMove(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSectionMoveName) {
	std::shared_ptr<PostSectionMoveRequest> request = getPostSectionMoveRequest();
	request->setName(utils->getInvalidTestValue("postSectionMove", "name", request->getName()));
	utils->initialize("postSectionMove", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSectionMove(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMoveSectionIndex) {
	std::shared_ptr<PostSectionMoveRequest> request = getPostSectionMoveRequest();
	request->setSectionIndex(utils->getInvalidIntTestValue("postSectionMove", "sectionIndex", request->getSectionIndex()));
	utils->initialize("postSectionMove", "sectionIndex", request->getSectionIndex());

	bool failed = true;
	try
	{
		api->postSectionMove(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "sectionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "sectionIndex", request->getSectionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "sectionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "sectionIndex", request->getSectionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "sectionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMoveNewPosition) {
	std::shared_ptr<PostSectionMoveRequest> request = getPostSectionMoveRequest();
	request->setNewPosition(utils->getInvalidIntTestValue("postSectionMove", "newPosition", request->getNewPosition()));
	utils->initialize("postSectionMove", "newPosition", request->getNewPosition());

	bool failed = true;
	try
	{
		api->postSectionMove(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "newPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "newPosition", request->getNewPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "newPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "newPosition", request->getNewPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "newPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMovePassword) {
	std::shared_ptr<PostSectionMoveRequest> request = getPostSectionMoveRequest();
	request->setPassword(utils->getInvalidTestValue("postSectionMove", "password", request->getPassword()));
	utils->initialize("postSectionMove", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSectionMove(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMoveFolder) {
	std::shared_ptr<PostSectionMoveRequest> request = getPostSectionMoveRequest();
	request->setFolder(utils->getInvalidTestValue("postSectionMove", "folder", request->getFolder()));
	utils->initialize("postSectionMove", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSectionMove(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSectionMoveStorage) {
	std::shared_ptr<PostSectionMoveRequest> request = getPostSectionMoveRequest();
	request->setStorage(utils->getInvalidTestValue("postSectionMove", "storage", request->getStorage()));
	utils->initialize("postSectionMove", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSectionMove(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSectionMove", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSectionMove", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSectionMove", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAs) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	utils->initialize("postShapeSaveAs", "");
	HttpContent result = api->postShapeSaveAs(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postShapeSaveAsName) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setName(utils->getInvalidTestValue("postShapeSaveAs", "name", request->getName()));
	utils->initialize("postShapeSaveAs", "name", request->getName());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsSlideIndex) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postShapeSaveAs", "slideIndex", request->getSlideIndex()));
	utils->initialize("postShapeSaveAs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsShapeIndex) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postShapeSaveAs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postShapeSaveAs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsFormat) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setFormat(utils->getInvalidTestValue("postShapeSaveAs", "format", request->getFormat()));
	utils->initialize("postShapeSaveAs", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsOptions) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setOptions(utils->getInvalidTestValueForClass<>("postShapeSaveAs", "options", request->getOptions()));
	utils->initialize("postShapeSaveAs", "options", request->getOptions());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "options", request->getOptions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "options", request->getOptions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsPassword) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setPassword(utils->getInvalidTestValue("postShapeSaveAs", "password", request->getPassword()));
	utils->initialize("postShapeSaveAs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsFolder) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setFolder(utils->getInvalidTestValue("postShapeSaveAs", "folder", request->getFolder()));
	utils->initialize("postShapeSaveAs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsStorage) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setStorage(utils->getInvalidTestValue("postShapeSaveAs", "storage", request->getStorage()));
	utils->initialize("postShapeSaveAs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsScaleX) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setScaleX(utils->getInvalidDoubleTestValue("postShapeSaveAs", "scaleX", request->getScaleX()));
	utils->initialize("postShapeSaveAs", "scaleX", request->getScaleX());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "scaleX", request->getScaleX());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "scaleX", request->getScaleX());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsScaleY) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setScaleY(utils->getInvalidDoubleTestValue("postShapeSaveAs", "scaleY", request->getScaleY()));
	utils->initialize("postShapeSaveAs", "scaleY", request->getScaleY());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "scaleY", request->getScaleY());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "scaleY", request->getScaleY());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsBounds) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setBounds(utils->getInvalidTestValue("postShapeSaveAs", "bounds", request->getBounds()));
	utils->initialize("postShapeSaveAs", "bounds", request->getBounds());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "bounds", request->getBounds());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "bounds", request->getBounds());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postShapeSaveAsFontsFolder) {
	std::shared_ptr<PostShapeSaveAsRequest> request = getPostShapeSaveAsRequest();
	request->setFontsFolder(utils->getInvalidTestValue("postShapeSaveAs", "fontsFolder", request->getFontsFolder()));
	utils->initialize("postShapeSaveAs", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->postShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postShapeSaveAs", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postShapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffect) {
	std::shared_ptr<PostSlideAnimationEffectRequest> request = getPostSlideAnimationEffectRequest();
	utils->initialize("postSlideAnimationEffect", "");
	std::shared_ptr<SlideAnimation> result = api->postSlideAnimationEffect(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlideAnimationEffectName) {
	std::shared_ptr<PostSlideAnimationEffectRequest> request = getPostSlideAnimationEffectRequest();
	request->setName(utils->getInvalidTestValue("postSlideAnimationEffect", "name", request->getName()));
	utils->initialize("postSlideAnimationEffect", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffectSlideIndex) {
	std::shared_ptr<PostSlideAnimationEffectRequest> request = getPostSlideAnimationEffectRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postSlideAnimationEffect", "slideIndex", request->getSlideIndex()));
	utils->initialize("postSlideAnimationEffect", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffectEffect) {
	std::shared_ptr<PostSlideAnimationEffectRequest> request = getPostSlideAnimationEffectRequest();
	request->setEffect(utils->getInvalidTestValueForClass<>("postSlideAnimationEffect", "effect", request->getEffect()));
	utils->initialize("postSlideAnimationEffect", "effect", request->getEffect());

	bool failed = true;
	try
	{
		api->postSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "effect", request->getEffect());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "effect", request->getEffect());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffectPassword) {
	std::shared_ptr<PostSlideAnimationEffectRequest> request = getPostSlideAnimationEffectRequest();
	request->setPassword(utils->getInvalidTestValue("postSlideAnimationEffect", "password", request->getPassword()));
	utils->initialize("postSlideAnimationEffect", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffectFolder) {
	std::shared_ptr<PostSlideAnimationEffectRequest> request = getPostSlideAnimationEffectRequest();
	request->setFolder(utils->getInvalidTestValue("postSlideAnimationEffect", "folder", request->getFolder()));
	utils->initialize("postSlideAnimationEffect", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationEffectStorage) {
	std::shared_ptr<PostSlideAnimationEffectRequest> request = getPostSlideAnimationEffectRequest();
	request->setStorage(utils->getInvalidTestValue("postSlideAnimationEffect", "storage", request->getStorage()));
	utils->initialize("postSlideAnimationEffect", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationEffect", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequence) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceRequest> request = getPostSlideAnimationInteractiveSequenceRequest();
	utils->initialize("postSlideAnimationInteractiveSequence", "");
	std::shared_ptr<SlideAnimation> result = api->postSlideAnimationInteractiveSequence(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceName) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceRequest> request = getPostSlideAnimationInteractiveSequenceRequest();
	request->setName(utils->getInvalidTestValue("postSlideAnimationInteractiveSequence", "name", request->getName()));
	utils->initialize("postSlideAnimationInteractiveSequence", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceSlideIndex) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceRequest> request = getPostSlideAnimationInteractiveSequenceRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postSlideAnimationInteractiveSequence", "slideIndex", request->getSlideIndex()));
	utils->initialize("postSlideAnimationInteractiveSequence", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceSequence) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceRequest> request = getPostSlideAnimationInteractiveSequenceRequest();
	request->setSequence(utils->getInvalidTestValueForClass<>("postSlideAnimationInteractiveSequence", "sequence", request->getSequence()));
	utils->initialize("postSlideAnimationInteractiveSequence", "sequence", request->getSequence());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "sequence");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "sequence", request->getSequence());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "sequence");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "sequence", request->getSequence());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "sequence"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequencePassword) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceRequest> request = getPostSlideAnimationInteractiveSequenceRequest();
	request->setPassword(utils->getInvalidTestValue("postSlideAnimationInteractiveSequence", "password", request->getPassword()));
	utils->initialize("postSlideAnimationInteractiveSequence", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceFolder) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceRequest> request = getPostSlideAnimationInteractiveSequenceRequest();
	request->setFolder(utils->getInvalidTestValue("postSlideAnimationInteractiveSequence", "folder", request->getFolder()));
	utils->initialize("postSlideAnimationInteractiveSequence", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceStorage) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceRequest> request = getPostSlideAnimationInteractiveSequenceRequest();
	request->setStorage(utils->getInvalidTestValue("postSlideAnimationInteractiveSequence", "storage", request->getStorage()));
	utils->initialize("postSlideAnimationInteractiveSequence", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequence(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequence", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequence", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffect) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceEffectRequest> request = getPostSlideAnimationInteractiveSequenceEffectRequest();
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "");
	std::shared_ptr<SlideAnimation> result = api->postSlideAnimationInteractiveSequenceEffect(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectName) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceEffectRequest> request = getPostSlideAnimationInteractiveSequenceEffectRequest();
	request->setName(utils->getInvalidTestValue("postSlideAnimationInteractiveSequenceEffect", "name", request->getName()));
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectSlideIndex) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceEffectRequest> request = getPostSlideAnimationInteractiveSequenceEffectRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex()));
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectSequenceIndex) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceEffectRequest> request = getPostSlideAnimationInteractiveSequenceEffectRequest();
	request->setSequenceIndex(utils->getInvalidIntTestValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex()));
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectEffect) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceEffectRequest> request = getPostSlideAnimationInteractiveSequenceEffectRequest();
	request->setEffect(utils->getInvalidTestValueForClass<>("postSlideAnimationInteractiveSequenceEffect", "effect", request->getEffect()));
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "effect", request->getEffect());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "effect", request->getEffect());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "effect", request->getEffect());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectPassword) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceEffectRequest> request = getPostSlideAnimationInteractiveSequenceEffectRequest();
	request->setPassword(utils->getInvalidTestValue("postSlideAnimationInteractiveSequenceEffect", "password", request->getPassword()));
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectFolder) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceEffectRequest> request = getPostSlideAnimationInteractiveSequenceEffectRequest();
	request->setFolder(utils->getInvalidTestValue("postSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder()));
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideAnimationInteractiveSequenceEffectStorage) {
	std::shared_ptr<PostSlideAnimationInteractiveSequenceEffectRequest> request = getPostSlideAnimationInteractiveSequenceEffectRequest();
	request->setStorage(utils->getInvalidTestValue("postSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage()));
	utils->initialize("postSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideAnimationInteractiveSequenceEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAs) {
	std::shared_ptr<PostSlideSaveAsRequest> request = getPostSlideSaveAsRequest();
	utils->initialize("postSlideSaveAs", "");
	HttpContent result = api->postSlideSaveAs(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSlideSaveAsName) {
	std::shared_ptr<PostSlideSaveAsRequest> request = getPostSlideSaveAsRequest();
	request->setName(utils->getInvalidTestValue("postSlideSaveAs", "name", request->getName()));
	utils->initialize("postSlideSaveAs", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsSlideIndex) {
	std::shared_ptr<PostSlideSaveAsRequest> request = getPostSlideSaveAsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postSlideSaveAs", "slideIndex", request->getSlideIndex()));
	utils->initialize("postSlideSaveAs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsFormat) {
	std::shared_ptr<PostSlideSaveAsRequest> request = getPostSlideSaveAsRequest();
	request->setFormat(utils->getInvalidTestValue("postSlideSaveAs", "format", request->getFormat()));
	utils->initialize("postSlideSaveAs", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->postSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsOptions) {
	std::shared_ptr<PostSlideSaveAsRequest> request = getPostSlideSaveAsRequest();
	request->setOptions(utils->getInvalidTestValueForClass<>("postSlideSaveAs", "options", request->getOptions()));
	utils->initialize("postSlideSaveAs", "options", request->getOptions());

	bool failed = true;
	try
	{
		api->postSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "options", request->getOptions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "options", request->getOptions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsWidth) {
	std::shared_ptr<PostSlideSaveAsRequest> request = getPostSlideSaveAsRequest();
	request->setWidth(utils->getInvalidIntTestValue("postSlideSaveAs", "width", request->getWidth()));
	utils->initialize("postSlideSaveAs", "width", request->getWidth());

	bool failed = true;
	try
	{
		api->postSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "width", request->getWidth());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "width", request->getWidth());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsHeight) {
	std::shared_ptr<PostSlideSaveAsRequest> request = getPostSlideSaveAsRequest();
	request->setHeight(utils->getInvalidIntTestValue("postSlideSaveAs", "height", request->getHeight()));
	utils->initialize("postSlideSaveAs", "height", request->getHeight());

	bool failed = true;
	try
	{
		api->postSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "height", request->getHeight());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "height", request->getHeight());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsPassword) {
	std::shared_ptr<PostSlideSaveAsRequest> request = getPostSlideSaveAsRequest();
	request->setPassword(utils->getInvalidTestValue("postSlideSaveAs", "password", request->getPassword()));
	utils->initialize("postSlideSaveAs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsFolder) {
	std::shared_ptr<PostSlideSaveAsRequest> request = getPostSlideSaveAsRequest();
	request->setFolder(utils->getInvalidTestValue("postSlideSaveAs", "folder", request->getFolder()));
	utils->initialize("postSlideSaveAs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsStorage) {
	std::shared_ptr<PostSlideSaveAsRequest> request = getPostSlideSaveAsRequest();
	request->setStorage(utils->getInvalidTestValue("postSlideSaveAs", "storage", request->getStorage()));
	utils->initialize("postSlideSaveAs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlideSaveAsFontsFolder) {
	std::shared_ptr<PostSlideSaveAsRequest> request = getPostSlideSaveAsRequest();
	request->setFontsFolder(utils->getInvalidTestValue("postSlideSaveAs", "fontsFolder", request->getFontsFolder()));
	utils->initialize("postSlideSaveAs", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->postSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlideSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlideSaveAs", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlideSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAdd) {
	std::shared_ptr<PostSlidesAddRequest> request = getPostSlidesAddRequest();
	utils->initialize("postSlidesAdd", "");
	std::shared_ptr<Slides> result = api->postSlidesAdd(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesAddName) {
	std::shared_ptr<PostSlidesAddRequest> request = getPostSlidesAddRequest();
	request->setName(utils->getInvalidTestValue("postSlidesAdd", "name", request->getName()));
	utils->initialize("postSlidesAdd", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesAdd(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAddPosition) {
	std::shared_ptr<PostSlidesAddRequest> request = getPostSlidesAddRequest();
	request->setPosition(utils->getInvalidIntTestValue("postSlidesAdd", "position", request->getPosition()));
	utils->initialize("postSlidesAdd", "position", request->getPosition());

	bool failed = true;
	try
	{
		api->postSlidesAdd(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "position", request->getPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "position", request->getPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAddPassword) {
	std::shared_ptr<PostSlidesAddRequest> request = getPostSlidesAddRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesAdd", "password", request->getPassword()));
	utils->initialize("postSlidesAdd", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesAdd(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAddFolder) {
	std::shared_ptr<PostSlidesAddRequest> request = getPostSlidesAddRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesAdd", "folder", request->getFolder()));
	utils->initialize("postSlidesAdd", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesAdd(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAddStorage) {
	std::shared_ptr<PostSlidesAddRequest> request = getPostSlidesAddRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesAdd", "storage", request->getStorage()));
	utils->initialize("postSlidesAdd", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesAdd(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesAddLayoutAlias) {
	std::shared_ptr<PostSlidesAddRequest> request = getPostSlidesAddRequest();
	request->setLayoutAlias(utils->getInvalidTestValue("postSlidesAdd", "layoutAlias", request->getLayoutAlias()));
	utils->initialize("postSlidesAdd", "layoutAlias", request->getLayoutAlias());

	bool failed = true;
	try
	{
		api->postSlidesAdd(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "layoutAlias");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "layoutAlias", request->getLayoutAlias());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesAdd", "layoutAlias");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesAdd", "layoutAlias", request->getLayoutAlias());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesAdd", "layoutAlias"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesConvert) {
	std::shared_ptr<PostSlidesConvertRequest> request = getPostSlidesConvertRequest();
	utils->initialize("postSlidesConvert", "");
	HttpContent result = api->postSlidesConvert(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSlidesConvertDocument) {
	std::shared_ptr<PostSlidesConvertRequest> request = getPostSlidesConvertRequest();
	request->setDocument(utils->getInvalidBinaryTestValue("postSlidesConvert", "document", request->getDocument()));
	utils->initialize("postSlidesConvert", "document", request->getDocument());

	bool failed = true;
	try
	{
		api->postSlidesConvert(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "document", request->getDocument());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "document", request->getDocument());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesConvert", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesConvertFormat) {
	std::shared_ptr<PostSlidesConvertRequest> request = getPostSlidesConvertRequest();
	request->setFormat(utils->getInvalidTestValue("postSlidesConvert", "format", request->getFormat()));
	utils->initialize("postSlidesConvert", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->postSlidesConvert(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesConvert", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesConvertPassword) {
	std::shared_ptr<PostSlidesConvertRequest> request = getPostSlidesConvertRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesConvert", "password", request->getPassword()));
	utils->initialize("postSlidesConvert", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesConvert(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesConvert", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesConvertFontsFolder) {
	std::shared_ptr<PostSlidesConvertRequest> request = getPostSlidesConvertRequest();
	request->setFontsFolder(utils->getInvalidTestValue("postSlidesConvert", "fontsFolder", request->getFontsFolder()));
	utils->initialize("postSlidesConvert", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->postSlidesConvert(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesConvert", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesConvert", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesConvert", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopy) {
	std::shared_ptr<PostSlidesCopyRequest> request = getPostSlidesCopyRequest();
	utils->initialize("postSlidesCopy", "");
	std::shared_ptr<Slides> result = api->postSlidesCopy(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesCopyName) {
	std::shared_ptr<PostSlidesCopyRequest> request = getPostSlidesCopyRequest();
	request->setName(utils->getInvalidTestValue("postSlidesCopy", "name", request->getName()));
	utils->initialize("postSlidesCopy", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesCopy(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopySlideToCopy) {
	std::shared_ptr<PostSlidesCopyRequest> request = getPostSlidesCopyRequest();
	request->setSlideToCopy(utils->getInvalidIntTestValue("postSlidesCopy", "slideToCopy", request->getSlideToCopy()));
	utils->initialize("postSlidesCopy", "slideToCopy", request->getSlideToCopy());

	bool failed = true;
	try
	{
		api->postSlidesCopy(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "slideToCopy");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "slideToCopy", request->getSlideToCopy());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "slideToCopy");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "slideToCopy", request->getSlideToCopy());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "slideToCopy"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyPosition) {
	std::shared_ptr<PostSlidesCopyRequest> request = getPostSlidesCopyRequest();
	request->setPosition(utils->getInvalidIntTestValue("postSlidesCopy", "position", request->getPosition()));
	utils->initialize("postSlidesCopy", "position", request->getPosition());

	bool failed = true;
	try
	{
		api->postSlidesCopy(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "position", request->getPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "position", request->getPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopySource) {
	std::shared_ptr<PostSlidesCopyRequest> request = getPostSlidesCopyRequest();
	request->setSource(utils->getInvalidTestValue("postSlidesCopy", "source", request->getSource()));
	utils->initialize("postSlidesCopy", "source", request->getSource());

	bool failed = true;
	try
	{
		api->postSlidesCopy(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "source");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "source", request->getSource());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "source");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "source", request->getSource());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "source"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopySourcePassword) {
	std::shared_ptr<PostSlidesCopyRequest> request = getPostSlidesCopyRequest();
	request->setSourcePassword(utils->getInvalidTestValue("postSlidesCopy", "sourcePassword", request->getSourcePassword()));
	utils->initialize("postSlidesCopy", "sourcePassword", request->getSourcePassword());

	bool failed = true;
	try
	{
		api->postSlidesCopy(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "sourcePassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "sourcePassword", request->getSourcePassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "sourcePassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "sourcePassword", request->getSourcePassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "sourcePassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopySourceStorage) {
	std::shared_ptr<PostSlidesCopyRequest> request = getPostSlidesCopyRequest();
	request->setSourceStorage(utils->getInvalidTestValue("postSlidesCopy", "sourceStorage", request->getSourceStorage()));
	utils->initialize("postSlidesCopy", "sourceStorage", request->getSourceStorage());

	bool failed = true;
	try
	{
		api->postSlidesCopy(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "sourceStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "sourceStorage", request->getSourceStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "sourceStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "sourceStorage", request->getSourceStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "sourceStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyPassword) {
	std::shared_ptr<PostSlidesCopyRequest> request = getPostSlidesCopyRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesCopy", "password", request->getPassword()));
	utils->initialize("postSlidesCopy", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesCopy(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyFolder) {
	std::shared_ptr<PostSlidesCopyRequest> request = getPostSlidesCopyRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesCopy", "folder", request->getFolder()));
	utils->initialize("postSlidesCopy", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesCopy(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesCopyStorage) {
	std::shared_ptr<PostSlidesCopyRequest> request = getPostSlidesCopyRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesCopy", "storage", request->getStorage()));
	utils->initialize("postSlidesCopy", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesCopy(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesCopy", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesCopy", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesCopy", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocument) {
	std::shared_ptr<PostSlidesDocumentRequest> request = getPostSlidesDocumentRequest();
	utils->initialize("postSlidesDocument", "");
	std::shared_ptr<Document> result = api->postSlidesDocument(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesDocumentName) {
	std::shared_ptr<PostSlidesDocumentRequest> request = getPostSlidesDocumentRequest();
	request->setName(utils->getInvalidTestValue("postSlidesDocument", "name", request->getName()));
	utils->initialize("postSlidesDocument", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesDocument(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentData) {
	std::shared_ptr<PostSlidesDocumentRequest> request = getPostSlidesDocumentRequest();
	request->setData(utils->getInvalidBinaryTestValue("postSlidesDocument", "data", request->getData()));
	utils->initialize("postSlidesDocument", "data", request->getData());

	bool failed = true;
	try
	{
		api->postSlidesDocument(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "data");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "data", request->getData());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "data");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "data", request->getData());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "data"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentInputPassword) {
	std::shared_ptr<PostSlidesDocumentRequest> request = getPostSlidesDocumentRequest();
	request->setInputPassword(utils->getInvalidTestValue("postSlidesDocument", "inputPassword", request->getInputPassword()));
	utils->initialize("postSlidesDocument", "inputPassword", request->getInputPassword());

	bool failed = true;
	try
	{
		api->postSlidesDocument(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "inputPassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "inputPassword", request->getInputPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "inputPassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "inputPassword", request->getInputPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "inputPassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentPassword) {
	std::shared_ptr<PostSlidesDocumentRequest> request = getPostSlidesDocumentRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesDocument", "password", request->getPassword()));
	utils->initialize("postSlidesDocument", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesDocument(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentStorage) {
	std::shared_ptr<PostSlidesDocumentRequest> request = getPostSlidesDocumentRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesDocument", "storage", request->getStorage()));
	utils->initialize("postSlidesDocument", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesDocument(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFolder) {
	std::shared_ptr<PostSlidesDocumentRequest> request = getPostSlidesDocumentRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesDocument", "folder", request->getFolder()));
	utils->initialize("postSlidesDocument", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesDocument(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocument", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocument", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocument", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtml) {
	std::shared_ptr<PostSlidesDocumentFromHtmlRequest> request = getPostSlidesDocumentFromHtmlRequest();
	utils->initialize("postSlidesDocumentFromHtml", "");
	std::shared_ptr<Document> result = api->postSlidesDocumentFromHtml(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtmlName) {
	std::shared_ptr<PostSlidesDocumentFromHtmlRequest> request = getPostSlidesDocumentFromHtmlRequest();
	request->setName(utils->getInvalidTestValue("postSlidesDocumentFromHtml", "name", request->getName()));
	utils->initialize("postSlidesDocumentFromHtml", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromHtml(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromHtml", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtmlHtml) {
	std::shared_ptr<PostSlidesDocumentFromHtmlRequest> request = getPostSlidesDocumentFromHtmlRequest();
	request->setHtml(utils->getInvalidTestValue("postSlidesDocumentFromHtml", "html", request->getHtml()));
	utils->initialize("postSlidesDocumentFromHtml", "html", request->getHtml());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromHtml(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "html");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "html", request->getHtml());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "html");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "html", request->getHtml());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromHtml", "html"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtmlPassword) {
	std::shared_ptr<PostSlidesDocumentFromHtmlRequest> request = getPostSlidesDocumentFromHtmlRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesDocumentFromHtml", "password", request->getPassword()));
	utils->initialize("postSlidesDocumentFromHtml", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromHtml(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromHtml", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtmlStorage) {
	std::shared_ptr<PostSlidesDocumentFromHtmlRequest> request = getPostSlidesDocumentFromHtmlRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesDocumentFromHtml", "storage", request->getStorage()));
	utils->initialize("postSlidesDocumentFromHtml", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromHtml(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromHtml", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromHtmlFolder) {
	std::shared_ptr<PostSlidesDocumentFromHtmlRequest> request = getPostSlidesDocumentFromHtmlRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesDocumentFromHtml", "folder", request->getFolder()));
	utils->initialize("postSlidesDocumentFromHtml", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromHtml(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromHtml", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromHtml", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromHtml", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSource) {
	std::shared_ptr<PostSlidesDocumentFromSourceRequest> request = getPostSlidesDocumentFromSourceRequest();
	utils->initialize("postSlidesDocumentFromSource", "");
	std::shared_ptr<Document> result = api->postSlidesDocumentFromSource(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceName) {
	std::shared_ptr<PostSlidesDocumentFromSourceRequest> request = getPostSlidesDocumentFromSourceRequest();
	request->setName(utils->getInvalidTestValue("postSlidesDocumentFromSource", "name", request->getName()));
	utils->initialize("postSlidesDocumentFromSource", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromSource(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceSourcePath) {
	std::shared_ptr<PostSlidesDocumentFromSourceRequest> request = getPostSlidesDocumentFromSourceRequest();
	request->setSourcePath(utils->getInvalidTestValue("postSlidesDocumentFromSource", "sourcePath", request->getSourcePath()));
	utils->initialize("postSlidesDocumentFromSource", "sourcePath", request->getSourcePath());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromSource(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourcePath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourcePath", request->getSourcePath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourcePath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourcePath", request->getSourcePath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "sourcePath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceSourcePassword) {
	std::shared_ptr<PostSlidesDocumentFromSourceRequest> request = getPostSlidesDocumentFromSourceRequest();
	request->setSourcePassword(utils->getInvalidTestValue("postSlidesDocumentFromSource", "sourcePassword", request->getSourcePassword()));
	utils->initialize("postSlidesDocumentFromSource", "sourcePassword", request->getSourcePassword());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromSource(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourcePassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourcePassword", request->getSourcePassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourcePassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourcePassword", request->getSourcePassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "sourcePassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceSourceStorage) {
	std::shared_ptr<PostSlidesDocumentFromSourceRequest> request = getPostSlidesDocumentFromSourceRequest();
	request->setSourceStorage(utils->getInvalidTestValue("postSlidesDocumentFromSource", "sourceStorage", request->getSourceStorage()));
	utils->initialize("postSlidesDocumentFromSource", "sourceStorage", request->getSourceStorage());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromSource(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourceStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourceStorage", request->getSourceStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "sourceStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "sourceStorage", request->getSourceStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "sourceStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourcePassword) {
	std::shared_ptr<PostSlidesDocumentFromSourceRequest> request = getPostSlidesDocumentFromSourceRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesDocumentFromSource", "password", request->getPassword()));
	utils->initialize("postSlidesDocumentFromSource", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromSource(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceStorage) {
	std::shared_ptr<PostSlidesDocumentFromSourceRequest> request = getPostSlidesDocumentFromSourceRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesDocumentFromSource", "storage", request->getStorage()));
	utils->initialize("postSlidesDocumentFromSource", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromSource(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromSourceFolder) {
	std::shared_ptr<PostSlidesDocumentFromSourceRequest> request = getPostSlidesDocumentFromSourceRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesDocumentFromSource", "folder", request->getFolder()));
	utils->initialize("postSlidesDocumentFromSource", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromSource(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromSource", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromSource", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromSource", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplate) {
	std::shared_ptr<PostSlidesDocumentFromTemplateRequest> request = getPostSlidesDocumentFromTemplateRequest();
	utils->initialize("postSlidesDocumentFromTemplate", "");
	std::shared_ptr<Document> result = api->postSlidesDocumentFromTemplate(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateName) {
	std::shared_ptr<PostSlidesDocumentFromTemplateRequest> request = getPostSlidesDocumentFromTemplateRequest();
	request->setName(utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "name", request->getName()));
	utils->initialize("postSlidesDocumentFromTemplate", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromTemplate(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateTemplatePath) {
	std::shared_ptr<PostSlidesDocumentFromTemplateRequest> request = getPostSlidesDocumentFromTemplateRequest();
	request->setTemplatePath(utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "templatePath", request->getTemplatePath()));
	utils->initialize("postSlidesDocumentFromTemplate", "templatePath", request->getTemplatePath());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromTemplate(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templatePath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templatePath", request->getTemplatePath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templatePath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templatePath", request->getTemplatePath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "templatePath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateData) {
	std::shared_ptr<PostSlidesDocumentFromTemplateRequest> request = getPostSlidesDocumentFromTemplateRequest();
	request->setData(utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "data", request->getData()));
	utils->initialize("postSlidesDocumentFromTemplate", "data", request->getData());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromTemplate(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "data");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "data", request->getData());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "data");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "data", request->getData());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "data"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateTemplatePassword) {
	std::shared_ptr<PostSlidesDocumentFromTemplateRequest> request = getPostSlidesDocumentFromTemplateRequest();
	request->setTemplatePassword(utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "templatePassword", request->getTemplatePassword()));
	utils->initialize("postSlidesDocumentFromTemplate", "templatePassword", request->getTemplatePassword());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromTemplate(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templatePassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templatePassword", request->getTemplatePassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templatePassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templatePassword", request->getTemplatePassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "templatePassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateTemplateStorage) {
	std::shared_ptr<PostSlidesDocumentFromTemplateRequest> request = getPostSlidesDocumentFromTemplateRequest();
	request->setTemplateStorage(utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "templateStorage", request->getTemplateStorage()));
	utils->initialize("postSlidesDocumentFromTemplate", "templateStorage", request->getTemplateStorage());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromTemplate(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templateStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templateStorage", request->getTemplateStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "templateStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "templateStorage", request->getTemplateStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "templateStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateIsImageDataEmbedded) {
	std::shared_ptr<PostSlidesDocumentFromTemplateRequest> request = getPostSlidesDocumentFromTemplateRequest();
	request->setIsImageDataEmbedded(utils->getInvalidBoolTestValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded", request->getIsImageDataEmbedded()));
	utils->initialize("postSlidesDocumentFromTemplate", "isImageDataEmbedded", request->getIsImageDataEmbedded());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromTemplate(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "isImageDataEmbedded", request->getIsImageDataEmbedded());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "isImageDataEmbedded", request->getIsImageDataEmbedded());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "isImageDataEmbedded"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplatePassword) {
	std::shared_ptr<PostSlidesDocumentFromTemplateRequest> request = getPostSlidesDocumentFromTemplateRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "password", request->getPassword()));
	utils->initialize("postSlidesDocumentFromTemplate", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromTemplate(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateStorage) {
	std::shared_ptr<PostSlidesDocumentFromTemplateRequest> request = getPostSlidesDocumentFromTemplateRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "storage", request->getStorage()));
	utils->initialize("postSlidesDocumentFromTemplate", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromTemplate(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesDocumentFromTemplateFolder) {
	std::shared_ptr<PostSlidesDocumentFromTemplateRequest> request = getPostSlidesDocumentFromTemplateRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesDocumentFromTemplate", "folder", request->getFolder()));
	utils->initialize("postSlidesDocumentFromTemplate", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesDocumentFromTemplate(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesDocumentFromTemplate", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesDocumentFromTemplate", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesDocumentFromTemplate", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPipeline) {
	std::shared_ptr<PostSlidesPipelineRequest> request = getPostSlidesPipelineRequest();
	utils->initialize("postSlidesPipeline", "");
	HttpContent result = api->postSlidesPipeline(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSlidesPipelinePipeline) {
	std::shared_ptr<PostSlidesPipelineRequest> request = getPostSlidesPipelineRequest();
	request->setPipeline(utils->getInvalidTestValueForClass<>("postSlidesPipeline", "pipeline", request->getPipeline()));
	utils->initialize("postSlidesPipeline", "pipeline", request->getPipeline());

	bool failed = true;
	try
	{
		api->postSlidesPipeline(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPipeline", "pipeline");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPipeline", "pipeline", request->getPipeline());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPipeline", "pipeline");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPipeline", "pipeline", request->getPipeline());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPipeline", "pipeline"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceText) {
	std::shared_ptr<PostSlidesPresentationReplaceTextRequest> request = getPostSlidesPresentationReplaceTextRequest();
	utils->initialize("postSlidesPresentationReplaceText", "");
	std::shared_ptr<DocumentReplaceResult> result = api->postSlidesPresentationReplaceText(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextName) {
	std::shared_ptr<PostSlidesPresentationReplaceTextRequest> request = getPostSlidesPresentationReplaceTextRequest();
	request->setName(utils->getInvalidTestValue("postSlidesPresentationReplaceText", "name", request->getName()));
	utils->initialize("postSlidesPresentationReplaceText", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesPresentationReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextOldValue) {
	std::shared_ptr<PostSlidesPresentationReplaceTextRequest> request = getPostSlidesPresentationReplaceTextRequest();
	request->setOldValue(utils->getInvalidTestValue("postSlidesPresentationReplaceText", "oldValue", request->getOldValue()));
	utils->initialize("postSlidesPresentationReplaceText", "oldValue", request->getOldValue());

	bool failed = true;
	try
	{
		api->postSlidesPresentationReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "oldValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "oldValue", request->getOldValue());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "oldValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "oldValue", request->getOldValue());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "oldValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextNewValue) {
	std::shared_ptr<PostSlidesPresentationReplaceTextRequest> request = getPostSlidesPresentationReplaceTextRequest();
	request->setNewValue(utils->getInvalidTestValue("postSlidesPresentationReplaceText", "newValue", request->getNewValue()));
	utils->initialize("postSlidesPresentationReplaceText", "newValue", request->getNewValue());

	bool failed = true;
	try
	{
		api->postSlidesPresentationReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "newValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "newValue", request->getNewValue());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "newValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "newValue", request->getNewValue());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "newValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextIgnoreCase) {
	std::shared_ptr<PostSlidesPresentationReplaceTextRequest> request = getPostSlidesPresentationReplaceTextRequest();
	request->setIgnoreCase(utils->getInvalidBoolTestValue("postSlidesPresentationReplaceText", "ignoreCase", request->getIgnoreCase()));
	utils->initialize("postSlidesPresentationReplaceText", "ignoreCase", request->getIgnoreCase());

	bool failed = true;
	try
	{
		api->postSlidesPresentationReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "ignoreCase");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "ignoreCase", request->getIgnoreCase());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "ignoreCase");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "ignoreCase", request->getIgnoreCase());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "ignoreCase"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextPassword) {
	std::shared_ptr<PostSlidesPresentationReplaceTextRequest> request = getPostSlidesPresentationReplaceTextRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesPresentationReplaceText", "password", request->getPassword()));
	utils->initialize("postSlidesPresentationReplaceText", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesPresentationReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextFolder) {
	std::shared_ptr<PostSlidesPresentationReplaceTextRequest> request = getPostSlidesPresentationReplaceTextRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesPresentationReplaceText", "folder", request->getFolder()));
	utils->initialize("postSlidesPresentationReplaceText", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesPresentationReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesPresentationReplaceTextStorage) {
	std::shared_ptr<PostSlidesPresentationReplaceTextRequest> request = getPostSlidesPresentationReplaceTextRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesPresentationReplaceText", "storage", request->getStorage()));
	utils->initialize("postSlidesPresentationReplaceText", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesPresentationReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesPresentationReplaceText", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesPresentationReplaceText", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesPresentationReplaceText", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorder) {
	std::shared_ptr<PostSlidesReorderRequest> request = getPostSlidesReorderRequest();
	utils->initialize("postSlidesReorder", "");
	std::shared_ptr<Slides> result = api->postSlidesReorder(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesReorderName) {
	std::shared_ptr<PostSlidesReorderRequest> request = getPostSlidesReorderRequest();
	request->setName(utils->getInvalidTestValue("postSlidesReorder", "name", request->getName()));
	utils->initialize("postSlidesReorder", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesReorder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderSlideIndex) {
	std::shared_ptr<PostSlidesReorderRequest> request = getPostSlidesReorderRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postSlidesReorder", "slideIndex", request->getSlideIndex()));
	utils->initialize("postSlidesReorder", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postSlidesReorder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderNewPosition) {
	std::shared_ptr<PostSlidesReorderRequest> request = getPostSlidesReorderRequest();
	request->setNewPosition(utils->getInvalidIntTestValue("postSlidesReorder", "newPosition", request->getNewPosition()));
	utils->initialize("postSlidesReorder", "newPosition", request->getNewPosition());

	bool failed = true;
	try
	{
		api->postSlidesReorder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "newPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "newPosition", request->getNewPosition());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "newPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "newPosition", request->getNewPosition());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "newPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderPassword) {
	std::shared_ptr<PostSlidesReorderRequest> request = getPostSlidesReorderRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesReorder", "password", request->getPassword()));
	utils->initialize("postSlidesReorder", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesReorder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderFolder) {
	std::shared_ptr<PostSlidesReorderRequest> request = getPostSlidesReorderRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesReorder", "folder", request->getFolder()));
	utils->initialize("postSlidesReorder", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesReorder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderStorage) {
	std::shared_ptr<PostSlidesReorderRequest> request = getPostSlidesReorderRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesReorder", "storage", request->getStorage()));
	utils->initialize("postSlidesReorder", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesReorder(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorder", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorder", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorder", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderMany) {
	std::shared_ptr<PostSlidesReorderManyRequest> request = getPostSlidesReorderManyRequest();
	utils->initialize("postSlidesReorderMany", "");
	std::shared_ptr<Slides> result = api->postSlidesReorderMany(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesReorderManyName) {
	std::shared_ptr<PostSlidesReorderManyRequest> request = getPostSlidesReorderManyRequest();
	request->setName(utils->getInvalidTestValue("postSlidesReorderMany", "name", request->getName()));
	utils->initialize("postSlidesReorderMany", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesReorderMany(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderManyOldPositions) {
	std::shared_ptr<PostSlidesReorderManyRequest> request = getPostSlidesReorderManyRequest();
	request->setOldPositions(utils->getInvalidIntVectorTestValue("postSlidesReorderMany", "oldPositions", request->getOldPositions()));
	utils->initialize("postSlidesReorderMany", "oldPositions", request->getOldPositions());

	bool failed = true;
	try
	{
		api->postSlidesReorderMany(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "oldPositions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "oldPositions", request->getOldPositions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "oldPositions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "oldPositions", request->getOldPositions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "oldPositions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderManyNewPositions) {
	std::shared_ptr<PostSlidesReorderManyRequest> request = getPostSlidesReorderManyRequest();
	request->setNewPositions(utils->getInvalidIntVectorTestValue("postSlidesReorderMany", "newPositions", request->getNewPositions()));
	utils->initialize("postSlidesReorderMany", "newPositions", request->getNewPositions());

	bool failed = true;
	try
	{
		api->postSlidesReorderMany(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "newPositions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "newPositions", request->getNewPositions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "newPositions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "newPositions", request->getNewPositions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "newPositions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderManyPassword) {
	std::shared_ptr<PostSlidesReorderManyRequest> request = getPostSlidesReorderManyRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesReorderMany", "password", request->getPassword()));
	utils->initialize("postSlidesReorderMany", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesReorderMany(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderManyFolder) {
	std::shared_ptr<PostSlidesReorderManyRequest> request = getPostSlidesReorderManyRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesReorderMany", "folder", request->getFolder()));
	utils->initialize("postSlidesReorderMany", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesReorderMany(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesReorderManyStorage) {
	std::shared_ptr<PostSlidesReorderManyRequest> request = getPostSlidesReorderManyRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesReorderMany", "storage", request->getStorage()));
	utils->initialize("postSlidesReorderMany", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesReorderMany(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesReorderMany", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesReorderMany", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesReorderMany", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAs) {
	std::shared_ptr<PostSlidesSaveAsRequest> request = getPostSlidesSaveAsRequest();
	utils->initialize("postSlidesSaveAs", "");
	HttpContent result = api->postSlidesSaveAs(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSlidesSaveAsName) {
	std::shared_ptr<PostSlidesSaveAsRequest> request = getPostSlidesSaveAsRequest();
	request->setName(utils->getInvalidTestValue("postSlidesSaveAs", "name", request->getName()));
	utils->initialize("postSlidesSaveAs", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsFormat) {
	std::shared_ptr<PostSlidesSaveAsRequest> request = getPostSlidesSaveAsRequest();
	request->setFormat(utils->getInvalidTestValue("postSlidesSaveAs", "format", request->getFormat()));
	utils->initialize("postSlidesSaveAs", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->postSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsOptions) {
	std::shared_ptr<PostSlidesSaveAsRequest> request = getPostSlidesSaveAsRequest();
	request->setOptions(utils->getInvalidTestValueForClass<>("postSlidesSaveAs", "options", request->getOptions()));
	utils->initialize("postSlidesSaveAs", "options", request->getOptions());

	bool failed = true;
	try
	{
		api->postSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "options", request->getOptions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "options", request->getOptions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsPassword) {
	std::shared_ptr<PostSlidesSaveAsRequest> request = getPostSlidesSaveAsRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesSaveAs", "password", request->getPassword()));
	utils->initialize("postSlidesSaveAs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsStorage) {
	std::shared_ptr<PostSlidesSaveAsRequest> request = getPostSlidesSaveAsRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesSaveAs", "storage", request->getStorage()));
	utils->initialize("postSlidesSaveAs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsFolder) {
	std::shared_ptr<PostSlidesSaveAsRequest> request = getPostSlidesSaveAsRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesSaveAs", "folder", request->getFolder()));
	utils->initialize("postSlidesSaveAs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSaveAsFontsFolder) {
	std::shared_ptr<PostSlidesSaveAsRequest> request = getPostSlidesSaveAsRequest();
	request->setFontsFolder(utils->getInvalidTestValue("postSlidesSaveAs", "fontsFolder", request->getFontsFolder()));
	utils->initialize("postSlidesSaveAs", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->postSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSaveAs", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSetDocumentProperties) {
	std::shared_ptr<PostSlidesSetDocumentPropertiesRequest> request = getPostSlidesSetDocumentPropertiesRequest();
	utils->initialize("postSlidesSetDocumentProperties", "");
	std::shared_ptr<DocumentProperties> result = api->postSlidesSetDocumentProperties(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesSetDocumentPropertiesName) {
	std::shared_ptr<PostSlidesSetDocumentPropertiesRequest> request = getPostSlidesSetDocumentPropertiesRequest();
	request->setName(utils->getInvalidTestValue("postSlidesSetDocumentProperties", "name", request->getName()));
	utils->initialize("postSlidesSetDocumentProperties", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesSetDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSetDocumentProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSetDocumentPropertiesProperties) {
	std::shared_ptr<PostSlidesSetDocumentPropertiesRequest> request = getPostSlidesSetDocumentPropertiesRequest();
	request->setProperties(utils->getInvalidTestValueForClass<>("postSlidesSetDocumentProperties", "properties", request->getProperties()));
	utils->initialize("postSlidesSetDocumentProperties", "properties", request->getProperties());

	bool failed = true;
	try
	{
		api->postSlidesSetDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "properties");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "properties", request->getProperties());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "properties");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "properties", request->getProperties());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSetDocumentProperties", "properties"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSetDocumentPropertiesPassword) {
	std::shared_ptr<PostSlidesSetDocumentPropertiesRequest> request = getPostSlidesSetDocumentPropertiesRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesSetDocumentProperties", "password", request->getPassword()));
	utils->initialize("postSlidesSetDocumentProperties", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesSetDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSetDocumentProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSetDocumentPropertiesFolder) {
	std::shared_ptr<PostSlidesSetDocumentPropertiesRequest> request = getPostSlidesSetDocumentPropertiesRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesSetDocumentProperties", "folder", request->getFolder()));
	utils->initialize("postSlidesSetDocumentProperties", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesSetDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSetDocumentProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSetDocumentPropertiesStorage) {
	std::shared_ptr<PostSlidesSetDocumentPropertiesRequest> request = getPostSlidesSetDocumentPropertiesRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesSetDocumentProperties", "storage", request->getStorage()));
	utils->initialize("postSlidesSetDocumentProperties", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesSetDocumentProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSetDocumentProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSetDocumentProperties", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSetDocumentProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceText) {
	std::shared_ptr<PostSlidesSlideReplaceTextRequest> request = getPostSlidesSlideReplaceTextRequest();
	utils->initialize("postSlidesSlideReplaceText", "");
	std::shared_ptr<SlideReplaceResult> result = api->postSlidesSlideReplaceText(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextName) {
	std::shared_ptr<PostSlidesSlideReplaceTextRequest> request = getPostSlidesSlideReplaceTextRequest();
	request->setName(utils->getInvalidTestValue("postSlidesSlideReplaceText", "name", request->getName()));
	utils->initialize("postSlidesSlideReplaceText", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesSlideReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextSlideIndex) {
	std::shared_ptr<PostSlidesSlideReplaceTextRequest> request = getPostSlidesSlideReplaceTextRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postSlidesSlideReplaceText", "slideIndex", request->getSlideIndex()));
	utils->initialize("postSlidesSlideReplaceText", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postSlidesSlideReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextOldValue) {
	std::shared_ptr<PostSlidesSlideReplaceTextRequest> request = getPostSlidesSlideReplaceTextRequest();
	request->setOldValue(utils->getInvalidTestValue("postSlidesSlideReplaceText", "oldValue", request->getOldValue()));
	utils->initialize("postSlidesSlideReplaceText", "oldValue", request->getOldValue());

	bool failed = true;
	try
	{
		api->postSlidesSlideReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "oldValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "oldValue", request->getOldValue());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "oldValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "oldValue", request->getOldValue());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "oldValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextNewValue) {
	std::shared_ptr<PostSlidesSlideReplaceTextRequest> request = getPostSlidesSlideReplaceTextRequest();
	request->setNewValue(utils->getInvalidTestValue("postSlidesSlideReplaceText", "newValue", request->getNewValue()));
	utils->initialize("postSlidesSlideReplaceText", "newValue", request->getNewValue());

	bool failed = true;
	try
	{
		api->postSlidesSlideReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "newValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "newValue", request->getNewValue());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "newValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "newValue", request->getNewValue());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "newValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextIgnoreCase) {
	std::shared_ptr<PostSlidesSlideReplaceTextRequest> request = getPostSlidesSlideReplaceTextRequest();
	request->setIgnoreCase(utils->getInvalidBoolTestValue("postSlidesSlideReplaceText", "ignoreCase", request->getIgnoreCase()));
	utils->initialize("postSlidesSlideReplaceText", "ignoreCase", request->getIgnoreCase());

	bool failed = true;
	try
	{
		api->postSlidesSlideReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "ignoreCase");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "ignoreCase", request->getIgnoreCase());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "ignoreCase");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "ignoreCase", request->getIgnoreCase());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "ignoreCase"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextPassword) {
	std::shared_ptr<PostSlidesSlideReplaceTextRequest> request = getPostSlidesSlideReplaceTextRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesSlideReplaceText", "password", request->getPassword()));
	utils->initialize("postSlidesSlideReplaceText", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesSlideReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextFolder) {
	std::shared_ptr<PostSlidesSlideReplaceTextRequest> request = getPostSlidesSlideReplaceTextRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesSlideReplaceText", "folder", request->getFolder()));
	utils->initialize("postSlidesSlideReplaceText", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesSlideReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSlideReplaceTextStorage) {
	std::shared_ptr<PostSlidesSlideReplaceTextRequest> request = getPostSlidesSlideReplaceTextRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesSlideReplaceText", "storage", request->getStorage()));
	utils->initialize("postSlidesSlideReplaceText", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesSlideReplaceText(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSlideReplaceText", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSlideReplaceText", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSlideReplaceText", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplit) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	utils->initialize("postSlidesSplit", "");
	std::shared_ptr<SplitDocumentResult> result = api->postSlidesSplit(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, postSlidesSplitName) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setName(utils->getInvalidTestValue("postSlidesSplit", "name", request->getName()));
	utils->initialize("postSlidesSplit", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitOptions) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setOptions(utils->getInvalidTestValueForClass<>("postSlidesSplit", "options", request->getOptions()));
	utils->initialize("postSlidesSplit", "options", request->getOptions());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "options", request->getOptions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "options", request->getOptions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitFormat) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setFormat(utils->getInvalidTestValue("postSlidesSplit", "format", request->getFormat()));
	utils->initialize("postSlidesSplit", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitWidth) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setWidth(utils->getInvalidIntTestValue("postSlidesSplit", "width", request->getWidth()));
	utils->initialize("postSlidesSplit", "width", request->getWidth());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "width", request->getWidth());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "width", request->getWidth());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitHeight) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setHeight(utils->getInvalidIntTestValue("postSlidesSplit", "height", request->getHeight()));
	utils->initialize("postSlidesSplit", "height", request->getHeight());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "height", request->getHeight());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "height", request->getHeight());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitTo) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setTo(utils->getInvalidIntTestValue("postSlidesSplit", "to", request->getTo()));
	utils->initialize("postSlidesSplit", "to", request->getTo());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "to");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "to", request->getTo());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "to");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "to", request->getTo());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "to"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitFrom) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setFrom(utils->getInvalidIntTestValue("postSlidesSplit", "from", request->getFrom()));
	utils->initialize("postSlidesSplit", "from", request->getFrom());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "from");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "from", request->getFrom());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "from");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "from", request->getFrom());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "from"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitDestFolder) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setDestFolder(utils->getInvalidTestValue("postSlidesSplit", "destFolder", request->getDestFolder()));
	utils->initialize("postSlidesSplit", "destFolder", request->getDestFolder());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "destFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "destFolder", request->getDestFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "destFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "destFolder", request->getDestFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "destFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitPassword) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setPassword(utils->getInvalidTestValue("postSlidesSplit", "password", request->getPassword()));
	utils->initialize("postSlidesSplit", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitStorage) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setStorage(utils->getInvalidTestValue("postSlidesSplit", "storage", request->getStorage()));
	utils->initialize("postSlidesSplit", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitFolder) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setFolder(utils->getInvalidTestValue("postSlidesSplit", "folder", request->getFolder()));
	utils->initialize("postSlidesSplit", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSlidesSplitFontsFolder) {
	std::shared_ptr<PostSlidesSplitRequest> request = getPostSlidesSplitRequest();
	request->setFontsFolder(utils->getInvalidTestValue("postSlidesSplit", "fontsFolder", request->getFontsFolder()));
	utils->initialize("postSlidesSplit", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->postSlidesSplit(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSlidesSplit", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSlidesSplit", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSlidesSplit", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAs) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	utils->initialize("postSubshapeSaveAs", "");
	HttpContent result = api->postSubshapeSaveAs(request).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, postSubshapeSaveAsName) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setName(utils->getInvalidTestValue("postSubshapeSaveAs", "name", request->getName()));
	utils->initialize("postSubshapeSaveAs", "name", request->getName());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsSlideIndex) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("postSubshapeSaveAs", "slideIndex", request->getSlideIndex()));
	utils->initialize("postSubshapeSaveAs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsPath) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setPath(utils->getInvalidTestValue("postSubshapeSaveAs", "path", request->getPath()));
	utils->initialize("postSubshapeSaveAs", "path", request->getPath());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsShapeIndex) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("postSubshapeSaveAs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("postSubshapeSaveAs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsFormat) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setFormat(utils->getInvalidTestValue("postSubshapeSaveAs", "format", request->getFormat()));
	utils->initialize("postSubshapeSaveAs", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsOptions) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setOptions(utils->getInvalidTestValueForClass<>("postSubshapeSaveAs", "options", request->getOptions()));
	utils->initialize("postSubshapeSaveAs", "options", request->getOptions());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "options", request->getOptions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "options", request->getOptions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsPassword) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setPassword(utils->getInvalidTestValue("postSubshapeSaveAs", "password", request->getPassword()));
	utils->initialize("postSubshapeSaveAs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsFolder) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setFolder(utils->getInvalidTestValue("postSubshapeSaveAs", "folder", request->getFolder()));
	utils->initialize("postSubshapeSaveAs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsStorage) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setStorage(utils->getInvalidTestValue("postSubshapeSaveAs", "storage", request->getStorage()));
	utils->initialize("postSubshapeSaveAs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsScaleX) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setScaleX(utils->getInvalidDoubleTestValue("postSubshapeSaveAs", "scaleX", request->getScaleX()));
	utils->initialize("postSubshapeSaveAs", "scaleX", request->getScaleX());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "scaleX", request->getScaleX());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "scaleX", request->getScaleX());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsScaleY) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setScaleY(utils->getInvalidDoubleTestValue("postSubshapeSaveAs", "scaleY", request->getScaleY()));
	utils->initialize("postSubshapeSaveAs", "scaleY", request->getScaleY());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "scaleY", request->getScaleY());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "scaleY", request->getScaleY());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsBounds) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setBounds(utils->getInvalidTestValue("postSubshapeSaveAs", "bounds", request->getBounds()));
	utils->initialize("postSubshapeSaveAs", "bounds", request->getBounds());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "bounds", request->getBounds());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "bounds", request->getBounds());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, postSubshapeSaveAsFontsFolder) {
	std::shared_ptr<PostSubshapeSaveAsRequest> request = getPostSubshapeSaveAsRequest();
	request->setFontsFolder(utils->getInvalidTestValue("postSubshapeSaveAs", "fontsFolder", request->getFontsFolder()));
	utils->initialize("postSubshapeSaveAs", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->postSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("postSubshapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("postSubshapeSaveAs", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("postSubshapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategory) {
	std::shared_ptr<PutChartCategoryRequest> request = getPutChartCategoryRequest();
	utils->initialize("putChartCategory", "");
	std::shared_ptr<Chart> result = api->putChartCategory(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putChartCategoryName) {
	std::shared_ptr<PutChartCategoryRequest> request = getPutChartCategoryRequest();
	request->setName(utils->getInvalidTestValue("putChartCategory", "name", request->getName()));
	utils->initialize("putChartCategory", "name", request->getName());

	bool failed = true;
	try
	{
		api->putChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategorySlideIndex) {
	std::shared_ptr<PutChartCategoryRequest> request = getPutChartCategoryRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putChartCategory", "slideIndex", request->getSlideIndex()));
	utils->initialize("putChartCategory", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryShapeIndex) {
	std::shared_ptr<PutChartCategoryRequest> request = getPutChartCategoryRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putChartCategory", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putChartCategory", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryCategoryIndex) {
	std::shared_ptr<PutChartCategoryRequest> request = getPutChartCategoryRequest();
	request->setCategoryIndex(utils->getInvalidIntTestValue("putChartCategory", "categoryIndex", request->getCategoryIndex()));
	utils->initialize("putChartCategory", "categoryIndex", request->getCategoryIndex());

	bool failed = true;
	try
	{
		api->putChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "categoryIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "categoryIndex", request->getCategoryIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "categoryIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "categoryIndex", request->getCategoryIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "categoryIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryCategory) {
	std::shared_ptr<PutChartCategoryRequest> request = getPutChartCategoryRequest();
	request->setCategory(utils->getInvalidTestValueForClass<>("putChartCategory", "category", request->getCategory()));
	utils->initialize("putChartCategory", "category", request->getCategory());

	bool failed = true;
	try
	{
		api->putChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "category");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "category", request->getCategory());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "category");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "category", request->getCategory());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "category"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryPassword) {
	std::shared_ptr<PutChartCategoryRequest> request = getPutChartCategoryRequest();
	request->setPassword(utils->getInvalidTestValue("putChartCategory", "password", request->getPassword()));
	utils->initialize("putChartCategory", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryFolder) {
	std::shared_ptr<PutChartCategoryRequest> request = getPutChartCategoryRequest();
	request->setFolder(utils->getInvalidTestValue("putChartCategory", "folder", request->getFolder()));
	utils->initialize("putChartCategory", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartCategoryStorage) {
	std::shared_ptr<PutChartCategoryRequest> request = getPutChartCategoryRequest();
	request->setStorage(utils->getInvalidTestValue("putChartCategory", "storage", request->getStorage()));
	utils->initialize("putChartCategory", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putChartCategory(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartCategory", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartCategory", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartCategory", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPoint) {
	std::shared_ptr<PutChartDataPointRequest> request = getPutChartDataPointRequest();
	utils->initialize("putChartDataPoint", "");
	std::shared_ptr<Chart> result = api->putChartDataPoint(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putChartDataPointName) {
	std::shared_ptr<PutChartDataPointRequest> request = getPutChartDataPointRequest();
	request->setName(utils->getInvalidTestValue("putChartDataPoint", "name", request->getName()));
	utils->initialize("putChartDataPoint", "name", request->getName());

	bool failed = true;
	try
	{
		api->putChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointSlideIndex) {
	std::shared_ptr<PutChartDataPointRequest> request = getPutChartDataPointRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putChartDataPoint", "slideIndex", request->getSlideIndex()));
	utils->initialize("putChartDataPoint", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointShapeIndex) {
	std::shared_ptr<PutChartDataPointRequest> request = getPutChartDataPointRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putChartDataPoint", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putChartDataPoint", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointSeriesIndex) {
	std::shared_ptr<PutChartDataPointRequest> request = getPutChartDataPointRequest();
	request->setSeriesIndex(utils->getInvalidIntTestValue("putChartDataPoint", "seriesIndex", request->getSeriesIndex()));
	utils->initialize("putChartDataPoint", "seriesIndex", request->getSeriesIndex());

	bool failed = true;
	try
	{
		api->putChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "seriesIndex", request->getSeriesIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "seriesIndex", request->getSeriesIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointPointIndex) {
	std::shared_ptr<PutChartDataPointRequest> request = getPutChartDataPointRequest();
	request->setPointIndex(utils->getInvalidIntTestValue("putChartDataPoint", "pointIndex", request->getPointIndex()));
	utils->initialize("putChartDataPoint", "pointIndex", request->getPointIndex());

	bool failed = true;
	try
	{
		api->putChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "pointIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "pointIndex", request->getPointIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "pointIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "pointIndex", request->getPointIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "pointIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointDataPoint) {
	std::shared_ptr<PutChartDataPointRequest> request = getPutChartDataPointRequest();
	request->setDataPoint(utils->getInvalidTestValueForClass<>("putChartDataPoint", "dataPoint", request->getDataPoint()));
	utils->initialize("putChartDataPoint", "dataPoint", request->getDataPoint());

	bool failed = true;
	try
	{
		api->putChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "dataPoint");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "dataPoint", request->getDataPoint());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "dataPoint");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "dataPoint", request->getDataPoint());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "dataPoint"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointPassword) {
	std::shared_ptr<PutChartDataPointRequest> request = getPutChartDataPointRequest();
	request->setPassword(utils->getInvalidTestValue("putChartDataPoint", "password", request->getPassword()));
	utils->initialize("putChartDataPoint", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointFolder) {
	std::shared_ptr<PutChartDataPointRequest> request = getPutChartDataPointRequest();
	request->setFolder(utils->getInvalidTestValue("putChartDataPoint", "folder", request->getFolder()));
	utils->initialize("putChartDataPoint", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartDataPointStorage) {
	std::shared_ptr<PutChartDataPointRequest> request = getPutChartDataPointRequest();
	request->setStorage(utils->getInvalidTestValue("putChartDataPoint", "storage", request->getStorage()));
	utils->initialize("putChartDataPoint", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putChartDataPoint(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartDataPoint", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartDataPoint", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartDataPoint", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeries) {
	std::shared_ptr<PutChartSeriesRequest> request = getPutChartSeriesRequest();
	utils->initialize("putChartSeries", "");
	std::shared_ptr<Chart> result = api->putChartSeries(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putChartSeriesName) {
	std::shared_ptr<PutChartSeriesRequest> request = getPutChartSeriesRequest();
	request->setName(utils->getInvalidTestValue("putChartSeries", "name", request->getName()));
	utils->initialize("putChartSeries", "name", request->getName());

	bool failed = true;
	try
	{
		api->putChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesSlideIndex) {
	std::shared_ptr<PutChartSeriesRequest> request = getPutChartSeriesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putChartSeries", "slideIndex", request->getSlideIndex()));
	utils->initialize("putChartSeries", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesShapeIndex) {
	std::shared_ptr<PutChartSeriesRequest> request = getPutChartSeriesRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putChartSeries", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putChartSeries", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesSeriesIndex) {
	std::shared_ptr<PutChartSeriesRequest> request = getPutChartSeriesRequest();
	request->setSeriesIndex(utils->getInvalidIntTestValue("putChartSeries", "seriesIndex", request->getSeriesIndex()));
	utils->initialize("putChartSeries", "seriesIndex", request->getSeriesIndex());

	bool failed = true;
	try
	{
		api->putChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "seriesIndex", request->getSeriesIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "seriesIndex", request->getSeriesIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesSeries) {
	std::shared_ptr<PutChartSeriesRequest> request = getPutChartSeriesRequest();
	request->setSeries(utils->getInvalidTestValueForClass<>("putChartSeries", "series", request->getSeries()));
	utils->initialize("putChartSeries", "series", request->getSeries());

	bool failed = true;
	try
	{
		api->putChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "series");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "series", request->getSeries());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "series");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "series", request->getSeries());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "series"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesPassword) {
	std::shared_ptr<PutChartSeriesRequest> request = getPutChartSeriesRequest();
	request->setPassword(utils->getInvalidTestValue("putChartSeries", "password", request->getPassword()));
	utils->initialize("putChartSeries", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesFolder) {
	std::shared_ptr<PutChartSeriesRequest> request = getPutChartSeriesRequest();
	request->setFolder(utils->getInvalidTestValue("putChartSeries", "folder", request->getFolder()));
	utils->initialize("putChartSeries", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putChartSeriesStorage) {
	std::shared_ptr<PutChartSeriesRequest> request = getPutChartSeriesRequest();
	request->setStorage(utils->getInvalidTestValue("putChartSeries", "storage", request->getStorage()));
	utils->initialize("putChartSeries", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putChartSeries(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putChartSeries", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putChartSeries", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putChartSeries", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlide) {
	std::shared_ptr<PutLayoutSlideRequest> request = getPutLayoutSlideRequest();
	utils->initialize("putLayoutSlide", "");
	std::shared_ptr<LayoutSlide> result = api->putLayoutSlide(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putLayoutSlideName) {
	std::shared_ptr<PutLayoutSlideRequest> request = getPutLayoutSlideRequest();
	request->setName(utils->getInvalidTestValue("putLayoutSlide", "name", request->getName()));
	utils->initialize("putLayoutSlide", "name", request->getName());

	bool failed = true;
	try
	{
		api->putLayoutSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlideSlideIndex) {
	std::shared_ptr<PutLayoutSlideRequest> request = getPutLayoutSlideRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putLayoutSlide", "slideIndex", request->getSlideIndex()));
	utils->initialize("putLayoutSlide", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putLayoutSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlideSlideDto) {
	std::shared_ptr<PutLayoutSlideRequest> request = getPutLayoutSlideRequest();
	request->setSlideDto(utils->getInvalidTestValueForClass<>("putLayoutSlide", "slideDto", request->getSlideDto()));
	utils->initialize("putLayoutSlide", "slideDto", request->getSlideDto());

	bool failed = true;
	try
	{
		api->putLayoutSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "slideDto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "slideDto", request->getSlideDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "slideDto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "slideDto", request->getSlideDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "slideDto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlidePassword) {
	std::shared_ptr<PutLayoutSlideRequest> request = getPutLayoutSlideRequest();
	request->setPassword(utils->getInvalidTestValue("putLayoutSlide", "password", request->getPassword()));
	utils->initialize("putLayoutSlide", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putLayoutSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlideFolder) {
	std::shared_ptr<PutLayoutSlideRequest> request = getPutLayoutSlideRequest();
	request->setFolder(utils->getInvalidTestValue("putLayoutSlide", "folder", request->getFolder()));
	utils->initialize("putLayoutSlide", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putLayoutSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putLayoutSlideStorage) {
	std::shared_ptr<PutLayoutSlideRequest> request = getPutLayoutSlideRequest();
	request->setStorage(utils->getInvalidTestValue("putLayoutSlide", "storage", request->getStorage()));
	utils->initialize("putLayoutSlide", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putLayoutSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putLayoutSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putLayoutSlide", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putLayoutSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooter) {
	std::shared_ptr<PutNotesSlideHeaderFooterRequest> request = getPutNotesSlideHeaderFooterRequest();
	utils->initialize("putNotesSlideHeaderFooter", "");
	std::shared_ptr<NotesSlideHeaderFooter> result = api->putNotesSlideHeaderFooter(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterName) {
	std::shared_ptr<PutNotesSlideHeaderFooterRequest> request = getPutNotesSlideHeaderFooterRequest();
	request->setName(utils->getInvalidTestValue("putNotesSlideHeaderFooter", "name", request->getName()));
	utils->initialize("putNotesSlideHeaderFooter", "name", request->getName());

	bool failed = true;
	try
	{
		api->putNotesSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterSlideIndex) {
	std::shared_ptr<PutNotesSlideHeaderFooterRequest> request = getPutNotesSlideHeaderFooterRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putNotesSlideHeaderFooter", "slideIndex", request->getSlideIndex()));
	utils->initialize("putNotesSlideHeaderFooter", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putNotesSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterDto) {
	std::shared_ptr<PutNotesSlideHeaderFooterRequest> request = getPutNotesSlideHeaderFooterRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putNotesSlideHeaderFooter", "dto", request->getDto()));
	utils->initialize("putNotesSlideHeaderFooter", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putNotesSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterPassword) {
	std::shared_ptr<PutNotesSlideHeaderFooterRequest> request = getPutNotesSlideHeaderFooterRequest();
	request->setPassword(utils->getInvalidTestValue("putNotesSlideHeaderFooter", "password", request->getPassword()));
	utils->initialize("putNotesSlideHeaderFooter", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putNotesSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterStorage) {
	std::shared_ptr<PutNotesSlideHeaderFooterRequest> request = getPutNotesSlideHeaderFooterRequest();
	request->setStorage(utils->getInvalidTestValue("putNotesSlideHeaderFooter", "storage", request->getStorage()));
	utils->initialize("putNotesSlideHeaderFooter", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putNotesSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideHeaderFooterFolder) {
	std::shared_ptr<PutNotesSlideHeaderFooterRequest> request = getPutNotesSlideHeaderFooterRequest();
	request->setFolder(utils->getInvalidTestValue("putNotesSlideHeaderFooter", "folder", request->getFolder()));
	utils->initialize("putNotesSlideHeaderFooter", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putNotesSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideHeaderFooter", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAs) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	utils->initialize("putNotesSlideShapeSaveAs", "");
	api->putNotesSlideShapeSaveAs(request).wait();
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsName) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setName(utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "name", request->getName()));
	utils->initialize("putNotesSlideShapeSaveAs", "name", request->getName());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsSlideIndex) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putNotesSlideShapeSaveAs", "slideIndex", request->getSlideIndex()));
	utils->initialize("putNotesSlideShapeSaveAs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsShapeIndex) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putNotesSlideShapeSaveAs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putNotesSlideShapeSaveAs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsFormat) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setFormat(utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "format", request->getFormat()));
	utils->initialize("putNotesSlideShapeSaveAs", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsOutPath) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setOutPath(utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "outPath", request->getOutPath()));
	utils->initialize("putNotesSlideShapeSaveAs", "outPath", request->getOutPath());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "outPath", request->getOutPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "outPath", request->getOutPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsOptions) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setOptions(utils->getInvalidTestValueForClass<>("putNotesSlideShapeSaveAs", "options", request->getOptions()));
	utils->initialize("putNotesSlideShapeSaveAs", "options", request->getOptions());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "options", request->getOptions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "options", request->getOptions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsPassword) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setPassword(utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "password", request->getPassword()));
	utils->initialize("putNotesSlideShapeSaveAs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsFolder) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setFolder(utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "folder", request->getFolder()));
	utils->initialize("putNotesSlideShapeSaveAs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsStorage) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setStorage(utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "storage", request->getStorage()));
	utils->initialize("putNotesSlideShapeSaveAs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsScaleX) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setScaleX(utils->getInvalidDoubleTestValue("putNotesSlideShapeSaveAs", "scaleX", request->getScaleX()));
	utils->initialize("putNotesSlideShapeSaveAs", "scaleX", request->getScaleX());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "scaleX", request->getScaleX());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "scaleX", request->getScaleX());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsScaleY) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setScaleY(utils->getInvalidDoubleTestValue("putNotesSlideShapeSaveAs", "scaleY", request->getScaleY()));
	utils->initialize("putNotesSlideShapeSaveAs", "scaleY", request->getScaleY());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "scaleY", request->getScaleY());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "scaleY", request->getScaleY());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsBounds) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setBounds(utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "bounds", request->getBounds()));
	utils->initialize("putNotesSlideShapeSaveAs", "bounds", request->getBounds());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "bounds", request->getBounds());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "bounds", request->getBounds());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putNotesSlideShapeSaveAsFontsFolder) {
	std::shared_ptr<PutNotesSlideShapeSaveAsRequest> request = getPutNotesSlideShapeSaveAsRequest();
	request->setFontsFolder(utils->getInvalidTestValue("putNotesSlideShapeSaveAs", "fontsFolder", request->getFontsFolder()));
	utils->initialize("putNotesSlideShapeSaveAs", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->putNotesSlideShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putNotesSlideShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putNotesSlideShapeSaveAs", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putNotesSlideShapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationMerge) {
	std::shared_ptr<PutPresentationMergeRequest> request = getPutPresentationMergeRequest();
	utils->initialize("putPresentationMerge", "");
	std::shared_ptr<Document> result = api->putPresentationMerge(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putPresentationMergeName) {
	std::shared_ptr<PutPresentationMergeRequest> request = getPutPresentationMergeRequest();
	request->setName(utils->getInvalidTestValue("putPresentationMerge", "name", request->getName()));
	utils->initialize("putPresentationMerge", "name", request->getName());

	bool failed = true;
	try
	{
		api->putPresentationMerge(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationMerge", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationMergeRequest) {
	std::shared_ptr<PutPresentationMergeRequest> request = getPutPresentationMergeRequest();
	request->setRequest(utils->getInvalidTestValueForClass<>("putPresentationMerge", "request", request->getRequest()));
	utils->initialize("putPresentationMerge", "request", request->getRequest());

	bool failed = true;
	try
	{
		api->putPresentationMerge(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "request");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "request", request->getRequest());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "request");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "request", request->getRequest());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationMerge", "request"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationMergePassword) {
	std::shared_ptr<PutPresentationMergeRequest> request = getPutPresentationMergeRequest();
	request->setPassword(utils->getInvalidTestValue("putPresentationMerge", "password", request->getPassword()));
	utils->initialize("putPresentationMerge", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putPresentationMerge(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationMerge", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationMergeStorage) {
	std::shared_ptr<PutPresentationMergeRequest> request = getPutPresentationMergeRequest();
	request->setStorage(utils->getInvalidTestValue("putPresentationMerge", "storage", request->getStorage()));
	utils->initialize("putPresentationMerge", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putPresentationMerge(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationMerge", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putPresentationMergeFolder) {
	std::shared_ptr<PutPresentationMergeRequest> request = getPutPresentationMergeRequest();
	request->setFolder(utils->getInvalidTestValue("putPresentationMerge", "folder", request->getFolder()));
	utils->initialize("putPresentationMerge", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putPresentationMerge(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putPresentationMerge", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putPresentationMerge", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putPresentationMerge", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSection) {
	std::shared_ptr<PutSectionRequest> request = getPutSectionRequest();
	utils->initialize("putSection", "");
	std::shared_ptr<Sections> result = api->putSection(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSectionName) {
	std::shared_ptr<PutSectionRequest> request = getPutSectionRequest();
	request->setName(utils->getInvalidTestValue("putSection", "name", request->getName()));
	utils->initialize("putSection", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionSectionIndex) {
	std::shared_ptr<PutSectionRequest> request = getPutSectionRequest();
	request->setSectionIndex(utils->getInvalidIntTestValue("putSection", "sectionIndex", request->getSectionIndex()));
	utils->initialize("putSection", "sectionIndex", request->getSectionIndex());

	bool failed = true;
	try
	{
		api->putSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "sectionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "sectionIndex", request->getSectionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "sectionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "sectionIndex", request->getSectionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "sectionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionSectionName) {
	std::shared_ptr<PutSectionRequest> request = getPutSectionRequest();
	request->setSectionName(utils->getInvalidTestValue("putSection", "sectionName", request->getSectionName()));
	utils->initialize("putSection", "sectionName", request->getSectionName());

	bool failed = true;
	try
	{
		api->putSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "sectionName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "sectionName", request->getSectionName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "sectionName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "sectionName", request->getSectionName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "sectionName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionPassword) {
	std::shared_ptr<PutSectionRequest> request = getPutSectionRequest();
	request->setPassword(utils->getInvalidTestValue("putSection", "password", request->getPassword()));
	utils->initialize("putSection", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionFolder) {
	std::shared_ptr<PutSectionRequest> request = getPutSectionRequest();
	request->setFolder(utils->getInvalidTestValue("putSection", "folder", request->getFolder()));
	utils->initialize("putSection", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionStorage) {
	std::shared_ptr<PutSectionRequest> request = getPutSectionRequest();
	request->setStorage(utils->getInvalidTestValue("putSection", "storage", request->getStorage()));
	utils->initialize("putSection", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSection(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSection", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSection", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSections) {
	std::shared_ptr<PutSectionsRequest> request = getPutSectionsRequest();
	utils->initialize("putSections", "");
	std::shared_ptr<Sections> result = api->putSections(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSectionsName) {
	std::shared_ptr<PutSectionsRequest> request = getPutSectionsRequest();
	request->setName(utils->getInvalidTestValue("putSections", "name", request->getName()));
	utils->initialize("putSections", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSections", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSections", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSections", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSections", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSections", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionsSections) {
	std::shared_ptr<PutSectionsRequest> request = getPutSectionsRequest();
	request->setSections(utils->getInvalidTestValueForClass<>("putSections", "sections", request->getSections()));
	utils->initialize("putSections", "sections", request->getSections());

	bool failed = true;
	try
	{
		api->putSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSections", "sections");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSections", "sections", request->getSections());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSections", "sections");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSections", "sections", request->getSections());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSections", "sections"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionsPassword) {
	std::shared_ptr<PutSectionsRequest> request = getPutSectionsRequest();
	request->setPassword(utils->getInvalidTestValue("putSections", "password", request->getPassword()));
	utils->initialize("putSections", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSections", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSections", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSections", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSections", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSections", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionsFolder) {
	std::shared_ptr<PutSectionsRequest> request = getPutSectionsRequest();
	request->setFolder(utils->getInvalidTestValue("putSections", "folder", request->getFolder()));
	utils->initialize("putSections", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSections", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSections", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSections", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSections", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSections", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSectionsStorage) {
	std::shared_ptr<PutSectionsRequest> request = getPutSectionsRequest();
	request->setStorage(utils->getInvalidTestValue("putSections", "storage", request->getStorage()));
	utils->initialize("putSections", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSections(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSections", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSections", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSections", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSections", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSections", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionProperties) {
	std::shared_ptr<PutSetParagraphPortionPropertiesRequest> request = getPutSetParagraphPortionPropertiesRequest();
	utils->initialize("putSetParagraphPortionProperties", "");
	std::shared_ptr<Portion> result = api->putSetParagraphPortionProperties(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesName) {
	std::shared_ptr<PutSetParagraphPortionPropertiesRequest> request = getPutSetParagraphPortionPropertiesRequest();
	request->setName(utils->getInvalidTestValue("putSetParagraphPortionProperties", "name", request->getName()));
	utils->initialize("putSetParagraphPortionProperties", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSetParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesSlideIndex) {
	std::shared_ptr<PutSetParagraphPortionPropertiesRequest> request = getPutSetParagraphPortionPropertiesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSetParagraphPortionProperties", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSetParagraphPortionProperties", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSetParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesShapeIndex) {
	std::shared_ptr<PutSetParagraphPortionPropertiesRequest> request = getPutSetParagraphPortionPropertiesRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putSetParagraphPortionProperties", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putSetParagraphPortionProperties", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putSetParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesParagraphIndex) {
	std::shared_ptr<PutSetParagraphPortionPropertiesRequest> request = getPutSetParagraphPortionPropertiesRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("putSetParagraphPortionProperties", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("putSetParagraphPortionProperties", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->putSetParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesPortionIndex) {
	std::shared_ptr<PutSetParagraphPortionPropertiesRequest> request = getPutSetParagraphPortionPropertiesRequest();
	request->setPortionIndex(utils->getInvalidIntTestValue("putSetParagraphPortionProperties", "portionIndex", request->getPortionIndex()));
	utils->initialize("putSetParagraphPortionProperties", "portionIndex", request->getPortionIndex());

	bool failed = true;
	try
	{
		api->putSetParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "portionIndex", request->getPortionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "portionIndex", request->getPortionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesDto) {
	std::shared_ptr<PutSetParagraphPortionPropertiesRequest> request = getPutSetParagraphPortionPropertiesRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putSetParagraphPortionProperties", "dto", request->getDto()));
	utils->initialize("putSetParagraphPortionProperties", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putSetParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesPassword) {
	std::shared_ptr<PutSetParagraphPortionPropertiesRequest> request = getPutSetParagraphPortionPropertiesRequest();
	request->setPassword(utils->getInvalidTestValue("putSetParagraphPortionProperties", "password", request->getPassword()));
	utils->initialize("putSetParagraphPortionProperties", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSetParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesFolder) {
	std::shared_ptr<PutSetParagraphPortionPropertiesRequest> request = getPutSetParagraphPortionPropertiesRequest();
	request->setFolder(utils->getInvalidTestValue("putSetParagraphPortionProperties", "folder", request->getFolder()));
	utils->initialize("putSetParagraphPortionProperties", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSetParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPortionPropertiesStorage) {
	std::shared_ptr<PutSetParagraphPortionPropertiesRequest> request = getPutSetParagraphPortionPropertiesRequest();
	request->setStorage(utils->getInvalidTestValue("putSetParagraphPortionProperties", "storage", request->getStorage()));
	utils->initialize("putSetParagraphPortionProperties", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSetParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphPortionProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphPortionProperties", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphPortionProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphProperties) {
	std::shared_ptr<PutSetParagraphPropertiesRequest> request = getPutSetParagraphPropertiesRequest();
	utils->initialize("putSetParagraphProperties", "");
	std::shared_ptr<Paragraph> result = api->putSetParagraphProperties(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesName) {
	std::shared_ptr<PutSetParagraphPropertiesRequest> request = getPutSetParagraphPropertiesRequest();
	request->setName(utils->getInvalidTestValue("putSetParagraphProperties", "name", request->getName()));
	utils->initialize("putSetParagraphProperties", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSetParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesSlideIndex) {
	std::shared_ptr<PutSetParagraphPropertiesRequest> request = getPutSetParagraphPropertiesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSetParagraphProperties", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSetParagraphProperties", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSetParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesShapeIndex) {
	std::shared_ptr<PutSetParagraphPropertiesRequest> request = getPutSetParagraphPropertiesRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putSetParagraphProperties", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putSetParagraphProperties", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putSetParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesParagraphIndex) {
	std::shared_ptr<PutSetParagraphPropertiesRequest> request = getPutSetParagraphPropertiesRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("putSetParagraphProperties", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("putSetParagraphProperties", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->putSetParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesDto) {
	std::shared_ptr<PutSetParagraphPropertiesRequest> request = getPutSetParagraphPropertiesRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putSetParagraphProperties", "dto", request->getDto()));
	utils->initialize("putSetParagraphProperties", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putSetParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesPassword) {
	std::shared_ptr<PutSetParagraphPropertiesRequest> request = getPutSetParagraphPropertiesRequest();
	request->setPassword(utils->getInvalidTestValue("putSetParagraphProperties", "password", request->getPassword()));
	utils->initialize("putSetParagraphProperties", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSetParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesFolder) {
	std::shared_ptr<PutSetParagraphPropertiesRequest> request = getPutSetParagraphPropertiesRequest();
	request->setFolder(utils->getInvalidTestValue("putSetParagraphProperties", "folder", request->getFolder()));
	utils->initialize("putSetParagraphProperties", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSetParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetParagraphPropertiesStorage) {
	std::shared_ptr<PutSetParagraphPropertiesRequest> request = getPutSetParagraphPropertiesRequest();
	request->setStorage(utils->getInvalidTestValue("putSetParagraphProperties", "storage", request->getStorage()));
	utils->initialize("putSetParagraphProperties", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSetParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetParagraphProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetParagraphProperties", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetParagraphProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionProperties) {
	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = getPutSetSubshapeParagraphPortionPropertiesRequest();
	utils->initialize("putSetSubshapeParagraphPortionProperties", "");
	std::shared_ptr<Portion> result = api->putSetSubshapeParagraphPortionProperties(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesName) {
	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = getPutSetSubshapeParagraphPortionPropertiesRequest();
	request->setName(utils->getInvalidTestValue("putSetSubshapeParagraphPortionProperties", "name", request->getName()));
	utils->initialize("putSetSubshapeParagraphPortionProperties", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesSlideIndex) {
	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = getPutSetSubshapeParagraphPortionPropertiesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSetSubshapeParagraphPortionProperties", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSetSubshapeParagraphPortionProperties", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesPath) {
	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = getPutSetSubshapeParagraphPortionPropertiesRequest();
	request->setPath(utils->getInvalidTestValue("putSetSubshapeParagraphPortionProperties", "path", request->getPath()));
	utils->initialize("putSetSubshapeParagraphPortionProperties", "path", request->getPath());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesShapeIndex) {
	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = getPutSetSubshapeParagraphPortionPropertiesRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putSetSubshapeParagraphPortionProperties", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putSetSubshapeParagraphPortionProperties", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesParagraphIndex) {
	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = getPutSetSubshapeParagraphPortionPropertiesRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("putSetSubshapeParagraphPortionProperties", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesPortionIndex) {
	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = getPutSetSubshapeParagraphPortionPropertiesRequest();
	request->setPortionIndex(utils->getInvalidIntTestValue("putSetSubshapeParagraphPortionProperties", "portionIndex", request->getPortionIndex()));
	utils->initialize("putSetSubshapeParagraphPortionProperties", "portionIndex", request->getPortionIndex());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "portionIndex", request->getPortionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "portionIndex", request->getPortionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesDto) {
	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = getPutSetSubshapeParagraphPortionPropertiesRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putSetSubshapeParagraphPortionProperties", "dto", request->getDto()));
	utils->initialize("putSetSubshapeParagraphPortionProperties", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesPassword) {
	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = getPutSetSubshapeParagraphPortionPropertiesRequest();
	request->setPassword(utils->getInvalidTestValue("putSetSubshapeParagraphPortionProperties", "password", request->getPassword()));
	utils->initialize("putSetSubshapeParagraphPortionProperties", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesFolder) {
	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = getPutSetSubshapeParagraphPortionPropertiesRequest();
	request->setFolder(utils->getInvalidTestValue("putSetSubshapeParagraphPortionProperties", "folder", request->getFolder()));
	utils->initialize("putSetSubshapeParagraphPortionProperties", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPortionPropertiesStorage) {
	std::shared_ptr<PutSetSubshapeParagraphPortionPropertiesRequest> request = getPutSetSubshapeParagraphPortionPropertiesRequest();
	request->setStorage(utils->getInvalidTestValue("putSetSubshapeParagraphPortionProperties", "storage", request->getStorage()));
	utils->initialize("putSetSubshapeParagraphPortionProperties", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphPortionProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphPortionProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphPortionProperties", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphPortionProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphProperties) {
	std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> request = getPutSetSubshapeParagraphPropertiesRequest();
	utils->initialize("putSetSubshapeParagraphProperties", "");
	std::shared_ptr<Paragraph> result = api->putSetSubshapeParagraphProperties(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesName) {
	std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> request = getPutSetSubshapeParagraphPropertiesRequest();
	request->setName(utils->getInvalidTestValue("putSetSubshapeParagraphProperties", "name", request->getName()));
	utils->initialize("putSetSubshapeParagraphProperties", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesSlideIndex) {
	std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> request = getPutSetSubshapeParagraphPropertiesRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSetSubshapeParagraphProperties", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSetSubshapeParagraphProperties", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesPath) {
	std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> request = getPutSetSubshapeParagraphPropertiesRequest();
	request->setPath(utils->getInvalidTestValue("putSetSubshapeParagraphProperties", "path", request->getPath()));
	utils->initialize("putSetSubshapeParagraphProperties", "path", request->getPath());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesShapeIndex) {
	std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> request = getPutSetSubshapeParagraphPropertiesRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putSetSubshapeParagraphProperties", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putSetSubshapeParagraphProperties", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesParagraphIndex) {
	std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> request = getPutSetSubshapeParagraphPropertiesRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("putSetSubshapeParagraphProperties", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("putSetSubshapeParagraphProperties", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesDto) {
	std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> request = getPutSetSubshapeParagraphPropertiesRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putSetSubshapeParagraphProperties", "dto", request->getDto()));
	utils->initialize("putSetSubshapeParagraphProperties", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesPassword) {
	std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> request = getPutSetSubshapeParagraphPropertiesRequest();
	request->setPassword(utils->getInvalidTestValue("putSetSubshapeParagraphProperties", "password", request->getPassword()));
	utils->initialize("putSetSubshapeParagraphProperties", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesFolder) {
	std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> request = getPutSetSubshapeParagraphPropertiesRequest();
	request->setFolder(utils->getInvalidTestValue("putSetSubshapeParagraphProperties", "folder", request->getFolder()));
	utils->initialize("putSetSubshapeParagraphProperties", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSetSubshapeParagraphPropertiesStorage) {
	std::shared_ptr<PutSetSubshapeParagraphPropertiesRequest> request = getPutSetSubshapeParagraphPropertiesRequest();
	request->setStorage(utils->getInvalidTestValue("putSetSubshapeParagraphProperties", "storage", request->getStorage()));
	utils->initialize("putSetSubshapeParagraphProperties", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSetSubshapeParagraphProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSetSubshapeParagraphProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSetSubshapeParagraphProperties", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSetSubshapeParagraphProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAs) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	utils->initialize("putShapeSaveAs", "");
	api->putShapeSaveAs(request).wait();
}

TEST_F(SlidesApiTest, putShapeSaveAsName) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setName(utils->getInvalidTestValue("putShapeSaveAs", "name", request->getName()));
	utils->initialize("putShapeSaveAs", "name", request->getName());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsSlideIndex) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putShapeSaveAs", "slideIndex", request->getSlideIndex()));
	utils->initialize("putShapeSaveAs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsShapeIndex) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putShapeSaveAs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putShapeSaveAs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsFormat) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setFormat(utils->getInvalidTestValue("putShapeSaveAs", "format", request->getFormat()));
	utils->initialize("putShapeSaveAs", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsOutPath) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setOutPath(utils->getInvalidTestValue("putShapeSaveAs", "outPath", request->getOutPath()));
	utils->initialize("putShapeSaveAs", "outPath", request->getOutPath());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "outPath", request->getOutPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "outPath", request->getOutPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsOptions) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setOptions(utils->getInvalidTestValueForClass<>("putShapeSaveAs", "options", request->getOptions()));
	utils->initialize("putShapeSaveAs", "options", request->getOptions());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "options", request->getOptions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "options", request->getOptions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsPassword) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setPassword(utils->getInvalidTestValue("putShapeSaveAs", "password", request->getPassword()));
	utils->initialize("putShapeSaveAs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsFolder) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setFolder(utils->getInvalidTestValue("putShapeSaveAs", "folder", request->getFolder()));
	utils->initialize("putShapeSaveAs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsStorage) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setStorage(utils->getInvalidTestValue("putShapeSaveAs", "storage", request->getStorage()));
	utils->initialize("putShapeSaveAs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsScaleX) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setScaleX(utils->getInvalidDoubleTestValue("putShapeSaveAs", "scaleX", request->getScaleX()));
	utils->initialize("putShapeSaveAs", "scaleX", request->getScaleX());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "scaleX", request->getScaleX());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "scaleX", request->getScaleX());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsScaleY) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setScaleY(utils->getInvalidDoubleTestValue("putShapeSaveAs", "scaleY", request->getScaleY()));
	utils->initialize("putShapeSaveAs", "scaleY", request->getScaleY());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "scaleY", request->getScaleY());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "scaleY", request->getScaleY());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsBounds) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setBounds(utils->getInvalidTestValue("putShapeSaveAs", "bounds", request->getBounds()));
	utils->initialize("putShapeSaveAs", "bounds", request->getBounds());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "bounds", request->getBounds());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "bounds", request->getBounds());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putShapeSaveAsFontsFolder) {
	std::shared_ptr<PutShapeSaveAsRequest> request = getPutShapeSaveAsRequest();
	request->setFontsFolder(utils->getInvalidTestValue("putShapeSaveAs", "fontsFolder", request->getFontsFolder()));
	utils->initialize("putShapeSaveAs", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->putShapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putShapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putShapeSaveAs", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putShapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimation) {
	std::shared_ptr<PutSlideAnimationRequest> request = getPutSlideAnimationRequest();
	utils->initialize("putSlideAnimation", "");
	std::shared_ptr<SlideAnimation> result = api->putSlideAnimation(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideAnimationName) {
	std::shared_ptr<PutSlideAnimationRequest> request = getPutSlideAnimationRequest();
	request->setName(utils->getInvalidTestValue("putSlideAnimation", "name", request->getName()));
	utils->initialize("putSlideAnimation", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationSlideIndex) {
	std::shared_ptr<PutSlideAnimationRequest> request = getPutSlideAnimationRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSlideAnimation", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSlideAnimation", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationAnimation) {
	std::shared_ptr<PutSlideAnimationRequest> request = getPutSlideAnimationRequest();
	request->setAnimation(utils->getInvalidTestValueForClass<>("putSlideAnimation", "animation", request->getAnimation()));
	utils->initialize("putSlideAnimation", "animation", request->getAnimation());

	bool failed = true;
	try
	{
		api->putSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "animation");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "animation", request->getAnimation());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "animation");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "animation", request->getAnimation());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "animation"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationPassword) {
	std::shared_ptr<PutSlideAnimationRequest> request = getPutSlideAnimationRequest();
	request->setPassword(utils->getInvalidTestValue("putSlideAnimation", "password", request->getPassword()));
	utils->initialize("putSlideAnimation", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationFolder) {
	std::shared_ptr<PutSlideAnimationRequest> request = getPutSlideAnimationRequest();
	request->setFolder(utils->getInvalidTestValue("putSlideAnimation", "folder", request->getFolder()));
	utils->initialize("putSlideAnimation", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationStorage) {
	std::shared_ptr<PutSlideAnimationRequest> request = getPutSlideAnimationRequest();
	request->setStorage(utils->getInvalidTestValue("putSlideAnimation", "storage", request->getStorage()));
	utils->initialize("putSlideAnimation", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlideAnimation(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimation", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffect) {
	std::shared_ptr<PutSlideAnimationEffectRequest> request = getPutSlideAnimationEffectRequest();
	utils->initialize("putSlideAnimationEffect", "");
	std::shared_ptr<SlideAnimation> result = api->putSlideAnimationEffect(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideAnimationEffectName) {
	std::shared_ptr<PutSlideAnimationEffectRequest> request = getPutSlideAnimationEffectRequest();
	request->setName(utils->getInvalidTestValue("putSlideAnimationEffect", "name", request->getName()));
	utils->initialize("putSlideAnimationEffect", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectSlideIndex) {
	std::shared_ptr<PutSlideAnimationEffectRequest> request = getPutSlideAnimationEffectRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSlideAnimationEffect", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSlideAnimationEffect", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectEffectIndex) {
	std::shared_ptr<PutSlideAnimationEffectRequest> request = getPutSlideAnimationEffectRequest();
	request->setEffectIndex(utils->getInvalidIntTestValue("putSlideAnimationEffect", "effectIndex", request->getEffectIndex()));
	utils->initialize("putSlideAnimationEffect", "effectIndex", request->getEffectIndex());

	bool failed = true;
	try
	{
		api->putSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "effectIndex", request->getEffectIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "effectIndex", request->getEffectIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectEffect) {
	std::shared_ptr<PutSlideAnimationEffectRequest> request = getPutSlideAnimationEffectRequest();
	request->setEffect(utils->getInvalidTestValueForClass<>("putSlideAnimationEffect", "effect", request->getEffect()));
	utils->initialize("putSlideAnimationEffect", "effect", request->getEffect());

	bool failed = true;
	try
	{
		api->putSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "effect", request->getEffect());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "effect", request->getEffect());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectPassword) {
	std::shared_ptr<PutSlideAnimationEffectRequest> request = getPutSlideAnimationEffectRequest();
	request->setPassword(utils->getInvalidTestValue("putSlideAnimationEffect", "password", request->getPassword()));
	utils->initialize("putSlideAnimationEffect", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectFolder) {
	std::shared_ptr<PutSlideAnimationEffectRequest> request = getPutSlideAnimationEffectRequest();
	request->setFolder(utils->getInvalidTestValue("putSlideAnimationEffect", "folder", request->getFolder()));
	utils->initialize("putSlideAnimationEffect", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationEffectStorage) {
	std::shared_ptr<PutSlideAnimationEffectRequest> request = getPutSlideAnimationEffectRequest();
	request->setStorage(utils->getInvalidTestValue("putSlideAnimationEffect", "storage", request->getStorage()));
	utils->initialize("putSlideAnimationEffect", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlideAnimationEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationEffect", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffect) {
	std::shared_ptr<PutSlideAnimationInteractiveSequenceEffectRequest> request = getPutSlideAnimationInteractiveSequenceEffectRequest();
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "");
	std::shared_ptr<SlideAnimation> result = api->putSlideAnimationInteractiveSequenceEffect(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectName) {
	std::shared_ptr<PutSlideAnimationInteractiveSequenceEffectRequest> request = getPutSlideAnimationInteractiveSequenceEffectRequest();
	request->setName(utils->getInvalidTestValue("putSlideAnimationInteractiveSequenceEffect", "name", request->getName()));
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectSlideIndex) {
	std::shared_ptr<PutSlideAnimationInteractiveSequenceEffectRequest> request = getPutSlideAnimationInteractiveSequenceEffectRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectSequenceIndex) {
	std::shared_ptr<PutSlideAnimationInteractiveSequenceEffectRequest> request = getPutSlideAnimationInteractiveSequenceEffectRequest();
	request->setSequenceIndex(utils->getInvalidIntTestValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex()));
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex());

	bool failed = true;
	try
	{
		api->putSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request->getSequenceIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectEffectIndex) {
	std::shared_ptr<PutSlideAnimationInteractiveSequenceEffectRequest> request = getPutSlideAnimationInteractiveSequenceEffectRequest();
	request->setEffectIndex(utils->getInvalidIntTestValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex", request->getEffectIndex()));
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "effectIndex", request->getEffectIndex());

	bool failed = true;
	try
	{
		api->putSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "effectIndex", request->getEffectIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "effectIndex", request->getEffectIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectEffect) {
	std::shared_ptr<PutSlideAnimationInteractiveSequenceEffectRequest> request = getPutSlideAnimationInteractiveSequenceEffectRequest();
	request->setEffect(utils->getInvalidTestValueForClass<>("putSlideAnimationInteractiveSequenceEffect", "effect", request->getEffect()));
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "effect", request->getEffect());

	bool failed = true;
	try
	{
		api->putSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "effect", request->getEffect());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "effect", request->getEffect());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectPassword) {
	std::shared_ptr<PutSlideAnimationInteractiveSequenceEffectRequest> request = getPutSlideAnimationInteractiveSequenceEffectRequest();
	request->setPassword(utils->getInvalidTestValue("putSlideAnimationInteractiveSequenceEffect", "password", request->getPassword()));
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectFolder) {
	std::shared_ptr<PutSlideAnimationInteractiveSequenceEffectRequest> request = getPutSlideAnimationInteractiveSequenceEffectRequest();
	request->setFolder(utils->getInvalidTestValue("putSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder()));
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideAnimationInteractiveSequenceEffectStorage) {
	std::shared_ptr<PutSlideAnimationInteractiveSequenceEffectRequest> request = getPutSlideAnimationInteractiveSequenceEffectRequest();
	request->setStorage(utils->getInvalidTestValue("putSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage()));
	utils->initialize("putSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlideAnimationInteractiveSequenceEffect(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideAnimationInteractiveSequenceEffect", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideAnimationInteractiveSequenceEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooter) {
	std::shared_ptr<PutSlideHeaderFooterRequest> request = getPutSlideHeaderFooterRequest();
	utils->initialize("putSlideHeaderFooter", "");
	std::shared_ptr<HeaderFooter> result = api->putSlideHeaderFooter(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideHeaderFooterName) {
	std::shared_ptr<PutSlideHeaderFooterRequest> request = getPutSlideHeaderFooterRequest();
	request->setName(utils->getInvalidTestValue("putSlideHeaderFooter", "name", request->getName()));
	utils->initialize("putSlideHeaderFooter", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooterSlideIndex) {
	std::shared_ptr<PutSlideHeaderFooterRequest> request = getPutSlideHeaderFooterRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSlideHeaderFooter", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSlideHeaderFooter", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooterDto) {
	std::shared_ptr<PutSlideHeaderFooterRequest> request = getPutSlideHeaderFooterRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putSlideHeaderFooter", "dto", request->getDto()));
	utils->initialize("putSlideHeaderFooter", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooterPassword) {
	std::shared_ptr<PutSlideHeaderFooterRequest> request = getPutSlideHeaderFooterRequest();
	request->setPassword(utils->getInvalidTestValue("putSlideHeaderFooter", "password", request->getPassword()));
	utils->initialize("putSlideHeaderFooter", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooterFolder) {
	std::shared_ptr<PutSlideHeaderFooterRequest> request = getPutSlideHeaderFooterRequest();
	request->setFolder(utils->getInvalidTestValue("putSlideHeaderFooter", "folder", request->getFolder()));
	utils->initialize("putSlideHeaderFooter", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideHeaderFooterStorage) {
	std::shared_ptr<PutSlideHeaderFooterRequest> request = getPutSlideHeaderFooterRequest();
	request->setStorage(utils->getInvalidTestValue("putSlideHeaderFooter", "storage", request->getStorage()));
	utils->initialize("putSlideHeaderFooter", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlideHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideHeaderFooter", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAs) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	utils->initialize("putSlideSaveAs", "");
	api->putSlideSaveAs(request).wait();
}

TEST_F(SlidesApiTest, putSlideSaveAsName) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	request->setName(utils->getInvalidTestValue("putSlideSaveAs", "name", request->getName()));
	utils->initialize("putSlideSaveAs", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsSlideIndex) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSlideSaveAs", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSlideSaveAs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsFormat) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	request->setFormat(utils->getInvalidTestValue("putSlideSaveAs", "format", request->getFormat()));
	utils->initialize("putSlideSaveAs", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->putSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsOutPath) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	request->setOutPath(utils->getInvalidTestValue("putSlideSaveAs", "outPath", request->getOutPath()));
	utils->initialize("putSlideSaveAs", "outPath", request->getOutPath());

	bool failed = true;
	try
	{
		api->putSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "outPath", request->getOutPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "outPath", request->getOutPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsOptions) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	request->setOptions(utils->getInvalidTestValueForClass<>("putSlideSaveAs", "options", request->getOptions()));
	utils->initialize("putSlideSaveAs", "options", request->getOptions());

	bool failed = true;
	try
	{
		api->putSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "options", request->getOptions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "options", request->getOptions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsWidth) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	request->setWidth(utils->getInvalidIntTestValue("putSlideSaveAs", "width", request->getWidth()));
	utils->initialize("putSlideSaveAs", "width", request->getWidth());

	bool failed = true;
	try
	{
		api->putSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "width", request->getWidth());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "width", request->getWidth());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsHeight) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	request->setHeight(utils->getInvalidIntTestValue("putSlideSaveAs", "height", request->getHeight()));
	utils->initialize("putSlideSaveAs", "height", request->getHeight());

	bool failed = true;
	try
	{
		api->putSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "height", request->getHeight());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "height", request->getHeight());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsPassword) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	request->setPassword(utils->getInvalidTestValue("putSlideSaveAs", "password", request->getPassword()));
	utils->initialize("putSlideSaveAs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsFolder) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	request->setFolder(utils->getInvalidTestValue("putSlideSaveAs", "folder", request->getFolder()));
	utils->initialize("putSlideSaveAs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsStorage) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	request->setStorage(utils->getInvalidTestValue("putSlideSaveAs", "storage", request->getStorage()));
	utils->initialize("putSlideSaveAs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSaveAsFontsFolder) {
	std::shared_ptr<PutSlideSaveAsRequest> request = getPutSlideSaveAsRequest();
	request->setFontsFolder(utils->getInvalidTestValue("putSlideSaveAs", "fontsFolder", request->getFontsFolder()));
	utils->initialize("putSlideSaveAs", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->putSlideSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSaveAs", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfo) {
	std::shared_ptr<PutSlideShapeInfoRequest> request = getPutSlideShapeInfoRequest();
	utils->initialize("putSlideShapeInfo", "");
	std::shared_ptr<ShapeBase> result = api->putSlideShapeInfo(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideShapeInfoName) {
	std::shared_ptr<PutSlideShapeInfoRequest> request = getPutSlideShapeInfoRequest();
	request->setName(utils->getInvalidTestValue("putSlideShapeInfo", "name", request->getName()));
	utils->initialize("putSlideShapeInfo", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlideShapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoSlideIndex) {
	std::shared_ptr<PutSlideShapeInfoRequest> request = getPutSlideShapeInfoRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSlideShapeInfo", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSlideShapeInfo", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSlideShapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoShapeIndex) {
	std::shared_ptr<PutSlideShapeInfoRequest> request = getPutSlideShapeInfoRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putSlideShapeInfo", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putSlideShapeInfo", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putSlideShapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoDto) {
	std::shared_ptr<PutSlideShapeInfoRequest> request = getPutSlideShapeInfoRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putSlideShapeInfo", "dto", request->getDto()));
	utils->initialize("putSlideShapeInfo", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putSlideShapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoPassword) {
	std::shared_ptr<PutSlideShapeInfoRequest> request = getPutSlideShapeInfoRequest();
	request->setPassword(utils->getInvalidTestValue("putSlideShapeInfo", "password", request->getPassword()));
	utils->initialize("putSlideShapeInfo", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlideShapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoFolder) {
	std::shared_ptr<PutSlideShapeInfoRequest> request = getPutSlideShapeInfoRequest();
	request->setFolder(utils->getInvalidTestValue("putSlideShapeInfo", "folder", request->getFolder()));
	utils->initialize("putSlideShapeInfo", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlideShapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideShapeInfoStorage) {
	std::shared_ptr<PutSlideShapeInfoRequest> request = getPutSlideShapeInfoRequest();
	request->setStorage(utils->getInvalidTestValue("putSlideShapeInfo", "storage", request->getStorage()));
	utils->initialize("putSlideShapeInfo", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlideShapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideShapeInfo", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideShapeInfo", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideShapeInfo", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfo) {
	std::shared_ptr<PutSlideSubshapeInfoRequest> request = getPutSlideSubshapeInfoRequest();
	utils->initialize("putSlideSubshapeInfo", "");
	std::shared_ptr<ShapeBase> result = api->putSlideSubshapeInfo(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoName) {
	std::shared_ptr<PutSlideSubshapeInfoRequest> request = getPutSlideSubshapeInfoRequest();
	request->setName(utils->getInvalidTestValue("putSlideSubshapeInfo", "name", request->getName()));
	utils->initialize("putSlideSubshapeInfo", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlideSubshapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoSlideIndex) {
	std::shared_ptr<PutSlideSubshapeInfoRequest> request = getPutSlideSubshapeInfoRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSlideSubshapeInfo", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSlideSubshapeInfo", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSlideSubshapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoPath) {
	std::shared_ptr<PutSlideSubshapeInfoRequest> request = getPutSlideSubshapeInfoRequest();
	request->setPath(utils->getInvalidTestValue("putSlideSubshapeInfo", "path", request->getPath()));
	utils->initialize("putSlideSubshapeInfo", "path", request->getPath());

	bool failed = true;
	try
	{
		api->putSlideSubshapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoShapeIndex) {
	std::shared_ptr<PutSlideSubshapeInfoRequest> request = getPutSlideSubshapeInfoRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putSlideSubshapeInfo", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putSlideSubshapeInfo", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putSlideSubshapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoDto) {
	std::shared_ptr<PutSlideSubshapeInfoRequest> request = getPutSlideSubshapeInfoRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putSlideSubshapeInfo", "dto", request->getDto()));
	utils->initialize("putSlideSubshapeInfo", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putSlideSubshapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoPassword) {
	std::shared_ptr<PutSlideSubshapeInfoRequest> request = getPutSlideSubshapeInfoRequest();
	request->setPassword(utils->getInvalidTestValue("putSlideSubshapeInfo", "password", request->getPassword()));
	utils->initialize("putSlideSubshapeInfo", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlideSubshapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoFolder) {
	std::shared_ptr<PutSlideSubshapeInfoRequest> request = getPutSlideSubshapeInfoRequest();
	request->setFolder(utils->getInvalidTestValue("putSlideSubshapeInfo", "folder", request->getFolder()));
	utils->initialize("putSlideSubshapeInfo", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlideSubshapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlideSubshapeInfoStorage) {
	std::shared_ptr<PutSlideSubshapeInfoRequest> request = getPutSlideSubshapeInfoRequest();
	request->setStorage(utils->getInvalidTestValue("putSlideSubshapeInfo", "storage", request->getStorage()));
	utils->initialize("putSlideSubshapeInfo", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlideSubshapeInfo(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlideSubshapeInfo", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlideSubshapeInfo", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlideSubshapeInfo", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesConvert) {
	std::shared_ptr<PutSlidesConvertRequest> request = getPutSlidesConvertRequest();
	utils->initialize("putSlidesConvert", "");
	api->putSlidesConvert(request).wait();
}

TEST_F(SlidesApiTest, putSlidesConvertDocument) {
	std::shared_ptr<PutSlidesConvertRequest> request = getPutSlidesConvertRequest();
	request->setDocument(utils->getInvalidBinaryTestValue("putSlidesConvert", "document", request->getDocument()));
	utils->initialize("putSlidesConvert", "document", request->getDocument());

	bool failed = true;
	try
	{
		api->putSlidesConvert(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "document", request->getDocument());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "document", request->getDocument());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesConvert", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesConvertFormat) {
	std::shared_ptr<PutSlidesConvertRequest> request = getPutSlidesConvertRequest();
	request->setFormat(utils->getInvalidTestValue("putSlidesConvert", "format", request->getFormat()));
	utils->initialize("putSlidesConvert", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->putSlidesConvert(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesConvert", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesConvertOutPath) {
	std::shared_ptr<PutSlidesConvertRequest> request = getPutSlidesConvertRequest();
	request->setOutPath(utils->getInvalidTestValue("putSlidesConvert", "outPath", request->getOutPath()));
	utils->initialize("putSlidesConvert", "outPath", request->getOutPath());

	bool failed = true;
	try
	{
		api->putSlidesConvert(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "outPath", request->getOutPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "outPath", request->getOutPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesConvert", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesConvertPassword) {
	std::shared_ptr<PutSlidesConvertRequest> request = getPutSlidesConvertRequest();
	request->setPassword(utils->getInvalidTestValue("putSlidesConvert", "password", request->getPassword()));
	utils->initialize("putSlidesConvert", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlidesConvert(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesConvert", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesConvertFontsFolder) {
	std::shared_ptr<PutSlidesConvertRequest> request = getPutSlidesConvertRequest();
	request->setFontsFolder(utils->getInvalidTestValue("putSlidesConvert", "fontsFolder", request->getFontsFolder()));
	utils->initialize("putSlidesConvert", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->putSlidesConvert(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesConvert", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesConvert", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesConvert", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtml) {
	std::shared_ptr<PutSlidesDocumentFromHtmlRequest> request = getPutSlidesDocumentFromHtmlRequest();
	utils->initialize("putSlidesDocumentFromHtml", "");
	std::shared_ptr<Document> result = api->putSlidesDocumentFromHtml(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtmlName) {
	std::shared_ptr<PutSlidesDocumentFromHtmlRequest> request = getPutSlidesDocumentFromHtmlRequest();
	request->setName(utils->getInvalidTestValue("putSlidesDocumentFromHtml", "name", request->getName()));
	utils->initialize("putSlidesDocumentFromHtml", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlidesDocumentFromHtml(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesDocumentFromHtml", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtmlHtml) {
	std::shared_ptr<PutSlidesDocumentFromHtmlRequest> request = getPutSlidesDocumentFromHtmlRequest();
	request->setHtml(utils->getInvalidTestValue("putSlidesDocumentFromHtml", "html", request->getHtml()));
	utils->initialize("putSlidesDocumentFromHtml", "html", request->getHtml());

	bool failed = true;
	try
	{
		api->putSlidesDocumentFromHtml(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "html");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "html", request->getHtml());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "html");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "html", request->getHtml());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesDocumentFromHtml", "html"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtmlPassword) {
	std::shared_ptr<PutSlidesDocumentFromHtmlRequest> request = getPutSlidesDocumentFromHtmlRequest();
	request->setPassword(utils->getInvalidTestValue("putSlidesDocumentFromHtml", "password", request->getPassword()));
	utils->initialize("putSlidesDocumentFromHtml", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlidesDocumentFromHtml(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesDocumentFromHtml", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtmlStorage) {
	std::shared_ptr<PutSlidesDocumentFromHtmlRequest> request = getPutSlidesDocumentFromHtmlRequest();
	request->setStorage(utils->getInvalidTestValue("putSlidesDocumentFromHtml", "storage", request->getStorage()));
	utils->initialize("putSlidesDocumentFromHtml", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlidesDocumentFromHtml(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesDocumentFromHtml", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesDocumentFromHtmlFolder) {
	std::shared_ptr<PutSlidesDocumentFromHtmlRequest> request = getPutSlidesDocumentFromHtmlRequest();
	request->setFolder(utils->getInvalidTestValue("putSlidesDocumentFromHtml", "folder", request->getFolder()));
	utils->initialize("putSlidesDocumentFromHtml", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlidesDocumentFromHtml(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesDocumentFromHtml", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesDocumentFromHtml", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesDocumentFromHtml", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesHeaderFooter) {
	std::shared_ptr<PutSlidesHeaderFooterRequest> request = getPutSlidesHeaderFooterRequest();
	utils->initialize("putSlidesHeaderFooter", "");
	std::shared_ptr<Document> result = api->putSlidesHeaderFooter(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesHeaderFooterName) {
	std::shared_ptr<PutSlidesHeaderFooterRequest> request = getPutSlidesHeaderFooterRequest();
	request->setName(utils->getInvalidTestValue("putSlidesHeaderFooter", "name", request->getName()));
	utils->initialize("putSlidesHeaderFooter", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlidesHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesHeaderFooterDto) {
	std::shared_ptr<PutSlidesHeaderFooterRequest> request = getPutSlidesHeaderFooterRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putSlidesHeaderFooter", "dto", request->getDto()));
	utils->initialize("putSlidesHeaderFooter", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putSlidesHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesHeaderFooter", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesHeaderFooterPassword) {
	std::shared_ptr<PutSlidesHeaderFooterRequest> request = getPutSlidesHeaderFooterRequest();
	request->setPassword(utils->getInvalidTestValue("putSlidesHeaderFooter", "password", request->getPassword()));
	utils->initialize("putSlidesHeaderFooter", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlidesHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesHeaderFooterStorage) {
	std::shared_ptr<PutSlidesHeaderFooterRequest> request = getPutSlidesHeaderFooterRequest();
	request->setStorage(utils->getInvalidTestValue("putSlidesHeaderFooter", "storage", request->getStorage()));
	utils->initialize("putSlidesHeaderFooter", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlidesHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesHeaderFooterFolder) {
	std::shared_ptr<PutSlidesHeaderFooterRequest> request = getPutSlidesHeaderFooterRequest();
	request->setFolder(utils->getInvalidTestValue("putSlidesHeaderFooter", "folder", request->getFolder()));
	utils->initialize("putSlidesHeaderFooter", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlidesHeaderFooter(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesHeaderFooter", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAs) {
	std::shared_ptr<PutSlidesSaveAsRequest> request = getPutSlidesSaveAsRequest();
	utils->initialize("putSlidesSaveAs", "");
	api->putSlidesSaveAs(request).wait();
}

TEST_F(SlidesApiTest, putSlidesSaveAsName) {
	std::shared_ptr<PutSlidesSaveAsRequest> request = getPutSlidesSaveAsRequest();
	request->setName(utils->getInvalidTestValue("putSlidesSaveAs", "name", request->getName()));
	utils->initialize("putSlidesSaveAs", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsOutPath) {
	std::shared_ptr<PutSlidesSaveAsRequest> request = getPutSlidesSaveAsRequest();
	request->setOutPath(utils->getInvalidTestValue("putSlidesSaveAs", "outPath", request->getOutPath()));
	utils->initialize("putSlidesSaveAs", "outPath", request->getOutPath());

	bool failed = true;
	try
	{
		api->putSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "outPath", request->getOutPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "outPath", request->getOutPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsFormat) {
	std::shared_ptr<PutSlidesSaveAsRequest> request = getPutSlidesSaveAsRequest();
	request->setFormat(utils->getInvalidTestValue("putSlidesSaveAs", "format", request->getFormat()));
	utils->initialize("putSlidesSaveAs", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->putSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsOptions) {
	std::shared_ptr<PutSlidesSaveAsRequest> request = getPutSlidesSaveAsRequest();
	request->setOptions(utils->getInvalidTestValueForClass<>("putSlidesSaveAs", "options", request->getOptions()));
	utils->initialize("putSlidesSaveAs", "options", request->getOptions());

	bool failed = true;
	try
	{
		api->putSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "options", request->getOptions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "options", request->getOptions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsPassword) {
	std::shared_ptr<PutSlidesSaveAsRequest> request = getPutSlidesSaveAsRequest();
	request->setPassword(utils->getInvalidTestValue("putSlidesSaveAs", "password", request->getPassword()));
	utils->initialize("putSlidesSaveAs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsStorage) {
	std::shared_ptr<PutSlidesSaveAsRequest> request = getPutSlidesSaveAsRequest();
	request->setStorage(utils->getInvalidTestValue("putSlidesSaveAs", "storage", request->getStorage()));
	utils->initialize("putSlidesSaveAs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsFolder) {
	std::shared_ptr<PutSlidesSaveAsRequest> request = getPutSlidesSaveAsRequest();
	request->setFolder(utils->getInvalidTestValue("putSlidesSaveAs", "folder", request->getFolder()));
	utils->initialize("putSlidesSaveAs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSaveAsFontsFolder) {
	std::shared_ptr<PutSlidesSaveAsRequest> request = getPutSlidesSaveAsRequest();
	request->setFontsFolder(utils->getInvalidTestValue("putSlidesSaveAs", "fontsFolder", request->getFontsFolder()));
	utils->initialize("putSlidesSaveAs", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->putSlidesSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSaveAs", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentProperty) {
	std::shared_ptr<PutSlidesSetDocumentPropertyRequest> request = getPutSlidesSetDocumentPropertyRequest();
	utils->initialize("putSlidesSetDocumentProperty", "");
	std::shared_ptr<DocumentProperty> result = api->putSlidesSetDocumentProperty(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyName) {
	std::shared_ptr<PutSlidesSetDocumentPropertyRequest> request = getPutSlidesSetDocumentPropertyRequest();
	request->setName(utils->getInvalidTestValue("putSlidesSetDocumentProperty", "name", request->getName()));
	utils->initialize("putSlidesSetDocumentProperty", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlidesSetDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyPropertyName) {
	std::shared_ptr<PutSlidesSetDocumentPropertyRequest> request = getPutSlidesSetDocumentPropertyRequest();
	request->setPropertyName(utils->getInvalidTestValue("putSlidesSetDocumentProperty", "propertyName", request->getPropertyName()));
	utils->initialize("putSlidesSetDocumentProperty", "propertyName", request->getPropertyName());

	bool failed = true;
	try
	{
		api->putSlidesSetDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "propertyName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "propertyName", request->getPropertyName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "propertyName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "propertyName", request->getPropertyName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "propertyName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyProperty) {
	std::shared_ptr<PutSlidesSetDocumentPropertyRequest> request = getPutSlidesSetDocumentPropertyRequest();
	request->setProperty(utils->getInvalidTestValueForClass<>("putSlidesSetDocumentProperty", "property", request->getProperty()));
	utils->initialize("putSlidesSetDocumentProperty", "property", request->getProperty());

	bool failed = true;
	try
	{
		api->putSlidesSetDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "property");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "property", request->getProperty());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "property");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "property", request->getProperty());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "property"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyPassword) {
	std::shared_ptr<PutSlidesSetDocumentPropertyRequest> request = getPutSlidesSetDocumentPropertyRequest();
	request->setPassword(utils->getInvalidTestValue("putSlidesSetDocumentProperty", "password", request->getPassword()));
	utils->initialize("putSlidesSetDocumentProperty", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlidesSetDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyFolder) {
	std::shared_ptr<PutSlidesSetDocumentPropertyRequest> request = getPutSlidesSetDocumentPropertyRequest();
	request->setFolder(utils->getInvalidTestValue("putSlidesSetDocumentProperty", "folder", request->getFolder()));
	utils->initialize("putSlidesSetDocumentProperty", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlidesSetDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSetDocumentPropertyStorage) {
	std::shared_ptr<PutSlidesSetDocumentPropertyRequest> request = getPutSlidesSetDocumentPropertyRequest();
	request->setStorage(utils->getInvalidTestValue("putSlidesSetDocumentProperty", "storage", request->getStorage()));
	utils->initialize("putSlidesSetDocumentProperty", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlidesSetDocumentProperty(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSetDocumentProperty", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSetDocumentProperty", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSetDocumentProperty", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlide) {
	std::shared_ptr<PutSlidesSlideRequest> request = getPutSlidesSlideRequest();
	utils->initialize("putSlidesSlide", "");
	std::shared_ptr<Slide> result = api->putSlidesSlide(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesSlideName) {
	std::shared_ptr<PutSlidesSlideRequest> request = getPutSlidesSlideRequest();
	request->setName(utils->getInvalidTestValue("putSlidesSlide", "name", request->getName()));
	utils->initialize("putSlidesSlide", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlidesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSlideIndex) {
	std::shared_ptr<PutSlidesSlideRequest> request = getPutSlidesSlideRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSlidesSlide", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSlidesSlide", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSlidesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSlideDto) {
	std::shared_ptr<PutSlidesSlideRequest> request = getPutSlidesSlideRequest();
	request->setSlideDto(utils->getInvalidTestValueForClass<>("putSlidesSlide", "slideDto", request->getSlideDto()));
	utils->initialize("putSlidesSlide", "slideDto", request->getSlideDto());

	bool failed = true;
	try
	{
		api->putSlidesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "slideDto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "slideDto", request->getSlideDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "slideDto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "slideDto", request->getSlideDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "slideDto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlidePassword) {
	std::shared_ptr<PutSlidesSlideRequest> request = getPutSlidesSlideRequest();
	request->setPassword(utils->getInvalidTestValue("putSlidesSlide", "password", request->getPassword()));
	utils->initialize("putSlidesSlide", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlidesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideFolder) {
	std::shared_ptr<PutSlidesSlideRequest> request = getPutSlidesSlideRequest();
	request->setFolder(utils->getInvalidTestValue("putSlidesSlide", "folder", request->getFolder()));
	utils->initialize("putSlidesSlide", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlidesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideStorage) {
	std::shared_ptr<PutSlidesSlideRequest> request = getPutSlidesSlideRequest();
	request->setStorage(utils->getInvalidTestValue("putSlidesSlide", "storage", request->getStorage()));
	utils->initialize("putSlidesSlide", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlidesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlide", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackground) {
	std::shared_ptr<PutSlidesSlideBackgroundRequest> request = getPutSlidesSlideBackgroundRequest();
	utils->initialize("putSlidesSlideBackground", "");
	std::shared_ptr<SlideBackground> result = api->putSlidesSlideBackground(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundName) {
	std::shared_ptr<PutSlidesSlideBackgroundRequest> request = getPutSlidesSlideBackgroundRequest();
	request->setName(utils->getInvalidTestValue("putSlidesSlideBackground", "name", request->getName()));
	utils->initialize("putSlidesSlideBackground", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundSlideIndex) {
	std::shared_ptr<PutSlidesSlideBackgroundRequest> request = getPutSlidesSlideBackgroundRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSlidesSlideBackground", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSlidesSlideBackground", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundBackground) {
	std::shared_ptr<PutSlidesSlideBackgroundRequest> request = getPutSlidesSlideBackgroundRequest();
	request->setBackground(utils->getInvalidTestValueForClass<>("putSlidesSlideBackground", "background", request->getBackground()));
	utils->initialize("putSlidesSlideBackground", "background", request->getBackground());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "background");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "background", request->getBackground());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "background");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "background", request->getBackground());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "background"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundFolder) {
	std::shared_ptr<PutSlidesSlideBackgroundRequest> request = getPutSlidesSlideBackgroundRequest();
	request->setFolder(utils->getInvalidTestValue("putSlidesSlideBackground", "folder", request->getFolder()));
	utils->initialize("putSlidesSlideBackground", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundPassword) {
	std::shared_ptr<PutSlidesSlideBackgroundRequest> request = getPutSlidesSlideBackgroundRequest();
	request->setPassword(utils->getInvalidTestValue("putSlidesSlideBackground", "password", request->getPassword()));
	utils->initialize("putSlidesSlideBackground", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundStorage) {
	std::shared_ptr<PutSlidesSlideBackgroundRequest> request = getPutSlidesSlideBackgroundRequest();
	request->setStorage(utils->getInvalidTestValue("putSlidesSlideBackground", "storage", request->getStorage()));
	utils->initialize("putSlidesSlideBackground", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackground(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackground", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackground", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackground", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColor) {
	std::shared_ptr<PutSlidesSlideBackgroundColorRequest> request = getPutSlidesSlideBackgroundColorRequest();
	utils->initialize("putSlidesSlideBackgroundColor", "");
	std::shared_ptr<SlideBackground> result = api->putSlidesSlideBackgroundColor(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorName) {
	std::shared_ptr<PutSlidesSlideBackgroundColorRequest> request = getPutSlidesSlideBackgroundColorRequest();
	request->setName(utils->getInvalidTestValue("putSlidesSlideBackgroundColor", "name", request->getName()));
	utils->initialize("putSlidesSlideBackgroundColor", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackgroundColor(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorSlideIndex) {
	std::shared_ptr<PutSlidesSlideBackgroundColorRequest> request = getPutSlidesSlideBackgroundColorRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSlidesSlideBackgroundColor", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSlidesSlideBackgroundColor", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackgroundColor(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorColor) {
	std::shared_ptr<PutSlidesSlideBackgroundColorRequest> request = getPutSlidesSlideBackgroundColorRequest();
	request->setColor(utils->getInvalidTestValue("putSlidesSlideBackgroundColor", "color", request->getColor()));
	utils->initialize("putSlidesSlideBackgroundColor", "color", request->getColor());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackgroundColor(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "color");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "color", request->getColor());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "color");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "color", request->getColor());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "color"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorFolder) {
	std::shared_ptr<PutSlidesSlideBackgroundColorRequest> request = getPutSlidesSlideBackgroundColorRequest();
	request->setFolder(utils->getInvalidTestValue("putSlidesSlideBackgroundColor", "folder", request->getFolder()));
	utils->initialize("putSlidesSlideBackgroundColor", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackgroundColor(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorPassword) {
	std::shared_ptr<PutSlidesSlideBackgroundColorRequest> request = getPutSlidesSlideBackgroundColorRequest();
	request->setPassword(utils->getInvalidTestValue("putSlidesSlideBackgroundColor", "password", request->getPassword()));
	utils->initialize("putSlidesSlideBackgroundColor", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackgroundColor(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideBackgroundColorStorage) {
	std::shared_ptr<PutSlidesSlideBackgroundColorRequest> request = getPutSlidesSlideBackgroundColorRequest();
	request->setStorage(utils->getInvalidTestValue("putSlidesSlideBackgroundColor", "storage", request->getStorage()));
	utils->initialize("putSlidesSlideBackgroundColor", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlidesSlideBackgroundColor(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideBackgroundColor", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideBackgroundColor", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideBackgroundColor", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSize) {
	std::shared_ptr<PutSlidesSlideSizeRequest> request = getPutSlidesSlideSizeRequest();
	utils->initialize("putSlidesSlideSize", "");
	std::shared_ptr<Document> result = api->putSlidesSlideSize(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesSlideSizeName) {
	std::shared_ptr<PutSlidesSlideSizeRequest> request = getPutSlidesSlideSizeRequest();
	request->setName(utils->getInvalidTestValue("putSlidesSlideSize", "name", request->getName()));
	utils->initialize("putSlidesSlideSize", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizePassword) {
	std::shared_ptr<PutSlidesSlideSizeRequest> request = getPutSlidesSlideSizeRequest();
	request->setPassword(utils->getInvalidTestValue("putSlidesSlideSize", "password", request->getPassword()));
	utils->initialize("putSlidesSlideSize", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeStorage) {
	std::shared_ptr<PutSlidesSlideSizeRequest> request = getPutSlidesSlideSizeRequest();
	request->setStorage(utils->getInvalidTestValue("putSlidesSlideSize", "storage", request->getStorage()));
	utils->initialize("putSlidesSlideSize", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeFolder) {
	std::shared_ptr<PutSlidesSlideSizeRequest> request = getPutSlidesSlideSizeRequest();
	request->setFolder(utils->getInvalidTestValue("putSlidesSlideSize", "folder", request->getFolder()));
	utils->initialize("putSlidesSlideSize", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeWidth) {
	std::shared_ptr<PutSlidesSlideSizeRequest> request = getPutSlidesSlideSizeRequest();
	request->setWidth(utils->getInvalidIntTestValue("putSlidesSlideSize", "width", request->getWidth()));
	utils->initialize("putSlidesSlideSize", "width", request->getWidth());

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "width", request->getWidth());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "width", request->getWidth());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeHeight) {
	std::shared_ptr<PutSlidesSlideSizeRequest> request = getPutSlidesSlideSizeRequest();
	request->setHeight(utils->getInvalidIntTestValue("putSlidesSlideSize", "height", request->getHeight()));
	utils->initialize("putSlidesSlideSize", "height", request->getHeight());

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "height", request->getHeight());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "height", request->getHeight());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeSizeType) {
	std::shared_ptr<PutSlidesSlideSizeRequest> request = getPutSlidesSlideSizeRequest();
	request->setSizeType(utils->getInvalidTestValue("putSlidesSlideSize", "sizeType", request->getSizeType()));
	utils->initialize("putSlidesSlideSize", "sizeType", request->getSizeType());

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "sizeType");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "sizeType", request->getSizeType());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "sizeType");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "sizeType", request->getSizeType());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "sizeType"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesSlideSizeScaleType) {
	std::shared_ptr<PutSlidesSlideSizeRequest> request = getPutSlidesSlideSizeRequest();
	request->setScaleType(utils->getInvalidTestValue("putSlidesSlideSize", "scaleType", request->getScaleType()));
	utils->initialize("putSlidesSlideSize", "scaleType", request->getScaleType());

	bool failed = true;
	try
	{
		api->putSlidesSlideSize(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "scaleType");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "scaleType", request->getScaleType());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesSlideSize", "scaleType");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesSlideSize", "scaleType", request->getScaleType());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesSlideSize", "scaleType"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesViewProperties) {
	std::shared_ptr<PutSlidesViewPropertiesRequest> request = getPutSlidesViewPropertiesRequest();
	utils->initialize("putSlidesViewProperties", "");
	std::shared_ptr<ViewProperties> result = api->putSlidesViewProperties(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putSlidesViewPropertiesName) {
	std::shared_ptr<PutSlidesViewPropertiesRequest> request = getPutSlidesViewPropertiesRequest();
	request->setName(utils->getInvalidTestValue("putSlidesViewProperties", "name", request->getName()));
	utils->initialize("putSlidesViewProperties", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSlidesViewProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesViewProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesViewPropertiesDto) {
	std::shared_ptr<PutSlidesViewPropertiesRequest> request = getPutSlidesViewPropertiesRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putSlidesViewProperties", "dto", request->getDto()));
	utils->initialize("putSlidesViewProperties", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putSlidesViewProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesViewProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesViewPropertiesPassword) {
	std::shared_ptr<PutSlidesViewPropertiesRequest> request = getPutSlidesViewPropertiesRequest();
	request->setPassword(utils->getInvalidTestValue("putSlidesViewProperties", "password", request->getPassword()));
	utils->initialize("putSlidesViewProperties", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSlidesViewProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesViewProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesViewPropertiesFolder) {
	std::shared_ptr<PutSlidesViewPropertiesRequest> request = getPutSlidesViewPropertiesRequest();
	request->setFolder(utils->getInvalidTestValue("putSlidesViewProperties", "folder", request->getFolder()));
	utils->initialize("putSlidesViewProperties", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSlidesViewProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesViewProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSlidesViewPropertiesStorage) {
	std::shared_ptr<PutSlidesViewPropertiesRequest> request = getPutSlidesViewPropertiesRequest();
	request->setStorage(utils->getInvalidTestValue("putSlidesViewProperties", "storage", request->getStorage()));
	utils->initialize("putSlidesViewProperties", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSlidesViewProperties(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSlidesViewProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSlidesViewProperties", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSlidesViewProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAs) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	utils->initialize("putSubshapeSaveAs", "");
	api->putSubshapeSaveAs(request).wait();
}

TEST_F(SlidesApiTest, putSubshapeSaveAsName) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setName(utils->getInvalidTestValue("putSubshapeSaveAs", "name", request->getName()));
	utils->initialize("putSubshapeSaveAs", "name", request->getName());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsSlideIndex) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putSubshapeSaveAs", "slideIndex", request->getSlideIndex()));
	utils->initialize("putSubshapeSaveAs", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsPath) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setPath(utils->getInvalidTestValue("putSubshapeSaveAs", "path", request->getPath()));
	utils->initialize("putSubshapeSaveAs", "path", request->getPath());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsShapeIndex) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putSubshapeSaveAs", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putSubshapeSaveAs", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsFormat) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setFormat(utils->getInvalidTestValue("putSubshapeSaveAs", "format", request->getFormat()));
	utils->initialize("putSubshapeSaveAs", "format", request->getFormat());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "format", request->getFormat());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "format", request->getFormat());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsOutPath) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setOutPath(utils->getInvalidTestValue("putSubshapeSaveAs", "outPath", request->getOutPath()));
	utils->initialize("putSubshapeSaveAs", "outPath", request->getOutPath());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "outPath", request->getOutPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "outPath", request->getOutPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsOptions) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setOptions(utils->getInvalidTestValueForClass<>("putSubshapeSaveAs", "options", request->getOptions()));
	utils->initialize("putSubshapeSaveAs", "options", request->getOptions());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "options", request->getOptions());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "options", request->getOptions());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsPassword) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setPassword(utils->getInvalidTestValue("putSubshapeSaveAs", "password", request->getPassword()));
	utils->initialize("putSubshapeSaveAs", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsFolder) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setFolder(utils->getInvalidTestValue("putSubshapeSaveAs", "folder", request->getFolder()));
	utils->initialize("putSubshapeSaveAs", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsStorage) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setStorage(utils->getInvalidTestValue("putSubshapeSaveAs", "storage", request->getStorage()));
	utils->initialize("putSubshapeSaveAs", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsScaleX) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setScaleX(utils->getInvalidDoubleTestValue("putSubshapeSaveAs", "scaleX", request->getScaleX()));
	utils->initialize("putSubshapeSaveAs", "scaleX", request->getScaleX());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "scaleX", request->getScaleX());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "scaleX", request->getScaleX());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsScaleY) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setScaleY(utils->getInvalidDoubleTestValue("putSubshapeSaveAs", "scaleY", request->getScaleY()));
	utils->initialize("putSubshapeSaveAs", "scaleY", request->getScaleY());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "scaleY", request->getScaleY());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "scaleY", request->getScaleY());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsBounds) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setBounds(utils->getInvalidTestValue("putSubshapeSaveAs", "bounds", request->getBounds()));
	utils->initialize("putSubshapeSaveAs", "bounds", request->getBounds());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "bounds", request->getBounds());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "bounds", request->getBounds());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putSubshapeSaveAsFontsFolder) {
	std::shared_ptr<PutSubshapeSaveAsRequest> request = getPutSubshapeSaveAsRequest();
	request->setFontsFolder(utils->getInvalidTestValue("putSubshapeSaveAs", "fontsFolder", request->getFontsFolder()));
	utils->initialize("putSubshapeSaveAs", "fontsFolder", request->getFontsFolder());

	bool failed = true;
	try
	{
		api->putSubshapeSaveAs(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "fontsFolder", request->getFontsFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putSubshapeSaveAs", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putSubshapeSaveAs", "fontsFolder", request->getFontsFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putSubshapeSaveAs", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlide) {
	std::shared_ptr<PutUpdateNotesSlideRequest> request = getPutUpdateNotesSlideRequest();
	utils->initialize("putUpdateNotesSlide", "");
	std::shared_ptr<NotesSlide> result = api->putUpdateNotesSlide(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putUpdateNotesSlideName) {
	std::shared_ptr<PutUpdateNotesSlideRequest> request = getPutUpdateNotesSlideRequest();
	request->setName(utils->getInvalidTestValue("putUpdateNotesSlide", "name", request->getName()));
	utils->initialize("putUpdateNotesSlide", "name", request->getName());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideSlideIndex) {
	std::shared_ptr<PutUpdateNotesSlideRequest> request = getPutUpdateNotesSlideRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putUpdateNotesSlide", "slideIndex", request->getSlideIndex()));
	utils->initialize("putUpdateNotesSlide", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideDto) {
	std::shared_ptr<PutUpdateNotesSlideRequest> request = getPutUpdateNotesSlideRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putUpdateNotesSlide", "dto", request->getDto()));
	utils->initialize("putUpdateNotesSlide", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlidePassword) {
	std::shared_ptr<PutUpdateNotesSlideRequest> request = getPutUpdateNotesSlideRequest();
	request->setPassword(utils->getInvalidTestValue("putUpdateNotesSlide", "password", request->getPassword()));
	utils->initialize("putUpdateNotesSlide", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideFolder) {
	std::shared_ptr<PutUpdateNotesSlideRequest> request = getPutUpdateNotesSlideRequest();
	request->setFolder(utils->getInvalidTestValue("putUpdateNotesSlide", "folder", request->getFolder()));
	utils->initialize("putUpdateNotesSlide", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideStorage) {
	std::shared_ptr<PutUpdateNotesSlideRequest> request = getPutUpdateNotesSlideRequest();
	request->setStorage(utils->getInvalidTestValue("putUpdateNotesSlide", "storage", request->getStorage()));
	utils->initialize("putUpdateNotesSlide", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlide(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlide", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShape) {
	std::shared_ptr<PutUpdateNotesSlideShapeRequest> request = getPutUpdateNotesSlideShapeRequest();
	utils->initialize("putUpdateNotesSlideShape", "");
	std::shared_ptr<ShapeBase> result = api->putUpdateNotesSlideShape(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeName) {
	std::shared_ptr<PutUpdateNotesSlideShapeRequest> request = getPutUpdateNotesSlideShapeRequest();
	request->setName(utils->getInvalidTestValue("putUpdateNotesSlideShape", "name", request->getName()));
	utils->initialize("putUpdateNotesSlideShape", "name", request->getName());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeSlideIndex) {
	std::shared_ptr<PutUpdateNotesSlideShapeRequest> request = getPutUpdateNotesSlideShapeRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putUpdateNotesSlideShape", "slideIndex", request->getSlideIndex()));
	utils->initialize("putUpdateNotesSlideShape", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeShapeIndex) {
	std::shared_ptr<PutUpdateNotesSlideShapeRequest> request = getPutUpdateNotesSlideShapeRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putUpdateNotesSlideShape", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putUpdateNotesSlideShape", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeDto) {
	std::shared_ptr<PutUpdateNotesSlideShapeRequest> request = getPutUpdateNotesSlideShapeRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putUpdateNotesSlideShape", "dto", request->getDto()));
	utils->initialize("putUpdateNotesSlideShape", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePassword) {
	std::shared_ptr<PutUpdateNotesSlideShapeRequest> request = getPutUpdateNotesSlideShapeRequest();
	request->setPassword(utils->getInvalidTestValue("putUpdateNotesSlideShape", "password", request->getPassword()));
	utils->initialize("putUpdateNotesSlideShape", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeFolder) {
	std::shared_ptr<PutUpdateNotesSlideShapeRequest> request = getPutUpdateNotesSlideShapeRequest();
	request->setFolder(utils->getInvalidTestValue("putUpdateNotesSlideShape", "folder", request->getFolder()));
	utils->initialize("putUpdateNotesSlideShape", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeStorage) {
	std::shared_ptr<PutUpdateNotesSlideShapeRequest> request = getPutUpdateNotesSlideShapeRequest();
	request->setStorage(utils->getInvalidTestValue("putUpdateNotesSlideShape", "storage", request->getStorage()));
	utils->initialize("putUpdateNotesSlideShape", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShape(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShape", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraph) {
	std::shared_ptr<PutUpdateNotesSlideShapeParagraphRequest> request = getPutUpdateNotesSlideShapeParagraphRequest();
	utils->initialize("putUpdateNotesSlideShapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->putUpdateNotesSlideShapeParagraph(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphName) {
	std::shared_ptr<PutUpdateNotesSlideShapeParagraphRequest> request = getPutUpdateNotesSlideShapeParagraphRequest();
	request->setName(utils->getInvalidTestValue("putUpdateNotesSlideShapeParagraph", "name", request->getName()));
	utils->initialize("putUpdateNotesSlideShapeParagraph", "name", request->getName());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphSlideIndex) {
	std::shared_ptr<PutUpdateNotesSlideShapeParagraphRequest> request = getPutUpdateNotesSlideShapeParagraphRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putUpdateNotesSlideShapeParagraph", "slideIndex", request->getSlideIndex()));
	utils->initialize("putUpdateNotesSlideShapeParagraph", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphShapeIndex) {
	std::shared_ptr<PutUpdateNotesSlideShapeParagraphRequest> request = getPutUpdateNotesSlideShapeParagraphRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putUpdateNotesSlideShapeParagraph", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putUpdateNotesSlideShapeParagraph", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphParagraphIndex) {
	std::shared_ptr<PutUpdateNotesSlideShapeParagraphRequest> request = getPutUpdateNotesSlideShapeParagraphRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("putUpdateNotesSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphDto) {
	std::shared_ptr<PutUpdateNotesSlideShapeParagraphRequest> request = getPutUpdateNotesSlideShapeParagraphRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putUpdateNotesSlideShapeParagraph", "dto", request->getDto()));
	utils->initialize("putUpdateNotesSlideShapeParagraph", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphPassword) {
	std::shared_ptr<PutUpdateNotesSlideShapeParagraphRequest> request = getPutUpdateNotesSlideShapeParagraphRequest();
	request->setPassword(utils->getInvalidTestValue("putUpdateNotesSlideShapeParagraph", "password", request->getPassword()));
	utils->initialize("putUpdateNotesSlideShapeParagraph", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphFolder) {
	std::shared_ptr<PutUpdateNotesSlideShapeParagraphRequest> request = getPutUpdateNotesSlideShapeParagraphRequest();
	request->setFolder(utils->getInvalidTestValue("putUpdateNotesSlideShapeParagraph", "folder", request->getFolder()));
	utils->initialize("putUpdateNotesSlideShapeParagraph", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapeParagraphStorage) {
	std::shared_ptr<PutUpdateNotesSlideShapeParagraphRequest> request = getPutUpdateNotesSlideShapeParagraphRequest();
	request->setStorage(utils->getInvalidTestValue("putUpdateNotesSlideShapeParagraph", "storage", request->getStorage()));
	utils->initialize("putUpdateNotesSlideShapeParagraph", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapeParagraph(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapeParagraph", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortion) {
	std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> request = getPutUpdateNotesSlideShapePortionRequest();
	utils->initialize("putUpdateNotesSlideShapePortion", "");
	std::shared_ptr<Portion> result = api->putUpdateNotesSlideShapePortion(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionName) {
	std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> request = getPutUpdateNotesSlideShapePortionRequest();
	request->setName(utils->getInvalidTestValue("putUpdateNotesSlideShapePortion", "name", request->getName()));
	utils->initialize("putUpdateNotesSlideShapePortion", "name", request->getName());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "name", request->getName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "name", request->getName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionSlideIndex) {
	std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> request = getPutUpdateNotesSlideShapePortionRequest();
	request->setSlideIndex(utils->getInvalidIntTestValue("putUpdateNotesSlideShapePortion", "slideIndex", request->getSlideIndex()));
	utils->initialize("putUpdateNotesSlideShapePortion", "slideIndex", request->getSlideIndex());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "slideIndex", request->getSlideIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "slideIndex", request->getSlideIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionShapeIndex) {
	std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> request = getPutUpdateNotesSlideShapePortionRequest();
	request->setShapeIndex(utils->getInvalidIntTestValue("putUpdateNotesSlideShapePortion", "shapeIndex", request->getShapeIndex()));
	utils->initialize("putUpdateNotesSlideShapePortion", "shapeIndex", request->getShapeIndex());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "shapeIndex", request->getShapeIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "shapeIndex", request->getShapeIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionParagraphIndex) {
	std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> request = getPutUpdateNotesSlideShapePortionRequest();
	request->setParagraphIndex(utils->getInvalidIntTestValue("putUpdateNotesSlideShapePortion", "paragraphIndex", request->getParagraphIndex()));
	utils->initialize("putUpdateNotesSlideShapePortion", "paragraphIndex", request->getParagraphIndex());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "paragraphIndex", request->getParagraphIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "paragraphIndex", request->getParagraphIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionPortionIndex) {
	std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> request = getPutUpdateNotesSlideShapePortionRequest();
	request->setPortionIndex(utils->getInvalidIntTestValue("putUpdateNotesSlideShapePortion", "portionIndex", request->getPortionIndex()));
	utils->initialize("putUpdateNotesSlideShapePortion", "portionIndex", request->getPortionIndex());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "portionIndex", request->getPortionIndex());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "portionIndex", request->getPortionIndex());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionDto) {
	std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> request = getPutUpdateNotesSlideShapePortionRequest();
	request->setDto(utils->getInvalidTestValueForClass<>("putUpdateNotesSlideShapePortion", "dto", request->getDto()));
	utils->initialize("putUpdateNotesSlideShapePortion", "dto", request->getDto());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "dto", request->getDto());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "dto", request->getDto());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionPassword) {
	std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> request = getPutUpdateNotesSlideShapePortionRequest();
	request->setPassword(utils->getInvalidTestValue("putUpdateNotesSlideShapePortion", "password", request->getPassword()));
	utils->initialize("putUpdateNotesSlideShapePortion", "password", request->getPassword());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "password", request->getPassword());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "password", request->getPassword());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionFolder) {
	std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> request = getPutUpdateNotesSlideShapePortionRequest();
	request->setFolder(utils->getInvalidTestValue("putUpdateNotesSlideShapePortion", "folder", request->getFolder()));
	utils->initialize("putUpdateNotesSlideShapePortion", "folder", request->getFolder());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "folder", request->getFolder());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "folder", request->getFolder());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, putUpdateNotesSlideShapePortionStorage) {
	std::shared_ptr<PutUpdateNotesSlideShapePortionRequest> request = getPutUpdateNotesSlideShapePortionRequest();
	request->setStorage(utils->getInvalidTestValue("putUpdateNotesSlideShapePortion", "storage", request->getStorage()));
	utils->initialize("putUpdateNotesSlideShapePortion", "storage", request->getStorage());

	bool failed = true;
	try
	{
		api->putUpdateNotesSlideShapePortion(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "storage", request->getStorage());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("putUpdateNotesSlideShapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("putUpdateNotesSlideShapePortion", "storage", request->getStorage());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("putUpdateNotesSlideShapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, storageExists) {
	std::shared_ptr<StorageExistsRequest> request = getStorageExistsRequest();
	utils->initialize("storageExists", "");
	std::shared_ptr<StorageExist> result = api->storageExists(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, storageExistsStorageName) {
	std::shared_ptr<StorageExistsRequest> request = getStorageExistsRequest();
	request->setStorageName(utils->getInvalidTestValue("storageExists", "storageName", request->getStorageName()));
	utils->initialize("storageExists", "storageName", request->getStorageName());

	bool failed = true;
	try
	{
		api->storageExists(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("storageExists", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("storageExists", "storageName", request->getStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("storageExists", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("storageExists", "storageName", request->getStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("storageExists", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFile) {
	std::shared_ptr<UploadFileRequest> request = getUploadFileRequest();
	utils->initialize("uploadFile", "");
	std::shared_ptr<FilesUploadResult> result = api->uploadFile(request).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, uploadFilePath) {
	std::shared_ptr<UploadFileRequest> request = getUploadFileRequest();
	request->setPath(utils->getInvalidTestValue("uploadFile", "path", request->getPath()));
	utils->initialize("uploadFile", "path", request->getPath());

	bool failed = true;
	try
	{
		api->uploadFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "path", request->getPath());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "path", request->getPath());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFileFile) {
	std::shared_ptr<UploadFileRequest> request = getUploadFileRequest();
	request->setFile(utils->getInvalidBinaryTestValue("uploadFile", "file", request->getFile()));
	utils->initialize("uploadFile", "file", request->getFile());

	bool failed = true;
	try
	{
		api->uploadFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "file");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "file", request->getFile());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "file");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "file", request->getFile());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "file"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFileStorageName) {
	std::shared_ptr<UploadFileRequest> request = getUploadFileRequest();
	request->setStorageName(utils->getInvalidTestValue("uploadFile", "storageName", request->getStorageName()));
	utils->initialize("uploadFile", "storageName", request->getStorageName());

	bool failed = true;
	try
	{
		api->uploadFile(request).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "storageName", request->getStorageName());
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "storageName", request->getStorageName());
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}
