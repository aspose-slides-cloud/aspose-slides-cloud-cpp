// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="ApiBase.cs">
//   Copyright (c) 2020 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------


#include "gtest/gtest.h"

#include "TestUtils.h"

using namespace asposeslidescloud::api;

class SlidesApiTest : public ::testing::Test
{
public:
	static SlidesApi* api;
	static TestUtils* utils;

protected:
	void SetUp()
	{
		if (SlidesApiTest::api == nullptr)
		{
			std::ifstream rulesFile("testConfig.json");
			std::string rulesString;
			std::ostringstream rulesStream;
			rulesStream << rulesFile.rdbuf();
			rulesString = rulesStream.str();
			web::json::value config = web::json::value::parse(utility::conversions::to_string_t(rulesString));
			std::shared_ptr<ApiConfiguration> configuration = std::make_shared<ApiConfiguration>();
			if (config.has_field(utility::conversions::to_string_t("ClientId")))
			{
				configuration->setAppSid(config[utility::conversions::to_string_t("ClientId")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("ClientSecret")))
			{
				configuration->setAppKey(config[utility::conversions::to_string_t("ClientSecret")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("BaseUrl")))
			{
				configuration->setBaseUrl(config[utility::conversions::to_string_t("BaseUrl")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("AuthBaseUrl")))
			{
				configuration->setBaseAuthUrl(config[utility::conversions::to_string_t("AuthBaseUrl")].as_string());
			}
			if (config.has_field(utility::conversions::to_string_t("Debug")))
			{
				configuration->setDebug(config[utility::conversions::to_string_t("Debug")].as_bool());
			}
			api = new SlidesApi(configuration);
			utils = new TestUtils(api);
		}
	}
};

SlidesApi* SlidesApiTest::api = nullptr;
TestUtils* SlidesApiTest::utils = nullptr;

TEST_F(SlidesApiTest, alignShapes) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage");
	utils->initialize("alignShapes", "");
	std::shared_ptr<Shapes> result = api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, alignShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage");
	paramName = utils->getInvalidTestValue("alignShapes", "name", paramName);
	utils->initialize("alignShapes", "name", paramName);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("alignShapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("alignShapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidAlignmentType) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage");
	paramAlignmentType = utils->getInvalidTestValue("alignShapes", "alignmentType", paramAlignmentType);
	utils->initialize("alignShapes", "alignmentType", paramAlignmentType);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "alignmentType");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "alignmentType", paramAlignmentType);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "alignmentType");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "alignmentType", paramAlignmentType);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "alignmentType"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidAlignToSlide) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage");
	paramAlignToSlide = utils->getInvalidBoolTestValue("alignShapes", "alignToSlide", paramAlignToSlide).value();
	utils->initialize("alignShapes", "alignToSlide", paramAlignToSlide);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "alignToSlide");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "alignToSlide", paramAlignToSlide);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "alignToSlide");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "alignToSlide", paramAlignToSlide);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "alignToSlide"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage");
	paramShapes = utils->getInvalidIntVectorTestValue("alignShapes", "shapes", paramShapes);
	utils->initialize("alignShapes", "shapes", paramShapes);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "shapes");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "shapes", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "shapes");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "shapes", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "shapes"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage");
	paramPassword = utils->getInvalidTestValue("alignShapes", "password", paramPassword);
	utils->initialize("alignShapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage");
	paramFolder = utils->getInvalidTestValue("alignShapes", "folder", paramFolder);
	utils->initialize("alignShapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, alignShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("alignShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("alignShapes", "slideIndex");
	utility::string_t paramAlignmentType = utils->getTestValue("alignShapes", "alignmentType");
	auto paramAlignToSlide = utils->getOptionalBoolTestValue("alignShapes", "alignToSlide");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("alignShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("alignShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("alignShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("alignShapes", "storage");
	paramStorage = utils->getInvalidTestValue("alignShapes", "storage", paramStorage);
	utils->initialize("alignShapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("alignShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("alignShapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("alignShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("alignShapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("alignShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convert) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document");
	utility::string_t paramFormat = utils->getTestValue("convert", "format");
	utility::string_t paramPassword = utils->getTestValue("convert", "password");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides");
	utils->initialize("convert", "");
	HttpContent result = api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, convertInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document");
	utility::string_t paramFormat = utils->getTestValue("convert", "format");
	utility::string_t paramPassword = utils->getTestValue("convert", "password");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides");
	paramDocument = utils->getInvalidBinaryTestValue("convert", "document", paramDocument);
	utils->initialize("convert", "document", paramDocument);

	bool failed = true;
	try
	{
		api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document");
	utility::string_t paramFormat = utils->getTestValue("convert", "format");
	utility::string_t paramPassword = utils->getTestValue("convert", "password");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides");
	paramFormat = utils->getInvalidTestValue("convert", "format", paramFormat);
	utils->initialize("convert", "format", paramFormat);

	bool failed = true;
	try
	{
		api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document");
	utility::string_t paramFormat = utils->getTestValue("convert", "format");
	utility::string_t paramPassword = utils->getTestValue("convert", "password");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides");
	paramPassword = utils->getInvalidTestValue("convert", "password", paramPassword);
	utils->initialize("convert", "password", paramPassword);

	bool failed = true;
	try
	{
		api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document");
	utility::string_t paramFormat = utils->getTestValue("convert", "format");
	utility::string_t paramPassword = utils->getTestValue("convert", "password");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides");
	paramStorage = utils->getInvalidTestValue("convert", "storage", paramStorage);
	utils->initialize("convert", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document");
	utility::string_t paramFormat = utils->getTestValue("convert", "format");
	utility::string_t paramPassword = utils->getTestValue("convert", "password");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides");
	paramFontsFolder = utils->getInvalidTestValue("convert", "fontsFolder", paramFontsFolder);
	utils->initialize("convert", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertInvalidSlides) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convert", "document");
	utility::string_t paramFormat = utils->getTestValue("convert", "format");
	utility::string_t paramPassword = utils->getTestValue("convert", "password");
	utility::string_t paramStorage = utils->getTestValue("convert", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convert", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convert", "slides");
	paramSlides = utils->getInvalidIntVectorTestValue("convert", "slides", paramSlides);
	utils->initialize("convert", "slides", paramSlides);

	bool failed = true;
	try
	{
		api->convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convert", "slides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convert", "slides", paramSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convert", "slides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convert", "slides", paramSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convert", "slides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSave) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides");
	utils->initialize("convertAndSave", "");
	api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
}

TEST_F(SlidesApiTest, convertAndSaveInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides");
	paramDocument = utils->getInvalidBinaryTestValue("convertAndSave", "document", paramDocument);
	utils->initialize("convertAndSave", "document", paramDocument);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides");
	paramFormat = utils->getInvalidTestValue("convertAndSave", "format", paramFormat);
	utils->initialize("convertAndSave", "format", paramFormat);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidOutPath) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides");
	paramOutPath = utils->getInvalidTestValue("convertAndSave", "outPath", paramOutPath);
	utils->initialize("convertAndSave", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides");
	paramPassword = utils->getInvalidTestValue("convertAndSave", "password", paramPassword);
	utils->initialize("convertAndSave", "password", paramPassword);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides");
	paramStorage = utils->getInvalidTestValue("convertAndSave", "storage", paramStorage);
	utils->initialize("convertAndSave", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides");
	paramFontsFolder = utils->getInvalidTestValue("convertAndSave", "fontsFolder", paramFontsFolder);
	utils->initialize("convertAndSave", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, convertAndSaveInvalidSlides) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("convertAndSave", "document");
	utility::string_t paramFormat = utils->getTestValue("convertAndSave", "format");
	utility::string_t paramOutPath = utils->getTestValue("convertAndSave", "outPath");
	utility::string_t paramPassword = utils->getTestValue("convertAndSave", "password");
	utility::string_t paramStorage = utils->getTestValue("convertAndSave", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("convertAndSave", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("convertAndSave", "slides");
	paramSlides = utils->getInvalidIntVectorTestValue("convertAndSave", "slides", paramSlides);
	utils->initialize("convertAndSave", "slides", paramSlides);

	bool failed = true;
	try
	{
		api->convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "slides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "slides", paramSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("convertAndSave", "slides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("convertAndSave", "slides", paramSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("convertAndSave", "slides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFile) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	utils->initialize("copyFile", "");
	api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
}

TEST_F(SlidesApiTest, copyFileInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	paramSrcPath = utils->getInvalidTestValue("copyFile", "srcPath", paramSrcPath);
	utils->initialize("copyFile", "srcPath", paramSrcPath);

	bool failed = true;
	try
	{
		api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcPath", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcPath", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	paramDestPath = utils->getInvalidTestValue("copyFile", "destPath", paramDestPath);
	utils->initialize("copyFile", "destPath", paramDestPath);

	bool failed = true;
	try
	{
		api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "destPath", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "destPath", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	paramSrcStorageName = utils->getInvalidTestValue("copyFile", "srcStorageName", paramSrcStorageName);
	utils->initialize("copyFile", "srcStorageName", paramSrcStorageName);

	bool failed = true;
	try
	{
		api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcStorageName", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "srcStorageName", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	paramDestStorageName = utils->getInvalidTestValue("copyFile", "destStorageName", paramDestStorageName);
	utils->initialize("copyFile", "destStorageName", paramDestStorageName);

	bool failed = true;
	try
	{
		api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "destStorageName", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "destStorageName", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFileInvalidVersionId) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("copyFile", "versionId");
	paramVersionId = utils->getInvalidTestValue("copyFile", "versionId", paramVersionId);
	utils->initialize("copyFile", "versionId", paramVersionId);

	bool failed = true;
	try
	{
		api->copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFile", "versionId", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFile", "versionId", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolder) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName");
	utils->initialize("copyFolder", "");
	api->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
}

TEST_F(SlidesApiTest, copyFolderInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName");
	paramSrcPath = utils->getInvalidTestValue("copyFolder", "srcPath", paramSrcPath);
	utils->initialize("copyFolder", "srcPath", paramSrcPath);

	bool failed = true;
	try
	{
		api->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcPath", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcPath", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName");
	paramDestPath = utils->getInvalidTestValue("copyFolder", "destPath", paramDestPath);
	utils->initialize("copyFolder", "destPath", paramDestPath);

	bool failed = true;
	try
	{
		api->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destPath", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destPath", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName");
	paramSrcStorageName = utils->getInvalidTestValue("copyFolder", "srcStorageName", paramSrcStorageName);
	utils->initialize("copyFolder", "srcStorageName", paramSrcStorageName);

	bool failed = true;
	try
	{
		api->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcStorageName", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "srcStorageName", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyFolderInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("copyFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("copyFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("copyFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("copyFolder", "destStorageName");
	paramDestStorageName = utils->getInvalidTestValue("copyFolder", "destStorageName", paramDestStorageName);
	utils->initialize("copyFolder", "destStorageName", paramDestStorageName);

	bool failed = true;
	try
	{
		api->copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destStorageName", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyFolder", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyFolder", "destStorageName", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyFolder", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlide) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage");
	utils->initialize("copyLayoutSlide", "");
	std::shared_ptr<LayoutSlide> result = api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage");
	paramName = utils->getInvalidTestValue("copyLayoutSlide", "name", paramName);
	utils->initialize("copyLayoutSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidCloneFrom) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage");
	paramCloneFrom = utils->getInvalidTestValue("copyLayoutSlide", "cloneFrom", paramCloneFrom);
	utils->initialize("copyLayoutSlide", "cloneFrom", paramCloneFrom);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFrom");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFrom", paramCloneFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFrom");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFrom", paramCloneFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "cloneFrom"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidCloneFromPosition) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage");
	paramCloneFromPosition = utils->getInvalidIntTestValue("copyLayoutSlide", "cloneFromPosition", paramCloneFromPosition).value();
	utils->initialize("copyLayoutSlide", "cloneFromPosition", paramCloneFromPosition);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromPosition", paramCloneFromPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromPosition", paramCloneFromPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "cloneFromPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidCloneFromPassword) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage");
	paramCloneFromPassword = utils->getInvalidTestValue("copyLayoutSlide", "cloneFromPassword", paramCloneFromPassword);
	utils->initialize("copyLayoutSlide", "cloneFromPassword", paramCloneFromPassword);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromPassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromPassword", paramCloneFromPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromPassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromPassword", paramCloneFromPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "cloneFromPassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidCloneFromStorage) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage");
	paramCloneFromStorage = utils->getInvalidTestValue("copyLayoutSlide", "cloneFromStorage", paramCloneFromStorage);
	utils->initialize("copyLayoutSlide", "cloneFromStorage", paramCloneFromStorage);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromStorage", paramCloneFromStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "cloneFromStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "cloneFromStorage", paramCloneFromStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "cloneFromStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage");
	paramPassword = utils->getInvalidTestValue("copyLayoutSlide", "password", paramPassword);
	utils->initialize("copyLayoutSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage");
	paramFolder = utils->getInvalidTestValue("copyLayoutSlide", "folder", paramFolder);
	utils->initialize("copyLayoutSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyLayoutSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("copyLayoutSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyLayoutSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyLayoutSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyLayoutSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyLayoutSlide", "cloneFromStorage");
	utility::string_t paramPassword = utils->getTestValue("copyLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyLayoutSlide", "storage");
	paramStorage = utils->getInvalidTestValue("copyLayoutSlide", "storage", paramStorage);
	utils->initialize("copyLayoutSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyLayoutSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyLayoutSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyLayoutSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlide) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage");
	utils->initialize("copyMasterSlide", "");
	std::shared_ptr<MasterSlide> result = api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage");
	paramName = utils->getInvalidTestValue("copyMasterSlide", "name", paramName);
	utils->initialize("copyMasterSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidCloneFrom) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage");
	paramCloneFrom = utils->getInvalidTestValue("copyMasterSlide", "cloneFrom", paramCloneFrom);
	utils->initialize("copyMasterSlide", "cloneFrom", paramCloneFrom);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFrom");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFrom", paramCloneFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFrom");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFrom", paramCloneFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "cloneFrom"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidCloneFromPosition) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage");
	paramCloneFromPosition = utils->getInvalidIntTestValue("copyMasterSlide", "cloneFromPosition", paramCloneFromPosition).value();
	utils->initialize("copyMasterSlide", "cloneFromPosition", paramCloneFromPosition);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromPosition", paramCloneFromPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromPosition", paramCloneFromPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "cloneFromPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidCloneFromPassword) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage");
	paramCloneFromPassword = utils->getInvalidTestValue("copyMasterSlide", "cloneFromPassword", paramCloneFromPassword);
	utils->initialize("copyMasterSlide", "cloneFromPassword", paramCloneFromPassword);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromPassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromPassword", paramCloneFromPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromPassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromPassword", paramCloneFromPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "cloneFromPassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidCloneFromStorage) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage");
	paramCloneFromStorage = utils->getInvalidTestValue("copyMasterSlide", "cloneFromStorage", paramCloneFromStorage);
	utils->initialize("copyMasterSlide", "cloneFromStorage", paramCloneFromStorage);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromStorage", paramCloneFromStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "cloneFromStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "cloneFromStorage", paramCloneFromStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "cloneFromStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidApplyToAll) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage");
	paramApplyToAll = utils->getInvalidBoolTestValue("copyMasterSlide", "applyToAll", paramApplyToAll).value();
	utils->initialize("copyMasterSlide", "applyToAll", paramApplyToAll);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "applyToAll");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "applyToAll", paramApplyToAll);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "applyToAll");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "applyToAll", paramApplyToAll);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "applyToAll"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage");
	paramPassword = utils->getInvalidTestValue("copyMasterSlide", "password", paramPassword);
	utils->initialize("copyMasterSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage");
	paramFolder = utils->getInvalidTestValue("copyMasterSlide", "folder", paramFolder);
	utils->initialize("copyMasterSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copyMasterSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("copyMasterSlide", "name");
	utility::string_t paramCloneFrom = utils->getTestValue("copyMasterSlide", "cloneFrom");
	int32_t paramCloneFromPosition = utils->getIntTestValue("copyMasterSlide", "cloneFromPosition");
	utility::string_t paramCloneFromPassword = utils->getTestValue("copyMasterSlide", "cloneFromPassword");
	utility::string_t paramCloneFromStorage = utils->getTestValue("copyMasterSlide", "cloneFromStorage");
	auto paramApplyToAll = utils->getOptionalBoolTestValue("copyMasterSlide", "applyToAll");
	utility::string_t paramPassword = utils->getTestValue("copyMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copyMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copyMasterSlide", "storage");
	paramStorage = utils->getInvalidTestValue("copyMasterSlide", "storage", paramStorage);
	utils->initialize("copyMasterSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copyMasterSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copyMasterSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copyMasterSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlide) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage");
	utils->initialize("copySlide", "");
	std::shared_ptr<Slides> result = api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, copySlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage");
	paramName = utils->getInvalidTestValue("copySlide", "name", paramName);
	utils->initialize("copySlide", "name", paramName);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidSlideToCopy) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage");
	paramSlideToCopy = utils->getInvalidIntTestValue("copySlide", "slideToCopy", paramSlideToCopy).value();
	utils->initialize("copySlide", "slideToCopy", paramSlideToCopy);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "slideToCopy");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "slideToCopy", paramSlideToCopy);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "slideToCopy");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "slideToCopy", paramSlideToCopy);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "slideToCopy"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage");
	paramPosition = utils->getInvalidIntTestValue("copySlide", "position", paramPosition).value();
	utils->initialize("copySlide", "position", paramPosition);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidSource) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage");
	paramSource = utils->getInvalidTestValue("copySlide", "source", paramSource);
	utils->initialize("copySlide", "source", paramSource);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "source");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "source", paramSource);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "source");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "source", paramSource);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "source"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidSourcePassword) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage");
	paramSourcePassword = utils->getInvalidTestValue("copySlide", "sourcePassword", paramSourcePassword);
	utils->initialize("copySlide", "sourcePassword", paramSourcePassword);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "sourcePassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "sourcePassword", paramSourcePassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "sourcePassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "sourcePassword", paramSourcePassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "sourcePassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidSourceStorage) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage");
	paramSourceStorage = utils->getInvalidTestValue("copySlide", "sourceStorage", paramSourceStorage);
	utils->initialize("copySlide", "sourceStorage", paramSourceStorage);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "sourceStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "sourceStorage", paramSourceStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "sourceStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "sourceStorage", paramSourceStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "sourceStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage");
	paramPassword = utils->getInvalidTestValue("copySlide", "password", paramPassword);
	utils->initialize("copySlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage");
	paramFolder = utils->getInvalidTestValue("copySlide", "folder", paramFolder);
	utils->initialize("copySlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, copySlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("copySlide", "name");
	int32_t paramSlideToCopy = utils->getIntTestValue("copySlide", "slideToCopy");
	auto paramPosition = utils->getOptionalIntTestValue("copySlide", "position");
	utility::string_t paramSource = utils->getTestValue("copySlide", "source");
	utility::string_t paramSourcePassword = utils->getTestValue("copySlide", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("copySlide", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("copySlide", "password");
	utility::string_t paramFolder = utils->getTestValue("copySlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("copySlide", "storage");
	paramStorage = utils->getInvalidTestValue("copySlide", "storage", paramStorage);
	utils->initialize("copySlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("copySlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("copySlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("copySlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("copySlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("copySlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage");
	utils->initialize("createAnimationEffect", "");
	std::shared_ptr<SlideAnimation> result = api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage");
	paramName = utils->getInvalidTestValue("createAnimationEffect", "name", paramName);
	utils->initialize("createAnimationEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createAnimationEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("createAnimationEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage");
	paramEffect = utils->getInvalidTestValueForClass<>("createAnimationEffect", "effect", paramEffect);
	utils->initialize("createAnimationEffect", "effect", paramEffect);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "effect", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "effect", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage");
	paramPassword = utils->getInvalidTestValue("createAnimationEffect", "password", paramPassword);
	utils->initialize("createAnimationEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage");
	paramFolder = utils->getInvalidTestValue("createAnimationEffect", "folder", paramFolder);
	utils->initialize("createAnimationEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationEffect", "slideIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationEffect", "storage");
	paramStorage = utils->getInvalidTestValue("createAnimationEffect", "storage", paramStorage);
	utils->initialize("createAnimationEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequence) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage");
	utils->initialize("createAnimationInteractiveSequence", "");
	std::shared_ptr<SlideAnimation> result = api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage");
	paramName = utils->getInvalidTestValue("createAnimationInteractiveSequence", "name", paramName);
	utils->initialize("createAnimationInteractiveSequence", "name", paramName);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createAnimationInteractiveSequence", "slideIndex", paramSlideIndex).value();
	utils->initialize("createAnimationInteractiveSequence", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidSequence) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage");
	paramSequence = utils->getInvalidTestValueForClass<>("createAnimationInteractiveSequence", "sequence", paramSequence);
	utils->initialize("createAnimationInteractiveSequence", "sequence", paramSequence);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "sequence");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "sequence", paramSequence);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "sequence");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "sequence", paramSequence);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "sequence"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage");
	paramPassword = utils->getInvalidTestValue("createAnimationInteractiveSequence", "password", paramPassword);
	utils->initialize("createAnimationInteractiveSequence", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage");
	paramFolder = utils->getInvalidTestValue("createAnimationInteractiveSequence", "folder", paramFolder);
	utils->initialize("createAnimationInteractiveSequence", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequence", "slideIndex");
	std::shared_ptr<InteractiveSequence> paramSequence = utils->getTestValueForClass<InteractiveSequence>("createAnimationInteractiveSequence", "sequence");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequence", "storage");
	paramStorage = utils->getInvalidTestValue("createAnimationInteractiveSequence", "storage", paramStorage);
	utils->initialize("createAnimationInteractiveSequence", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequence", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequence", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage");
	utils->initialize("createAnimationInteractiveSequenceEffect", "");
	std::shared_ptr<SlideAnimation> result = api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage");
	paramName = utils->getInvalidTestValue("createAnimationInteractiveSequenceEffect", "name", paramName);
	utils->initialize("createAnimationInteractiveSequenceEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("createAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage");
	paramSequenceIndex = utils->getInvalidIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex).value();
	utils->initialize("createAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage");
	paramEffect = utils->getInvalidTestValueForClass<>("createAnimationInteractiveSequenceEffect", "effect", paramEffect);
	utils->initialize("createAnimationInteractiveSequenceEffect", "effect", paramEffect);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "effect", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "effect", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage");
	paramPassword = utils->getInvalidTestValue("createAnimationInteractiveSequenceEffect", "password", paramPassword);
	utils->initialize("createAnimationInteractiveSequenceEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage");
	paramFolder = utils->getInvalidTestValue("createAnimationInteractiveSequenceEffect", "folder", paramFolder);
	utils->initialize("createAnimationInteractiveSequenceEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("createAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("createAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("createAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("createAnimationInteractiveSequenceEffect", "storage");
	paramStorage = utils->getInvalidTestValue("createAnimationInteractiveSequenceEffect", "storage", paramStorage);
	utils->initialize("createAnimationInteractiveSequenceEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createAnimationInteractiveSequenceEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createAnimationInteractiveSequenceEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategory) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage");
	utils->initialize("createChartCategory", "");
	std::shared_ptr<Chart> result = api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createChartCategoryInvalidName) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage");
	paramName = utils->getInvalidTestValue("createChartCategory", "name", paramName);
	utils->initialize("createChartCategory", "name", paramName);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createChartCategory", "slideIndex", paramSlideIndex).value();
	utils->initialize("createChartCategory", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("createChartCategory", "shapeIndex", paramShapeIndex).value();
	utils->initialize("createChartCategory", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidCategory) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage");
	paramCategory = utils->getInvalidTestValueForClass<>("createChartCategory", "category", paramCategory);
	utils->initialize("createChartCategory", "category", paramCategory);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "category");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "category", paramCategory);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "category");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "category", paramCategory);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "category"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage");
	paramPassword = utils->getInvalidTestValue("createChartCategory", "password", paramPassword);
	utils->initialize("createChartCategory", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage");
	paramFolder = utils->getInvalidTestValue("createChartCategory", "folder", paramFolder);
	utils->initialize("createChartCategory", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartCategoryInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartCategory", "shapeIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("createChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("createChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartCategory", "storage");
	paramStorage = utils->getInvalidTestValue("createChartCategory", "storage", paramStorage);
	utils->initialize("createChartCategory", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartCategory", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartCategory", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartCategory", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPoint) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage");
	utils->initialize("createChartDataPoint", "");
	std::shared_ptr<Chart> result = api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createChartDataPointInvalidName) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage");
	paramName = utils->getInvalidTestValue("createChartDataPoint", "name", paramName);
	utils->initialize("createChartDataPoint", "name", paramName);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createChartDataPoint", "slideIndex", paramSlideIndex).value();
	utils->initialize("createChartDataPoint", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("createChartDataPoint", "shapeIndex", paramShapeIndex).value();
	utils->initialize("createChartDataPoint", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage");
	paramSeriesIndex = utils->getInvalidIntTestValue("createChartDataPoint", "seriesIndex", paramSeriesIndex).value();
	utils->initialize("createChartDataPoint", "seriesIndex", paramSeriesIndex);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "seriesIndex", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "seriesIndex", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidDataPoint) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage");
	paramDataPoint = utils->getInvalidTestValueForClass<>("createChartDataPoint", "dataPoint", paramDataPoint);
	utils->initialize("createChartDataPoint", "dataPoint", paramDataPoint);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "dataPoint");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "dataPoint", paramDataPoint);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "dataPoint");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "dataPoint", paramDataPoint);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "dataPoint"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage");
	paramPassword = utils->getInvalidTestValue("createChartDataPoint", "password", paramPassword);
	utils->initialize("createChartDataPoint", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage");
	paramFolder = utils->getInvalidTestValue("createChartDataPoint", "folder", paramFolder);
	utils->initialize("createChartDataPoint", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartDataPointInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("createChartDataPoint", "seriesIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("createChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("createChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartDataPoint", "storage");
	paramStorage = utils->getInvalidTestValue("createChartDataPoint", "storage", paramStorage);
	utils->initialize("createChartDataPoint", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartDataPoint", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartDataPoint", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartDataPoint", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeries) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage");
	utils->initialize("createChartSeries", "");
	std::shared_ptr<Chart> result = api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createChartSeriesInvalidName) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage");
	paramName = utils->getInvalidTestValue("createChartSeries", "name", paramName);
	utils->initialize("createChartSeries", "name", paramName);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createChartSeries", "slideIndex", paramSlideIndex).value();
	utils->initialize("createChartSeries", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("createChartSeries", "shapeIndex", paramShapeIndex).value();
	utils->initialize("createChartSeries", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidSeries) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage");
	paramSeries = utils->getInvalidTestValueForClass<>("createChartSeries", "series", paramSeries);
	utils->initialize("createChartSeries", "series", paramSeries);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "series");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "series", paramSeries);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "series");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "series", paramSeries);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "series"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage");
	paramPassword = utils->getInvalidTestValue("createChartSeries", "password", paramPassword);
	utils->initialize("createChartSeries", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage");
	paramFolder = utils->getInvalidTestValue("createChartSeries", "folder", paramFolder);
	utils->initialize("createChartSeries", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createChartSeriesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createChartSeries", "shapeIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("createChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("createChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("createChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("createChartSeries", "storage");
	paramStorage = utils->getInvalidTestValue("createChartSeries", "storage", paramStorage);
	utils->initialize("createChartSeries", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createChartSeries", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createChartSeries", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createChartSeries", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createComment) {
	utility::string_t paramName = utils->getTestValue("createComment", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createComment", "dto");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage");
	utils->initialize("createComment", "");
	std::shared_ptr<SlideComments> result = api->createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createCommentInvalidName) {
	utility::string_t paramName = utils->getTestValue("createComment", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createComment", "dto");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage");
	paramName = utils->getInvalidTestValue("createComment", "name", paramName);
	utils->initialize("createComment", "name", paramName);

	bool failed = true;
	try
	{
		api->createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createComment", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createComment", "dto");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createComment", "slideIndex", paramSlideIndex).value();
	utils->initialize("createComment", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createComment", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createComment", "dto");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("createComment", "dto", paramDto);
	utils->initialize("createComment", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createComment", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createComment", "dto");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage");
	paramPassword = utils->getInvalidTestValue("createComment", "password", paramPassword);
	utils->initialize("createComment", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createComment", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createComment", "dto");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage");
	paramFolder = utils->getInvalidTestValue("createComment", "folder", paramFolder);
	utils->initialize("createComment", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createComment", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createComment", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createComment", "dto");
	utility::string_t paramPassword = utils->getTestValue("createComment", "password");
	utility::string_t paramFolder = utils->getTestValue("createComment", "folder");
	utility::string_t paramStorage = utils->getTestValue("createComment", "storage");
	paramStorage = utils->getInvalidTestValue("createComment", "storage", paramStorage);
	utils->initialize("createComment", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createComment", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createComment", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createComment", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createComment", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createComment", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createCommentOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("createCommentOnline", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createCommentOnline", "dto");
	utility::string_t paramPassword = utils->getTestValue("createCommentOnline", "password");
	utils->initialize("createCommentOnline", "");
	HttpContent result = api->createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, createCommentOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createCommentOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("createCommentOnline", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createCommentOnline", "dto");
	utility::string_t paramPassword = utils->getTestValue("createCommentOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("createCommentOnline", "document", paramDocument);
	utils->initialize("createCommentOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createCommentOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createCommentOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("createCommentOnline", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createCommentOnline", "dto");
	utility::string_t paramPassword = utils->getTestValue("createCommentOnline", "password");
	paramSlideIndex = utils->getInvalidIntTestValue("createCommentOnline", "slideIndex", paramSlideIndex).value();
	utils->initialize("createCommentOnline", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createCommentOnline", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentOnlineInvalidDto) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createCommentOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("createCommentOnline", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createCommentOnline", "dto");
	utility::string_t paramPassword = utils->getTestValue("createCommentOnline", "password");
	paramDto = utils->getInvalidTestValueForClass<>("createCommentOnline", "dto", paramDto);
	utils->initialize("createCommentOnline", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createCommentOnline", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createCommentOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createCommentOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("createCommentOnline", "slideIndex");
	std::shared_ptr<SlideComment> paramDto = utils->getTestValueForClass<SlideComment>("createCommentOnline", "dto");
	utility::string_t paramPassword = utils->getTestValue("createCommentOnline", "password");
	paramPassword = utils->getInvalidTestValue("createCommentOnline", "password", paramPassword);
	utils->initialize("createCommentOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createCommentOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createCommentOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createCommentOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createFolder) {
	utility::string_t paramPath = utils->getTestValue("createFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("createFolder", "storageName");
	utils->initialize("createFolder", "");
	api->createFolder(paramPath, paramStorageName).wait();
}

TEST_F(SlidesApiTest, createFolderInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("createFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("createFolder", "storageName");
	paramPath = utils->getInvalidTestValue("createFolder", "path", paramPath);
	utils->initialize("createFolder", "path", paramPath);

	bool failed = true;
	try
	{
		api->createFolder(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createFolder", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createFolder", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createFolder", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createFolder", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createFolder", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createFolderInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("createFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("createFolder", "storageName");
	paramStorageName = utils->getInvalidTestValue("createFolder", "storageName", paramStorageName);
	utils->initialize("createFolder", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->createFolder(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createFolder", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createFolder", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createFolder", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createFolder", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createFolder", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermark) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage");
	utils->initialize("createImageWatermark", "");
	api->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidName) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage");
	paramName = utils->getInvalidTestValue("createImageWatermark", "name", paramName);
	utils->initialize("createImageWatermark", "name", paramName);

	bool failed = true;
	try
	{
		api->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidImage) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage");
	paramImage = utils->getInvalidBinaryTestValue("createImageWatermark", "image", paramImage);
	utils->initialize("createImageWatermark", "image", paramImage);

	bool failed = true;
	try
	{
		api->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "image");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "image", paramImage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "image");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "image", paramImage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "image"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidPictureFrame) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage");
	paramPictureFrame = utils->getInvalidTestValueForClass<>("createImageWatermark", "pictureFrame", paramPictureFrame);
	utils->initialize("createImageWatermark", "pictureFrame", paramPictureFrame);

	bool failed = true;
	try
	{
		api->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "pictureFrame");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "pictureFrame", paramPictureFrame);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "pictureFrame");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "pictureFrame", paramPictureFrame);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "pictureFrame"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage");
	paramPassword = utils->getInvalidTestValue("createImageWatermark", "password", paramPassword);
	utils->initialize("createImageWatermark", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage");
	paramFolder = utils->getInvalidTestValue("createImageWatermark", "folder", paramFolder);
	utils->initialize("createImageWatermark", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createImageWatermark", "name");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermark", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermark", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createImageWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createImageWatermark", "storage");
	paramStorage = utils->getInvalidTestValue("createImageWatermark", "storage", paramStorage);
	utils->initialize("createImageWatermark", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermark", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermark", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermark", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createImageWatermarkOnline", "document");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermarkOnline", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermarkOnline", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermarkOnline", "password");
	utils->initialize("createImageWatermarkOnline", "");
	HttpContent result = api->createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, createImageWatermarkOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createImageWatermarkOnline", "document");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermarkOnline", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermarkOnline", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermarkOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("createImageWatermarkOnline", "document", paramDocument);
	utils->initialize("createImageWatermarkOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermarkOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkOnlineInvalidImage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createImageWatermarkOnline", "document");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermarkOnline", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermarkOnline", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermarkOnline", "password");
	paramImage = utils->getInvalidBinaryTestValue("createImageWatermarkOnline", "image", paramImage);
	utils->initialize("createImageWatermarkOnline", "image", paramImage);

	bool failed = true;
	try
	{
		api->createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "image");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "image", paramImage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "image");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "image", paramImage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermarkOnline", "image"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkOnlineInvalidPictureFrame) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createImageWatermarkOnline", "document");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermarkOnline", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermarkOnline", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermarkOnline", "password");
	paramPictureFrame = utils->getInvalidTestValueForClass<>("createImageWatermarkOnline", "pictureFrame", paramPictureFrame);
	utils->initialize("createImageWatermarkOnline", "pictureFrame", paramPictureFrame);

	bool failed = true;
	try
	{
		api->createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "pictureFrame");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "pictureFrame", paramPictureFrame);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "pictureFrame");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "pictureFrame", paramPictureFrame);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermarkOnline", "pictureFrame"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createImageWatermarkOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createImageWatermarkOnline", "document");
	std::shared_ptr<HttpContent> paramImage = utils->getBinaryTestValue("createImageWatermarkOnline", "image");
	std::shared_ptr<PictureFrame> paramPictureFrame = utils->getTestValueForClass<PictureFrame>("createImageWatermarkOnline", "pictureFrame");
	utility::string_t paramPassword = utils->getTestValue("createImageWatermarkOnline", "password");
	paramPassword = utils->getInvalidTestValue("createImageWatermarkOnline", "password", paramPassword);
	utils->initialize("createImageWatermarkOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createImageWatermarkOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createImageWatermarkOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createImageWatermarkOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlide) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage");
	utils->initialize("createNotesSlide", "");
	std::shared_ptr<NotesSlide> result = api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage");
	paramName = utils->getInvalidTestValue("createNotesSlide", "name", paramName);
	utils->initialize("createNotesSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createNotesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("createNotesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("createNotesSlide", "dto", paramDto);
	utils->initialize("createNotesSlide", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage");
	paramPassword = utils->getInvalidTestValue("createNotesSlide", "password", paramPassword);
	utils->initialize("createNotesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage");
	paramFolder = utils->getInvalidTestValue("createNotesSlide", "folder", paramFolder);
	utils->initialize("createNotesSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("createNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlide", "storage");
	paramStorage = utils->getInvalidTestValue("createNotesSlide", "storage", paramStorage);
	utils->initialize("createNotesSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideParagraph) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlideParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createNotesSlideParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideParagraph", "storage");
	utils->initialize("createNotesSlideParagraph", "");
	std::shared_ptr<Paragraph> result = api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createNotesSlideParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlideParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createNotesSlideParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideParagraph", "storage");
	paramName = utils->getInvalidTestValue("createNotesSlideParagraph", "name", paramName);
	utils->initialize("createNotesSlideParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlideParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createNotesSlideParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createNotesSlideParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("createNotesSlideParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlideParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createNotesSlideParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("createNotesSlideParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("createNotesSlideParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlideParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createNotesSlideParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideParagraph", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("createNotesSlideParagraph", "dto", paramDto);
	utils->initialize("createNotesSlideParagraph", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideParagraphInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlideParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createNotesSlideParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideParagraph", "storage");
	paramPosition = utils->getInvalidIntTestValue("createNotesSlideParagraph", "position", paramPosition).value();
	utils->initialize("createNotesSlideParagraph", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideParagraph", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlideParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createNotesSlideParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("createNotesSlideParagraph", "password", paramPassword);
	utils->initialize("createNotesSlideParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlideParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createNotesSlideParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("createNotesSlideParagraph", "folder", paramFolder);
	utils->initialize("createNotesSlideParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlideParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createNotesSlideParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("createNotesSlideParagraph", "storage", paramStorage);
	utils->initialize("createNotesSlideParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlidePortion) {
	utility::string_t paramName = utils->getTestValue("createNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createNotesSlidePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createNotesSlidePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlidePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlidePortion", "storage");
	utils->initialize("createNotesSlidePortion", "");
	std::shared_ptr<Portion> result = api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createNotesSlidePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("createNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createNotesSlidePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createNotesSlidePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlidePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlidePortion", "storage");
	paramName = utils->getInvalidTestValue("createNotesSlidePortion", "name", paramName);
	utils->initialize("createNotesSlidePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlidePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlidePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createNotesSlidePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createNotesSlidePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlidePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlidePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createNotesSlidePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("createNotesSlidePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlidePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlidePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createNotesSlidePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createNotesSlidePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlidePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlidePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("createNotesSlidePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("createNotesSlidePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlidePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlidePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("createNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createNotesSlidePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createNotesSlidePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlidePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlidePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("createNotesSlidePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("createNotesSlidePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlidePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlidePortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createNotesSlidePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createNotesSlidePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlidePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlidePortion", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("createNotesSlidePortion", "dto", paramDto);
	utils->initialize("createNotesSlidePortion", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlidePortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlidePortionInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createNotesSlidePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createNotesSlidePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlidePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlidePortion", "storage");
	paramPosition = utils->getInvalidIntTestValue("createNotesSlidePortion", "position", paramPosition).value();
	utils->initialize("createNotesSlidePortion", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlidePortion", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlidePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createNotesSlidePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createNotesSlidePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlidePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlidePortion", "storage");
	paramPassword = utils->getInvalidTestValue("createNotesSlidePortion", "password", paramPassword);
	utils->initialize("createNotesSlidePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlidePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlidePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createNotesSlidePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createNotesSlidePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlidePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlidePortion", "storage");
	paramFolder = utils->getInvalidTestValue("createNotesSlidePortion", "folder", paramFolder);
	utils->initialize("createNotesSlidePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlidePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlidePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createNotesSlidePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createNotesSlidePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlidePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlidePortion", "storage");
	paramStorage = utils->getInvalidTestValue("createNotesSlidePortion", "storage", paramStorage);
	utils->initialize("createNotesSlidePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlidePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlidePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlidePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideShape) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createNotesSlideShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createNotesSlideShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideShape", "storage");
	utils->initialize("createNotesSlideShape", "");
	std::shared_ptr<ShapeBase> result = api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createNotesSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createNotesSlideShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createNotesSlideShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideShape", "storage");
	paramName = utils->getInvalidTestValue("createNotesSlideShape", "name", paramName);
	utils->initialize("createNotesSlideShape", "name", paramName);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createNotesSlideShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createNotesSlideShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createNotesSlideShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("createNotesSlideShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideShapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createNotesSlideShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createNotesSlideShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideShape", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("createNotesSlideShape", "dto", paramDto);
	utils->initialize("createNotesSlideShape", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideShape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideShapeInvalidShapeToClone) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createNotesSlideShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createNotesSlideShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideShape", "storage");
	paramShapeToClone = utils->getInvalidIntTestValue("createNotesSlideShape", "shapeToClone", paramShapeToClone).value();
	utils->initialize("createNotesSlideShape", "shapeToClone", paramShapeToClone);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "shapeToClone");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "shapeToClone", paramShapeToClone);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "shapeToClone");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "shapeToClone", paramShapeToClone);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideShape", "shapeToClone"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideShapeInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createNotesSlideShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createNotesSlideShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideShape", "storage");
	paramPosition = utils->getInvalidIntTestValue("createNotesSlideShape", "position", paramPosition).value();
	utils->initialize("createNotesSlideShape", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideShape", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createNotesSlideShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createNotesSlideShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideShape", "storage");
	paramPassword = utils->getInvalidTestValue("createNotesSlideShape", "password", paramPassword);
	utils->initialize("createNotesSlideShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createNotesSlideShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createNotesSlideShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideShape", "storage");
	paramFolder = utils->getInvalidTestValue("createNotesSlideShape", "folder", paramFolder);
	utils->initialize("createNotesSlideShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createNotesSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createNotesSlideShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createNotesSlideShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createNotesSlideShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createNotesSlideShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createNotesSlideShape", "storage");
	paramStorage = utils->getInvalidTestValue("createNotesSlideShape", "storage", paramStorage);
	utils->initialize("createNotesSlideShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createNotesSlideShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraph) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage");
	utils->initialize("createParagraph", "");
	std::shared_ptr<Paragraph> result = api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage");
	paramName = utils->getInvalidTestValue("createParagraph", "name", paramName);
	utils->initialize("createParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("createParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("createParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("createParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("createParagraph", "dto", paramDto);
	utils->initialize("createParagraph", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage");
	paramPosition = utils->getInvalidIntTestValue("createParagraph", "position", paramPosition).value();
	utils->initialize("createParagraph", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("createParagraph", "password", paramPassword);
	utils->initialize("createParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("createParagraph", "folder", paramFolder);
	utils->initialize("createParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("createParagraph", "storage", paramStorage);
	utils->initialize("createParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortion) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage");
	utils->initialize("createPortion", "");
	std::shared_ptr<Portion> result = api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage");
	paramName = utils->getInvalidTestValue("createPortion", "name", paramName);
	utils->initialize("createPortion", "name", paramName);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createPortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("createPortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("createPortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("createPortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("createPortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("createPortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("createPortion", "dto", paramDto);
	utils->initialize("createPortion", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage");
	paramPosition = utils->getInvalidIntTestValue("createPortion", "position", paramPosition).value();
	utils->initialize("createPortion", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage");
	paramPassword = utils->getInvalidTestValue("createPortion", "password", paramPassword);
	utils->initialize("createPortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage");
	paramFolder = utils->getInvalidTestValue("createPortion", "folder", paramFolder);
	utils->initialize("createPortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("createPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createPortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createPortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createPortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPortion", "storage");
	paramStorage = utils->getInvalidTestValue("createPortion", "storage", paramStorage);
	utils->initialize("createPortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentation) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage");
	utils->initialize("createPresentation", "");
	std::shared_ptr<Document> result = api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createPresentationInvalidName) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage");
	paramName = utils->getInvalidTestValue("createPresentation", "name", paramName);
	utils->initialize("createPresentation", "name", paramName);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationInvalidData) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage");
	paramData = utils->getInvalidBinaryTestValue("createPresentation", "data", paramData);
	utils->initialize("createPresentation", "data", paramData);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "data");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "data", paramData);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "data");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "data", paramData);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "data"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationInvalidInputPassword) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage");
	paramInputPassword = utils->getInvalidTestValue("createPresentation", "inputPassword", paramInputPassword);
	utils->initialize("createPresentation", "inputPassword", paramInputPassword);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "inputPassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "inputPassword", paramInputPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "inputPassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "inputPassword", paramInputPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "inputPassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage");
	paramPassword = utils->getInvalidTestValue("createPresentation", "password", paramPassword);
	utils->initialize("createPresentation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage");
	paramFolder = utils->getInvalidTestValue("createPresentation", "folder", paramFolder);
	utils->initialize("createPresentation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createPresentation", "name");
	std::shared_ptr<HttpContent> paramData = utils->getBinaryTestValue("createPresentation", "data");
	utility::string_t paramInputPassword = utils->getTestValue("createPresentation", "inputPassword");
	utility::string_t paramPassword = utils->getTestValue("createPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentation", "storage");
	paramStorage = utils->getInvalidTestValue("createPresentation", "storage", paramStorage);
	utils->initialize("createPresentation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSource) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage");
	utils->initialize("createPresentationFromSource", "");
	std::shared_ptr<Document> result = api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidName) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage");
	paramName = utils->getInvalidTestValue("createPresentationFromSource", "name", paramName);
	utils->initialize("createPresentationFromSource", "name", paramName);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidSourcePath) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage");
	paramSourcePath = utils->getInvalidTestValue("createPresentationFromSource", "sourcePath", paramSourcePath);
	utils->initialize("createPresentationFromSource", "sourcePath", paramSourcePath);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourcePath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourcePath", paramSourcePath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourcePath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourcePath", paramSourcePath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "sourcePath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidSourcePassword) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage");
	paramSourcePassword = utils->getInvalidTestValue("createPresentationFromSource", "sourcePassword", paramSourcePassword);
	utils->initialize("createPresentationFromSource", "sourcePassword", paramSourcePassword);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourcePassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourcePassword", paramSourcePassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourcePassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourcePassword", paramSourcePassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "sourcePassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidSourceStorage) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage");
	paramSourceStorage = utils->getInvalidTestValue("createPresentationFromSource", "sourceStorage", paramSourceStorage);
	utils->initialize("createPresentationFromSource", "sourceStorage", paramSourceStorage);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourceStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourceStorage", paramSourceStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "sourceStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "sourceStorage", paramSourceStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "sourceStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage");
	paramPassword = utils->getInvalidTestValue("createPresentationFromSource", "password", paramPassword);
	utils->initialize("createPresentationFromSource", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage");
	paramFolder = utils->getInvalidTestValue("createPresentationFromSource", "folder", paramFolder);
	utils->initialize("createPresentationFromSource", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromSourceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromSource", "name");
	utility::string_t paramSourcePath = utils->getTestValue("createPresentationFromSource", "sourcePath");
	utility::string_t paramSourcePassword = utils->getTestValue("createPresentationFromSource", "sourcePassword");
	utility::string_t paramSourceStorage = utils->getTestValue("createPresentationFromSource", "sourceStorage");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromSource", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromSource", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromSource", "storage");
	paramStorage = utils->getInvalidTestValue("createPresentationFromSource", "storage", paramStorage);
	utils->initialize("createPresentationFromSource", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromSource", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromSource", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromSource", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplate) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage");
	utils->initialize("createPresentationFromTemplate", "");
	std::shared_ptr<Document> result = api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidName) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage");
	paramName = utils->getInvalidTestValue("createPresentationFromTemplate", "name", paramName);
	utils->initialize("createPresentationFromTemplate", "name", paramName);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidTemplatePath) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage");
	paramTemplatePath = utils->getInvalidTestValue("createPresentationFromTemplate", "templatePath", paramTemplatePath);
	utils->initialize("createPresentationFromTemplate", "templatePath", paramTemplatePath);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templatePath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templatePath", paramTemplatePath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templatePath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templatePath", paramTemplatePath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "templatePath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidData) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage");
	paramData = utils->getInvalidTestValue("createPresentationFromTemplate", "data", paramData);
	utils->initialize("createPresentationFromTemplate", "data", paramData);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "data");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "data", paramData);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "data");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "data", paramData);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "data"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidTemplatePassword) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage");
	paramTemplatePassword = utils->getInvalidTestValue("createPresentationFromTemplate", "templatePassword", paramTemplatePassword);
	utils->initialize("createPresentationFromTemplate", "templatePassword", paramTemplatePassword);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templatePassword");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templatePassword", paramTemplatePassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templatePassword");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templatePassword", paramTemplatePassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "templatePassword"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidTemplateStorage) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage");
	paramTemplateStorage = utils->getInvalidTestValue("createPresentationFromTemplate", "templateStorage", paramTemplateStorage);
	utils->initialize("createPresentationFromTemplate", "templateStorage", paramTemplateStorage);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templateStorage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templateStorage", paramTemplateStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "templateStorage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "templateStorage", paramTemplateStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "templateStorage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidIsImageDataEmbedded) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage");
	paramIsImageDataEmbedded = utils->getInvalidBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded", paramIsImageDataEmbedded).value();
	utils->initialize("createPresentationFromTemplate", "isImageDataEmbedded", paramIsImageDataEmbedded);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "isImageDataEmbedded");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "isImageDataEmbedded", paramIsImageDataEmbedded);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "isImageDataEmbedded");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "isImageDataEmbedded", paramIsImageDataEmbedded);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "isImageDataEmbedded"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage");
	paramPassword = utils->getInvalidTestValue("createPresentationFromTemplate", "password", paramPassword);
	utils->initialize("createPresentationFromTemplate", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage");
	paramFolder = utils->getInvalidTestValue("createPresentationFromTemplate", "folder", paramFolder);
	utils->initialize("createPresentationFromTemplate", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createPresentationFromTemplateInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createPresentationFromTemplate", "name");
	utility::string_t paramTemplatePath = utils->getTestValue("createPresentationFromTemplate", "templatePath");
	utility::string_t paramData = utils->getTestValue("createPresentationFromTemplate", "data");
	utility::string_t paramTemplatePassword = utils->getTestValue("createPresentationFromTemplate", "templatePassword");
	utility::string_t paramTemplateStorage = utils->getTestValue("createPresentationFromTemplate", "templateStorage");
	auto paramIsImageDataEmbedded = utils->getOptionalBoolTestValue("createPresentationFromTemplate", "isImageDataEmbedded");
	utility::string_t paramPassword = utils->getTestValue("createPresentationFromTemplate", "password");
	utility::string_t paramFolder = utils->getTestValue("createPresentationFromTemplate", "folder");
	utility::string_t paramStorage = utils->getTestValue("createPresentationFromTemplate", "storage");
	paramStorage = utils->getInvalidTestValue("createPresentationFromTemplate", "storage", paramStorage);
	utils->initialize("createPresentationFromTemplate", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createPresentationFromTemplate", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createPresentationFromTemplate", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createPresentationFromTemplate", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSection) {
	utility::string_t paramName = utils->getTestValue("createSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage");
	utils->initialize("createSection", "");
	std::shared_ptr<Sections> result = api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage");
	paramName = utils->getInvalidTestValue("createSection", "name", paramName);
	utils->initialize("createSection", "name", paramName);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSectionInvalidSectionName) {
	utility::string_t paramName = utils->getTestValue("createSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage");
	paramSectionName = utils->getInvalidTestValue("createSection", "sectionName", paramSectionName);
	utils->initialize("createSection", "sectionName", paramSectionName);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "sectionName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "sectionName", paramSectionName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "sectionName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "sectionName", paramSectionName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "sectionName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSectionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createSection", "slideIndex", paramSlideIndex).value();
	utils->initialize("createSection", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage");
	paramPassword = utils->getInvalidTestValue("createSection", "password", paramPassword);
	utils->initialize("createSection", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage");
	paramFolder = utils->getInvalidTestValue("createSection", "folder", paramFolder);
	utils->initialize("createSection", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSection", "name");
	utility::string_t paramSectionName = utils->getTestValue("createSection", "sectionName");
	int32_t paramSlideIndex = utils->getIntTestValue("createSection", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("createSection", "password");
	utility::string_t paramFolder = utils->getTestValue("createSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSection", "storage");
	paramStorage = utils->getInvalidTestValue("createSection", "storage", paramStorage);
	utils->initialize("createSection", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSection", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSection", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShape) {
	utility::string_t paramName = utils->getTestValue("createShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage");
	utils->initialize("createShape", "");
	std::shared_ptr<ShapeBase> result = api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("createShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage");
	paramName = utils->getInvalidTestValue("createShape", "name", paramName);
	utils->initialize("createShape", "name", paramName);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("createShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("createShape", "dto", paramDto);
	utils->initialize("createShape", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidShapeToClone) {
	utility::string_t paramName = utils->getTestValue("createShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage");
	paramShapeToClone = utils->getInvalidIntTestValue("createShape", "shapeToClone", paramShapeToClone).value();
	utils->initialize("createShape", "shapeToClone", paramShapeToClone);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "shapeToClone");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "shapeToClone", paramShapeToClone);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "shapeToClone");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "shapeToClone", paramShapeToClone);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "shapeToClone"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage");
	paramPosition = utils->getInvalidIntTestValue("createShape", "position", paramPosition).value();
	utils->initialize("createShape", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage");
	paramPassword = utils->getInvalidTestValue("createShape", "password", paramPassword);
	utils->initialize("createShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage");
	paramFolder = utils->getInvalidTestValue("createShape", "folder", paramFolder);
	utils->initialize("createShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createShape", "slideIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createShape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createShape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createShape", "position");
	utility::string_t paramPassword = utils->getTestValue("createShape", "password");
	utility::string_t paramFolder = utils->getTestValue("createShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createShape", "storage");
	paramStorage = utils->getInvalidTestValue("createShape", "storage", paramStorage);
	utils->initialize("createShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlide) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage");
	utils->initialize("createSlide", "");
	std::shared_ptr<Slides> result = api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage");
	paramName = utils->getInvalidTestValue("createSlide", "name", paramName);
	utils->initialize("createSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlideInvalidLayoutAlias) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage");
	paramLayoutAlias = utils->getInvalidTestValue("createSlide", "layoutAlias", paramLayoutAlias);
	utils->initialize("createSlide", "layoutAlias", paramLayoutAlias);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "layoutAlias");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "layoutAlias", paramLayoutAlias);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "layoutAlias");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "layoutAlias", paramLayoutAlias);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "layoutAlias"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlideInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage");
	paramPosition = utils->getInvalidIntTestValue("createSlide", "position", paramPosition).value();
	utils->initialize("createSlide", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage");
	paramPassword = utils->getInvalidTestValue("createSlide", "password", paramPassword);
	utils->initialize("createSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage");
	paramFolder = utils->getInvalidTestValue("createSlide", "folder", paramFolder);
	utils->initialize("createSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSlide", "name");
	utility::string_t paramLayoutAlias = utils->getTestValue("createSlide", "layoutAlias");
	auto paramPosition = utils->getOptionalIntTestValue("createSlide", "position");
	utility::string_t paramPassword = utils->getTestValue("createSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("createSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSlide", "storage");
	paramStorage = utils->getInvalidTestValue("createSlide", "storage", paramStorage);
	utils->initialize("createSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshape) {
	utility::string_t paramName = utils->getTestValue("createSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshape", "storage");
	utils->initialize("createSubshape", "");
	std::shared_ptr<ShapeBase> result = api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSubshapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshape", "storage");
	paramName = utils->getInvalidTestValue("createSubshape", "name", paramName);
	utils->initialize("createSubshape", "name", paramName);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createSubshape", "slideIndex", paramSlideIndex).value();
	utils->initialize("createSubshape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeInvalidPath) {
	utility::string_t paramName = utils->getTestValue("createSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshape", "storage");
	paramPath = utils->getInvalidTestValue("createSubshape", "path", paramPath);
	utils->initialize("createSubshape", "path", paramPath);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshape", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshape", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshape", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("createSubshape", "dto", paramDto);
	utils->initialize("createSubshape", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshape", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshape", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeInvalidShapeToClone) {
	utility::string_t paramName = utils->getTestValue("createSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshape", "storage");
	paramShapeToClone = utils->getInvalidIntTestValue("createSubshape", "shapeToClone", paramShapeToClone).value();
	utils->initialize("createSubshape", "shapeToClone", paramShapeToClone);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshape", "shapeToClone");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshape", "shapeToClone", paramShapeToClone);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshape", "shapeToClone");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshape", "shapeToClone", paramShapeToClone);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshape", "shapeToClone"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshape", "storage");
	paramPosition = utils->getInvalidIntTestValue("createSubshape", "position", paramPosition).value();
	utils->initialize("createSubshape", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshape", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshape", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshape", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshape", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshape", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshape", "storage");
	paramPassword = utils->getInvalidTestValue("createSubshape", "password", paramPassword);
	utils->initialize("createSubshape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshape", "storage");
	paramFolder = utils->getInvalidTestValue("createSubshape", "folder", paramFolder);
	utils->initialize("createSubshape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshape", "path");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("createSubshape", "dto");
	auto paramShapeToClone = utils->getOptionalIntTestValue("createSubshape", "shapeToClone");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshape", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshape", "storage");
	paramStorage = utils->getInvalidTestValue("createSubshape", "storage", paramStorage);
	utils->initialize("createSubshape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeParagraph) {
	utility::string_t paramName = utils->getTestValue("createSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapeParagraph", "storage");
	utils->initialize("createSubshapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSubshapeParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapeParagraph", "storage");
	paramName = utils->getInvalidTestValue("createSubshapeParagraph", "name", paramName);
	utils->initialize("createSubshapeParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapeParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createSubshapeParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("createSubshapeParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeParagraphInvalidPath) {
	utility::string_t paramName = utils->getTestValue("createSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapeParagraph", "storage");
	paramPath = utils->getInvalidTestValue("createSubshapeParagraph", "path", paramPath);
	utils->initialize("createSubshapeParagraph", "path", paramPath);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapeParagraph", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapeParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("createSubshapeParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("createSubshapeParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapeParagraph", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("createSubshapeParagraph", "dto", paramDto);
	utils->initialize("createSubshapeParagraph", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapeParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeParagraphInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapeParagraph", "storage");
	paramPosition = utils->getInvalidIntTestValue("createSubshapeParagraph", "position", paramPosition).value();
	utils->initialize("createSubshapeParagraph", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapeParagraph", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapeParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("createSubshapeParagraph", "password", paramPassword);
	utils->initialize("createSubshapeParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapeParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("createSubshapeParagraph", "folder", paramFolder);
	utils->initialize("createSubshapeParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapeParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapeParagraph", "shapeIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("createSubshapeParagraph", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapeParagraph", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapeParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("createSubshapeParagraph", "storage", paramStorage);
	utils->initialize("createSubshapeParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapeParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapePortion) {
	utility::string_t paramName = utils->getTestValue("createSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapePortion", "storage");
	utils->initialize("createSubshapePortion", "");
	std::shared_ptr<Portion> result = api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, createSubshapePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("createSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapePortion", "storage");
	paramName = utils->getInvalidTestValue("createSubshapePortion", "name", paramName);
	utils->initialize("createSubshapePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("createSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("createSubshapePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("createSubshapePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapePortionInvalidPath) {
	utility::string_t paramName = utils->getTestValue("createSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapePortion", "storage");
	paramPath = utils->getInvalidTestValue("createSubshapePortion", "path", paramPath);
	utils->initialize("createSubshapePortion", "path", paramPath);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapePortion", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("createSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("createSubshapePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("createSubshapePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("createSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("createSubshapePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("createSubshapePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapePortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("createSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapePortion", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("createSubshapePortion", "dto", paramDto);
	utils->initialize("createSubshapePortion", "dto", paramDto);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapePortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapePortionInvalidPosition) {
	utility::string_t paramName = utils->getTestValue("createSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapePortion", "storage");
	paramPosition = utils->getInvalidIntTestValue("createSubshapePortion", "position", paramPosition).value();
	utils->initialize("createSubshapePortion", "position", paramPosition);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "position");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "position", paramPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "position");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "position", paramPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapePortion", "position"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapePortion", "storage");
	paramPassword = utils->getInvalidTestValue("createSubshapePortion", "password", paramPassword);
	utils->initialize("createSubshapePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapePortion", "storage");
	paramFolder = utils->getInvalidTestValue("createSubshapePortion", "folder", paramFolder);
	utils->initialize("createSubshapePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createSubshapePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("createSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("createSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("createSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("createSubshapePortion", "paragraphIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("createSubshapePortion", "dto");
	auto paramPosition = utils->getOptionalIntTestValue("createSubshapePortion", "position");
	utility::string_t paramPassword = utils->getTestValue("createSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("createSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("createSubshapePortion", "storage");
	paramStorage = utils->getInvalidTestValue("createSubshapePortion", "storage", paramStorage);
	utils->initialize("createSubshapePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createSubshapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createSubshapePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createSubshapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermark) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage");
	utils->initialize("createWatermark", "");
	api->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
}

TEST_F(SlidesApiTest, createWatermarkInvalidName) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage");
	paramName = utils->getInvalidTestValue("createWatermark", "name", paramName);
	utils->initialize("createWatermark", "name", paramName);

	bool failed = true;
	try
	{
		api->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidShape) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage");
	paramShape = utils->getInvalidTestValueForClass<>("createWatermark", "shape", paramShape);
	utils->initialize("createWatermark", "shape", paramShape);

	bool failed = true;
	try
	{
		api->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "shape");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "shape", paramShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "shape");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "shape", paramShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "shape"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidFontHeight) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage");
	paramFontHeight = utils->getInvalidDoubleTestValue("createWatermark", "fontHeight", paramFontHeight).value();
	utils->initialize("createWatermark", "fontHeight", paramFontHeight);

	bool failed = true;
	try
	{
		api->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontHeight");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontHeight", paramFontHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontHeight");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontHeight", paramFontHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "fontHeight"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidText) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage");
	paramText = utils->getInvalidTestValue("createWatermark", "text", paramText);
	utils->initialize("createWatermark", "text", paramText);

	bool failed = true;
	try
	{
		api->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "text");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "text", paramText);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "text");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "text", paramText);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "text"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidFontName) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage");
	paramFontName = utils->getInvalidTestValue("createWatermark", "fontName", paramFontName);
	utils->initialize("createWatermark", "fontName", paramFontName);

	bool failed = true;
	try
	{
		api->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontName", paramFontName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontName", paramFontName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "fontName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidFontColor) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage");
	paramFontColor = utils->getInvalidTestValue("createWatermark", "fontColor", paramFontColor);
	utils->initialize("createWatermark", "fontColor", paramFontColor);

	bool failed = true;
	try
	{
		api->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontColor");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontColor", paramFontColor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "fontColor");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "fontColor", paramFontColor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "fontColor"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage");
	paramPassword = utils->getInvalidTestValue("createWatermark", "password", paramPassword);
	utils->initialize("createWatermark", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage");
	paramFolder = utils->getInvalidTestValue("createWatermark", "folder", paramFolder);
	utils->initialize("createWatermark", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("createWatermark", "name");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermark", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermark", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermark", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermark", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermark", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("createWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("createWatermark", "storage");
	paramStorage = utils->getInvalidTestValue("createWatermark", "storage", paramStorage);
	utils->initialize("createWatermark", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermark", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermark", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermark", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermark", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermark", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password");
	utils->initialize("createWatermarkOnline", "");
	HttpContent result = api->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("createWatermarkOnline", "document", paramDocument);
	utils->initialize("createWatermarkOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidShape) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password");
	paramShape = utils->getInvalidTestValueForClass<>("createWatermarkOnline", "shape", paramShape);
	utils->initialize("createWatermarkOnline", "shape", paramShape);

	bool failed = true;
	try
	{
		api->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "shape");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "shape", paramShape);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "shape");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "shape", paramShape);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "shape"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidFontHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password");
	paramFontHeight = utils->getInvalidDoubleTestValue("createWatermarkOnline", "fontHeight", paramFontHeight).value();
	utils->initialize("createWatermarkOnline", "fontHeight", paramFontHeight);

	bool failed = true;
	try
	{
		api->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontHeight");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontHeight", paramFontHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontHeight");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontHeight", paramFontHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "fontHeight"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidText) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password");
	paramText = utils->getInvalidTestValue("createWatermarkOnline", "text", paramText);
	utils->initialize("createWatermarkOnline", "text", paramText);

	bool failed = true;
	try
	{
		api->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "text");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "text", paramText);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "text");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "text", paramText);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "text"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidFontName) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password");
	paramFontName = utils->getInvalidTestValue("createWatermarkOnline", "fontName", paramFontName);
	utils->initialize("createWatermarkOnline", "fontName", paramFontName);

	bool failed = true;
	try
	{
		api->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontName", paramFontName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontName", paramFontName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "fontName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidFontColor) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password");
	paramFontColor = utils->getInvalidTestValue("createWatermarkOnline", "fontColor", paramFontColor);
	utils->initialize("createWatermarkOnline", "fontColor", paramFontColor);

	bool failed = true;
	try
	{
		api->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontColor");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontColor", paramFontColor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "fontColor");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "fontColor", paramFontColor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "fontColor"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, createWatermarkOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("createWatermarkOnline", "document");
	std::shared_ptr<Shape> paramShape = utils->getTestValueForClass<Shape>("createWatermarkOnline", "shape");
	auto paramFontHeight = utils->getOptionalDoubleTestValue("createWatermarkOnline", "fontHeight");
	utility::string_t paramText = utils->getTestValue("createWatermarkOnline", "text");
	utility::string_t paramFontName = utils->getTestValue("createWatermarkOnline", "fontName");
	utility::string_t paramFontColor = utils->getTestValue("createWatermarkOnline", "fontColor");
	utility::string_t paramPassword = utils->getTestValue("createWatermarkOnline", "password");
	paramPassword = utils->getInvalidTestValue("createWatermarkOnline", "password", paramPassword);
	utils->initialize("createWatermarkOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("createWatermarkOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("createWatermarkOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("createWatermarkOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimation) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage");
	utils->initialize("deleteAnimation", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage");
	paramName = utils->getInvalidTestValue("deleteAnimation", "name", paramName);
	utils->initialize("deleteAnimation", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimation", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteAnimation", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimation", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage");
	paramPassword = utils->getInvalidTestValue("deleteAnimation", "password", paramPassword);
	utils->initialize("deleteAnimation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage");
	paramFolder = utils->getInvalidTestValue("deleteAnimation", "folder", paramFolder);
	utils->initialize("deleteAnimation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimation", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimation", "storage");
	paramStorage = utils->getInvalidTestValue("deleteAnimation", "storage", paramStorage);
	utils->initialize("deleteAnimation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage");
	utils->initialize("deleteAnimationEffect", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage");
	paramName = utils->getInvalidTestValue("deleteAnimationEffect", "name", paramName);
	utils->initialize("deleteAnimationEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimationEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteAnimationEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage");
	paramEffectIndex = utils->getInvalidIntTestValue("deleteAnimationEffect", "effectIndex", paramEffectIndex).value();
	utils->initialize("deleteAnimationEffect", "effectIndex", paramEffectIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "effectIndex", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "effectIndex", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage");
	paramPassword = utils->getInvalidTestValue("deleteAnimationEffect", "password", paramPassword);
	utils->initialize("deleteAnimationEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage");
	paramFolder = utils->getInvalidTestValue("deleteAnimationEffect", "folder", paramFolder);
	utils->initialize("deleteAnimationEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationEffect", "storage");
	paramStorage = utils->getInvalidTestValue("deleteAnimationEffect", "storage", paramStorage);
	utils->initialize("deleteAnimationEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequence) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage");
	utils->initialize("deleteAnimationInteractiveSequence", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage");
	paramName = utils->getInvalidTestValue("deleteAnimationInteractiveSequence", "name", paramName);
	utils->initialize("deleteAnimationInteractiveSequence", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequence", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteAnimationInteractiveSequence", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage");
	paramSequenceIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex).value();
	utils->initialize("deleteAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage");
	paramPassword = utils->getInvalidTestValue("deleteAnimationInteractiveSequence", "password", paramPassword);
	utils->initialize("deleteAnimationInteractiveSequence", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage");
	paramFolder = utils->getInvalidTestValue("deleteAnimationInteractiveSequence", "folder", paramFolder);
	utils->initialize("deleteAnimationInteractiveSequence", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequence", "sequenceIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequence", "storage");
	paramStorage = utils->getInvalidTestValue("deleteAnimationInteractiveSequence", "storage", paramStorage);
	utils->initialize("deleteAnimationInteractiveSequence", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequence", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequence", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequence", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage");
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage");
	paramName = utils->getInvalidTestValue("deleteAnimationInteractiveSequenceEffect", "name", paramName);
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage");
	paramSequenceIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex).value();
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage");
	paramEffectIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex).value();
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage");
	paramPassword = utils->getInvalidTestValue("deleteAnimationInteractiveSequenceEffect", "password", paramPassword);
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage");
	paramFolder = utils->getInvalidTestValue("deleteAnimationInteractiveSequenceEffect", "folder", paramFolder);
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequenceEffect", "storage");
	paramStorage = utils->getInvalidTestValue("deleteAnimationInteractiveSequenceEffect", "storage", paramStorage);
	utils->initialize("deleteAnimationInteractiveSequenceEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequenceEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequenceEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequences) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage");
	utils->initialize("deleteAnimationInteractiveSequences", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequencesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage");
	paramName = utils->getInvalidTestValue("deleteAnimationInteractiveSequences", "name", paramName);
	utils->initialize("deleteAnimationInteractiveSequences", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequences", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequencesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimationInteractiveSequences", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteAnimationInteractiveSequences", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequences", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequencesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage");
	paramPassword = utils->getInvalidTestValue("deleteAnimationInteractiveSequences", "password", paramPassword);
	utils->initialize("deleteAnimationInteractiveSequences", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequences", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequencesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage");
	paramFolder = utils->getInvalidTestValue("deleteAnimationInteractiveSequences", "folder", paramFolder);
	utils->initialize("deleteAnimationInteractiveSequences", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequences", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationInteractiveSequencesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationInteractiveSequences", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationInteractiveSequences", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationInteractiveSequences", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationInteractiveSequences", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationInteractiveSequences", "storage");
	paramStorage = utils->getInvalidTestValue("deleteAnimationInteractiveSequences", "storage", paramStorage);
	utils->initialize("deleteAnimationInteractiveSequences", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationInteractiveSequences", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationInteractiveSequences", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationInteractiveSequences", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationMainSequence) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage");
	utils->initialize("deleteAnimationMainSequence", "");
	std::shared_ptr<SlideAnimation> result = api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteAnimationMainSequenceInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage");
	paramName = utils->getInvalidTestValue("deleteAnimationMainSequence", "name", paramName);
	utils->initialize("deleteAnimationMainSequence", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationMainSequence", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationMainSequenceInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteAnimationMainSequence", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteAnimationMainSequence", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationMainSequence", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationMainSequenceInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage");
	paramPassword = utils->getInvalidTestValue("deleteAnimationMainSequence", "password", paramPassword);
	utils->initialize("deleteAnimationMainSequence", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationMainSequence", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationMainSequenceInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage");
	paramFolder = utils->getInvalidTestValue("deleteAnimationMainSequence", "folder", paramFolder);
	utils->initialize("deleteAnimationMainSequence", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationMainSequence", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteAnimationMainSequenceInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteAnimationMainSequence", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteAnimationMainSequence", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteAnimationMainSequence", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteAnimationMainSequence", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteAnimationMainSequence", "storage");
	paramStorage = utils->getInvalidTestValue("deleteAnimationMainSequence", "storage", paramStorage);
	utils->initialize("deleteAnimationMainSequence", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteAnimationMainSequence", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteAnimationMainSequence", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteAnimationMainSequence", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteBackground) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage");
	utils->initialize("deleteBackground", "");
	std::shared_ptr<SlideBackground> result = api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteBackgroundInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage");
	paramName = utils->getInvalidTestValue("deleteBackground", "name", paramName);
	utils->initialize("deleteBackground", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteBackground", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteBackgroundInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteBackground", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteBackground", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteBackground", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteBackgroundInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage");
	paramPassword = utils->getInvalidTestValue("deleteBackground", "password", paramPassword);
	utils->initialize("deleteBackground", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteBackground", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteBackgroundInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage");
	paramFolder = utils->getInvalidTestValue("deleteBackground", "folder", paramFolder);
	utils->initialize("deleteBackground", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteBackground", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteBackgroundInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteBackground", "storage");
	paramStorage = utils->getInvalidTestValue("deleteBackground", "storage", paramStorage);
	utils->initialize("deleteBackground", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteBackground", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteBackground", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteBackground", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategory) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	utils->initialize("deleteChartCategory", "");
	std::shared_ptr<Chart> result = api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramName = utils->getInvalidTestValue("deleteChartCategory", "name", paramName);
	utils->initialize("deleteChartCategory", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteChartCategory", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteChartCategory", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteChartCategory", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteChartCategory", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidCategoryIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramCategoryIndex = utils->getInvalidIntTestValue("deleteChartCategory", "categoryIndex", paramCategoryIndex).value();
	utils->initialize("deleteChartCategory", "categoryIndex", paramCategoryIndex);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "categoryIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "categoryIndex", paramCategoryIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "categoryIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "categoryIndex", paramCategoryIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "categoryIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramPassword = utils->getInvalidTestValue("deleteChartCategory", "password", paramPassword);
	utils->initialize("deleteChartCategory", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramFolder = utils->getInvalidTestValue("deleteChartCategory", "folder", paramFolder);
	utils->initialize("deleteChartCategory", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartCategoryInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("deleteChartCategory", "categoryIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartCategory", "storage");
	paramStorage = utils->getInvalidTestValue("deleteChartCategory", "storage", paramStorage);
	utils->initialize("deleteChartCategory", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartCategory", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartCategory", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartCategory", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPoint) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	utils->initialize("deleteChartDataPoint", "");
	std::shared_ptr<Chart> result = api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramName = utils->getInvalidTestValue("deleteChartDataPoint", "name", paramName);
	utils->initialize("deleteChartDataPoint", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteChartDataPoint", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteChartDataPoint", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramSeriesIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "seriesIndex", paramSeriesIndex).value();
	utils->initialize("deleteChartDataPoint", "seriesIndex", paramSeriesIndex);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "seriesIndex", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "seriesIndex", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidPointIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramPointIndex = utils->getInvalidIntTestValue("deleteChartDataPoint", "pointIndex", paramPointIndex).value();
	utils->initialize("deleteChartDataPoint", "pointIndex", paramPointIndex);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "pointIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "pointIndex", paramPointIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "pointIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "pointIndex", paramPointIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "pointIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramPassword = utils->getInvalidTestValue("deleteChartDataPoint", "password", paramPassword);
	utils->initialize("deleteChartDataPoint", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramFolder = utils->getInvalidTestValue("deleteChartDataPoint", "folder", paramFolder);
	utils->initialize("deleteChartDataPoint", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartDataPointInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("deleteChartDataPoint", "pointIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartDataPoint", "storage");
	paramStorage = utils->getInvalidTestValue("deleteChartDataPoint", "storage", paramStorage);
	utils->initialize("deleteChartDataPoint", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartDataPoint", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartDataPoint", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartDataPoint", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeries) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	utils->initialize("deleteChartSeries", "");
	std::shared_ptr<Chart> result = api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramName = utils->getInvalidTestValue("deleteChartSeries", "name", paramName);
	utils->initialize("deleteChartSeries", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteChartSeries", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteChartSeries", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteChartSeries", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteChartSeries", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramSeriesIndex = utils->getInvalidIntTestValue("deleteChartSeries", "seriesIndex", paramSeriesIndex).value();
	utils->initialize("deleteChartSeries", "seriesIndex", paramSeriesIndex);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "seriesIndex", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "seriesIndex", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramPassword = utils->getInvalidTestValue("deleteChartSeries", "password", paramPassword);
	utils->initialize("deleteChartSeries", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramFolder = utils->getInvalidTestValue("deleteChartSeries", "folder", paramFolder);
	utils->initialize("deleteChartSeries", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteChartSeriesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("deleteChartSeries", "seriesIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteChartSeries", "storage");
	paramStorage = utils->getInvalidTestValue("deleteChartSeries", "storage", paramStorage);
	utils->initialize("deleteChartSeries", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteChartSeries", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteChartSeries", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteChartSeries", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteComments) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage");
	utils->initialize("deleteComments", "");
	api->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
}

TEST_F(SlidesApiTest, deleteCommentsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage");
	paramName = utils->getInvalidTestValue("deleteComments", "name", paramName);
	utils->initialize("deleteComments", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteComments", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteComments", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteComments", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteComments", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteComments", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsInvalidAuthor) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage");
	paramAuthor = utils->getInvalidTestValue("deleteComments", "author", paramAuthor);
	utils->initialize("deleteComments", "author", paramAuthor);

	bool failed = true;
	try
	{
		api->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteComments", "author");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteComments", "author", paramAuthor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteComments", "author");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteComments", "author", paramAuthor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteComments", "author"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage");
	paramPassword = utils->getInvalidTestValue("deleteComments", "password", paramPassword);
	utils->initialize("deleteComments", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteComments", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteComments", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteComments", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteComments", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteComments", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage");
	paramFolder = utils->getInvalidTestValue("deleteComments", "folder", paramFolder);
	utils->initialize("deleteComments", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteComments", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteComments", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteComments", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteComments", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteComments", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteComments", "name");
	utility::string_t paramAuthor = utils->getTestValue("deleteComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteComments", "storage");
	paramStorage = utils->getInvalidTestValue("deleteComments", "storage", paramStorage);
	utils->initialize("deleteComments", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteComments", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteComments", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteComments", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteComments", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteComments", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteCommentsOnline", "document");
	utility::string_t paramAuthor = utils->getTestValue("deleteCommentsOnline", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteCommentsOnline", "password");
	utils->initialize("deleteCommentsOnline", "");
	HttpContent result = api->deleteCommentsOnline(paramDocument, paramAuthor, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, deleteCommentsOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteCommentsOnline", "document");
	utility::string_t paramAuthor = utils->getTestValue("deleteCommentsOnline", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteCommentsOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("deleteCommentsOnline", "document", paramDocument);
	utils->initialize("deleteCommentsOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->deleteCommentsOnline(paramDocument, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteCommentsOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsOnlineInvalidAuthor) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteCommentsOnline", "document");
	utility::string_t paramAuthor = utils->getTestValue("deleteCommentsOnline", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteCommentsOnline", "password");
	paramAuthor = utils->getInvalidTestValue("deleteCommentsOnline", "author", paramAuthor);
	utils->initialize("deleteCommentsOnline", "author", paramAuthor);

	bool failed = true;
	try
	{
		api->deleteCommentsOnline(paramDocument, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "author");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "author", paramAuthor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "author");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "author", paramAuthor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteCommentsOnline", "author"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteCommentsOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteCommentsOnline", "document");
	utility::string_t paramAuthor = utils->getTestValue("deleteCommentsOnline", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteCommentsOnline", "password");
	paramPassword = utils->getInvalidTestValue("deleteCommentsOnline", "password", paramPassword);
	utils->initialize("deleteCommentsOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteCommentsOnline(paramDocument, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteCommentsOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteCommentsOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteCommentsOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentProperties) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperties", "storage");
	utils->initialize("deleteDocumentProperties", "");
	std::shared_ptr<DocumentProperties> result = api->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteDocumentPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperties", "storage");
	paramName = utils->getInvalidTestValue("deleteDocumentProperties", "name", paramName);
	utils->initialize("deleteDocumentProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperties", "storage");
	paramPassword = utils->getInvalidTestValue("deleteDocumentProperties", "password", paramPassword);
	utils->initialize("deleteDocumentProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperties", "storage");
	paramFolder = utils->getInvalidTestValue("deleteDocumentProperties", "folder", paramFolder);
	utils->initialize("deleteDocumentProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperties", "storage");
	paramStorage = utils->getInvalidTestValue("deleteDocumentProperties", "storage", paramStorage);
	utils->initialize("deleteDocumentProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentProperty) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage");
	utils->initialize("deleteDocumentProperty", "");
	std::shared_ptr<DocumentProperties> result = api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteDocumentPropertyInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage");
	paramName = utils->getInvalidTestValue("deleteDocumentProperty", "name", paramName);
	utils->initialize("deleteDocumentProperty", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperty", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertyInvalidPropertyName) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage");
	paramPropertyName = utils->getInvalidTestValue("deleteDocumentProperty", "propertyName", paramPropertyName);
	utils->initialize("deleteDocumentProperty", "propertyName", paramPropertyName);

	bool failed = true;
	try
	{
		api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "propertyName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "propertyName", paramPropertyName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "propertyName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "propertyName", paramPropertyName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperty", "propertyName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertyInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage");
	paramPassword = utils->getInvalidTestValue("deleteDocumentProperty", "password", paramPassword);
	utils->initialize("deleteDocumentProperty", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperty", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertyInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage");
	paramFolder = utils->getInvalidTestValue("deleteDocumentProperty", "folder", paramFolder);
	utils->initialize("deleteDocumentProperty", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperty", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteDocumentPropertyInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("deleteDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("deleteDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteDocumentProperty", "storage");
	paramStorage = utils->getInvalidTestValue("deleteDocumentProperty", "storage", paramStorage);
	utils->initialize("deleteDocumentProperty", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteDocumentProperty", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteDocumentProperty", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteDocumentProperty", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFile) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId");
	utils->initialize("deleteFile", "");
	api->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
}

TEST_F(SlidesApiTest, deleteFileInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId");
	paramPath = utils->getInvalidTestValue("deleteFile", "path", paramPath);
	utils->initialize("deleteFile", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFileInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId");
	paramStorageName = utils->getInvalidTestValue("deleteFile", "storageName", paramStorageName);
	utils->initialize("deleteFile", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFileInvalidVersionId) {
	utility::string_t paramPath = utils->getTestValue("deleteFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("deleteFile", "versionId");
	paramVersionId = utils->getInvalidTestValue("deleteFile", "versionId", paramVersionId);
	utils->initialize("deleteFile", "versionId", paramVersionId);

	bool failed = true;
	try
	{
		api->deleteFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFile", "versionId", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFile", "versionId", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolder) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive");
	utils->initialize("deleteFolder", "");
	api->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
}

TEST_F(SlidesApiTest, deleteFolderInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive");
	paramPath = utils->getInvalidTestValue("deleteFolder", "path", paramPath);
	utils->initialize("deleteFolder", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolderInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive");
	paramStorageName = utils->getInvalidTestValue("deleteFolder", "storageName", paramStorageName);
	utils->initialize("deleteFolder", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteFolderInvalidRecursive) {
	utility::string_t paramPath = utils->getTestValue("deleteFolder", "path");
	utility::string_t paramStorageName = utils->getTestValue("deleteFolder", "storageName");
	auto paramRecursive = utils->getOptionalBoolTestValue("deleteFolder", "recursive");
	paramRecursive = utils->getInvalidBoolTestValue("deleteFolder", "recursive", paramRecursive).value();
	utils->initialize("deleteFolder", "recursive", paramRecursive);

	bool failed = true;
	try
	{
		api->deleteFolder(paramPath, paramStorageName, paramRecursive).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "recursive");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "recursive", paramRecursive);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteFolder", "recursive");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteFolder", "recursive", paramRecursive);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteFolder", "recursive"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlide) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	utils->initialize("deleteNotesSlide", "");
	std::shared_ptr<Slide> result = api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlide", "name", paramName);
	utils->initialize("deleteNotesSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlide", "password", paramPassword);
	utils->initialize("deleteNotesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlide", "folder", paramFolder);
	utils->initialize("deleteNotesSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlide", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlide", "storage", paramStorage);
	utils->initialize("deleteNotesSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraph) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	utils->initialize("deleteNotesSlideParagraph", "");
	std::shared_ptr<Paragraphs> result = api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlideParagraph", "name", paramName);
	utils->initialize("deleteNotesSlideParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlideParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlideParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteNotesSlideParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteNotesSlideParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteNotesSlideParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlideParagraph", "password", paramPassword);
	utils->initialize("deleteNotesSlideParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlideParagraph", "folder", paramFolder);
	utils->initialize("deleteNotesSlideParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlideParagraph", "storage", paramStorage);
	utils->initialize("deleteNotesSlideParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	utils->initialize("deleteNotesSlideParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlideParagraphs", "name", paramName);
	utils->initialize("deleteNotesSlideParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlideParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlideParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteNotesSlideParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteNotesSlideParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramParagraphs = utils->getInvalidIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs", paramParagraphs);
	utils->initialize("deleteNotesSlideParagraphs", "paragraphs", paramParagraphs);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "paragraphs");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "paragraphs", paramParagraphs);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "paragraphs");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "paragraphs", paramParagraphs);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "paragraphs"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlideParagraphs", "password", paramPassword);
	utils->initialize("deleteNotesSlideParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlideParagraphs", "folder", paramFolder);
	utils->initialize("deleteNotesSlideParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteNotesSlideParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlideParagraphs", "storage", paramStorage);
	utils->initialize("deleteNotesSlideParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortion) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	utils->initialize("deleteNotesSlidePortion", "");
	std::shared_ptr<Portions> result = api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlidePortion", "name", paramName);
	utils->initialize("deleteNotesSlidePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlidePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteNotesSlidePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteNotesSlidePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("deleteNotesSlidePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlidePortion", "password", paramPassword);
	utils->initialize("deleteNotesSlidePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlidePortion", "folder", paramFolder);
	utils->initialize("deleteNotesSlidePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortion", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlidePortion", "storage", paramStorage);
	utils->initialize("deleteNotesSlidePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortions) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	utils->initialize("deleteNotesSlidePortions", "");
	std::shared_ptr<Portions> result = api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlidePortions", "name", paramName);
	utils->initialize("deleteNotesSlidePortions", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlidePortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteNotesSlidePortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteNotesSlidePortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteNotesSlidePortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidPortions) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramPortions = utils->getInvalidIntVectorTestValue("deleteNotesSlidePortions", "portions", paramPortions);
	utils->initialize("deleteNotesSlidePortions", "portions", paramPortions);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "portions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "portions", paramPortions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "portions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "portions", paramPortions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "portions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlidePortions", "password", paramPassword);
	utils->initialize("deleteNotesSlidePortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlidePortions", "folder", paramFolder);
	utils->initialize("deleteNotesSlidePortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlidePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteNotesSlidePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteNotesSlidePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlidePortions", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlidePortions", "storage", paramStorage);
	utils->initialize("deleteNotesSlidePortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlidePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlidePortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlidePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShape) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	utils->initialize("deleteNotesSlideShape", "");
	std::shared_ptr<Shapes> result = api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlideShape", "name", paramName);
	utils->initialize("deleteNotesSlideShape", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlideShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlideShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteNotesSlideShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteNotesSlideShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlideShape", "password", paramPassword);
	utils->initialize("deleteNotesSlideShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlideShape", "folder", paramFolder);
	utils->initialize("deleteNotesSlideShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShape", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlideShape", "storage", paramStorage);
	utils->initialize("deleteNotesSlideShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapes) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	utils->initialize("deleteNotesSlideShapes", "");
	std::shared_ptr<Shapes> result = api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramName = utils->getInvalidTestValue("deleteNotesSlideShapes", "name", paramName);
	utils->initialize("deleteNotesSlideShapes", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteNotesSlideShapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteNotesSlideShapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramShapes = utils->getInvalidIntVectorTestValue("deleteNotesSlideShapes", "shapes", paramShapes);
	utils->initialize("deleteNotesSlideShapes", "shapes", paramShapes);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "shapes");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "shapes", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "shapes");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "shapes", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "shapes"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramPassword = utils->getInvalidTestValue("deleteNotesSlideShapes", "password", paramPassword);
	utils->initialize("deleteNotesSlideShapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramFolder = utils->getInvalidTestValue("deleteNotesSlideShapes", "folder", paramFolder);
	utils->initialize("deleteNotesSlideShapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteNotesSlideShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteNotesSlideShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteNotesSlideShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteNotesSlideShapes", "storage");
	paramStorage = utils->getInvalidTestValue("deleteNotesSlideShapes", "storage", paramStorage);
	utils->initialize("deleteNotesSlideShapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteNotesSlideShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteNotesSlideShapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteNotesSlideShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraph) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	utils->initialize("deleteParagraph", "");
	std::shared_ptr<Paragraphs> result = api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramName = utils->getInvalidTestValue("deleteParagraph", "name", paramName);
	utils->initialize("deleteParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("deleteParagraph", "password", paramPassword);
	utils->initialize("deleteParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("deleteParagraph", "folder", paramFolder);
	utils->initialize("deleteParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("deleteParagraph", "storage", paramStorage);
	utils->initialize("deleteParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	utils->initialize("deleteParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramName = utils->getInvalidTestValue("deleteParagraphs", "name", paramName);
	utils->initialize("deleteParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramParagraphs = utils->getInvalidIntVectorTestValue("deleteParagraphs", "paragraphs", paramParagraphs);
	utils->initialize("deleteParagraphs", "paragraphs", paramParagraphs);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "paragraphs");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "paragraphs", paramParagraphs);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "paragraphs");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "paragraphs", paramParagraphs);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "paragraphs"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("deleteParagraphs", "password", paramPassword);
	utils->initialize("deleteParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("deleteParagraphs", "folder", paramFolder);
	utils->initialize("deleteParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("deleteParagraphs", "storage", paramStorage);
	utils->initialize("deleteParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortion) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	utils->initialize("deletePortion", "");
	std::shared_ptr<Portions> result = api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deletePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramName = utils->getInvalidTestValue("deletePortion", "name", paramName);
	utils->initialize("deletePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deletePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("deletePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deletePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deletePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deletePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deletePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("deletePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("deletePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramPassword = utils->getInvalidTestValue("deletePortion", "password", paramPassword);
	utils->initialize("deletePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramFolder = utils->getInvalidTestValue("deletePortion", "folder", paramFolder);
	utils->initialize("deletePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deletePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deletePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deletePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortion", "storage");
	paramStorage = utils->getInvalidTestValue("deletePortion", "storage", paramStorage);
	utils->initialize("deletePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortions) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	utils->initialize("deletePortions", "");
	std::shared_ptr<Portions> result = api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deletePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramName = utils->getInvalidTestValue("deletePortions", "name", paramName);
	utils->initialize("deletePortions", "name", paramName);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deletePortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("deletePortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deletePortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deletePortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deletePortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deletePortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidPortions) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramPortions = utils->getInvalidIntVectorTestValue("deletePortions", "portions", paramPortions);
	utils->initialize("deletePortions", "portions", paramPortions);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "portions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "portions", paramPortions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "portions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "portions", paramPortions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "portions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramPassword = utils->getInvalidTestValue("deletePortions", "password", paramPassword);
	utils->initialize("deletePortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramFolder = utils->getInvalidTestValue("deletePortions", "folder", paramFolder);
	utils->initialize("deletePortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deletePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deletePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deletePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deletePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deletePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deletePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deletePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deletePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deletePortions", "storage");
	paramStorage = utils->getInvalidTestValue("deletePortions", "storage", paramStorage);
	utils->initialize("deletePortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deletePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deletePortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deletePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deletePortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deletePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtection) {
	utility::string_t paramName = utils->getTestValue("deleteProtection", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteProtection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteProtection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteProtection", "storage");
	utils->initialize("deleteProtection", "");
	std::shared_ptr<ProtectionProperties> result = api->deleteProtection(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteProtectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteProtection", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteProtection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteProtection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteProtection", "storage");
	paramName = utils->getInvalidTestValue("deleteProtection", "name", paramName);
	utils->initialize("deleteProtection", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteProtection(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteProtection", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteProtection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteProtection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteProtection", "storage");
	paramPassword = utils->getInvalidTestValue("deleteProtection", "password", paramPassword);
	utils->initialize("deleteProtection", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteProtection(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteProtection", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteProtection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteProtection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteProtection", "storage");
	paramFolder = utils->getInvalidTestValue("deleteProtection", "folder", paramFolder);
	utils->initialize("deleteProtection", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteProtection(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteProtection", "name");
	utility::string_t paramPassword = utils->getTestValue("deleteProtection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteProtection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteProtection", "storage");
	paramStorage = utils->getInvalidTestValue("deleteProtection", "storage", paramStorage);
	utils->initialize("deleteProtection", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteProtection(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtection", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtectionOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteProtectionOnline", "document");
	utility::string_t paramPassword = utils->getTestValue("deleteProtectionOnline", "password");
	utils->initialize("deleteProtectionOnline", "");
	HttpContent result = api->deleteProtectionOnline(paramDocument, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, deleteProtectionOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteProtectionOnline", "document");
	utility::string_t paramPassword = utils->getTestValue("deleteProtectionOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("deleteProtectionOnline", "document", paramDocument);
	utils->initialize("deleteProtectionOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->deleteProtectionOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtectionOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtectionOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtectionOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtectionOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtectionOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteProtectionOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteProtectionOnline", "document");
	utility::string_t paramPassword = utils->getTestValue("deleteProtectionOnline", "password");
	paramPassword = utils->getInvalidTestValue("deleteProtectionOnline", "password", paramPassword);
	utils->initialize("deleteProtectionOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteProtectionOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteProtectionOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteProtectionOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteProtectionOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteProtectionOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteProtectionOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSection) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	utils->initialize("deleteSection", "");
	std::shared_ptr<Sections> result = api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramName = utils->getInvalidTestValue("deleteSection", "name", paramName);
	utils->initialize("deleteSection", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidSectionIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramSectionIndex = utils->getInvalidIntTestValue("deleteSection", "sectionIndex", paramSectionIndex).value();
	utils->initialize("deleteSection", "sectionIndex", paramSectionIndex);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "sectionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "sectionIndex", paramSectionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "sectionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "sectionIndex", paramSectionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "sectionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidWithSlides) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramWithSlides = utils->getInvalidBoolTestValue("deleteSection", "withSlides", paramWithSlides).value();
	utils->initialize("deleteSection", "withSlides", paramWithSlides);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "withSlides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "withSlides", paramWithSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "withSlides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "withSlides", paramWithSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "withSlides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSection", "password", paramPassword);
	utils->initialize("deleteSection", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSection", "folder", paramFolder);
	utils->initialize("deleteSection", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("deleteSection", "sectionIndex");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSection", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSection", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSection", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSection", "storage", paramStorage);
	utils->initialize("deleteSection", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSection", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSection", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSections) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	utils->initialize("deleteSections", "");
	std::shared_ptr<Sections> result = api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSectionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramName = utils->getInvalidTestValue("deleteSections", "name", paramName);
	utils->initialize("deleteSections", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidSections) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramSections = utils->getInvalidIntVectorTestValue("deleteSections", "sections", paramSections);
	utils->initialize("deleteSections", "sections", paramSections);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "sections");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "sections", paramSections);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "sections");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "sections", paramSections);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "sections"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidWithSlides) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramWithSlides = utils->getInvalidBoolTestValue("deleteSections", "withSlides", paramWithSlides).value();
	utils->initialize("deleteSections", "withSlides", paramWithSlides);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "withSlides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "withSlides", paramWithSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "withSlides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "withSlides", paramWithSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "withSlides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSections", "password", paramPassword);
	utils->initialize("deleteSections", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSections", "folder", paramFolder);
	utils->initialize("deleteSections", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSectionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSections", "name");
	std::vector<int32_t> paramSections = utils->getIntVectorTestValue("deleteSections", "sections");
	auto paramWithSlides = utils->getOptionalBoolTestValue("deleteSections", "withSlides");
	utility::string_t paramPassword = utils->getTestValue("deleteSections", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSections", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSections", "storage", paramStorage);
	utils->initialize("deleteSections", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSections", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSections", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSections", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSections", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSections", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShape) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage");
	utils->initialize("deleteShape", "");
	std::shared_ptr<Shapes> result = api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage");
	paramName = utils->getInvalidTestValue("deleteShape", "name", paramName);
	utils->initialize("deleteShape", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage");
	paramPassword = utils->getInvalidTestValue("deleteShape", "password", paramPassword);
	utils->initialize("deleteShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage");
	paramFolder = utils->getInvalidTestValue("deleteShape", "folder", paramFolder);
	utils->initialize("deleteShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteShape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShape", "storage");
	paramStorage = utils->getInvalidTestValue("deleteShape", "storage", paramStorage);
	utils->initialize("deleteShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapes) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage");
	utils->initialize("deleteShapes", "");
	std::shared_ptr<Shapes> result = api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage");
	paramName = utils->getInvalidTestValue("deleteShapes", "name", paramName);
	utils->initialize("deleteShapes", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteShapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteShapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage");
	paramShapes = utils->getInvalidIntVectorTestValue("deleteShapes", "shapes", paramShapes);
	utils->initialize("deleteShapes", "shapes", paramShapes);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "shapes");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "shapes", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "shapes");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "shapes", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "shapes"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage");
	paramPassword = utils->getInvalidTestValue("deleteShapes", "password", paramPassword);
	utils->initialize("deleteShapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage");
	paramFolder = utils->getInvalidTestValue("deleteShapes", "folder", paramFolder);
	utils->initialize("deleteShapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteShapes", "slideIndex");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteShapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteShapes", "storage");
	paramStorage = utils->getInvalidTestValue("deleteShapes", "storage", paramStorage);
	utils->initialize("deleteShapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteShapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlide) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage");
	utils->initialize("deleteSlide", "");
	std::shared_ptr<Slides> result = api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage");
	paramName = utils->getInvalidTestValue("deleteSlide", "name", paramName);
	utils->initialize("deleteSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlide", "password", paramPassword);
	utils->initialize("deleteSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlide", "folder", paramFolder);
	utils->initialize("deleteSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlide", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlide", "storage", paramStorage);
	utils->initialize("deleteSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideComments) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage");
	utils->initialize("deleteSlideComments", "");
	std::shared_ptr<SlideComments> result = api->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage");
	paramName = utils->getInvalidTestValue("deleteSlideComments", "name", paramName);
	utils->initialize("deleteSlideComments", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideComments", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideComments", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidAuthor) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage");
	paramAuthor = utils->getInvalidTestValue("deleteSlideComments", "author", paramAuthor);
	utils->initialize("deleteSlideComments", "author", paramAuthor);

	bool failed = true;
	try
	{
		api->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "author");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "author", paramAuthor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "author");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "author", paramAuthor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "author"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlideComments", "password", paramPassword);
	utils->initialize("deleteSlideComments", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlideComments", "folder", paramFolder);
	utils->initialize("deleteSlideComments", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideComments", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideComments", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlideComments", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlideComments", "storage", paramStorage);
	utils->initialize("deleteSlideComments", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideComments", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideComments", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideComments", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteSlideCommentsOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideCommentsOnline", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideCommentsOnline", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideCommentsOnline", "password");
	utils->initialize("deleteSlideCommentsOnline", "");
	HttpContent result = api->deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, deleteSlideCommentsOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteSlideCommentsOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideCommentsOnline", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideCommentsOnline", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideCommentsOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("deleteSlideCommentsOnline", "document", paramDocument);
	utils->initialize("deleteSlideCommentsOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideCommentsOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteSlideCommentsOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideCommentsOnline", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideCommentsOnline", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideCommentsOnline", "password");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSlideCommentsOnline", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSlideCommentsOnline", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideCommentsOnline", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsOnlineInvalidAuthor) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteSlideCommentsOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideCommentsOnline", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideCommentsOnline", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideCommentsOnline", "password");
	paramAuthor = utils->getInvalidTestValue("deleteSlideCommentsOnline", "author", paramAuthor);
	utils->initialize("deleteSlideCommentsOnline", "author", paramAuthor);

	bool failed = true;
	try
	{
		api->deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "author");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "author", paramAuthor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "author");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "author", paramAuthor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideCommentsOnline", "author"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlideCommentsOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteSlideCommentsOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSlideCommentsOnline", "slideIndex");
	utility::string_t paramAuthor = utils->getTestValue("deleteSlideCommentsOnline", "author");
	utility::string_t paramPassword = utils->getTestValue("deleteSlideCommentsOnline", "password");
	paramPassword = utils->getInvalidTestValue("deleteSlideCommentsOnline", "password", paramPassword);
	utils->initialize("deleteSlideCommentsOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlideCommentsOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlideCommentsOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlideCommentsOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlides) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage");
	utils->initialize("deleteSlides", "");
	std::shared_ptr<Slides> result = api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage");
	paramName = utils->getInvalidTestValue("deleteSlides", "name", paramName);
	utils->initialize("deleteSlides", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlides", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesInvalidSlides) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage");
	paramSlides = utils->getInvalidIntVectorTestValue("deleteSlides", "slides", paramSlides);
	utils->initialize("deleteSlides", "slides", paramSlides);

	bool failed = true;
	try
	{
		api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "slides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "slides", paramSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "slides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "slides", paramSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlides", "slides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSlides", "password", paramPassword);
	utils->initialize("deleteSlides", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlides", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSlides", "folder", paramFolder);
	utils->initialize("deleteSlides", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlides", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSlides", "name");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("deleteSlides", "slides");
	utility::string_t paramPassword = utils->getTestValue("deleteSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSlides", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSlides", "storage", paramStorage);
	utils->initialize("deleteSlides", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSlides", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSlides", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSlides", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshape) {
	utility::string_t paramName = utils->getTestValue("deleteSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshape", "storage");
	utils->initialize("deleteSubshape", "");
	std::shared_ptr<Shapes> result = api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshape", "storage");
	paramName = utils->getInvalidTestValue("deleteSubshape", "name", paramName);
	utils->initialize("deleteSubshape", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSubshape", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSubshape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshape", "storage");
	paramPath = utils->getInvalidTestValue("deleteSubshape", "path", paramPath);
	utils->initialize("deleteSubshape", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSubshape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteSubshape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshape", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSubshape", "password", paramPassword);
	utils->initialize("deleteSubshape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshape", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSubshape", "folder", paramFolder);
	utils->initialize("deleteSubshape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshape", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSubshape", "storage", paramStorage);
	utils->initialize("deleteSubshape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraph) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	utils->initialize("deleteSubshapeParagraph", "");
	std::shared_ptr<Paragraphs> result = api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramName = utils->getInvalidTestValue("deleteSubshapeParagraph", "name", paramName);
	utils->initialize("deleteSubshapeParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSubshapeParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSubshapeParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramPath = utils->getInvalidTestValue("deleteSubshapeParagraph", "path", paramPath);
	utils->initialize("deleteSubshapeParagraph", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSubshapeParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteSubshapeParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteSubshapeParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteSubshapeParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSubshapeParagraph", "password", paramPassword);
	utils->initialize("deleteSubshapeParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSubshapeParagraph", "folder", paramFolder);
	utils->initialize("deleteSubshapeParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSubshapeParagraph", "storage", paramStorage);
	utils->initialize("deleteSubshapeParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	utils->initialize("deleteSubshapeParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramName = utils->getInvalidTestValue("deleteSubshapeParagraphs", "name", paramName);
	utils->initialize("deleteSubshapeParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSubshapeParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSubshapeParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramPath = utils->getInvalidTestValue("deleteSubshapeParagraphs", "path", paramPath);
	utils->initialize("deleteSubshapeParagraphs", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSubshapeParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteSubshapeParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidParagraphs) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramParagraphs = utils->getInvalidIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs", paramParagraphs);
	utils->initialize("deleteSubshapeParagraphs", "paragraphs", paramParagraphs);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "paragraphs");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "paragraphs", paramParagraphs);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "paragraphs");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "paragraphs", paramParagraphs);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "paragraphs"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSubshapeParagraphs", "password", paramPassword);
	utils->initialize("deleteSubshapeParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSubshapeParagraphs", "folder", paramFolder);
	utils->initialize("deleteSubshapeParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapeParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapeParagraphs", "shapeIndex");
	std::vector<int32_t> paramParagraphs = utils->getIntVectorTestValue("deleteSubshapeParagraphs", "paragraphs");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapeParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSubshapeParagraphs", "storage", paramStorage);
	utils->initialize("deleteSubshapeParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapeParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapeParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapeParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortion) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	utils->initialize("deleteSubshapePortion", "");
	std::shared_ptr<Portions> result = api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramName = utils->getInvalidTestValue("deleteSubshapePortion", "name", paramName);
	utils->initialize("deleteSubshapePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSubshapePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSubshapePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramPath = utils->getInvalidTestValue("deleteSubshapePortion", "path", paramPath);
	utils->initialize("deleteSubshapePortion", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSubshapePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteSubshapePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteSubshapePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteSubshapePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("deleteSubshapePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("deleteSubshapePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSubshapePortion", "password", paramPassword);
	utils->initialize("deleteSubshapePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSubshapePortion", "folder", paramFolder);
	utils->initialize("deleteSubshapePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("deleteSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortion", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSubshapePortion", "storage", paramStorage);
	utils->initialize("deleteSubshapePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortions) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	utils->initialize("deleteSubshapePortions", "");
	std::shared_ptr<Portions> result = api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramName = utils->getInvalidTestValue("deleteSubshapePortions", "name", paramName);
	utils->initialize("deleteSubshapePortions", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSubshapePortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSubshapePortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramPath = utils->getInvalidTestValue("deleteSubshapePortions", "path", paramPath);
	utils->initialize("deleteSubshapePortions", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("deleteSubshapePortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("deleteSubshapePortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("deleteSubshapePortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("deleteSubshapePortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidPortions) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramPortions = utils->getInvalidIntVectorTestValue("deleteSubshapePortions", "portions", paramPortions);
	utils->initialize("deleteSubshapePortions", "portions", paramPortions);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "portions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "portions", paramPortions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "portions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "portions", paramPortions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "portions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSubshapePortions", "password", paramPassword);
	utils->initialize("deleteSubshapePortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSubshapePortions", "folder", paramFolder);
	utils->initialize("deleteSubshapePortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("deleteSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("deleteSubshapePortions", "paragraphIndex");
	std::vector<int32_t> paramPortions = utils->getIntVectorTestValue("deleteSubshapePortions", "portions");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapePortions", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSubshapePortions", "storage", paramStorage);
	utils->initialize("deleteSubshapePortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapePortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapes) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapes", "storage");
	utils->initialize("deleteSubshapes", "");
	std::shared_ptr<Shapes> result = api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, deleteSubshapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapes", "storage");
	paramName = utils->getInvalidTestValue("deleteSubshapes", "name", paramName);
	utils->initialize("deleteSubshapes", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("deleteSubshapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("deleteSubshapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapesInvalidPath) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapes", "storage");
	paramPath = utils->getInvalidTestValue("deleteSubshapes", "path", paramPath);
	utils->initialize("deleteSubshapes", "path", paramPath);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapes", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapesInvalidShapes) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapes", "storage");
	paramShapes = utils->getInvalidIntVectorTestValue("deleteSubshapes", "shapes", paramShapes);
	utils->initialize("deleteSubshapes", "shapes", paramShapes);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "shapes");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "shapes", paramShapes);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "shapes");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "shapes", paramShapes);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapes", "shapes"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapes", "storage");
	paramPassword = utils->getInvalidTestValue("deleteSubshapes", "password", paramPassword);
	utils->initialize("deleteSubshapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapes", "storage");
	paramFolder = utils->getInvalidTestValue("deleteSubshapes", "folder", paramFolder);
	utils->initialize("deleteSubshapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteSubshapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("deleteSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("deleteSubshapes", "path");
	std::vector<int32_t> paramShapes = utils->getIntVectorTestValue("deleteSubshapes", "shapes");
	utility::string_t paramPassword = utils->getTestValue("deleteSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteSubshapes", "storage");
	paramStorage = utils->getInvalidTestValue("deleteSubshapes", "storage", paramStorage);
	utils->initialize("deleteSubshapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteSubshapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteSubshapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteSubshapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermark) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage");
	utils->initialize("deleteWatermark", "");
	api->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
}

TEST_F(SlidesApiTest, deleteWatermarkInvalidName) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage");
	paramName = utils->getInvalidTestValue("deleteWatermark", "name", paramName);
	utils->initialize("deleteWatermark", "name", paramName);

	bool failed = true;
	try
	{
		api->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermark", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkInvalidShapeName) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage");
	paramShapeName = utils->getInvalidTestValue("deleteWatermark", "shapeName", paramShapeName);
	utils->initialize("deleteWatermark", "shapeName", paramShapeName);

	bool failed = true;
	try
	{
		api->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "shapeName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "shapeName", paramShapeName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "shapeName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "shapeName", paramShapeName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermark", "shapeName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage");
	paramPassword = utils->getInvalidTestValue("deleteWatermark", "password", paramPassword);
	utils->initialize("deleteWatermark", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermark", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage");
	paramFolder = utils->getInvalidTestValue("deleteWatermark", "folder", paramFolder);
	utils->initialize("deleteWatermark", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermark", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("deleteWatermark", "name");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermark", "shapeName");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermark", "password");
	utility::string_t paramFolder = utils->getTestValue("deleteWatermark", "folder");
	utility::string_t paramStorage = utils->getTestValue("deleteWatermark", "storage");
	paramStorage = utils->getInvalidTestValue("deleteWatermark", "storage", paramStorage);
	utils->initialize("deleteWatermark", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermark", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermark", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermark", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteWatermarkOnline", "document");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermarkOnline", "shapeName");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermarkOnline", "password");
	utils->initialize("deleteWatermarkOnline", "");
	HttpContent result = api->deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, deleteWatermarkOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteWatermarkOnline", "document");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermarkOnline", "shapeName");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermarkOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("deleteWatermarkOnline", "document", paramDocument);
	utils->initialize("deleteWatermarkOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermarkOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkOnlineInvalidShapeName) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteWatermarkOnline", "document");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermarkOnline", "shapeName");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermarkOnline", "password");
	paramShapeName = utils->getInvalidTestValue("deleteWatermarkOnline", "shapeName", paramShapeName);
	utils->initialize("deleteWatermarkOnline", "shapeName", paramShapeName);

	bool failed = true;
	try
	{
		api->deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "shapeName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "shapeName", paramShapeName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "shapeName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "shapeName", paramShapeName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermarkOnline", "shapeName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, deleteWatermarkOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("deleteWatermarkOnline", "document");
	utility::string_t paramShapeName = utils->getTestValue("deleteWatermarkOnline", "shapeName");
	utility::string_t paramPassword = utils->getTestValue("deleteWatermarkOnline", "password");
	paramPassword = utils->getInvalidTestValue("deleteWatermarkOnline", "password", paramPassword);
	utils->initialize("deleteWatermarkOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("deleteWatermarkOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("deleteWatermarkOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("deleteWatermarkOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFile) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId");
	utils->initialize("downloadFile", "");
	HttpContent result = api->downloadFile(paramPath, paramStorageName, paramVersionId).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadFileInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId");
	paramPath = utils->getInvalidTestValue("downloadFile", "path", paramPath);
	utils->initialize("downloadFile", "path", paramPath);

	bool failed = true;
	try
	{
		api->downloadFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFileInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId");
	paramStorageName = utils->getInvalidTestValue("downloadFile", "storageName", paramStorageName);
	utils->initialize("downloadFile", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->downloadFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadFileInvalidVersionId) {
	utility::string_t paramPath = utils->getTestValue("downloadFile", "path");
	utility::string_t paramStorageName = utils->getTestValue("downloadFile", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("downloadFile", "versionId");
	paramVersionId = utils->getInvalidTestValue("downloadFile", "versionId", paramVersionId);
	utils->initialize("downloadFile", "versionId", paramVersionId);

	bool failed = true;
	try
	{
		api->downloadFile(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadFile", "versionId", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadFile", "versionId", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImage) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage");
	utils->initialize("downloadImage", "");
	HttpContent result = api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImageInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage");
	paramName = utils->getInvalidTestValue("downloadImage", "name", paramName);
	utils->initialize("downloadImage", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageInvalidIndex) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage");
	paramIndex = utils->getInvalidIntTestValue("downloadImage", "index", paramIndex).value();
	utils->initialize("downloadImage", "index", paramIndex);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "index");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "index", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "index");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "index", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "index"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage");
	paramFormat = utils->getInvalidTestValue("downloadImage", "format", paramFormat);
	utils->initialize("downloadImage", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage");
	paramPassword = utils->getInvalidTestValue("downloadImage", "password", paramPassword);
	utils->initialize("downloadImage", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage");
	paramFolder = utils->getInvalidTestValue("downloadImage", "folder", paramFolder);
	utils->initialize("downloadImage", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadImage", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImage", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImage", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImage", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImage", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImage", "storage");
	paramStorage = utils->getInvalidTestValue("downloadImage", "storage", paramStorage);
	utils->initialize("downloadImage", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImage", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImage", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImage", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImage", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImage", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormat) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage");
	utils->initialize("downloadImageDefaultFormat", "");
	HttpContent result = api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage");
	paramName = utils->getInvalidTestValue("downloadImageDefaultFormat", "name", paramName);
	utils->initialize("downloadImageDefaultFormat", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormat", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatInvalidIndex) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage");
	paramIndex = utils->getInvalidIntTestValue("downloadImageDefaultFormat", "index", paramIndex).value();
	utils->initialize("downloadImageDefaultFormat", "index", paramIndex);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "index");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "index", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "index");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "index", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormat", "index"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage");
	paramPassword = utils->getInvalidTestValue("downloadImageDefaultFormat", "password", paramPassword);
	utils->initialize("downloadImageDefaultFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage");
	paramFolder = utils->getInvalidTestValue("downloadImageDefaultFormat", "folder", paramFolder);
	utils->initialize("downloadImageDefaultFormat", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormat", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadImageDefaultFormat", "name");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormat", "index");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImageDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImageDefaultFormat", "storage");
	paramStorage = utils->getInvalidTestValue("downloadImageDefaultFormat", "storage", paramStorage);
	utils->initialize("downloadImageDefaultFormat", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormat", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormat", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormat", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageDefaultFormatOnline", "document");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormatOnline", "index");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormatOnline", "password");
	utils->initialize("downloadImageDefaultFormatOnline", "");
	HttpContent result = api->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageDefaultFormatOnline", "document");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormatOnline", "index");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormatOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("downloadImageDefaultFormatOnline", "document", paramDocument);
	utils->initialize("downloadImageDefaultFormatOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormatOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatOnlineInvalidIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageDefaultFormatOnline", "document");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormatOnline", "index");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormatOnline", "password");
	paramIndex = utils->getInvalidIntTestValue("downloadImageDefaultFormatOnline", "index", paramIndex).value();
	utils->initialize("downloadImageDefaultFormatOnline", "index", paramIndex);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "index");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "index", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "index");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "index", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormatOnline", "index"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageDefaultFormatOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageDefaultFormatOnline", "document");
	int32_t paramIndex = utils->getIntTestValue("downloadImageDefaultFormatOnline", "index");
	utility::string_t paramPassword = utils->getTestValue("downloadImageDefaultFormatOnline", "password");
	paramPassword = utils->getInvalidTestValue("downloadImageDefaultFormatOnline", "password", paramPassword);
	utils->initialize("downloadImageDefaultFormatOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageDefaultFormatOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageDefaultFormatOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageDefaultFormatOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageOnline", "document");
	int32_t paramIndex = utils->getIntTestValue("downloadImageOnline", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImageOnline", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImageOnline", "password");
	utils->initialize("downloadImageOnline", "");
	HttpContent result = api->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImageOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageOnline", "document");
	int32_t paramIndex = utils->getIntTestValue("downloadImageOnline", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImageOnline", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImageOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("downloadImageOnline", "document", paramDocument);
	utils->initialize("downloadImageOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageOnlineInvalidIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageOnline", "document");
	int32_t paramIndex = utils->getIntTestValue("downloadImageOnline", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImageOnline", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImageOnline", "password");
	paramIndex = utils->getInvalidIntTestValue("downloadImageOnline", "index", paramIndex).value();
	utils->initialize("downloadImageOnline", "index", paramIndex);

	bool failed = true;
	try
	{
		api->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "index");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "index", paramIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "index");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "index", paramIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageOnline", "index"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageOnline", "document");
	int32_t paramIndex = utils->getIntTestValue("downloadImageOnline", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImageOnline", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImageOnline", "password");
	paramFormat = utils->getInvalidTestValue("downloadImageOnline", "format", paramFormat);
	utils->initialize("downloadImageOnline", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageOnline", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImageOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImageOnline", "document");
	int32_t paramIndex = utils->getIntTestValue("downloadImageOnline", "index");
	utility::string_t paramFormat = utils->getTestValue("downloadImageOnline", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImageOnline", "password");
	paramPassword = utils->getInvalidTestValue("downloadImageOnline", "password", paramPassword);
	utils->initialize("downloadImageOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImageOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImageOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImageOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImages) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage");
	utils->initialize("downloadImages", "");
	HttpContent result = api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImagesInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage");
	paramName = utils->getInvalidTestValue("downloadImages", "name", paramName);
	utils->initialize("downloadImages", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImages", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImages", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImages", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImages", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImages", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage");
	paramFormat = utils->getInvalidTestValue("downloadImages", "format", paramFormat);
	utils->initialize("downloadImages", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImages", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImages", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImages", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImages", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImages", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage");
	paramPassword = utils->getInvalidTestValue("downloadImages", "password", paramPassword);
	utils->initialize("downloadImages", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImages", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImages", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImages", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImages", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImages", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage");
	paramFolder = utils->getInvalidTestValue("downloadImages", "folder", paramFolder);
	utils->initialize("downloadImages", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImages", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImages", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImages", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImages", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImages", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadImages", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadImages", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImages", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImages", "storage");
	paramStorage = utils->getInvalidTestValue("downloadImages", "storage", paramStorage);
	utils->initialize("downloadImages", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImages", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImages", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImages", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImages", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImages", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormat) {
	utility::string_t paramName = utils->getTestValue("downloadImagesDefaultFormat", "name");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImagesDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImagesDefaultFormat", "storage");
	utils->initialize("downloadImagesDefaultFormat", "");
	HttpContent result = api->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadImagesDefaultFormat", "name");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImagesDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImagesDefaultFormat", "storage");
	paramName = utils->getInvalidTestValue("downloadImagesDefaultFormat", "name", paramName);
	utils->initialize("downloadImagesDefaultFormat", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormat", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadImagesDefaultFormat", "name");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImagesDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImagesDefaultFormat", "storage");
	paramPassword = utils->getInvalidTestValue("downloadImagesDefaultFormat", "password", paramPassword);
	utils->initialize("downloadImagesDefaultFormat", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormat", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadImagesDefaultFormat", "name");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImagesDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImagesDefaultFormat", "storage");
	paramFolder = utils->getInvalidTestValue("downloadImagesDefaultFormat", "folder", paramFolder);
	utils->initialize("downloadImagesDefaultFormat", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormat", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadImagesDefaultFormat", "name");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormat", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadImagesDefaultFormat", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadImagesDefaultFormat", "storage");
	paramStorage = utils->getInvalidTestValue("downloadImagesDefaultFormat", "storage", paramStorage);
	utils->initialize("downloadImagesDefaultFormat", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormat", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormat", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormat", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesDefaultFormatOnline", "document");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormatOnline", "password");
	utils->initialize("downloadImagesDefaultFormatOnline", "");
	HttpContent result = api->downloadImagesDefaultFormatOnline(paramDocument, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesDefaultFormatOnline", "document");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormatOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("downloadImagesDefaultFormatOnline", "document", paramDocument);
	utils->initialize("downloadImagesDefaultFormatOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormatOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormatOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormatOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormatOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormatOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormatOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesDefaultFormatOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesDefaultFormatOnline", "document");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesDefaultFormatOnline", "password");
	paramPassword = utils->getInvalidTestValue("downloadImagesDefaultFormatOnline", "password", paramPassword);
	utils->initialize("downloadImagesDefaultFormatOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImagesDefaultFormatOnline(paramDocument, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormatOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormatOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesDefaultFormatOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesDefaultFormatOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesDefaultFormatOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("downloadImagesOnline", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesOnline", "password");
	utils->initialize("downloadImagesOnline", "");
	HttpContent result = api->downloadImagesOnline(paramDocument, paramFormat, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadImagesOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("downloadImagesOnline", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("downloadImagesOnline", "document", paramDocument);
	utils->initialize("downloadImagesOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadImagesOnline(paramDocument, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("downloadImagesOnline", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesOnline", "password");
	paramFormat = utils->getInvalidTestValue("downloadImagesOnline", "format", paramFormat);
	utils->initialize("downloadImagesOnline", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadImagesOnline(paramDocument, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesOnline", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadImagesOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadImagesOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("downloadImagesOnline", "format");
	utility::string_t paramPassword = utils->getTestValue("downloadImagesOnline", "password");
	paramPassword = utils->getInvalidTestValue("downloadImagesOnline", "password", paramPassword);
	utils->initialize("downloadImagesOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadImagesOnline(paramDocument, paramFormat, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadImagesOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadImagesOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadImagesOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlide) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder");
	utils->initialize("downloadNotesSlide", "");
	HttpContent result = api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder");
	paramName = utils->getInvalidTestValue("downloadNotesSlide", "name", paramName);
	utils->initialize("downloadNotesSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadNotesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("downloadNotesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("downloadNotesSlide", "format", paramFormat);
	utils->initialize("downloadNotesSlide", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("downloadNotesSlide", "width", paramWidth).value();
	utils->initialize("downloadNotesSlide", "width", paramWidth);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("downloadNotesSlide", "height", paramHeight).value();
	utils->initialize("downloadNotesSlide", "height", paramHeight);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("downloadNotesSlide", "password", paramPassword);
	utils->initialize("downloadNotesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("downloadNotesSlide", "folder", paramFolder);
	utils->initialize("downloadNotesSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("downloadNotesSlide", "storage", paramStorage);
	utils->initialize("downloadNotesSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlide", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlide", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("downloadNotesSlide", "fontsFolder", paramFontsFolder);
	utils->initialize("downloadNotesSlide", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlide", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlide", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlide", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder");
	utils->initialize("downloadNotesSlideOnline", "");
	HttpContent result = api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("downloadNotesSlideOnline", "document", paramDocument);
	utils->initialize("downloadNotesSlideOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadNotesSlideOnline", "slideIndex", paramSlideIndex).value();
	utils->initialize("downloadNotesSlideOnline", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("downloadNotesSlideOnline", "format", paramFormat);
	utils->initialize("downloadNotesSlideOnline", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("downloadNotesSlideOnline", "width", paramWidth).value();
	utils->initialize("downloadNotesSlideOnline", "width", paramWidth);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("downloadNotesSlideOnline", "height", paramHeight).value();
	utils->initialize("downloadNotesSlideOnline", "height", paramHeight);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("downloadNotesSlideOnline", "password", paramPassword);
	utils->initialize("downloadNotesSlideOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadNotesSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideOnline", "password");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideOnline", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("downloadNotesSlideOnline", "fontsFolder", paramFontsFolder);
	utils->initialize("downloadNotesSlideOnline", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideOnline", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideOnline", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideOnline", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShape) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	utils->initialize("downloadNotesSlideShape", "");
	HttpContent result = api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramName = utils->getInvalidTestValue("downloadNotesSlideShape", "name", paramName);
	utils->initialize("downloadNotesSlideShape", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadNotesSlideShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("downloadNotesSlideShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("downloadNotesSlideShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("downloadNotesSlideShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("downloadNotesSlideShape", "format", paramFormat);
	utils->initialize("downloadNotesSlideShape", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("downloadNotesSlideShape", "options", paramOptions);
	utils->initialize("downloadNotesSlideShape", "options", paramOptions);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("downloadNotesSlideShape", "scaleX", paramScaleX).value();
	utils->initialize("downloadNotesSlideShape", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("downloadNotesSlideShape", "scaleY", paramScaleY).value();
	utils->initialize("downloadNotesSlideShape", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("downloadNotesSlideShape", "bounds", paramBounds);
	utils->initialize("downloadNotesSlideShape", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("downloadNotesSlideShape", "password", paramPassword);
	utils->initialize("downloadNotesSlideShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("downloadNotesSlideShape", "folder", paramFolder);
	utils->initialize("downloadNotesSlideShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("downloadNotesSlideShape", "storage", paramStorage);
	utils->initialize("downloadNotesSlideShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadNotesSlideShapeInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("downloadNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadNotesSlideShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadNotesSlideShape", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("downloadNotesSlideShape", "fontsFolder", paramFontsFolder);
	utils->initialize("downloadNotesSlideShape", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadNotesSlideShape", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadNotesSlideShape", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadNotesSlideShape", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentation) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides");
	utils->initialize("downloadPresentation", "");
	HttpContent result = api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadPresentationInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides");
	paramName = utils->getInvalidTestValue("downloadPresentation", "name", paramName);
	utils->initialize("downloadPresentation", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides");
	paramFormat = utils->getInvalidTestValue("downloadPresentation", "format", paramFormat);
	utils->initialize("downloadPresentation", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides");
	paramOptions = utils->getInvalidTestValueForClass<>("downloadPresentation", "options", paramOptions);
	utils->initialize("downloadPresentation", "options", paramOptions);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides");
	paramPassword = utils->getInvalidTestValue("downloadPresentation", "password", paramPassword);
	utils->initialize("downloadPresentation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides");
	paramFolder = utils->getInvalidTestValue("downloadPresentation", "folder", paramFolder);
	utils->initialize("downloadPresentation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides");
	paramStorage = utils->getInvalidTestValue("downloadPresentation", "storage", paramStorage);
	utils->initialize("downloadPresentation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides");
	paramFontsFolder = utils->getInvalidTestValue("downloadPresentation", "fontsFolder", paramFontsFolder);
	utils->initialize("downloadPresentation", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadPresentationInvalidSlides) {
	utility::string_t paramName = utils->getTestValue("downloadPresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("downloadPresentation", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadPresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("downloadPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadPresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadPresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("downloadPresentation", "slides");
	paramSlides = utils->getInvalidIntVectorTestValue("downloadPresentation", "slides", paramSlides);
	utils->initialize("downloadPresentation", "slides", paramSlides);

	bool failed = true;
	try
	{
		api->downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "slides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "slides", paramSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadPresentation", "slides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadPresentation", "slides", paramSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadPresentation", "slides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShape) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	utils->initialize("downloadShape", "");
	HttpContent result = api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramName = utils->getInvalidTestValue("downloadShape", "name", paramName);
	utils->initialize("downloadShape", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("downloadShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("downloadShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("downloadShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("downloadShape", "format", paramFormat);
	utils->initialize("downloadShape", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("downloadShape", "options", paramOptions);
	utils->initialize("downloadShape", "options", paramOptions);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("downloadShape", "scaleX", paramScaleX).value();
	utils->initialize("downloadShape", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("downloadShape", "scaleY", paramScaleY).value();
	utils->initialize("downloadShape", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("downloadShape", "bounds", paramBounds);
	utils->initialize("downloadShape", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("downloadShape", "password", paramPassword);
	utils->initialize("downloadShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("downloadShape", "folder", paramFolder);
	utils->initialize("downloadShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("downloadShape", "storage", paramStorage);
	utils->initialize("downloadShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("downloadShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShape", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("downloadShape", "fontsFolder", paramFontsFolder);
	utils->initialize("downloadShape", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShape", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShape", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShape", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShape", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShape", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder");
	utils->initialize("downloadShapeOnline", "");
	HttpContent result = api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("downloadShapeOnline", "document", paramDocument);
	utils->initialize("downloadShapeOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadShapeOnline", "slideIndex", paramSlideIndex).value();
	utils->initialize("downloadShapeOnline", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidShapeIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("downloadShapeOnline", "shapeIndex", paramShapeIndex).value();
	utils->initialize("downloadShapeOnline", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("downloadShapeOnline", "format", paramFormat);
	utils->initialize("downloadShapeOnline", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidScaleX) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("downloadShapeOnline", "scaleX", paramScaleX).value();
	utils->initialize("downloadShapeOnline", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidScaleY) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("downloadShapeOnline", "scaleY", paramScaleY).value();
	utils->initialize("downloadShapeOnline", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidBounds) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("downloadShapeOnline", "bounds", paramBounds);
	utils->initialize("downloadShapeOnline", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("downloadShapeOnline", "password", paramPassword);
	utils->initialize("downloadShapeOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("downloadShapeOnline", "storage", paramStorage);
	utils->initialize("downloadShapeOnline", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadShapeOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadShapeOnline", "format");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadShapeOnline", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("downloadShapeOnline", "fontsFolder", paramFontsFolder);
	utils->initialize("downloadShapeOnline", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadShapeOnline", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadShapeOnline", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadShapeOnline", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlide) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder");
	utils->initialize("downloadSlide", "");
	HttpContent result = api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder");
	paramName = utils->getInvalidTestValue("downloadSlide", "name", paramName);
	utils->initialize("downloadSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("downloadSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("downloadSlide", "format", paramFormat);
	utils->initialize("downloadSlide", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("downloadSlide", "options", paramOptions);
	utils->initialize("downloadSlide", "options", paramOptions);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("downloadSlide", "width", paramWidth).value();
	utils->initialize("downloadSlide", "width", paramWidth);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("downloadSlide", "height", paramHeight).value();
	utils->initialize("downloadSlide", "height", paramHeight);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("downloadSlide", "password", paramPassword);
	utils->initialize("downloadSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("downloadSlide", "folder", paramFolder);
	utils->initialize("downloadSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("downloadSlide", "storage", paramStorage);
	utils->initialize("downloadSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("downloadSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlide", "format");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("downloadSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlide", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("downloadSlide", "fontsFolder", paramFontsFolder);
	utils->initialize("downloadSlide", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlide", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlide", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlide", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder");
	utils->initialize("downloadSlideOnline", "");
	HttpContent result = api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("downloadSlideOnline", "document", paramDocument);
	utils->initialize("downloadSlideOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadSlideOnline", "slideIndex", paramSlideIndex).value();
	utils->initialize("downloadSlideOnline", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("downloadSlideOnline", "format", paramFormat);
	utils->initialize("downloadSlideOnline", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("downloadSlideOnline", "width", paramWidth).value();
	utils->initialize("downloadSlideOnline", "width", paramWidth);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("downloadSlideOnline", "height", paramHeight).value();
	utils->initialize("downloadSlideOnline", "height", paramHeight);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("downloadSlideOnline", "password", paramPassword);
	utils->initialize("downloadSlideOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("downloadSlideOnline", "storage", paramStorage);
	utils->initialize("downloadSlideOnline", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSlideOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("downloadSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSlideOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("downloadSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("downloadSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("downloadSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("downloadSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSlideOnline", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("downloadSlideOnline", "fontsFolder", paramFontsFolder);
	utils->initialize("downloadSlideOnline", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSlideOnline", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSlideOnline", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSlideOnline", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshape) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	utils->initialize("downloadSubshape", "");
	HttpContent result = api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramName = utils->getInvalidTestValue("downloadSubshape", "name", paramName);
	utils->initialize("downloadSubshape", "name", paramName);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("downloadSubshape", "slideIndex", paramSlideIndex).value();
	utils->initialize("downloadSubshape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidPath) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramPath = utils->getInvalidTestValue("downloadSubshape", "path", paramPath);
	utils->initialize("downloadSubshape", "path", paramPath);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("downloadSubshape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("downloadSubshape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("downloadSubshape", "format", paramFormat);
	utils->initialize("downloadSubshape", "format", paramFormat);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("downloadSubshape", "options", paramOptions);
	utils->initialize("downloadSubshape", "options", paramOptions);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("downloadSubshape", "scaleX", paramScaleX).value();
	utils->initialize("downloadSubshape", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("downloadSubshape", "scaleY", paramScaleY).value();
	utils->initialize("downloadSubshape", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("downloadSubshape", "bounds", paramBounds);
	utils->initialize("downloadSubshape", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("downloadSubshape", "password", paramPassword);
	utils->initialize("downloadSubshape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("downloadSubshape", "folder", paramFolder);
	utils->initialize("downloadSubshape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("downloadSubshape", "storage", paramStorage);
	utils->initialize("downloadSubshape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, downloadSubshapeInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("downloadSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("downloadSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("downloadSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("downloadSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("downloadSubshape", "format");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("downloadSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("downloadSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("downloadSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("downloadSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("downloadSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("downloadSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("downloadSubshape", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("downloadSubshape", "fontsFolder", paramFontsFolder);
	utils->initialize("downloadSubshape", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("downloadSubshape", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("downloadSubshape", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("downloadSubshape", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimation) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage");
	utils->initialize("getAnimation", "");
	std::shared_ptr<SlideAnimation> result = api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage");
	paramName = utils->getInvalidTestValue("getAnimation", "name", paramName);
	utils->initialize("getAnimation", "name", paramName);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getAnimation", "slideIndex", paramSlideIndex).value();
	utils->initialize("getAnimation", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimationInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getAnimation", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getAnimation", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage");
	paramPassword = utils->getInvalidTestValue("getAnimation", "password", paramPassword);
	utils->initialize("getAnimation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage");
	paramFolder = utils->getInvalidTestValue("getAnimation", "folder", paramFolder);
	utils->initialize("getAnimation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getAnimation", "slideIndex");
	auto paramShapeIndex = utils->getOptionalIntTestValue("getAnimation", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("getAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getAnimation", "storage");
	paramStorage = utils->getInvalidTestValue("getAnimation", "storage", paramStorage);
	utils->initialize("getAnimation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getAnimation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getAnimation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getAnimation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getAnimation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getAnimation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getApiInfo) {
	utils->initialize("getApiInfo", "");
	std::shared_ptr<ApiInfo> result = api->getApiInfo().get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getBackground) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage");
	utils->initialize("getBackground", "");
	std::shared_ptr<SlideBackground> result = api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getBackgroundInvalidName) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage");
	paramName = utils->getInvalidTestValue("getBackground", "name", paramName);
	utils->initialize("getBackground", "name", paramName);

	bool failed = true;
	try
	{
		api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getBackground", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getBackground", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getBackground", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getBackground", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getBackground", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getBackgroundInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getBackground", "slideIndex", paramSlideIndex).value();
	utils->initialize("getBackground", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getBackground", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getBackground", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getBackground", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getBackground", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getBackground", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getBackgroundInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage");
	paramPassword = utils->getInvalidTestValue("getBackground", "password", paramPassword);
	utils->initialize("getBackground", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getBackground", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getBackground", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getBackground", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getBackground", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getBackground", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getBackgroundInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage");
	paramFolder = utils->getInvalidTestValue("getBackground", "folder", paramFolder);
	utils->initialize("getBackground", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getBackground", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getBackground", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getBackground", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getBackground", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getBackground", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getBackgroundInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getBackground", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("getBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("getBackground", "storage");
	paramStorage = utils->getInvalidTestValue("getBackground", "storage", paramStorage);
	utils->initialize("getBackground", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getBackground", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getBackground", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getBackground", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getBackground", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getBackground", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getColorScheme) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage");
	utils->initialize("getColorScheme", "");
	std::shared_ptr<ColorScheme> result = api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getColorSchemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage");
	paramName = utils->getInvalidTestValue("getColorScheme", "name", paramName);
	utils->initialize("getColorScheme", "name", paramName);

	bool failed = true;
	try
	{
		api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getColorScheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getColorSchemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getColorScheme", "slideIndex", paramSlideIndex).value();
	utils->initialize("getColorScheme", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getColorScheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getColorSchemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage");
	paramPassword = utils->getInvalidTestValue("getColorScheme", "password", paramPassword);
	utils->initialize("getColorScheme", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getColorScheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getColorSchemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage");
	paramFolder = utils->getInvalidTestValue("getColorScheme", "folder", paramFolder);
	utils->initialize("getColorScheme", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getColorScheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getColorSchemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getColorScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getColorScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getColorScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getColorScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getColorScheme", "storage");
	paramStorage = utils->getInvalidTestValue("getColorScheme", "storage", paramStorage);
	utils->initialize("getColorScheme", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getColorScheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getColorScheme", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getColorScheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDiscUsage) {
	utility::string_t paramStorageName = utils->getTestValue("getDiscUsage", "storageName");
	utils->initialize("getDiscUsage", "");
	std::shared_ptr<DiscUsage> result = api->getDiscUsage(paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getDiscUsageInvalidStorageName) {
	utility::string_t paramStorageName = utils->getTestValue("getDiscUsage", "storageName");
	paramStorageName = utils->getInvalidTestValue("getDiscUsage", "storageName", paramStorageName);
	utils->initialize("getDiscUsage", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->getDiscUsage(paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDiscUsage", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDiscUsage", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDiscUsage", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDiscUsage", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDiscUsage", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentProperties) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperties", "storage");
	utils->initialize("getDocumentProperties", "");
	std::shared_ptr<DocumentProperties> result = api->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getDocumentPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperties", "storage");
	paramName = utils->getInvalidTestValue("getDocumentProperties", "name", paramName);
	utils->initialize("getDocumentProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperties", "storage");
	paramPassword = utils->getInvalidTestValue("getDocumentProperties", "password", paramPassword);
	utils->initialize("getDocumentProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperties", "storage");
	paramFolder = utils->getInvalidTestValue("getDocumentProperties", "folder", paramFolder);
	utils->initialize("getDocumentProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperties", "storage");
	paramStorage = utils->getInvalidTestValue("getDocumentProperties", "storage", paramStorage);
	utils->initialize("getDocumentProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentProperty) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage");
	utils->initialize("getDocumentProperty", "");
	std::shared_ptr<DocumentProperty> result = api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getDocumentPropertyInvalidName) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage");
	paramName = utils->getInvalidTestValue("getDocumentProperty", "name", paramName);
	utils->initialize("getDocumentProperty", "name", paramName);

	bool failed = true;
	try
	{
		api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperty", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertyInvalidPropertyName) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage");
	paramPropertyName = utils->getInvalidTestValue("getDocumentProperty", "propertyName", paramPropertyName);
	utils->initialize("getDocumentProperty", "propertyName", paramPropertyName);

	bool failed = true;
	try
	{
		api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "propertyName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "propertyName", paramPropertyName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "propertyName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "propertyName", paramPropertyName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperty", "propertyName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertyInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage");
	paramPassword = utils->getInvalidTestValue("getDocumentProperty", "password", paramPassword);
	utils->initialize("getDocumentProperty", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperty", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertyInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage");
	paramFolder = utils->getInvalidTestValue("getDocumentProperty", "folder", paramFolder);
	utils->initialize("getDocumentProperty", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperty", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getDocumentPropertyInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("getDocumentProperty", "propertyName");
	utility::string_t paramPassword = utils->getTestValue("getDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("getDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("getDocumentProperty", "storage");
	paramStorage = utils->getInvalidTestValue("getDocumentProperty", "storage", paramStorage);
	utils->initialize("getDocumentProperty", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getDocumentProperty", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getDocumentProperty", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getDocumentProperty", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFileVersions) {
	utility::string_t paramPath = utils->getTestValue("getFileVersions", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFileVersions", "storageName");
	utils->initialize("getFileVersions", "");
	std::shared_ptr<FileVersions> result = api->getFileVersions(paramPath, paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFileVersionsInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("getFileVersions", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFileVersions", "storageName");
	paramPath = utils->getInvalidTestValue("getFileVersions", "path", paramPath);
	utils->initialize("getFileVersions", "path", paramPath);

	bool failed = true;
	try
	{
		api->getFileVersions(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFileVersions", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFileVersionsInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("getFileVersions", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFileVersions", "storageName");
	paramStorageName = utils->getInvalidTestValue("getFileVersions", "storageName", paramStorageName);
	utils->initialize("getFileVersions", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->getFileVersions(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFileVersions", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFileVersions", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFileVersions", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFilesList) {
	utility::string_t paramPath = utils->getTestValue("getFilesList", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFilesList", "storageName");
	utils->initialize("getFilesList", "");
	std::shared_ptr<FilesList> result = api->getFilesList(paramPath, paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFilesListInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("getFilesList", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFilesList", "storageName");
	paramPath = utils->getInvalidTestValue("getFilesList", "path", paramPath);
	utils->initialize("getFilesList", "path", paramPath);

	bool failed = true;
	try
	{
		api->getFilesList(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFilesList", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFilesList", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFilesList", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFilesList", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFilesList", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFilesListInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("getFilesList", "path");
	utility::string_t paramStorageName = utils->getTestValue("getFilesList", "storageName");
	paramStorageName = utils->getInvalidTestValue("getFilesList", "storageName", paramStorageName);
	utils->initialize("getFilesList", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->getFilesList(paramPath, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFilesList", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFilesList", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFilesList", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFilesList", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFilesList", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontScheme) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage");
	utils->initialize("getFontScheme", "");
	std::shared_ptr<FontScheme> result = api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFontSchemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage");
	paramName = utils->getInvalidTestValue("getFontScheme", "name", paramName);
	utils->initialize("getFontScheme", "name", paramName);

	bool failed = true;
	try
	{
		api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontScheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontSchemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getFontScheme", "slideIndex", paramSlideIndex).value();
	utils->initialize("getFontScheme", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontScheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontSchemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage");
	paramPassword = utils->getInvalidTestValue("getFontScheme", "password", paramPassword);
	utils->initialize("getFontScheme", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontScheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontSchemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage");
	paramFolder = utils->getInvalidTestValue("getFontScheme", "folder", paramFolder);
	utils->initialize("getFontScheme", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontScheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFontSchemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getFontScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFontScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFontScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFontScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFontScheme", "storage");
	paramStorage = utils->getInvalidTestValue("getFontScheme", "storage", paramStorage);
	utils->initialize("getFontScheme", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFontScheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFontScheme", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFontScheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFormatScheme) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage");
	utils->initialize("getFormatScheme", "");
	std::shared_ptr<FormatScheme> result = api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getFormatSchemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage");
	paramName = utils->getInvalidTestValue("getFormatScheme", "name", paramName);
	utils->initialize("getFormatScheme", "name", paramName);

	bool failed = true;
	try
	{
		api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFormatScheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFormatSchemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getFormatScheme", "slideIndex", paramSlideIndex).value();
	utils->initialize("getFormatScheme", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFormatScheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFormatSchemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage");
	paramPassword = utils->getInvalidTestValue("getFormatScheme", "password", paramPassword);
	utils->initialize("getFormatScheme", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFormatScheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFormatSchemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage");
	paramFolder = utils->getInvalidTestValue("getFormatScheme", "folder", paramFolder);
	utils->initialize("getFormatScheme", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFormatScheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getFormatSchemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getFormatScheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getFormatScheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getFormatScheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getFormatScheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getFormatScheme", "storage");
	paramStorage = utils->getInvalidTestValue("getFormatScheme", "storage", paramStorage);
	utils->initialize("getFormatScheme", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getFormatScheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getFormatScheme", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getFormatScheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlide) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	utils->initialize("getLayoutSlide", "");
	std::shared_ptr<LayoutSlide> result = api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	paramName = utils->getInvalidTestValue("getLayoutSlide", "name", paramName);
	utils->initialize("getLayoutSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getLayoutSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("getLayoutSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	paramPassword = utils->getInvalidTestValue("getLayoutSlide", "password", paramPassword);
	utils->initialize("getLayoutSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	paramFolder = utils->getInvalidTestValue("getLayoutSlide", "folder", paramFolder);
	utils->initialize("getLayoutSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getLayoutSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlide", "storage");
	paramStorage = utils->getInvalidTestValue("getLayoutSlide", "storage", paramStorage);
	utils->initialize("getLayoutSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlides) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlides", "storage");
	utils->initialize("getLayoutSlides", "");
	std::shared_ptr<LayoutSlides> result = api->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getLayoutSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlides", "storage");
	paramName = utils->getInvalidTestValue("getLayoutSlides", "name", paramName);
	utils->initialize("getLayoutSlides", "name", paramName);

	bool failed = true;
	try
	{
		api->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlides", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlides", "storage");
	paramPassword = utils->getInvalidTestValue("getLayoutSlides", "password", paramPassword);
	utils->initialize("getLayoutSlides", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlides", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlides", "storage");
	paramFolder = utils->getInvalidTestValue("getLayoutSlides", "folder", paramFolder);
	utils->initialize("getLayoutSlides", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlides", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getLayoutSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getLayoutSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getLayoutSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getLayoutSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getLayoutSlides", "storage");
	paramStorage = utils->getInvalidTestValue("getLayoutSlides", "storage", paramStorage);
	utils->initialize("getLayoutSlides", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getLayoutSlides", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getLayoutSlides", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getLayoutSlides", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlide) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	utils->initialize("getMasterSlide", "");
	std::shared_ptr<MasterSlide> result = api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getMasterSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	paramName = utils->getInvalidTestValue("getMasterSlide", "name", paramName);
	utils->initialize("getMasterSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getMasterSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("getMasterSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	paramPassword = utils->getInvalidTestValue("getMasterSlide", "password", paramPassword);
	utils->initialize("getMasterSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	paramFolder = utils->getInvalidTestValue("getMasterSlide", "folder", paramFolder);
	utils->initialize("getMasterSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getMasterSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getMasterSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlide", "storage");
	paramStorage = utils->getInvalidTestValue("getMasterSlide", "storage", paramStorage);
	utils->initialize("getMasterSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlides) {
	utility::string_t paramName = utils->getTestValue("getMasterSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlides", "storage");
	utils->initialize("getMasterSlides", "");
	std::shared_ptr<MasterSlides> result = api->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getMasterSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getMasterSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlides", "storage");
	paramName = utils->getInvalidTestValue("getMasterSlides", "name", paramName);
	utils->initialize("getMasterSlides", "name", paramName);

	bool failed = true;
	try
	{
		api->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlides", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getMasterSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlides", "storage");
	paramPassword = utils->getInvalidTestValue("getMasterSlides", "password", paramPassword);
	utils->initialize("getMasterSlides", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlides", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getMasterSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlides", "storage");
	paramFolder = utils->getInvalidTestValue("getMasterSlides", "folder", paramFolder);
	utils->initialize("getMasterSlides", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlides", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getMasterSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getMasterSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getMasterSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getMasterSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getMasterSlides", "storage");
	paramStorage = utils->getInvalidTestValue("getMasterSlides", "storage", paramStorage);
	utils->initialize("getMasterSlides", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getMasterSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getMasterSlides", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getMasterSlides", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getMasterSlides", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlide) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	utils->initialize("getNotesSlide", "");
	std::shared_ptr<NotesSlide> result = api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlide", "name", paramName);
	utils->initialize("getNotesSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlide", "password", paramPassword);
	utils->initialize("getNotesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlide", "folder", paramFolder);
	utils->initialize("getNotesSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlide", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlide", "storage", paramStorage);
	utils->initialize("getNotesSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	utils->initialize("getNotesSlideHeaderFooter", "");
	std::shared_ptr<NotesSlideHeaderFooter> result = api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "name", paramName);
	utils->initialize("getNotesSlideHeaderFooter", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideHeaderFooter", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "password", paramPassword);
	utils->initialize("getNotesSlideHeaderFooter", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "folder", paramFolder);
	utils->initialize("getNotesSlideHeaderFooter", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideHeaderFooter", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideHeaderFooter", "storage", paramStorage);
	utils->initialize("getNotesSlideHeaderFooter", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideHeaderFooter", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("getNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideOnline", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideOnline", "password");
	utils->initialize("getNotesSlideOnline", "");
	std::shared_ptr<NotesSlide> result = api->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("getNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideOnline", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("getNotesSlideOnline", "document", paramDocument);
	utils->initialize("getNotesSlideOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("getNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideOnline", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideOnline", "password");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideOnline", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideOnline", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideOnline", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("getNotesSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideOnline", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideOnline", "password");
	paramPassword = utils->getInvalidTestValue("getNotesSlideOnline", "password", paramPassword);
	utils->initialize("getNotesSlideOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraph) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraph", "storage");
	utils->initialize("getNotesSlideParagraph", "");
	std::shared_ptr<Paragraph> result = api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraph", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideParagraph", "name", paramName);
	utils->initialize("getNotesSlideParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getNotesSlideParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getNotesSlideParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getNotesSlideParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideParagraph", "password", paramPassword);
	utils->initialize("getNotesSlideParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideParagraph", "folder", paramFolder);
	utils->initialize("getNotesSlideParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlideParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideParagraph", "storage", paramStorage);
	utils->initialize("getNotesSlideParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphs) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraphs", "storage");
	utils->initialize("getNotesSlideParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraphs", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideParagraphs", "name", paramName);
	utils->initialize("getNotesSlideParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getNotesSlideParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getNotesSlideParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideParagraphs", "password", paramPassword);
	utils->initialize("getNotesSlideParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideParagraphs", "folder", paramFolder);
	utils->initialize("getNotesSlideParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideParagraphs", "storage", paramStorage);
	utils->initialize("getNotesSlideParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortion) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortion", "storage");
	utils->initialize("getNotesSlidePortion", "");
	std::shared_ptr<Portion> result = api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlidePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortion", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlidePortion", "name", paramName);
	utils->initialize("getNotesSlidePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlidePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlidePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getNotesSlidePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getNotesSlidePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getNotesSlidePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getNotesSlidePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("getNotesSlidePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("getNotesSlidePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortion", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlidePortion", "password", paramPassword);
	utils->initialize("getNotesSlidePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortion", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlidePortion", "folder", paramFolder);
	utils->initialize("getNotesSlidePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getNotesSlidePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortion", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlidePortion", "storage", paramStorage);
	utils->initialize("getNotesSlidePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortions) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortions", "storage");
	utils->initialize("getNotesSlidePortions", "");
	std::shared_ptr<Portions> result = api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlidePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortions", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlidePortions", "name", paramName);
	utils->initialize("getNotesSlidePortions", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlidePortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlidePortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getNotesSlidePortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getNotesSlidePortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getNotesSlidePortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getNotesSlidePortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortions", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlidePortions", "password", paramPassword);
	utils->initialize("getNotesSlidePortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortions", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlidePortions", "folder", paramFolder);
	utils->initialize("getNotesSlidePortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlidePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlidePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlidePortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlidePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getNotesSlidePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlidePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlidePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlidePortions", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlidePortions", "storage", paramStorage);
	utils->initialize("getNotesSlidePortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlidePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlidePortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlidePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShape) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	utils->initialize("getNotesSlideShape", "");
	std::shared_ptr<ShapeBase> result = api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideShape", "name", paramName);
	utils->initialize("getNotesSlideShape", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getNotesSlideShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getNotesSlideShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideShape", "password", paramPassword);
	utils->initialize("getNotesSlideShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideShape", "folder", paramFolder);
	utils->initialize("getNotesSlideShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getNotesSlideShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShape", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideShape", "storage", paramStorage);
	utils->initialize("getNotesSlideShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapes) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	utils->initialize("getNotesSlideShapes", "");
	std::shared_ptr<Shapes> result = api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getNotesSlideShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	paramName = utils->getInvalidTestValue("getNotesSlideShapes", "name", paramName);
	utils->initialize("getNotesSlideShapes", "name", paramName);

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getNotesSlideShapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("getNotesSlideShapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	paramPassword = utils->getInvalidTestValue("getNotesSlideShapes", "password", paramPassword);
	utils->initialize("getNotesSlideShapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	paramFolder = utils->getInvalidTestValue("getNotesSlideShapes", "folder", paramFolder);
	utils->initialize("getNotesSlideShapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getNotesSlideShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getNotesSlideShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getNotesSlideShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getNotesSlideShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getNotesSlideShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getNotesSlideShapes", "storage");
	paramStorage = utils->getInvalidTestValue("getNotesSlideShapes", "storage", paramStorage);
	utils->initialize("getNotesSlideShapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getNotesSlideShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getNotesSlideShapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getNotesSlideShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraph) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage");
	utils->initialize("getParagraph", "");
	std::shared_ptr<Paragraph> result = api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage");
	paramName = utils->getInvalidTestValue("getParagraph", "name", paramName);
	utils->initialize("getParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("getParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("getParagraph", "password", paramPassword);
	utils->initialize("getParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("getParagraph", "folder", paramFolder);
	utils->initialize("getParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("getParagraph", "storage", paramStorage);
	utils->initialize("getParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphs) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage");
	utils->initialize("getParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage");
	paramName = utils->getInvalidTestValue("getParagraphs", "name", paramName);
	utils->initialize("getParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("getParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("getParagraphs", "password", paramPassword);
	utils->initialize("getParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("getParagraphs", "folder", paramFolder);
	utils->initialize("getParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getParagraphs", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("getParagraphs", "storage", paramStorage);
	utils->initialize("getParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholder) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage");
	utils->initialize("getPlaceholder", "");
	std::shared_ptr<Placeholder> result = api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPlaceholderInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage");
	paramName = utils->getInvalidTestValue("getPlaceholder", "name", paramName);
	utils->initialize("getPlaceholder", "name", paramName);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholderInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getPlaceholder", "slideIndex", paramSlideIndex).value();
	utils->initialize("getPlaceholder", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholderInvalidPlaceholderIndex) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage");
	paramPlaceholderIndex = utils->getInvalidIntTestValue("getPlaceholder", "placeholderIndex", paramPlaceholderIndex).value();
	utils->initialize("getPlaceholder", "placeholderIndex", paramPlaceholderIndex);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "placeholderIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "placeholderIndex", paramPlaceholderIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "placeholderIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "placeholderIndex", paramPlaceholderIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "placeholderIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholderInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage");
	paramPassword = utils->getInvalidTestValue("getPlaceholder", "password", paramPassword);
	utils->initialize("getPlaceholder", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholderInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage");
	paramFolder = utils->getInvalidTestValue("getPlaceholder", "folder", paramFolder);
	utils->initialize("getPlaceholder", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholderInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPlaceholder", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholder", "slideIndex");
	int32_t paramPlaceholderIndex = utils->getIntTestValue("getPlaceholder", "placeholderIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholder", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholder", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholder", "storage");
	paramStorage = utils->getInvalidTestValue("getPlaceholder", "storage", paramStorage);
	utils->initialize("getPlaceholder", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholder", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholder", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholder", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholders) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage");
	utils->initialize("getPlaceholders", "");
	std::shared_ptr<Placeholders> result = api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPlaceholdersInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage");
	paramName = utils->getInvalidTestValue("getPlaceholders", "name", paramName);
	utils->initialize("getPlaceholders", "name", paramName);

	bool failed = true;
	try
	{
		api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholders", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholdersInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getPlaceholders", "slideIndex", paramSlideIndex).value();
	utils->initialize("getPlaceholders", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholders", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholdersInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage");
	paramPassword = utils->getInvalidTestValue("getPlaceholders", "password", paramPassword);
	utils->initialize("getPlaceholders", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholders", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholdersInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage");
	paramFolder = utils->getInvalidTestValue("getPlaceholders", "folder", paramFolder);
	utils->initialize("getPlaceholders", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholders", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPlaceholdersInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPlaceholders", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPlaceholders", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getPlaceholders", "password");
	utility::string_t paramFolder = utils->getTestValue("getPlaceholders", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPlaceholders", "storage");
	paramStorage = utils->getInvalidTestValue("getPlaceholders", "storage", paramStorage);
	utils->initialize("getPlaceholders", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPlaceholders", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPlaceholders", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPlaceholders", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortion) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage");
	utils->initialize("getPortion", "");
	std::shared_ptr<Portion> result = api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage");
	paramName = utils->getInvalidTestValue("getPortion", "name", paramName);
	utils->initialize("getPortion", "name", paramName);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getPortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("getPortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getPortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getPortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getPortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getPortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("getPortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("getPortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage");
	paramPassword = utils->getInvalidTestValue("getPortion", "password", paramPassword);
	utils->initialize("getPortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage");
	paramFolder = utils->getInvalidTestValue("getPortion", "folder", paramFolder);
	utils->initialize("getPortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getPortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortion", "storage");
	paramStorage = utils->getInvalidTestValue("getPortion", "storage", paramStorage);
	utils->initialize("getPortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortions) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage");
	utils->initialize("getPortions", "");
	std::shared_ptr<Portions> result = api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage");
	paramName = utils->getInvalidTestValue("getPortions", "name", paramName);
	utils->initialize("getPortions", "name", paramName);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getPortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("getPortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getPortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getPortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getPortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getPortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage");
	paramPassword = utils->getInvalidTestValue("getPortions", "password", paramPassword);
	utils->initialize("getPortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage");
	paramFolder = utils->getInvalidTestValue("getPortions", "folder", paramFolder);
	utils->initialize("getPortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getPortions", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getPortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getPortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getPortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getPortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPortions", "storage");
	paramStorage = utils->getInvalidTestValue("getPortions", "storage", paramStorage);
	utils->initialize("getPortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentation) {
	utility::string_t paramName = utils->getTestValue("getPresentation", "name");
	utility::string_t paramPassword = utils->getTestValue("getPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentation", "storage");
	utils->initialize("getPresentation", "");
	std::shared_ptr<Document> result = api->getPresentation(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPresentationInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPresentation", "name");
	utility::string_t paramPassword = utils->getTestValue("getPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentation", "storage");
	paramName = utils->getInvalidTestValue("getPresentation", "name", paramName);
	utils->initialize("getPresentation", "name", paramName);

	bool failed = true;
	try
	{
		api->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPresentation", "name");
	utility::string_t paramPassword = utils->getTestValue("getPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentation", "storage");
	paramPassword = utils->getInvalidTestValue("getPresentation", "password", paramPassword);
	utils->initialize("getPresentation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPresentation", "name");
	utility::string_t paramPassword = utils->getTestValue("getPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentation", "storage");
	paramFolder = utils->getInvalidTestValue("getPresentation", "folder", paramFolder);
	utils->initialize("getPresentation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPresentation", "name");
	utility::string_t paramPassword = utils->getTestValue("getPresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentation", "storage");
	paramStorage = utils->getInvalidTestValue("getPresentation", "storage", paramStorage);
	utils->initialize("getPresentation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPresentation(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationImages) {
	utility::string_t paramName = utils->getTestValue("getPresentationImages", "name");
	utility::string_t paramPassword = utils->getTestValue("getPresentationImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentationImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentationImages", "storage");
	utils->initialize("getPresentationImages", "");
	std::shared_ptr<Images> result = api->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPresentationImagesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPresentationImages", "name");
	utility::string_t paramPassword = utils->getTestValue("getPresentationImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentationImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentationImages", "storage");
	paramName = utils->getInvalidTestValue("getPresentationImages", "name", paramName);
	utils->initialize("getPresentationImages", "name", paramName);

	bool failed = true;
	try
	{
		api->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationImages", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationImagesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPresentationImages", "name");
	utility::string_t paramPassword = utils->getTestValue("getPresentationImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentationImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentationImages", "storage");
	paramPassword = utils->getInvalidTestValue("getPresentationImages", "password", paramPassword);
	utils->initialize("getPresentationImages", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationImages", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationImagesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPresentationImages", "name");
	utility::string_t paramPassword = utils->getTestValue("getPresentationImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentationImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentationImages", "storage");
	paramFolder = utils->getInvalidTestValue("getPresentationImages", "folder", paramFolder);
	utils->initialize("getPresentationImages", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationImages", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationImagesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPresentationImages", "name");
	utility::string_t paramPassword = utils->getTestValue("getPresentationImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentationImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentationImages", "storage");
	paramStorage = utils->getInvalidTestValue("getPresentationImages", "storage", paramStorage);
	utils->initialize("getPresentationImages", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPresentationImages(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationImages", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationImages", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationImages", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationTextItems) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage");
	utils->initialize("getPresentationTextItems", "");
	std::shared_ptr<TextItems> result = api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getPresentationTextItemsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage");
	paramName = utils->getInvalidTestValue("getPresentationTextItems", "name", paramName);
	utils->initialize("getPresentationTextItems", "name", paramName);

	bool failed = true;
	try
	{
		api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationTextItems", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationTextItemsInvalidWithEmpty) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage");
	paramWithEmpty = utils->getInvalidBoolTestValue("getPresentationTextItems", "withEmpty", paramWithEmpty).value();
	utils->initialize("getPresentationTextItems", "withEmpty", paramWithEmpty);

	bool failed = true;
	try
	{
		api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "withEmpty");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "withEmpty", paramWithEmpty);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "withEmpty");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "withEmpty", paramWithEmpty);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationTextItems", "withEmpty"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationTextItemsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage");
	paramPassword = utils->getInvalidTestValue("getPresentationTextItems", "password", paramPassword);
	utils->initialize("getPresentationTextItems", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationTextItems", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationTextItemsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage");
	paramFolder = utils->getInvalidTestValue("getPresentationTextItems", "folder", paramFolder);
	utils->initialize("getPresentationTextItems", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationTextItems", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getPresentationTextItemsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getPresentationTextItems", "name");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getPresentationTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getPresentationTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getPresentationTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getPresentationTextItems", "storage");
	paramStorage = utils->getInvalidTestValue("getPresentationTextItems", "storage", paramStorage);
	utils->initialize("getPresentationTextItems", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getPresentationTextItems", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getPresentationTextItems", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getPresentationTextItems", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getProtectionProperties) {
	utility::string_t paramName = utils->getTestValue("getProtectionProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getProtectionProperties", "storage");
	utils->initialize("getProtectionProperties", "");
	std::shared_ptr<ProtectionProperties> result = api->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getProtectionPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getProtectionProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getProtectionProperties", "storage");
	paramName = utils->getInvalidTestValue("getProtectionProperties", "name", paramName);
	utils->initialize("getProtectionProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getProtectionProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getProtectionPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getProtectionProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getProtectionProperties", "storage");
	paramPassword = utils->getInvalidTestValue("getProtectionProperties", "password", paramPassword);
	utils->initialize("getProtectionProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getProtectionProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getProtectionPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getProtectionProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getProtectionProperties", "storage");
	paramFolder = utils->getInvalidTestValue("getProtectionProperties", "folder", paramFolder);
	utils->initialize("getProtectionProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getProtectionProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getProtectionPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getProtectionProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getProtectionProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getProtectionProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getProtectionProperties", "storage");
	paramStorage = utils->getInvalidTestValue("getProtectionProperties", "storage", paramStorage);
	utils->initialize("getProtectionProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getProtectionProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getProtectionProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getProtectionProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSections) {
	utility::string_t paramName = utils->getTestValue("getSections", "name");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage");
	utils->initialize("getSections", "");
	std::shared_ptr<Sections> result = api->getSections(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSectionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSections", "name");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage");
	paramName = utils->getInvalidTestValue("getSections", "name", paramName);
	utils->initialize("getSections", "name", paramName);

	bool failed = true;
	try
	{
		api->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSections", "name");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage");
	paramPassword = utils->getInvalidTestValue("getSections", "password", paramPassword);
	utils->initialize("getSections", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSections", "name");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage");
	paramFolder = utils->getInvalidTestValue("getSections", "folder", paramFolder);
	utils->initialize("getSections", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSectionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSections", "name");
	utility::string_t paramPassword = utils->getTestValue("getSections", "password");
	utility::string_t paramFolder = utils->getTestValue("getSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSections", "storage");
	paramStorage = utils->getInvalidTestValue("getSections", "storage", paramStorage);
	utils->initialize("getSections", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSections(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSections", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSections", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSections", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSections", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSections", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShape) {
	utility::string_t paramName = utils->getTestValue("getShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage");
	utils->initialize("getShape", "");
	std::shared_ptr<ShapeBase> result = api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage");
	paramName = utils->getInvalidTestValue("getShape", "name", paramName);
	utils->initialize("getShape", "name", paramName);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("getShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage");
	paramPassword = utils->getInvalidTestValue("getShape", "password", paramPassword);
	utils->initialize("getShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage");
	paramFolder = utils->getInvalidTestValue("getShape", "folder", paramFolder);
	utils->initialize("getShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("getShape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getShape", "password");
	utility::string_t paramFolder = utils->getTestValue("getShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShape", "storage");
	paramStorage = utils->getInvalidTestValue("getShape", "storage", paramStorage);
	utils->initialize("getShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapes) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage");
	utils->initialize("getShapes", "");
	std::shared_ptr<Shapes> result = api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getShapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage");
	paramName = utils->getInvalidTestValue("getShapes", "name", paramName);
	utils->initialize("getShapes", "name", paramName);

	bool failed = true;
	try
	{
		api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getShapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("getShapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage");
	paramPassword = utils->getInvalidTestValue("getShapes", "password", paramPassword);
	utils->initialize("getShapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage");
	paramFolder = utils->getInvalidTestValue("getShapes", "folder", paramFolder);
	utils->initialize("getShapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getShapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getShapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getShapes", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getShapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getShapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getShapes", "storage");
	paramStorage = utils->getInvalidTestValue("getShapes", "storage", paramStorage);
	utils->initialize("getShapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getShapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getShapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getShapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getShapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getShapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlide) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage");
	utils->initialize("getSlide", "");
	std::shared_ptr<Slide> result = api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage");
	paramName = utils->getInvalidTestValue("getSlide", "name", paramName);
	utils->initialize("getSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage");
	paramPassword = utils->getInvalidTestValue("getSlide", "password", paramPassword);
	utils->initialize("getSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage");
	paramFolder = utils->getInvalidTestValue("getSlide", "folder", paramFolder);
	utils->initialize("getSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlide", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlide", "storage");
	paramStorage = utils->getInvalidTestValue("getSlide", "storage", paramStorage);
	utils->initialize("getSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideComments) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage");
	utils->initialize("getSlideComments", "");
	std::shared_ptr<SlideComments> result = api->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideCommentsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage");
	paramName = utils->getInvalidTestValue("getSlideComments", "name", paramName);
	utils->initialize("getSlideComments", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideComments", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideCommentsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideComments", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideComments", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideComments", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideCommentsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideComments", "password", paramPassword);
	utils->initialize("getSlideComments", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideComments", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideCommentsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideComments", "folder", paramFolder);
	utils->initialize("getSlideComments", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideComments", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideCommentsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideComments", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideComments", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideComments", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideComments", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideComments", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideComments", "storage", paramStorage);
	utils->initialize("getSlideComments", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideComments", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideComments", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideComments", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	utils->initialize("getSlideHeaderFooter", "");
	std::shared_ptr<HeaderFooter> result = api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	paramName = utils->getInvalidTestValue("getSlideHeaderFooter", "name", paramName);
	utils->initialize("getSlideHeaderFooter", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideHeaderFooter", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideHeaderFooter", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideHeaderFooter", "password", paramPassword);
	utils->initialize("getSlideHeaderFooter", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideHeaderFooter", "folder", paramFolder);
	utils->initialize("getSlideHeaderFooter", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideHeaderFooter", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideHeaderFooter", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideHeaderFooter", "storage", paramStorage);
	utils->initialize("getSlideHeaderFooter", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideHeaderFooter", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideImages) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage");
	utils->initialize("getSlideImages", "");
	std::shared_ptr<Images> result = api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideImagesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage");
	paramName = utils->getInvalidTestValue("getSlideImages", "name", paramName);
	utils->initialize("getSlideImages", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideImages", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideImagesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideImages", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideImages", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideImages", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideImagesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideImages", "password", paramPassword);
	utils->initialize("getSlideImages", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideImages", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideImagesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideImages", "folder", paramFolder);
	utils->initialize("getSlideImages", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideImages", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideImagesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideImages", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideImages", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getSlideImages", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideImages", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideImages", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideImages", "storage", paramStorage);
	utils->initialize("getSlideImages", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideImages", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideImages", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideImages", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideProperties) {
	utility::string_t paramName = utils->getTestValue("getSlideProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideProperties", "storage");
	utils->initialize("getSlideProperties", "");
	std::shared_ptr<SlideProperties> result = api->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidePropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideProperties", "storage");
	paramName = utils->getInvalidTestValue("getSlideProperties", "name", paramName);
	utils->initialize("getSlideProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidePropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideProperties", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideProperties", "password", paramPassword);
	utils->initialize("getSlideProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidePropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideProperties", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideProperties", "folder", paramFolder);
	utils->initialize("getSlideProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidePropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideProperties", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideProperties", "storage", paramStorage);
	utils->initialize("getSlideProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlideProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItems) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage");
	utils->initialize("getSlideTextItems", "");
	std::shared_ptr<TextItems> result = api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage");
	paramName = utils->getInvalidTestValue("getSlideTextItems", "name", paramName);
	utils->initialize("getSlideTextItems", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSlideTextItems", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSlideTextItems", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidWithEmpty) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage");
	paramWithEmpty = utils->getInvalidBoolTestValue("getSlideTextItems", "withEmpty", paramWithEmpty).value();
	utils->initialize("getSlideTextItems", "withEmpty", paramWithEmpty);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "withEmpty");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "withEmpty", paramWithEmpty);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "withEmpty");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "withEmpty", paramWithEmpty);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "withEmpty"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage");
	paramPassword = utils->getInvalidTestValue("getSlideTextItems", "password", paramPassword);
	utils->initialize("getSlideTextItems", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage");
	paramFolder = utils->getInvalidTestValue("getSlideTextItems", "folder", paramFolder);
	utils->initialize("getSlideTextItems", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlideTextItemsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlideTextItems", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSlideTextItems", "slideIndex");
	auto paramWithEmpty = utils->getOptionalBoolTestValue("getSlideTextItems", "withEmpty");
	utility::string_t paramPassword = utils->getTestValue("getSlideTextItems", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlideTextItems", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlideTextItems", "storage");
	paramStorage = utils->getInvalidTestValue("getSlideTextItems", "storage", paramStorage);
	utils->initialize("getSlideTextItems", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlideTextItems", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlideTextItems", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlideTextItems", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlides) {
	utility::string_t paramName = utils->getTestValue("getSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlides", "storage");
	utils->initialize("getSlides", "");
	std::shared_ptr<Slides> result = api->getSlides(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlides", "storage");
	paramName = utils->getInvalidTestValue("getSlides", "name", paramName);
	utils->initialize("getSlides", "name", paramName);

	bool failed = true;
	try
	{
		api->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlides", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlides", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlides", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlides", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlides", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlides", "storage");
	paramPassword = utils->getInvalidTestValue("getSlides", "password", paramPassword);
	utils->initialize("getSlides", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlides", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlides", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlides", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlides", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlides", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlides", "storage");
	paramFolder = utils->getInvalidTestValue("getSlides", "folder", paramFolder);
	utils->initialize("getSlides", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlides", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlides", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlides", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlides", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlides", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSlides", "name");
	utility::string_t paramPassword = utils->getTestValue("getSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("getSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSlides", "storage");
	paramStorage = utils->getInvalidTestValue("getSlides", "storage", paramStorage);
	utils->initialize("getSlides", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSlides(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSlides", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSlides", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSlides", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSlides", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSlides", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshape) {
	utility::string_t paramName = utils->getTestValue("getSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshape", "storage");
	utils->initialize("getSubshape", "");
	std::shared_ptr<ShapeBase> result = api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSubshapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshape", "storage");
	paramName = utils->getInvalidTestValue("getSubshape", "name", paramName);
	utils->initialize("getSubshape", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSubshape", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSubshape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshape", "storage");
	paramPath = utils->getInvalidTestValue("getSubshape", "path", paramPath);
	utils->initialize("getSubshape", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshape", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshape", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSubshape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSubshape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshape", "storage");
	paramPassword = utils->getInvalidTestValue("getSubshape", "password", paramPassword);
	utils->initialize("getSubshape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshape", "storage");
	paramFolder = utils->getInvalidTestValue("getSubshape", "folder", paramFolder);
	utils->initialize("getSubshape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshape", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshape", "storage");
	paramStorage = utils->getInvalidTestValue("getSubshape", "storage", paramStorage);
	utils->initialize("getSubshape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraph) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraph", "storage");
	utils->initialize("getSubshapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSubshapeParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraph", "storage");
	paramName = utils->getInvalidTestValue("getSubshapeParagraph", "name", paramName);
	utils->initialize("getSubshapeParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSubshapeParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSubshapeParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraph", "storage");
	paramPath = utils->getInvalidTestValue("getSubshapeParagraph", "path", paramPath);
	utils->initialize("getSubshapeParagraph", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraph", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSubshapeParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSubshapeParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getSubshapeParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getSubshapeParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("getSubshapeParagraph", "password", paramPassword);
	utils->initialize("getSubshapeParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("getSubshapeParagraph", "folder", paramFolder);
	utils->initialize("getSubshapeParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapeParagraph", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("getSubshapeParagraph", "storage", paramStorage);
	utils->initialize("getSubshapeParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphs) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphs", "storage");
	utils->initialize("getSubshapeParagraphs", "");
	std::shared_ptr<Paragraphs> result = api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSubshapeParagraphsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphs", "storage");
	paramName = utils->getInvalidTestValue("getSubshapeParagraphs", "name", paramName);
	utils->initialize("getSubshapeParagraphs", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphs", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphs", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSubshapeParagraphs", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSubshapeParagraphs", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphs", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphsInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphs", "storage");
	paramPath = utils->getInvalidTestValue("getSubshapeParagraphs", "path", paramPath);
	utils->initialize("getSubshapeParagraphs", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphs", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphs", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSubshapeParagraphs", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSubshapeParagraphs", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphs", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphs", "storage");
	paramPassword = utils->getInvalidTestValue("getSubshapeParagraphs", "password", paramPassword);
	utils->initialize("getSubshapeParagraphs", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphs", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphs", "storage");
	paramFolder = utils->getInvalidTestValue("getSubshapeParagraphs", "folder", paramFolder);
	utils->initialize("getSubshapeParagraphs", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphs", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapeParagraphsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSubshapeParagraphs", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapeParagraphs", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapeParagraphs", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapeParagraphs", "shapeIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapeParagraphs", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapeParagraphs", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapeParagraphs", "storage");
	paramStorage = utils->getInvalidTestValue("getSubshapeParagraphs", "storage", paramStorage);
	utils->initialize("getSubshapeParagraphs", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapeParagraphs", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapeParagraphs", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapeParagraphs", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortion) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortion", "storage");
	utils->initialize("getSubshapePortion", "");
	std::shared_ptr<Portion> result = api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSubshapePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortion", "storage");
	paramName = utils->getInvalidTestValue("getSubshapePortion", "name", paramName);
	utils->initialize("getSubshapePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSubshapePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSubshapePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortion", "storage");
	paramPath = utils->getInvalidTestValue("getSubshapePortion", "path", paramPath);
	utils->initialize("getSubshapePortion", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortion", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSubshapePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSubshapePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getSubshapePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getSubshapePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("getSubshapePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("getSubshapePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortion", "storage");
	paramPassword = utils->getInvalidTestValue("getSubshapePortion", "password", paramPassword);
	utils->initialize("getSubshapePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortion", "storage");
	paramFolder = utils->getInvalidTestValue("getSubshapePortion", "folder", paramFolder);
	utils->initialize("getSubshapePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("getSubshapePortion", "portionIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortion", "storage");
	paramStorage = utils->getInvalidTestValue("getSubshapePortion", "storage", paramStorage);
	utils->initialize("getSubshapePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortions) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortions", "storage");
	utils->initialize("getSubshapePortions", "");
	std::shared_ptr<Portions> result = api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSubshapePortionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortions", "storage");
	paramName = utils->getInvalidTestValue("getSubshapePortions", "name", paramName);
	utils->initialize("getSubshapePortions", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortions", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortions", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSubshapePortions", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSubshapePortions", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortions", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionsInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortions", "storage");
	paramPath = utils->getInvalidTestValue("getSubshapePortions", "path", paramPath);
	utils->initialize("getSubshapePortions", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortions", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionsInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortions", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("getSubshapePortions", "shapeIndex", paramShapeIndex).value();
	utils->initialize("getSubshapePortions", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortions", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionsInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortions", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("getSubshapePortions", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("getSubshapePortions", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortions", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortions", "storage");
	paramPassword = utils->getInvalidTestValue("getSubshapePortions", "password", paramPassword);
	utils->initialize("getSubshapePortions", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortions", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortions", "storage");
	paramFolder = utils->getInvalidTestValue("getSubshapePortions", "folder", paramFolder);
	utils->initialize("getSubshapePortions", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortions", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapePortionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSubshapePortions", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapePortions", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapePortions", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("getSubshapePortions", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("getSubshapePortions", "paragraphIndex");
	utility::string_t paramPassword = utils->getTestValue("getSubshapePortions", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapePortions", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapePortions", "storage");
	paramStorage = utils->getInvalidTestValue("getSubshapePortions", "storage", paramStorage);
	utils->initialize("getSubshapePortions", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapePortions", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapePortions", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapePortions", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapes) {
	utility::string_t paramName = utils->getTestValue("getSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapes", "storage");
	utils->initialize("getSubshapes", "");
	std::shared_ptr<Shapes> result = api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getSubshapesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapes", "storage");
	paramName = utils->getInvalidTestValue("getSubshapes", "name", paramName);
	utils->initialize("getSubshapes", "name", paramName);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapes", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapes", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getSubshapes", "slideIndex", paramSlideIndex).value();
	utils->initialize("getSubshapes", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapes", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapesInvalidPath) {
	utility::string_t paramName = utils->getTestValue("getSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapes", "storage");
	paramPath = utils->getInvalidTestValue("getSubshapes", "path", paramPath);
	utils->initialize("getSubshapes", "path", paramPath);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapes", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapes", "storage");
	paramPassword = utils->getInvalidTestValue("getSubshapes", "password", paramPassword);
	utils->initialize("getSubshapes", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapes", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapes", "storage");
	paramFolder = utils->getInvalidTestValue("getSubshapes", "folder", paramFolder);
	utils->initialize("getSubshapes", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapes", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getSubshapesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getSubshapes", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getSubshapes", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("getSubshapes", "path");
	utility::string_t paramPassword = utils->getTestValue("getSubshapes", "password");
	utility::string_t paramFolder = utils->getTestValue("getSubshapes", "folder");
	utility::string_t paramStorage = utils->getTestValue("getSubshapes", "storage");
	paramStorage = utils->getInvalidTestValue("getSubshapes", "storage", paramStorage);
	utils->initialize("getSubshapes", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getSubshapes", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getSubshapes", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getSubshapes", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getTheme) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage");
	utils->initialize("getTheme", "");
	std::shared_ptr<Theme> result = api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getThemeInvalidName) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage");
	paramName = utils->getInvalidTestValue("getTheme", "name", paramName);
	utils->initialize("getTheme", "name", paramName);

	bool failed = true;
	try
	{
		api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTheme", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTheme", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTheme", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTheme", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTheme", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getThemeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("getTheme", "slideIndex", paramSlideIndex).value();
	utils->initialize("getTheme", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTheme", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTheme", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTheme", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTheme", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTheme", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getThemeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage");
	paramPassword = utils->getInvalidTestValue("getTheme", "password", paramPassword);
	utils->initialize("getTheme", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTheme", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTheme", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTheme", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTheme", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTheme", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getThemeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage");
	paramFolder = utils->getInvalidTestValue("getTheme", "folder", paramFolder);
	utils->initialize("getTheme", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTheme", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTheme", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTheme", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTheme", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTheme", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getThemeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getTheme", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("getTheme", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("getTheme", "password");
	utility::string_t paramFolder = utils->getTestValue("getTheme", "folder");
	utility::string_t paramStorage = utils->getTestValue("getTheme", "storage");
	paramStorage = utils->getInvalidTestValue("getTheme", "storage", paramStorage);
	utils->initialize("getTheme", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getTheme", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getTheme", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getTheme", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getTheme", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getTheme", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getViewProperties) {
	utility::string_t paramName = utils->getTestValue("getViewProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getViewProperties", "storage");
	utils->initialize("getViewProperties", "");
	std::shared_ptr<ViewProperties> result = api->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, getViewPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("getViewProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getViewProperties", "storage");
	paramName = utils->getInvalidTestValue("getViewProperties", "name", paramName);
	utils->initialize("getViewProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getViewProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getViewPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("getViewProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getViewProperties", "storage");
	paramPassword = utils->getInvalidTestValue("getViewProperties", "password", paramPassword);
	utils->initialize("getViewProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getViewProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getViewPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("getViewProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getViewProperties", "storage");
	paramFolder = utils->getInvalidTestValue("getViewProperties", "folder", paramFolder);
	utils->initialize("getViewProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getViewProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, getViewPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("getViewProperties", "name");
	utility::string_t paramPassword = utils->getTestValue("getViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("getViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("getViewProperties", "storage");
	paramStorage = utils->getInvalidTestValue("getViewProperties", "storage", paramStorage);
	utils->initialize("getViewProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->getViewProperties(paramName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("getViewProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("getViewProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("getViewProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromHtml) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage");
	utils->initialize("importFromHtml", "");
	std::shared_ptr<Document> result = api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, importFromHtmlInvalidName) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage");
	paramName = utils->getInvalidTestValue("importFromHtml", "name", paramName);
	utils->initialize("importFromHtml", "name", paramName);

	bool failed = true;
	try
	{
		api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromHtml", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromHtmlInvalidHtml) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage");
	paramHtml = utils->getInvalidTestValue("importFromHtml", "html", paramHtml);
	utils->initialize("importFromHtml", "html", paramHtml);

	bool failed = true;
	try
	{
		api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "html");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "html", paramHtml);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "html");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "html", paramHtml);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromHtml", "html"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromHtmlInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage");
	paramPassword = utils->getInvalidTestValue("importFromHtml", "password", paramPassword);
	utils->initialize("importFromHtml", "password", paramPassword);

	bool failed = true;
	try
	{
		api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromHtml", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromHtmlInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage");
	paramFolder = utils->getInvalidTestValue("importFromHtml", "folder", paramFolder);
	utils->initialize("importFromHtml", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromHtml", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromHtmlInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("importFromHtml", "name");
	utility::string_t paramHtml = utils->getTestValue("importFromHtml", "html");
	utility::string_t paramPassword = utils->getTestValue("importFromHtml", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromHtml", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromHtml", "storage");
	paramStorage = utils->getInvalidTestValue("importFromHtml", "storage", paramStorage);
	utils->initialize("importFromHtml", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromHtml", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromHtml", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromHtml", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromPdf) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage");
	utils->initialize("importFromPdf", "");
	std::shared_ptr<Document> result = api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, importFromPdfInvalidName) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage");
	paramName = utils->getInvalidTestValue("importFromPdf", "name", paramName);
	utils->initialize("importFromPdf", "name", paramName);

	bool failed = true;
	try
	{
		api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromPdf", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromPdfInvalidPdf) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage");
	paramPdf = utils->getInvalidBinaryTestValue("importFromPdf", "pdf", paramPdf);
	utils->initialize("importFromPdf", "pdf", paramPdf);

	bool failed = true;
	try
	{
		api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "pdf");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "pdf", paramPdf);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "pdf");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "pdf", paramPdf);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromPdf", "pdf"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromPdfInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage");
	paramPassword = utils->getInvalidTestValue("importFromPdf", "password", paramPassword);
	utils->initialize("importFromPdf", "password", paramPassword);

	bool failed = true;
	try
	{
		api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromPdf", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromPdfInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage");
	paramFolder = utils->getInvalidTestValue("importFromPdf", "folder", paramFolder);
	utils->initialize("importFromPdf", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromPdf", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, importFromPdfInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("importFromPdf", "name");
	std::shared_ptr<HttpContent> paramPdf = utils->getBinaryTestValue("importFromPdf", "pdf");
	utility::string_t paramPassword = utils->getTestValue("importFromPdf", "password");
	utility::string_t paramFolder = utils->getTestValue("importFromPdf", "folder");
	utility::string_t paramStorage = utils->getTestValue("importFromPdf", "storage");
	paramStorage = utils->getInvalidTestValue("importFromPdf", "storage", paramStorage);
	utils->initialize("importFromPdf", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("importFromPdf", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("importFromPdf", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("importFromPdf", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, merge) {
	utility::string_t paramName = utils->getTestValue("merge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request");
	utility::string_t paramPassword = utils->getTestValue("merge", "password");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage");
	utils->initialize("merge", "");
	std::shared_ptr<Document> result = api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, mergeInvalidName) {
	utility::string_t paramName = utils->getTestValue("merge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request");
	utility::string_t paramPassword = utils->getTestValue("merge", "password");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage");
	paramName = utils->getInvalidTestValue("merge", "name", paramName);
	utils->initialize("merge", "name", paramName);

	bool failed = true;
	try
	{
		api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("merge", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("merge", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("merge", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("merge", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("merge", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeInvalidRequest) {
	utility::string_t paramName = utils->getTestValue("merge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request");
	utility::string_t paramPassword = utils->getTestValue("merge", "password");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage");
	paramRequest = utils->getInvalidTestValueForClass<>("merge", "request", paramRequest);
	utils->initialize("merge", "request", paramRequest);

	bool failed = true;
	try
	{
		api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("merge", "request");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("merge", "request", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("merge", "request");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("merge", "request", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("merge", "request"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("merge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request");
	utility::string_t paramPassword = utils->getTestValue("merge", "password");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage");
	paramPassword = utils->getInvalidTestValue("merge", "password", paramPassword);
	utils->initialize("merge", "password", paramPassword);

	bool failed = true;
	try
	{
		api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("merge", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("merge", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("merge", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("merge", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("merge", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("merge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request");
	utility::string_t paramPassword = utils->getTestValue("merge", "password");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage");
	paramFolder = utils->getInvalidTestValue("merge", "folder", paramFolder);
	utils->initialize("merge", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("merge", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("merge", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("merge", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("merge", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("merge", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("merge", "name");
	std::shared_ptr<PresentationsMergeRequest> paramRequest = utils->getTestValueForClass<PresentationsMergeRequest>("merge", "request");
	utility::string_t paramPassword = utils->getTestValue("merge", "password");
	utility::string_t paramFolder = utils->getTestValue("merge", "folder");
	utility::string_t paramStorage = utils->getTestValue("merge", "storage");
	paramStorage = utils->getInvalidTestValue("merge", "storage", paramStorage);
	utils->initialize("merge", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("merge", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("merge", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("merge", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("merge", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("merge", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeAndSaveOnline) {
	utility::string_t paramOutPath = utils->getTestValue("mergeAndSaveOnline", "outPath");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeAndSaveOnline", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeAndSaveOnline", "request");
	utility::string_t paramStorage = utils->getTestValue("mergeAndSaveOnline", "storage");
	utils->initialize("mergeAndSaveOnline", "");
	api->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage).wait();
}

TEST_F(SlidesApiTest, mergeAndSaveOnlineInvalidOutPath) {
	utility::string_t paramOutPath = utils->getTestValue("mergeAndSaveOnline", "outPath");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeAndSaveOnline", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeAndSaveOnline", "request");
	utility::string_t paramStorage = utils->getTestValue("mergeAndSaveOnline", "storage");
	paramOutPath = utils->getInvalidTestValue("mergeAndSaveOnline", "outPath", paramOutPath);
	utils->initialize("mergeAndSaveOnline", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeAndSaveOnline", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeAndSaveOnlineInvalidFiles) {
	utility::string_t paramOutPath = utils->getTestValue("mergeAndSaveOnline", "outPath");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeAndSaveOnline", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeAndSaveOnline", "request");
	utility::string_t paramStorage = utils->getTestValue("mergeAndSaveOnline", "storage");
	paramFiles = utils->getInvalidBinArrayTestValue("mergeAndSaveOnline", "files", paramFiles);
	utils->initialize("mergeAndSaveOnline", "files", paramFiles);

	bool failed = true;
	try
	{
		api->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "files");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "files", paramFiles);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "files");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "files", paramFiles);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeAndSaveOnline", "files"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeAndSaveOnlineInvalidRequest) {
	utility::string_t paramOutPath = utils->getTestValue("mergeAndSaveOnline", "outPath");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeAndSaveOnline", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeAndSaveOnline", "request");
	utility::string_t paramStorage = utils->getTestValue("mergeAndSaveOnline", "storage");
	paramRequest = utils->getInvalidTestValueForClass<>("mergeAndSaveOnline", "request", paramRequest);
	utils->initialize("mergeAndSaveOnline", "request", paramRequest);

	bool failed = true;
	try
	{
		api->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "request");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "request", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "request");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "request", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeAndSaveOnline", "request"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeAndSaveOnlineInvalidStorage) {
	utility::string_t paramOutPath = utils->getTestValue("mergeAndSaveOnline", "outPath");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeAndSaveOnline", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeAndSaveOnline", "request");
	utility::string_t paramStorage = utils->getTestValue("mergeAndSaveOnline", "storage");
	paramStorage = utils->getInvalidTestValue("mergeAndSaveOnline", "storage", paramStorage);
	utils->initialize("mergeAndSaveOnline", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeAndSaveOnline", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeAndSaveOnline", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeAndSaveOnline", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeOnline) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeOnline", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeOnline", "request");
	utility::string_t paramStorage = utils->getTestValue("mergeOnline", "storage");
	utils->initialize("mergeOnline", "");
	HttpContent result = api->mergeOnline(paramFiles, paramRequest, paramStorage).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, mergeOnlineInvalidFiles) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeOnline", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeOnline", "request");
	utility::string_t paramStorage = utils->getTestValue("mergeOnline", "storage");
	paramFiles = utils->getInvalidBinArrayTestValue("mergeOnline", "files", paramFiles);
	utils->initialize("mergeOnline", "files", paramFiles);

	bool failed = true;
	try
	{
		api->mergeOnline(paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "files");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "files", paramFiles);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "files");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "files", paramFiles);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeOnline", "files"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeOnlineInvalidRequest) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeOnline", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeOnline", "request");
	utility::string_t paramStorage = utils->getTestValue("mergeOnline", "storage");
	paramRequest = utils->getInvalidTestValueForClass<>("mergeOnline", "request", paramRequest);
	utils->initialize("mergeOnline", "request", paramRequest);

	bool failed = true;
	try
	{
		api->mergeOnline(paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "request");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "request", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "request");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "request", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeOnline", "request"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, mergeOnlineInvalidStorage) {
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("mergeOnline", "files");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("mergeOnline", "request");
	utility::string_t paramStorage = utils->getTestValue("mergeOnline", "storage");
	paramStorage = utils->getInvalidTestValue("mergeOnline", "storage", paramStorage);
	utils->initialize("mergeOnline", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->mergeOnline(paramFiles, paramRequest, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("mergeOnline", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("mergeOnline", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("mergeOnline", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFile) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	utils->initialize("moveFile", "");
	api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
}

TEST_F(SlidesApiTest, moveFileInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	paramSrcPath = utils->getInvalidTestValue("moveFile", "srcPath", paramSrcPath);
	utils->initialize("moveFile", "srcPath", paramSrcPath);

	bool failed = true;
	try
	{
		api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcPath", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcPath", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	paramDestPath = utils->getInvalidTestValue("moveFile", "destPath", paramDestPath);
	utils->initialize("moveFile", "destPath", paramDestPath);

	bool failed = true;
	try
	{
		api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "destPath", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "destPath", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	paramSrcStorageName = utils->getInvalidTestValue("moveFile", "srcStorageName", paramSrcStorageName);
	utils->initialize("moveFile", "srcStorageName", paramSrcStorageName);

	bool failed = true;
	try
	{
		api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcStorageName", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "srcStorageName", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	paramDestStorageName = utils->getInvalidTestValue("moveFile", "destStorageName", paramDestStorageName);
	utils->initialize("moveFile", "destStorageName", paramDestStorageName);

	bool failed = true;
	try
	{
		api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "destStorageName", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "destStorageName", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFileInvalidVersionId) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFile", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFile", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFile", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFile", "destStorageName");
	utility::string_t paramVersionId = utils->getTestValue("moveFile", "versionId");
	paramVersionId = utils->getInvalidTestValue("moveFile", "versionId", paramVersionId);
	utils->initialize("moveFile", "versionId", paramVersionId);

	bool failed = true;
	try
	{
		api->moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFile", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFile", "versionId", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFile", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFile", "versionId", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFile", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolder) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName");
	utils->initialize("moveFolder", "");
	api->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
}

TEST_F(SlidesApiTest, moveFolderInvalidSrcPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName");
	paramSrcPath = utils->getInvalidTestValue("moveFolder", "srcPath", paramSrcPath);
	utils->initialize("moveFolder", "srcPath", paramSrcPath);

	bool failed = true;
	try
	{
		api->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcPath", paramSrcPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcPath", paramSrcPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "srcPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderInvalidDestPath) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName");
	paramDestPath = utils->getInvalidTestValue("moveFolder", "destPath", paramDestPath);
	utils->initialize("moveFolder", "destPath", paramDestPath);

	bool failed = true;
	try
	{
		api->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destPath", paramDestPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destPath", paramDestPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "destPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderInvalidSrcStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName");
	paramSrcStorageName = utils->getInvalidTestValue("moveFolder", "srcStorageName", paramSrcStorageName);
	utils->initialize("moveFolder", "srcStorageName", paramSrcStorageName);

	bool failed = true;
	try
	{
		api->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcStorageName", paramSrcStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "srcStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "srcStorageName", paramSrcStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "srcStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveFolderInvalidDestStorageName) {
	utility::string_t paramSrcPath = utils->getTestValue("moveFolder", "srcPath");
	utility::string_t paramDestPath = utils->getTestValue("moveFolder", "destPath");
	utility::string_t paramSrcStorageName = utils->getTestValue("moveFolder", "srcStorageName");
	utility::string_t paramDestStorageName = utils->getTestValue("moveFolder", "destStorageName");
	paramDestStorageName = utils->getInvalidTestValue("moveFolder", "destStorageName", paramDestStorageName);
	utils->initialize("moveFolder", "destStorageName", paramDestStorageName);

	bool failed = true;
	try
	{
		api->moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destStorageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destStorageName", paramDestStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveFolder", "destStorageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveFolder", "destStorageName", paramDestStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveFolder", "destStorageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSection) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage");
	utils->initialize("moveSection", "");
	std::shared_ptr<Sections> result = api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, moveSectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage");
	paramName = utils->getInvalidTestValue("moveSection", "name", paramName);
	utils->initialize("moveSection", "name", paramName);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSectionInvalidSectionIndex) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage");
	paramSectionIndex = utils->getInvalidIntTestValue("moveSection", "sectionIndex", paramSectionIndex).value();
	utils->initialize("moveSection", "sectionIndex", paramSectionIndex);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "sectionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "sectionIndex", paramSectionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "sectionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "sectionIndex", paramSectionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "sectionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSectionInvalidNewPosition) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage");
	paramNewPosition = utils->getInvalidIntTestValue("moveSection", "newPosition", paramNewPosition).value();
	utils->initialize("moveSection", "newPosition", paramNewPosition);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "newPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "newPosition", paramNewPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "newPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "newPosition", paramNewPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "newPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage");
	paramPassword = utils->getInvalidTestValue("moveSection", "password", paramPassword);
	utils->initialize("moveSection", "password", paramPassword);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage");
	paramFolder = utils->getInvalidTestValue("moveSection", "folder", paramFolder);
	utils->initialize("moveSection", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("moveSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("moveSection", "sectionIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSection", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSection", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSection", "storage");
	paramStorage = utils->getInvalidTestValue("moveSection", "storage", paramStorage);
	utils->initialize("moveSection", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSection", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSection", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlide) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage");
	utils->initialize("moveSlide", "");
	std::shared_ptr<Slides> result = api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, moveSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage");
	paramName = utils->getInvalidTestValue("moveSlide", "name", paramName);
	utils->initialize("moveSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("moveSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("moveSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlideInvalidNewPosition) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage");
	paramNewPosition = utils->getInvalidIntTestValue("moveSlide", "newPosition", paramNewPosition).value();
	utils->initialize("moveSlide", "newPosition", paramNewPosition);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "newPosition");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "newPosition", paramNewPosition);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "newPosition");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "newPosition", paramNewPosition);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "newPosition"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage");
	paramPassword = utils->getInvalidTestValue("moveSlide", "password", paramPassword);
	utils->initialize("moveSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage");
	paramFolder = utils->getInvalidTestValue("moveSlide", "folder", paramFolder);
	utils->initialize("moveSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, moveSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("moveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("moveSlide", "slideIndex");
	int32_t paramNewPosition = utils->getIntTestValue("moveSlide", "newPosition");
	utility::string_t paramPassword = utils->getTestValue("moveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("moveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("moveSlide", "storage");
	paramStorage = utils->getInvalidTestValue("moveSlide", "storage", paramStorage);
	utils->initialize("moveSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("moveSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("moveSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("moveSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("moveSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("moveSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExists) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage");
	utils->initialize("notesSlideExists", "");
	std::shared_ptr<EntityExists> result = api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, notesSlideExistsInvalidName) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage");
	paramName = utils->getInvalidTestValue("notesSlideExists", "name", paramName);
	utils->initialize("notesSlideExists", "name", paramName);

	bool failed = true;
	try
	{
		api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExists", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("notesSlideExists", "slideIndex", paramSlideIndex).value();
	utils->initialize("notesSlideExists", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExists", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage");
	paramPassword = utils->getInvalidTestValue("notesSlideExists", "password", paramPassword);
	utils->initialize("notesSlideExists", "password", paramPassword);

	bool failed = true;
	try
	{
		api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExists", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage");
	paramFolder = utils->getInvalidTestValue("notesSlideExists", "folder", paramFolder);
	utils->initialize("notesSlideExists", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExists", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("notesSlideExists", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExists", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExists", "password");
	utility::string_t paramFolder = utils->getTestValue("notesSlideExists", "folder");
	utility::string_t paramStorage = utils->getTestValue("notesSlideExists", "storage");
	paramStorage = utils->getInvalidTestValue("notesSlideExists", "storage", paramStorage);
	utils->initialize("notesSlideExists", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExists", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExists", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExists", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("notesSlideExistsOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExistsOnline", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExistsOnline", "password");
	utils->initialize("notesSlideExistsOnline", "");
	std::shared_ptr<EntityExists> result = api->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, notesSlideExistsOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("notesSlideExistsOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExistsOnline", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExistsOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("notesSlideExistsOnline", "document", paramDocument);
	utils->initialize("notesSlideExistsOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExistsOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("notesSlideExistsOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExistsOnline", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExistsOnline", "password");
	paramSlideIndex = utils->getInvalidIntTestValue("notesSlideExistsOnline", "slideIndex", paramSlideIndex).value();
	utils->initialize("notesSlideExistsOnline", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExistsOnline", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, notesSlideExistsOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("notesSlideExistsOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("notesSlideExistsOnline", "slideIndex");
	utility::string_t paramPassword = utils->getTestValue("notesSlideExistsOnline", "password");
	paramPassword = utils->getInvalidTestValue("notesSlideExistsOnline", "password", paramPassword);
	utils->initialize("notesSlideExistsOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("notesSlideExistsOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("notesSlideExistsOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("notesSlideExistsOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExists) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId");
	utils->initialize("objectExists", "");
	std::shared_ptr<ObjectExist> result = api->objectExists(paramPath, paramStorageName, paramVersionId).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, objectExistsInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId");
	paramPath = utils->getInvalidTestValue("objectExists", "path", paramPath);
	utils->initialize("objectExists", "path", paramPath);

	bool failed = true;
	try
	{
		api->objectExists(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExistsInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId");
	paramStorageName = utils->getInvalidTestValue("objectExists", "storageName", paramStorageName);
	utils->initialize("objectExists", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->objectExists(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, objectExistsInvalidVersionId) {
	utility::string_t paramPath = utils->getTestValue("objectExists", "path");
	utility::string_t paramStorageName = utils->getTestValue("objectExists", "storageName");
	utility::string_t paramVersionId = utils->getTestValue("objectExists", "versionId");
	paramVersionId = utils->getInvalidTestValue("objectExists", "versionId", paramVersionId);
	utils->initialize("objectExists", "versionId", paramVersionId);

	bool failed = true;
	try
	{
		api->objectExists(paramPath, paramStorageName, paramVersionId).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("objectExists", "versionId");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("objectExists", "versionId", paramVersionId);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("objectExists", "versionId");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("objectExists", "versionId", paramVersionId);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("objectExists", "versionId"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, orderedMerge) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage");
	utils->initialize("orderedMerge", "");
	std::shared_ptr<Document> result = api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, orderedMergeInvalidName) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage");
	paramName = utils->getInvalidTestValue("orderedMerge", "name", paramName);
	utils->initialize("orderedMerge", "name", paramName);

	bool failed = true;
	try
	{
		api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("orderedMerge", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, orderedMergeInvalidRequest) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage");
	paramRequest = utils->getInvalidTestValueForClass<>("orderedMerge", "request", paramRequest);
	utils->initialize("orderedMerge", "request", paramRequest);

	bool failed = true;
	try
	{
		api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "request");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "request", paramRequest);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "request");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "request", paramRequest);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("orderedMerge", "request"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, orderedMergeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage");
	paramPassword = utils->getInvalidTestValue("orderedMerge", "password", paramPassword);
	utils->initialize("orderedMerge", "password", paramPassword);

	bool failed = true;
	try
	{
		api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("orderedMerge", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, orderedMergeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage");
	paramFolder = utils->getInvalidTestValue("orderedMerge", "folder", paramFolder);
	utils->initialize("orderedMerge", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("orderedMerge", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, orderedMergeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("orderedMerge", "name");
	std::shared_ptr<OrderedMergeRequest> paramRequest = utils->getTestValueForClass<OrderedMergeRequest>("orderedMerge", "request");
	utility::string_t paramPassword = utils->getTestValue("orderedMerge", "password");
	utility::string_t paramFolder = utils->getTestValue("orderedMerge", "folder");
	utility::string_t paramStorage = utils->getTestValue("orderedMerge", "storage");
	paramStorage = utils->getInvalidTestValue("orderedMerge", "storage", paramStorage);
	utils->initialize("orderedMerge", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("orderedMerge", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("orderedMerge", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("orderedMerge", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, pipeline) {
	std::shared_ptr<Pipeline> paramPipeline = utils->getTestValueForClass<Pipeline>("pipeline", "pipeline");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("pipeline", "files");
	utils->initialize("pipeline", "");
	HttpContent result = api->pipeline(paramPipeline, paramFiles).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, pipelineInvalidPipeline) {
	std::shared_ptr<Pipeline> paramPipeline = utils->getTestValueForClass<Pipeline>("pipeline", "pipeline");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("pipeline", "files");
	paramPipeline = utils->getInvalidTestValueForClass<>("pipeline", "pipeline", paramPipeline);
	utils->initialize("pipeline", "pipeline", paramPipeline);

	bool failed = true;
	try
	{
		api->pipeline(paramPipeline, paramFiles).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("pipeline", "pipeline");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("pipeline", "pipeline", paramPipeline);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("pipeline", "pipeline");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("pipeline", "pipeline", paramPipeline);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("pipeline", "pipeline"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, pipelineInvalidFiles) {
	std::shared_ptr<Pipeline> paramPipeline = utils->getTestValueForClass<Pipeline>("pipeline", "pipeline");
	std::vector<std::shared_ptr<HttpContent>> paramFiles = utils->getBinArrayTestValue("pipeline", "files");
	paramFiles = utils->getInvalidBinArrayTestValue("pipeline", "files", paramFiles);
	utils->initialize("pipeline", "files", paramFiles);

	bool failed = true;
	try
	{
		api->pipeline(paramPipeline, paramFiles).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("pipeline", "files");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("pipeline", "files", paramFiles);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("pipeline", "files");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("pipeline", "files", paramFiles);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("pipeline", "files"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlides) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage");
	utils->initialize("reorderSlides", "");
	std::shared_ptr<Slides> result = api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, reorderSlidesInvalidName) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage");
	paramName = utils->getInvalidTestValue("reorderSlides", "name", paramName);
	utils->initialize("reorderSlides", "name", paramName);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlidesInvalidOldPositions) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage");
	paramOldPositions = utils->getInvalidIntVectorTestValue("reorderSlides", "oldPositions", paramOldPositions);
	utils->initialize("reorderSlides", "oldPositions", paramOldPositions);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "oldPositions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "oldPositions", paramOldPositions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "oldPositions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "oldPositions", paramOldPositions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "oldPositions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlidesInvalidNewPositions) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage");
	paramNewPositions = utils->getInvalidIntVectorTestValue("reorderSlides", "newPositions", paramNewPositions);
	utils->initialize("reorderSlides", "newPositions", paramNewPositions);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "newPositions");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "newPositions", paramNewPositions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "newPositions");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "newPositions", paramNewPositions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "newPositions"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlidesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage");
	paramPassword = utils->getInvalidTestValue("reorderSlides", "password", paramPassword);
	utils->initialize("reorderSlides", "password", paramPassword);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlidesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage");
	paramFolder = utils->getInvalidTestValue("reorderSlides", "folder", paramFolder);
	utils->initialize("reorderSlides", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, reorderSlidesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("reorderSlides", "name");
	std::vector<int32_t> paramOldPositions = utils->getIntVectorTestValue("reorderSlides", "oldPositions");
	std::vector<int32_t> paramNewPositions = utils->getIntVectorTestValue("reorderSlides", "newPositions");
	utility::string_t paramPassword = utils->getTestValue("reorderSlides", "password");
	utility::string_t paramFolder = utils->getTestValue("reorderSlides", "folder");
	utility::string_t paramStorage = utils->getTestValue("reorderSlides", "storage");
	paramStorage = utils->getInvalidTestValue("reorderSlides", "storage", paramStorage);
	utils->initialize("reorderSlides", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("reorderSlides", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("reorderSlides", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("reorderSlides", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationText) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage");
	utils->initialize("replacePresentationText", "");
	std::shared_ptr<DocumentReplaceResult> result = api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidName) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage");
	paramName = utils->getInvalidTestValue("replacePresentationText", "name", paramName);
	utils->initialize("replacePresentationText", "name", paramName);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidOldValue) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage");
	paramOldValue = utils->getInvalidTestValue("replacePresentationText", "oldValue", paramOldValue);
	utils->initialize("replacePresentationText", "oldValue", paramOldValue);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "oldValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "oldValue", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "oldValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "oldValue", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "oldValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidNewValue) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage");
	paramNewValue = utils->getInvalidTestValue("replacePresentationText", "newValue", paramNewValue);
	utils->initialize("replacePresentationText", "newValue", paramNewValue);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "newValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "newValue", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "newValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "newValue", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "newValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidIgnoreCase) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage");
	paramIgnoreCase = utils->getInvalidBoolTestValue("replacePresentationText", "ignoreCase", paramIgnoreCase).value();
	utils->initialize("replacePresentationText", "ignoreCase", paramIgnoreCase);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "ignoreCase");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "ignoreCase", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "ignoreCase");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "ignoreCase", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "ignoreCase"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage");
	paramPassword = utils->getInvalidTestValue("replacePresentationText", "password", paramPassword);
	utils->initialize("replacePresentationText", "password", paramPassword);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage");
	paramFolder = utils->getInvalidTestValue("replacePresentationText", "folder", paramFolder);
	utils->initialize("replacePresentationText", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("replacePresentationText", "name");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationText", "password");
	utility::string_t paramFolder = utils->getTestValue("replacePresentationText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replacePresentationText", "storage");
	paramStorage = utils->getInvalidTestValue("replacePresentationText", "storage", paramStorage);
	utils->initialize("replacePresentationText", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationText", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationText", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationText", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password");
	utils->initialize("replacePresentationTextOnline", "");
	HttpContent result = api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, replacePresentationTextOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("replacePresentationTextOnline", "document", paramDocument);
	utils->initialize("replacePresentationTextOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationTextOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextOnlineInvalidOldValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password");
	paramOldValue = utils->getInvalidTestValue("replacePresentationTextOnline", "oldValue", paramOldValue);
	utils->initialize("replacePresentationTextOnline", "oldValue", paramOldValue);

	bool failed = true;
	try
	{
		api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "oldValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "oldValue", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "oldValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "oldValue", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationTextOnline", "oldValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextOnlineInvalidNewValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password");
	paramNewValue = utils->getInvalidTestValue("replacePresentationTextOnline", "newValue", paramNewValue);
	utils->initialize("replacePresentationTextOnline", "newValue", paramNewValue);

	bool failed = true;
	try
	{
		api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "newValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "newValue", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "newValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "newValue", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationTextOnline", "newValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextOnlineInvalidIgnoreCase) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password");
	paramIgnoreCase = utils->getInvalidBoolTestValue("replacePresentationTextOnline", "ignoreCase", paramIgnoreCase).value();
	utils->initialize("replacePresentationTextOnline", "ignoreCase", paramIgnoreCase);

	bool failed = true;
	try
	{
		api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "ignoreCase");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "ignoreCase", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "ignoreCase");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "ignoreCase", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationTextOnline", "ignoreCase"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replacePresentationTextOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replacePresentationTextOnline", "document");
	utility::string_t paramOldValue = utils->getTestValue("replacePresentationTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replacePresentationTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replacePresentationTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replacePresentationTextOnline", "password");
	paramPassword = utils->getInvalidTestValue("replacePresentationTextOnline", "password", paramPassword);
	utils->initialize("replacePresentationTextOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replacePresentationTextOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replacePresentationTextOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replacePresentationTextOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideText) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage");
	utils->initialize("replaceSlideText", "");
	std::shared_ptr<SlideReplaceResult> result = api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidName) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage");
	paramName = utils->getInvalidTestValue("replaceSlideText", "name", paramName);
	utils->initialize("replaceSlideText", "name", paramName);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("replaceSlideText", "slideIndex", paramSlideIndex).value();
	utils->initialize("replaceSlideText", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidOldValue) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage");
	paramOldValue = utils->getInvalidTestValue("replaceSlideText", "oldValue", paramOldValue);
	utils->initialize("replaceSlideText", "oldValue", paramOldValue);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "oldValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "oldValue", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "oldValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "oldValue", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "oldValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidNewValue) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage");
	paramNewValue = utils->getInvalidTestValue("replaceSlideText", "newValue", paramNewValue);
	utils->initialize("replaceSlideText", "newValue", paramNewValue);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "newValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "newValue", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "newValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "newValue", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "newValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidIgnoreCase) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage");
	paramIgnoreCase = utils->getInvalidBoolTestValue("replaceSlideText", "ignoreCase", paramIgnoreCase).value();
	utils->initialize("replaceSlideText", "ignoreCase", paramIgnoreCase);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "ignoreCase");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "ignoreCase", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "ignoreCase");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "ignoreCase", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "ignoreCase"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage");
	paramPassword = utils->getInvalidTestValue("replaceSlideText", "password", paramPassword);
	utils->initialize("replaceSlideText", "password", paramPassword);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage");
	paramFolder = utils->getInvalidTestValue("replaceSlideText", "folder", paramFolder);
	utils->initialize("replaceSlideText", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("replaceSlideText", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideText", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideText", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideText", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideText", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideText", "password");
	utility::string_t paramFolder = utils->getTestValue("replaceSlideText", "folder");
	utility::string_t paramStorage = utils->getTestValue("replaceSlideText", "storage");
	paramStorage = utils->getInvalidTestValue("replaceSlideText", "storage", paramStorage);
	utils->initialize("replaceSlideText", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideText", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideText", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideText", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password");
	utils->initialize("replaceSlideTextOnline", "");
	HttpContent result = api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("replaceSlideTextOnline", "document", paramDocument);
	utils->initialize("replaceSlideTextOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password");
	paramSlideIndex = utils->getInvalidIntTestValue("replaceSlideTextOnline", "slideIndex", paramSlideIndex).value();
	utils->initialize("replaceSlideTextOnline", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidOldValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password");
	paramOldValue = utils->getInvalidTestValue("replaceSlideTextOnline", "oldValue", paramOldValue);
	utils->initialize("replaceSlideTextOnline", "oldValue", paramOldValue);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "oldValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "oldValue", paramOldValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "oldValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "oldValue", paramOldValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "oldValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidNewValue) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password");
	paramNewValue = utils->getInvalidTestValue("replaceSlideTextOnline", "newValue", paramNewValue);
	utils->initialize("replaceSlideTextOnline", "newValue", paramNewValue);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "newValue");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "newValue", paramNewValue);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "newValue");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "newValue", paramNewValue);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "newValue"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidIgnoreCase) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password");
	paramIgnoreCase = utils->getInvalidBoolTestValue("replaceSlideTextOnline", "ignoreCase", paramIgnoreCase).value();
	utils->initialize("replaceSlideTextOnline", "ignoreCase", paramIgnoreCase);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "ignoreCase");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "ignoreCase", paramIgnoreCase);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "ignoreCase");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "ignoreCase", paramIgnoreCase);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "ignoreCase"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, replaceSlideTextOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("replaceSlideTextOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("replaceSlideTextOnline", "slideIndex");
	utility::string_t paramOldValue = utils->getTestValue("replaceSlideTextOnline", "oldValue");
	utility::string_t paramNewValue = utils->getTestValue("replaceSlideTextOnline", "newValue");
	auto paramIgnoreCase = utils->getOptionalBoolTestValue("replaceSlideTextOnline", "ignoreCase");
	utility::string_t paramPassword = utils->getTestValue("replaceSlideTextOnline", "password");
	paramPassword = utils->getInvalidTestValue("replaceSlideTextOnline", "password", paramPassword);
	utils->initialize("replaceSlideTextOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("replaceSlideTextOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("replaceSlideTextOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("replaceSlideTextOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShape) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	utils->initialize("saveNotesSlideShape", "");
	api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramName = utils->getInvalidTestValue("saveNotesSlideShape", "name", paramName);
	utils->initialize("saveNotesSlideShape", "name", paramName);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("saveNotesSlideShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("saveNotesSlideShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("saveNotesSlideShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("saveNotesSlideShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("saveNotesSlideShape", "format", paramFormat);
	utils->initialize("saveNotesSlideShape", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("saveNotesSlideShape", "outPath", paramOutPath);
	utils->initialize("saveNotesSlideShape", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("saveNotesSlideShape", "options", paramOptions);
	utils->initialize("saveNotesSlideShape", "options", paramOptions);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("saveNotesSlideShape", "scaleX", paramScaleX).value();
	utils->initialize("saveNotesSlideShape", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("saveNotesSlideShape", "scaleY", paramScaleY).value();
	utils->initialize("saveNotesSlideShape", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("saveNotesSlideShape", "bounds", paramBounds);
	utils->initialize("saveNotesSlideShape", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("saveNotesSlideShape", "password", paramPassword);
	utils->initialize("saveNotesSlideShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("saveNotesSlideShape", "folder", paramFolder);
	utils->initialize("saveNotesSlideShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("saveNotesSlideShape", "storage", paramStorage);
	utils->initialize("saveNotesSlideShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveNotesSlideShapeInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("saveNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveNotesSlideShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveNotesSlideShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveNotesSlideShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveNotesSlideShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveNotesSlideShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveNotesSlideShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveNotesSlideShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveNotesSlideShape", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("saveNotesSlideShape", "fontsFolder", paramFontsFolder);
	utils->initialize("saveNotesSlideShape", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveNotesSlideShape", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveNotesSlideShape", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveNotesSlideShape", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentation) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides");
	utils->initialize("savePresentation", "");
	api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
}

TEST_F(SlidesApiTest, savePresentationInvalidName) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides");
	paramName = utils->getInvalidTestValue("savePresentation", "name", paramName);
	utils->initialize("savePresentation", "name", paramName);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides");
	paramFormat = utils->getInvalidTestValue("savePresentation", "format", paramFormat);
	utils->initialize("savePresentation", "format", paramFormat);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides");
	paramOutPath = utils->getInvalidTestValue("savePresentation", "outPath", paramOutPath);
	utils->initialize("savePresentation", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides");
	paramOptions = utils->getInvalidTestValueForClass<>("savePresentation", "options", paramOptions);
	utils->initialize("savePresentation", "options", paramOptions);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides");
	paramPassword = utils->getInvalidTestValue("savePresentation", "password", paramPassword);
	utils->initialize("savePresentation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides");
	paramFolder = utils->getInvalidTestValue("savePresentation", "folder", paramFolder);
	utils->initialize("savePresentation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides");
	paramStorage = utils->getInvalidTestValue("savePresentation", "storage", paramStorage);
	utils->initialize("savePresentation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides");
	paramFontsFolder = utils->getInvalidTestValue("savePresentation", "fontsFolder", paramFontsFolder);
	utils->initialize("savePresentation", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, savePresentationInvalidSlides) {
	utility::string_t paramName = utils->getTestValue("savePresentation", "name");
	utility::string_t paramFormat = utils->getTestValue("savePresentation", "format");
	utility::string_t paramOutPath = utils->getTestValue("savePresentation", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("savePresentation", "options");
	utility::string_t paramPassword = utils->getTestValue("savePresentation", "password");
	utility::string_t paramFolder = utils->getTestValue("savePresentation", "folder");
	utility::string_t paramStorage = utils->getTestValue("savePresentation", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("savePresentation", "fontsFolder");
	std::vector<int32_t> paramSlides = utils->getIntVectorTestValue("savePresentation", "slides");
	paramSlides = utils->getInvalidIntVectorTestValue("savePresentation", "slides", paramSlides);
	utils->initialize("savePresentation", "slides", paramSlides);

	bool failed = true;
	try
	{
		api->savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("savePresentation", "slides");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("savePresentation", "slides", paramSlides);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("savePresentation", "slides");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("savePresentation", "slides", paramSlides);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("savePresentation", "slides"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShape) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	utils->initialize("saveShape", "");
	api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, saveShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramName = utils->getInvalidTestValue("saveShape", "name", paramName);
	utils->initialize("saveShape", "name", paramName);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("saveShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("saveShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("saveShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("saveShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("saveShape", "format", paramFormat);
	utils->initialize("saveShape", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("saveShape", "outPath", paramOutPath);
	utils->initialize("saveShape", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("saveShape", "options", paramOptions);
	utils->initialize("saveShape", "options", paramOptions);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("saveShape", "scaleX", paramScaleX).value();
	utils->initialize("saveShape", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("saveShape", "scaleY", paramScaleY).value();
	utils->initialize("saveShape", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("saveShape", "bounds", paramBounds);
	utils->initialize("saveShape", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("saveShape", "password", paramPassword);
	utils->initialize("saveShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("saveShape", "folder", paramFolder);
	utils->initialize("saveShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("saveShape", "storage", paramStorage);
	utils->initialize("saveShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("saveShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveShape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveShape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShape", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("saveShape", "fontsFolder", paramFontsFolder);
	utils->initialize("saveShape", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShape", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShape", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShape", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShape", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShape", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	utils->initialize("saveShapeOnline", "");
	api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("saveShapeOnline", "document", paramDocument);
	utils->initialize("saveShapeOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("saveShapeOnline", "slideIndex", paramSlideIndex).value();
	utils->initialize("saveShapeOnline", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidShapeIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("saveShapeOnline", "shapeIndex", paramShapeIndex).value();
	utils->initialize("saveShapeOnline", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("saveShapeOnline", "format", paramFormat);
	utils->initialize("saveShapeOnline", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidOutPath) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("saveShapeOnline", "outPath", paramOutPath);
	utils->initialize("saveShapeOnline", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidScaleX) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("saveShapeOnline", "scaleX", paramScaleX).value();
	utils->initialize("saveShapeOnline", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidScaleY) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("saveShapeOnline", "scaleY", paramScaleY).value();
	utils->initialize("saveShapeOnline", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidBounds) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("saveShapeOnline", "bounds", paramBounds);
	utils->initialize("saveShapeOnline", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("saveShapeOnline", "password", paramPassword);
	utils->initialize("saveShapeOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("saveShapeOnline", "storage", paramStorage);
	utils->initialize("saveShapeOnline", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveShapeOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveShapeOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveShapeOnline", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("saveShapeOnline", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveShapeOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveShapeOnline", "outPath");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveShapeOnline", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveShapeOnline", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveShapeOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveShapeOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveShapeOnline", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("saveShapeOnline", "fontsFolder", paramFontsFolder);
	utils->initialize("saveShapeOnline", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveShapeOnline", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveShapeOnline", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveShapeOnline", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlide) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	utils->initialize("saveSlide", "");
	api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, saveSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	paramName = utils->getInvalidTestValue("saveSlide", "name", paramName);
	utils->initialize("saveSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("saveSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("saveSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("saveSlide", "format", paramFormat);
	utils->initialize("saveSlide", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("saveSlide", "outPath", paramOutPath);
	utils->initialize("saveSlide", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("saveSlide", "options", paramOptions);
	utils->initialize("saveSlide", "options", paramOptions);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("saveSlide", "width", paramWidth).value();
	utils->initialize("saveSlide", "width", paramWidth);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("saveSlide", "height", paramHeight).value();
	utils->initialize("saveSlide", "height", paramHeight);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("saveSlide", "password", paramPassword);
	utils->initialize("saveSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("saveSlide", "folder", paramFolder);
	utils->initialize("saveSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("saveSlide", "storage", paramStorage);
	utils->initialize("saveSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("saveSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlide", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlide", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlide", "outPath");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("saveSlide", "options");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlide", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlide", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSlide", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlide", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("saveSlide", "fontsFolder", paramFontsFolder);
	utils->initialize("saveSlide", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlide", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlide", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlide", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlide", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlide", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder");
	utils->initialize("saveSlideOnline", "");
	api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("saveSlideOnline", "document", paramDocument);
	utils->initialize("saveSlideOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidSlideIndex) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("saveSlideOnline", "slideIndex", paramSlideIndex).value();
	utils->initialize("saveSlideOnline", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("saveSlideOnline", "format", paramFormat);
	utils->initialize("saveSlideOnline", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidOutPath) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("saveSlideOnline", "outPath", paramOutPath);
	utils->initialize("saveSlideOnline", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("saveSlideOnline", "width", paramWidth).value();
	utils->initialize("saveSlideOnline", "width", paramWidth);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("saveSlideOnline", "height", paramHeight).value();
	utils->initialize("saveSlideOnline", "height", paramHeight);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("saveSlideOnline", "password", paramPassword);
	utils->initialize("saveSlideOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("saveSlideOnline", "storage", paramStorage);
	utils->initialize("saveSlideOnline", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSlideOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("saveSlideOnline", "document");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSlideOnline", "slideIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSlideOnline", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSlideOnline", "outPath");
	auto paramWidth = utils->getOptionalIntTestValue("saveSlideOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("saveSlideOnline", "height");
	utility::string_t paramPassword = utils->getTestValue("saveSlideOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("saveSlideOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSlideOnline", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("saveSlideOnline", "fontsFolder", paramFontsFolder);
	utils->initialize("saveSlideOnline", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSlideOnline", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSlideOnline", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSlideOnline", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshape) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	utils->initialize("saveSubshape", "");
	api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
}

TEST_F(SlidesApiTest, saveSubshapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramName = utils->getInvalidTestValue("saveSubshape", "name", paramName);
	utils->initialize("saveSubshape", "name", paramName);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramSlideIndex = utils->getInvalidIntTestValue("saveSubshape", "slideIndex", paramSlideIndex).value();
	utils->initialize("saveSubshape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidPath) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramPath = utils->getInvalidTestValue("saveSubshape", "path", paramPath);
	utils->initialize("saveSubshape", "path", paramPath);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramShapeIndex = utils->getInvalidIntTestValue("saveSubshape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("saveSubshape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("saveSubshape", "format", paramFormat);
	utils->initialize("saveSubshape", "format", paramFormat);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidOutPath) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramOutPath = utils->getInvalidTestValue("saveSubshape", "outPath", paramOutPath);
	utils->initialize("saveSubshape", "outPath", paramOutPath);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "outPath");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "outPath", paramOutPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "outPath");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "outPath", paramOutPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "outPath"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("saveSubshape", "options", paramOptions);
	utils->initialize("saveSubshape", "options", paramOptions);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidScaleX) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramScaleX = utils->getInvalidDoubleTestValue("saveSubshape", "scaleX", paramScaleX).value();
	utils->initialize("saveSubshape", "scaleX", paramScaleX);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "scaleX");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "scaleX", paramScaleX);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "scaleX");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "scaleX", paramScaleX);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "scaleX"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidScaleY) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramScaleY = utils->getInvalidDoubleTestValue("saveSubshape", "scaleY", paramScaleY).value();
	utils->initialize("saveSubshape", "scaleY", paramScaleY);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "scaleY");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "scaleY", paramScaleY);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "scaleY");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "scaleY", paramScaleY);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "scaleY"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidBounds) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramBounds = utils->getInvalidTestValue("saveSubshape", "bounds", paramBounds);
	utils->initialize("saveSubshape", "bounds", paramBounds);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "bounds");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "bounds", paramBounds);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "bounds");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "bounds", paramBounds);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "bounds"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("saveSubshape", "password", paramPassword);
	utils->initialize("saveSubshape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("saveSubshape", "folder", paramFolder);
	utils->initialize("saveSubshape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("saveSubshape", "storage", paramStorage);
	utils->initialize("saveSubshape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, saveSubshapeInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("saveSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("saveSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("saveSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("saveSubshape", "shapeIndex");
	utility::string_t paramFormat = utils->getTestValue("saveSubshape", "format");
	utility::string_t paramOutPath = utils->getTestValue("saveSubshape", "outPath");
	std::shared_ptr<IShapeExportOptions> paramOptions = utils->getTestValueForClass<IShapeExportOptions>("saveSubshape", "options");
	auto paramScaleX = utils->getOptionalDoubleTestValue("saveSubshape", "scaleX");
	auto paramScaleY = utils->getOptionalDoubleTestValue("saveSubshape", "scaleY");
	utility::string_t paramBounds = utils->getTestValue("saveSubshape", "bounds");
	utility::string_t paramPassword = utils->getTestValue("saveSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("saveSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("saveSubshape", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("saveSubshape", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("saveSubshape", "fontsFolder", paramFontsFolder);
	utils->initialize("saveSubshape", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("saveSubshape", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("saveSubshape", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("saveSubshape", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimation) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage");
	utils->initialize("setAnimation", "");
	std::shared_ptr<SlideAnimation> result = api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setAnimationInvalidName) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage");
	paramName = utils->getInvalidTestValue("setAnimation", "name", paramName);
	utils->initialize("setAnimation", "name", paramName);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimationInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("setAnimation", "slideIndex", paramSlideIndex).value();
	utils->initialize("setAnimation", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimationInvalidAnimation) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage");
	paramAnimation = utils->getInvalidTestValueForClass<>("setAnimation", "animation", paramAnimation);
	utils->initialize("setAnimation", "animation", paramAnimation);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "animation");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "animation", paramAnimation);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "animation");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "animation", paramAnimation);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "animation"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimationInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage");
	paramPassword = utils->getInvalidTestValue("setAnimation", "password", paramPassword);
	utils->initialize("setAnimation", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimationInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage");
	paramFolder = utils->getInvalidTestValue("setAnimation", "folder", paramFolder);
	utils->initialize("setAnimation", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setAnimationInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setAnimation", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setAnimation", "slideIndex");
	std::shared_ptr<SlideAnimation> paramAnimation = utils->getTestValueForClass<SlideAnimation>("setAnimation", "animation");
	utility::string_t paramPassword = utils->getTestValue("setAnimation", "password");
	utility::string_t paramFolder = utils->getTestValue("setAnimation", "folder");
	utility::string_t paramStorage = utils->getTestValue("setAnimation", "storage");
	paramStorage = utils->getInvalidTestValue("setAnimation", "storage", paramStorage);
	utils->initialize("setAnimation", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setAnimation", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setAnimation", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setAnimation", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setAnimation", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setAnimation", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackground) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage");
	utils->initialize("setBackground", "");
	std::shared_ptr<SlideBackground> result = api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setBackgroundInvalidName) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage");
	paramName = utils->getInvalidTestValue("setBackground", "name", paramName);
	utils->initialize("setBackground", "name", paramName);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("setBackground", "slideIndex", paramSlideIndex).value();
	utils->initialize("setBackground", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundInvalidBackground) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage");
	paramBackground = utils->getInvalidTestValueForClass<>("setBackground", "background", paramBackground);
	utils->initialize("setBackground", "background", paramBackground);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "background");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "background", paramBackground);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "background");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "background", paramBackground);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "background"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage");
	paramPassword = utils->getInvalidTestValue("setBackground", "password", paramPassword);
	utils->initialize("setBackground", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage");
	paramFolder = utils->getInvalidTestValue("setBackground", "folder", paramFolder);
	utils->initialize("setBackground", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setBackground", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackground", "slideIndex");
	std::shared_ptr<SlideBackground> paramBackground = utils->getTestValueForClass<SlideBackground>("setBackground", "background");
	utility::string_t paramPassword = utils->getTestValue("setBackground", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackground", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackground", "storage");
	paramStorage = utils->getInvalidTestValue("setBackground", "storage", paramStorage);
	utils->initialize("setBackground", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackground", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackground", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackground", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackground", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackground", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColor) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage");
	utils->initialize("setBackgroundColor", "");
	std::shared_ptr<SlideBackground> result = api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidName) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage");
	paramName = utils->getInvalidTestValue("setBackgroundColor", "name", paramName);
	utils->initialize("setBackgroundColor", "name", paramName);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("setBackgroundColor", "slideIndex", paramSlideIndex).value();
	utils->initialize("setBackgroundColor", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidColor) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage");
	paramColor = utils->getInvalidTestValue("setBackgroundColor", "color", paramColor);
	utils->initialize("setBackgroundColor", "color", paramColor);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "color");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "color", paramColor);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "color");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "color", paramColor);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "color"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage");
	paramPassword = utils->getInvalidTestValue("setBackgroundColor", "password", paramPassword);
	utils->initialize("setBackgroundColor", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage");
	paramFolder = utils->getInvalidTestValue("setBackgroundColor", "folder", paramFolder);
	utils->initialize("setBackgroundColor", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setBackgroundColorInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setBackgroundColor", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setBackgroundColor", "slideIndex");
	utility::string_t paramColor = utils->getTestValue("setBackgroundColor", "color");
	utility::string_t paramPassword = utils->getTestValue("setBackgroundColor", "password");
	utility::string_t paramFolder = utils->getTestValue("setBackgroundColor", "folder");
	utility::string_t paramStorage = utils->getTestValue("setBackgroundColor", "storage");
	paramStorage = utils->getInvalidTestValue("setBackgroundColor", "storage", paramStorage);
	utils->initialize("setBackgroundColor", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setBackgroundColor", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setBackgroundColor", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setBackgroundColor", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentProperties) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage");
	utils->initialize("setDocumentProperties", "");
	std::shared_ptr<DocumentProperties> result = api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setDocumentPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage");
	paramName = utils->getInvalidTestValue("setDocumentProperties", "name", paramName);
	utils->initialize("setDocumentProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertiesInvalidProperties) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage");
	paramProperties = utils->getInvalidTestValueForClass<>("setDocumentProperties", "properties", paramProperties);
	utils->initialize("setDocumentProperties", "properties", paramProperties);

	bool failed = true;
	try
	{
		api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "properties");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "properties", paramProperties);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "properties");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "properties", paramProperties);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperties", "properties"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage");
	paramPassword = utils->getInvalidTestValue("setDocumentProperties", "password", paramPassword);
	utils->initialize("setDocumentProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage");
	paramFolder = utils->getInvalidTestValue("setDocumentProperties", "folder", paramFolder);
	utils->initialize("setDocumentProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperties", "name");
	std::shared_ptr<DocumentProperties> paramProperties = utils->getTestValueForClass<DocumentProperties>("setDocumentProperties", "properties");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperties", "storage");
	paramStorage = utils->getInvalidTestValue("setDocumentProperties", "storage", paramStorage);
	utils->initialize("setDocumentProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentProperty) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage");
	utils->initialize("setDocumentProperty", "");
	std::shared_ptr<DocumentProperty> result = api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidName) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage");
	paramName = utils->getInvalidTestValue("setDocumentProperty", "name", paramName);
	utils->initialize("setDocumentProperty", "name", paramName);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidPropertyName) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage");
	paramPropertyName = utils->getInvalidTestValue("setDocumentProperty", "propertyName", paramPropertyName);
	utils->initialize("setDocumentProperty", "propertyName", paramPropertyName);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "propertyName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "propertyName", paramPropertyName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "propertyName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "propertyName", paramPropertyName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "propertyName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidProperty) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage");
	paramProperty = utils->getInvalidTestValueForClass<>("setDocumentProperty", "property", paramProperty);
	utils->initialize("setDocumentProperty", "property", paramProperty);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "property");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "property", paramProperty);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "property");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "property", paramProperty);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "property"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage");
	paramPassword = utils->getInvalidTestValue("setDocumentProperty", "password", paramPassword);
	utils->initialize("setDocumentProperty", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage");
	paramFolder = utils->getInvalidTestValue("setDocumentProperty", "folder", paramFolder);
	utils->initialize("setDocumentProperty", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setDocumentPropertyInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setDocumentProperty", "name");
	utility::string_t paramPropertyName = utils->getTestValue("setDocumentProperty", "propertyName");
	std::shared_ptr<DocumentProperty> paramProperty = utils->getTestValueForClass<DocumentProperty>("setDocumentProperty", "property");
	utility::string_t paramPassword = utils->getTestValue("setDocumentProperty", "password");
	utility::string_t paramFolder = utils->getTestValue("setDocumentProperty", "folder");
	utility::string_t paramStorage = utils->getTestValue("setDocumentProperty", "storage");
	paramStorage = utils->getInvalidTestValue("setDocumentProperty", "storage", paramStorage);
	utils->initialize("setDocumentProperty", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setDocumentProperty", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setDocumentProperty", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setDocumentProperty", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage");
	utils->initialize("setNotesSlideHeaderFooter", "");
	std::shared_ptr<NotesSlideHeaderFooter> result = api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage");
	paramName = utils->getInvalidTestValue("setNotesSlideHeaderFooter", "name", paramName);
	utils->initialize("setNotesSlideHeaderFooter", "name", paramName);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("setNotesSlideHeaderFooter", "slideIndex", paramSlideIndex).value();
	utils->initialize("setNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("setNotesSlideHeaderFooter", "dto", paramDto);
	utils->initialize("setNotesSlideHeaderFooter", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage");
	paramPassword = utils->getInvalidTestValue("setNotesSlideHeaderFooter", "password", paramPassword);
	utils->initialize("setNotesSlideHeaderFooter", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage");
	paramFolder = utils->getInvalidTestValue("setNotesSlideHeaderFooter", "folder", paramFolder);
	utils->initialize("setNotesSlideHeaderFooter", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setNotesSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setNotesSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setNotesSlideHeaderFooter", "slideIndex");
	std::shared_ptr<NotesSlideHeaderFooter> paramDto = utils->getTestValueForClass<NotesSlideHeaderFooter>("setNotesSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setNotesSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setNotesSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setNotesSlideHeaderFooter", "storage");
	paramStorage = utils->getInvalidTestValue("setNotesSlideHeaderFooter", "storage", paramStorage);
	utils->initialize("setNotesSlideHeaderFooter", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setNotesSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setNotesSlideHeaderFooter", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setNotesSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setPresentationHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage");
	utils->initialize("setPresentationHeaderFooter", "");
	std::shared_ptr<Document> result = api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setPresentationHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage");
	paramName = utils->getInvalidTestValue("setPresentationHeaderFooter", "name", paramName);
	utils->initialize("setPresentationHeaderFooter", "name", paramName);

	bool failed = true;
	try
	{
		api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setPresentationHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setPresentationHeaderFooterInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("setPresentationHeaderFooter", "dto", paramDto);
	utils->initialize("setPresentationHeaderFooter", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setPresentationHeaderFooter", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setPresentationHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage");
	paramPassword = utils->getInvalidTestValue("setPresentationHeaderFooter", "password", paramPassword);
	utils->initialize("setPresentationHeaderFooter", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setPresentationHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setPresentationHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage");
	paramFolder = utils->getInvalidTestValue("setPresentationHeaderFooter", "folder", paramFolder);
	utils->initialize("setPresentationHeaderFooter", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setPresentationHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setPresentationHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setPresentationHeaderFooter", "name");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setPresentationHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setPresentationHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setPresentationHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setPresentationHeaderFooter", "storage");
	paramStorage = utils->getInvalidTestValue("setPresentationHeaderFooter", "storage", paramStorage);
	utils->initialize("setPresentationHeaderFooter", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setPresentationHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setPresentationHeaderFooter", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setPresentationHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtection) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage");
	utils->initialize("setProtection", "");
	std::shared_ptr<ProtectionProperties> result = api->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setProtectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage");
	paramName = utils->getInvalidTestValue("setProtection", "name", paramName);
	utils->initialize("setProtection", "name", paramName);

	bool failed = true;
	try
	{
		api->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtection", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtection", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("setProtection", "dto", paramDto);
	utils->initialize("setProtection", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtection", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtection", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtection", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtection", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtection", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage");
	paramPassword = utils->getInvalidTestValue("setProtection", "password", paramPassword);
	utils->initialize("setProtection", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtection", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtection", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage");
	paramFolder = utils->getInvalidTestValue("setProtection", "folder", paramFolder);
	utils->initialize("setProtection", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtection", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtection", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setProtection", "name");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtection", "dto");
	utility::string_t paramPassword = utils->getTestValue("setProtection", "password");
	utility::string_t paramFolder = utils->getTestValue("setProtection", "folder");
	utility::string_t paramStorage = utils->getTestValue("setProtection", "storage");
	paramStorage = utils->getInvalidTestValue("setProtection", "storage", paramStorage);
	utils->initialize("setProtection", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtection", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtection", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setProtectionOnline", "document");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtectionOnline", "dto");
	utility::string_t paramPassword = utils->getTestValue("setProtectionOnline", "password");
	utils->initialize("setProtectionOnline", "");
	HttpContent result = api->setProtectionOnline(paramDocument, paramDto, paramPassword).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, setProtectionOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setProtectionOnline", "document");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtectionOnline", "dto");
	utility::string_t paramPassword = utils->getTestValue("setProtectionOnline", "password");
	paramDocument = utils->getInvalidBinaryTestValue("setProtectionOnline", "document", paramDocument);
	utils->initialize("setProtectionOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->setProtectionOnline(paramDocument, paramDto, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtectionOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionOnlineInvalidDto) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setProtectionOnline", "document");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtectionOnline", "dto");
	utility::string_t paramPassword = utils->getTestValue("setProtectionOnline", "password");
	paramDto = utils->getInvalidTestValueForClass<>("setProtectionOnline", "dto", paramDto);
	utils->initialize("setProtectionOnline", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setProtectionOnline(paramDocument, paramDto, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtectionOnline", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setProtectionOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("setProtectionOnline", "document");
	std::shared_ptr<ProtectionProperties> paramDto = utils->getTestValueForClass<ProtectionProperties>("setProtectionOnline", "dto");
	utility::string_t paramPassword = utils->getTestValue("setProtectionOnline", "password");
	paramPassword = utils->getInvalidTestValue("setProtectionOnline", "password", paramPassword);
	utils->initialize("setProtectionOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setProtectionOnline(paramDocument, paramDto, paramPassword).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setProtectionOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setProtectionOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setProtectionOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSections) {
	utility::string_t paramName = utils->getTestValue("setSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage");
	utils->initialize("setSections", "");
	std::shared_ptr<Sections> result = api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setSectionsInvalidName) {
	utility::string_t paramName = utils->getTestValue("setSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage");
	paramName = utils->getInvalidTestValue("setSections", "name", paramName);
	utils->initialize("setSections", "name", paramName);

	bool failed = true;
	try
	{
		api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSections", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSections", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSections", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSections", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSections", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSectionsInvalidSections) {
	utility::string_t paramName = utils->getTestValue("setSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage");
	paramSections = utils->getInvalidTestValueForClass<>("setSections", "sections", paramSections);
	utils->initialize("setSections", "sections", paramSections);

	bool failed = true;
	try
	{
		api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSections", "sections");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSections", "sections", paramSections);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSections", "sections");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSections", "sections", paramSections);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSections", "sections"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSectionsInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage");
	paramPassword = utils->getInvalidTestValue("setSections", "password", paramPassword);
	utils->initialize("setSections", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSections", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSections", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSections", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSections", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSections", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSectionsInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage");
	paramFolder = utils->getInvalidTestValue("setSections", "folder", paramFolder);
	utils->initialize("setSections", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSections", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSections", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSections", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSections", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSections", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSectionsInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setSections", "name");
	std::shared_ptr<Sections> paramSections = utils->getTestValueForClass<Sections>("setSections", "sections");
	utility::string_t paramPassword = utils->getTestValue("setSections", "password");
	utility::string_t paramFolder = utils->getTestValue("setSections", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSections", "storage");
	paramStorage = utils->getInvalidTestValue("setSections", "storage", paramStorage);
	utils->initialize("setSections", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSections", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSections", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSections", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSections", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSections", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooter) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage");
	utils->initialize("setSlideHeaderFooter", "");
	std::shared_ptr<HeaderFooter> result = api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidName) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage");
	paramName = utils->getInvalidTestValue("setSlideHeaderFooter", "name", paramName);
	utils->initialize("setSlideHeaderFooter", "name", paramName);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("setSlideHeaderFooter", "slideIndex", paramSlideIndex).value();
	utils->initialize("setSlideHeaderFooter", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("setSlideHeaderFooter", "dto", paramDto);
	utils->initialize("setSlideHeaderFooter", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage");
	paramPassword = utils->getInvalidTestValue("setSlideHeaderFooter", "password", paramPassword);
	utils->initialize("setSlideHeaderFooter", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage");
	paramFolder = utils->getInvalidTestValue("setSlideHeaderFooter", "folder", paramFolder);
	utils->initialize("setSlideHeaderFooter", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideHeaderFooterInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setSlideHeaderFooter", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("setSlideHeaderFooter", "slideIndex");
	std::shared_ptr<HeaderFooter> paramDto = utils->getTestValueForClass<HeaderFooter>("setSlideHeaderFooter", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideHeaderFooter", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideHeaderFooter", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideHeaderFooter", "storage");
	paramStorage = utils->getInvalidTestValue("setSlideHeaderFooter", "storage", paramStorage);
	utils->initialize("setSlideHeaderFooter", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideHeaderFooter", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideHeaderFooter", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideHeaderFooter", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlideProperties) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage");
	utils->initialize("setSlideProperties", "");
	std::shared_ptr<SlideProperties> result = api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setSlidePropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage");
	paramName = utils->getInvalidTestValue("setSlideProperties", "name", paramName);
	utils->initialize("setSlideProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlidePropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("setSlideProperties", "dto", paramDto);
	utils->initialize("setSlideProperties", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlidePropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage");
	paramPassword = utils->getInvalidTestValue("setSlideProperties", "password", paramPassword);
	utils->initialize("setSlideProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlidePropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage");
	paramFolder = utils->getInvalidTestValue("setSlideProperties", "folder", paramFolder);
	utils->initialize("setSlideProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setSlidePropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setSlideProperties", "name");
	std::shared_ptr<SlideProperties> paramDto = utils->getTestValueForClass<SlideProperties>("setSlideProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setSlideProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setSlideProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setSlideProperties", "storage");
	paramStorage = utils->getInvalidTestValue("setSlideProperties", "storage", paramStorage);
	utils->initialize("setSlideProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setSlideProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setSlideProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setSlideProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setViewProperties) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage");
	utils->initialize("setViewProperties", "");
	std::shared_ptr<ViewProperties> result = api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, setViewPropertiesInvalidName) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage");
	paramName = utils->getInvalidTestValue("setViewProperties", "name", paramName);
	utils->initialize("setViewProperties", "name", paramName);

	bool failed = true;
	try
	{
		api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setViewProperties", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setViewPropertiesInvalidDto) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("setViewProperties", "dto", paramDto);
	utils->initialize("setViewProperties", "dto", paramDto);

	bool failed = true;
	try
	{
		api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setViewProperties", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setViewPropertiesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage");
	paramPassword = utils->getInvalidTestValue("setViewProperties", "password", paramPassword);
	utils->initialize("setViewProperties", "password", paramPassword);

	bool failed = true;
	try
	{
		api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setViewProperties", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setViewPropertiesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage");
	paramFolder = utils->getInvalidTestValue("setViewProperties", "folder", paramFolder);
	utils->initialize("setViewProperties", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setViewProperties", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, setViewPropertiesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("setViewProperties", "name");
	std::shared_ptr<ViewProperties> paramDto = utils->getTestValueForClass<ViewProperties>("setViewProperties", "dto");
	utility::string_t paramPassword = utils->getTestValue("setViewProperties", "password");
	utility::string_t paramFolder = utils->getTestValue("setViewProperties", "folder");
	utility::string_t paramStorage = utils->getTestValue("setViewProperties", "storage");
	paramStorage = utils->getInvalidTestValue("setViewProperties", "storage", paramStorage);
	utils->initialize("setViewProperties", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("setViewProperties", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("setViewProperties", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("setViewProperties", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, split) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	utils->initialize("split", "");
	std::shared_ptr<SplitDocumentResult> result = api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, splitInvalidName) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramName = utils->getInvalidTestValue("split", "name", paramName);
	utils->initialize("split", "name", paramName);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidOptions) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramOptions = utils->getInvalidTestValueForClass<>("split", "options", paramOptions);
	utils->initialize("split", "options", paramOptions);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "options");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "options", paramOptions);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "options");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "options", paramOptions);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "options"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidFormat) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("split", "format", paramFormat);
	utils->initialize("split", "format", paramFormat);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidWidth) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("split", "width", paramWidth).value();
	utils->initialize("split", "width", paramWidth);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidHeight) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("split", "height", paramHeight).value();
	utils->initialize("split", "height", paramHeight);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidFrom) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramFrom = utils->getInvalidIntTestValue("split", "from", paramFrom).value();
	utils->initialize("split", "from", paramFrom);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "from");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "from", paramFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "from");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "from", paramFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "from"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidTo) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramTo = utils->getInvalidIntTestValue("split", "to", paramTo).value();
	utils->initialize("split", "to", paramTo);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "to");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "to", paramTo);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "to");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "to", paramTo);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "to"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidDestFolder) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramDestFolder = utils->getInvalidTestValue("split", "destFolder", paramDestFolder);
	utils->initialize("split", "destFolder", paramDestFolder);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "destFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "destFolder", paramDestFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "destFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "destFolder", paramDestFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "destFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("split", "password", paramPassword);
	utils->initialize("split", "password", paramPassword);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramFolder = utils->getInvalidTestValue("split", "folder", paramFolder);
	utils->initialize("split", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("split", "storage", paramStorage);
	utils->initialize("split", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitInvalidFontsFolder) {
	utility::string_t paramName = utils->getTestValue("split", "name");
	std::shared_ptr<ExportOptions> paramOptions = utils->getTestValueForClass<ExportOptions>("split", "options");
	utility::string_t paramFormat = utils->getTestValue("split", "format");
	auto paramWidth = utils->getOptionalIntTestValue("split", "width");
	auto paramHeight = utils->getOptionalIntTestValue("split", "height");
	auto paramFrom = utils->getOptionalIntTestValue("split", "from");
	auto paramTo = utils->getOptionalIntTestValue("split", "to");
	utility::string_t paramDestFolder = utils->getTestValue("split", "destFolder");
	utility::string_t paramPassword = utils->getTestValue("split", "password");
	utility::string_t paramFolder = utils->getTestValue("split", "folder");
	utility::string_t paramStorage = utils->getTestValue("split", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("split", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("split", "fontsFolder", paramFontsFolder);
	utils->initialize("split", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("split", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("split", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("split", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("split", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("split", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder");
	utils->initialize("splitAndSaveOnline", "");
	std::shared_ptr<SplitDocumentResult> result = api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("splitAndSaveOnline", "document", paramDocument);
	utils->initialize("splitAndSaveOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("splitAndSaveOnline", "format", paramFormat);
	utils->initialize("splitAndSaveOnline", "format", paramFormat);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidDestFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder");
	paramDestFolder = utils->getInvalidTestValue("splitAndSaveOnline", "destFolder", paramDestFolder);
	utils->initialize("splitAndSaveOnline", "destFolder", paramDestFolder);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "destFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "destFolder", paramDestFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "destFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "destFolder", paramDestFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "destFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("splitAndSaveOnline", "width", paramWidth).value();
	utils->initialize("splitAndSaveOnline", "width", paramWidth);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("splitAndSaveOnline", "height", paramHeight).value();
	utils->initialize("splitAndSaveOnline", "height", paramHeight);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidFrom) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder");
	paramFrom = utils->getInvalidIntTestValue("splitAndSaveOnline", "from", paramFrom).value();
	utils->initialize("splitAndSaveOnline", "from", paramFrom);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "from");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "from", paramFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "from");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "from", paramFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "from"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidTo) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder");
	paramTo = utils->getInvalidIntTestValue("splitAndSaveOnline", "to", paramTo).value();
	utils->initialize("splitAndSaveOnline", "to", paramTo);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "to");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "to", paramTo);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "to");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "to", paramTo);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "to"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("splitAndSaveOnline", "password", paramPassword);
	utils->initialize("splitAndSaveOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("splitAndSaveOnline", "storage", paramStorage);
	utils->initialize("splitAndSaveOnline", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitAndSaveOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitAndSaveOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitAndSaveOnline", "format");
	utility::string_t paramDestFolder = utils->getTestValue("splitAndSaveOnline", "destFolder");
	auto paramWidth = utils->getOptionalIntTestValue("splitAndSaveOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitAndSaveOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitAndSaveOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitAndSaveOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitAndSaveOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitAndSaveOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitAndSaveOnline", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("splitAndSaveOnline", "fontsFolder", paramFontsFolder);
	utils->initialize("splitAndSaveOnline", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitAndSaveOnline", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitAndSaveOnline", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitAndSaveOnline", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnline) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder");
	utils->initialize("splitOnline", "");
	HttpContent result = api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).get();
	EXPECT_FALSE(result.getData()->eof());
}

TEST_F(SlidesApiTest, splitOnlineInvalidDocument) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder");
	paramDocument = utils->getInvalidBinaryTestValue("splitOnline", "document", paramDocument);
	utils->initialize("splitOnline", "document", paramDocument);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "document");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "document", paramDocument);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "document");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "document", paramDocument);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "document"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidFormat) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder");
	paramFormat = utils->getInvalidTestValue("splitOnline", "format", paramFormat);
	utils->initialize("splitOnline", "format", paramFormat);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "format");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "format", paramFormat);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "format");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "format", paramFormat);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "format"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidWidth) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder");
	paramWidth = utils->getInvalidIntTestValue("splitOnline", "width", paramWidth).value();
	utils->initialize("splitOnline", "width", paramWidth);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "width");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "width", paramWidth);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "width");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "width", paramWidth);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "width"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidHeight) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder");
	paramHeight = utils->getInvalidIntTestValue("splitOnline", "height", paramHeight).value();
	utils->initialize("splitOnline", "height", paramHeight);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "height");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "height", paramHeight);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "height");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "height", paramHeight);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "height"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidFrom) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder");
	paramFrom = utils->getInvalidIntTestValue("splitOnline", "from", paramFrom).value();
	utils->initialize("splitOnline", "from", paramFrom);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "from");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "from", paramFrom);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "from");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "from", paramFrom);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "from"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidTo) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder");
	paramTo = utils->getInvalidIntTestValue("splitOnline", "to", paramTo).value();
	utils->initialize("splitOnline", "to", paramTo);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "to");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "to", paramTo);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "to");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "to", paramTo);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "to"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidPassword) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder");
	paramPassword = utils->getInvalidTestValue("splitOnline", "password", paramPassword);
	utils->initialize("splitOnline", "password", paramPassword);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidStorage) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder");
	paramStorage = utils->getInvalidTestValue("splitOnline", "storage", paramStorage);
	utils->initialize("splitOnline", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, splitOnlineInvalidFontsFolder) {
	std::shared_ptr<HttpContent> paramDocument = utils->getBinaryTestValue("splitOnline", "document");
	utility::string_t paramFormat = utils->getTestValue("splitOnline", "format");
	auto paramWidth = utils->getOptionalIntTestValue("splitOnline", "width");
	auto paramHeight = utils->getOptionalIntTestValue("splitOnline", "height");
	auto paramFrom = utils->getOptionalIntTestValue("splitOnline", "from");
	auto paramTo = utils->getOptionalIntTestValue("splitOnline", "to");
	utility::string_t paramPassword = utils->getTestValue("splitOnline", "password");
	utility::string_t paramStorage = utils->getTestValue("splitOnline", "storage");
	utility::string_t paramFontsFolder = utils->getTestValue("splitOnline", "fontsFolder");
	paramFontsFolder = utils->getInvalidTestValue("splitOnline", "fontsFolder", paramFontsFolder);
	utils->initialize("splitOnline", "fontsFolder", paramFontsFolder);

	bool failed = true;
	try
	{
		api->splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("splitOnline", "fontsFolder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("splitOnline", "fontsFolder", paramFontsFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("splitOnline", "fontsFolder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("splitOnline", "fontsFolder", paramFontsFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("splitOnline", "fontsFolder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, storageExists) {
	utility::string_t paramStorageName = utils->getTestValue("storageExists", "storageName");
	utils->initialize("storageExists", "");
	std::shared_ptr<StorageExist> result = api->storageExists(paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, storageExistsInvalidStorageName) {
	utility::string_t paramStorageName = utils->getTestValue("storageExists", "storageName");
	paramStorageName = utils->getInvalidTestValue("storageExists", "storageName", paramStorageName);
	utils->initialize("storageExists", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->storageExists(paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("storageExists", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("storageExists", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("storageExists", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("storageExists", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("storageExists", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffect) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage");
	utils->initialize("updateAnimationEffect", "");
	std::shared_ptr<SlideAnimation> result = api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage");
	paramName = utils->getInvalidTestValue("updateAnimationEffect", "name", paramName);
	utils->initialize("updateAnimationEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateAnimationEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateAnimationEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage");
	paramEffectIndex = utils->getInvalidIntTestValue("updateAnimationEffect", "effectIndex", paramEffectIndex).value();
	utils->initialize("updateAnimationEffect", "effectIndex", paramEffectIndex);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "effectIndex", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "effectIndex", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage");
	paramEffect = utils->getInvalidTestValueForClass<>("updateAnimationEffect", "effect", paramEffect);
	utils->initialize("updateAnimationEffect", "effect", paramEffect);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "effect", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "effect", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage");
	paramPassword = utils->getInvalidTestValue("updateAnimationEffect", "password", paramPassword);
	utils->initialize("updateAnimationEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage");
	paramFolder = utils->getInvalidTestValue("updateAnimationEffect", "folder", paramFolder);
	utils->initialize("updateAnimationEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateAnimationEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationEffect", "slideIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationEffect", "storage");
	paramStorage = utils->getInvalidTestValue("updateAnimationEffect", "storage", paramStorage);
	utils->initialize("updateAnimationEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffect) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage");
	utils->initialize("updateAnimationInteractiveSequenceEffect", "");
	std::shared_ptr<SlideAnimation> result = api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage");
	paramName = utils->getInvalidTestValue("updateAnimationInteractiveSequenceEffect", "name", paramName);
	utils->initialize("updateAnimationInteractiveSequenceEffect", "name", paramName);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidSequenceIndex) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage");
	paramSequenceIndex = utils->getInvalidIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex).value();
	utils->initialize("updateAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "sequenceIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "sequenceIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidEffectIndex) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage");
	paramEffectIndex = utils->getInvalidIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex).value();
	utils->initialize("updateAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "effectIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "effectIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidEffect) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage");
	paramEffect = utils->getInvalidTestValueForClass<>("updateAnimationInteractiveSequenceEffect", "effect", paramEffect);
	utils->initialize("updateAnimationInteractiveSequenceEffect", "effect", paramEffect);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "effect", paramEffect);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "effect");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "effect", paramEffect);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "effect"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage");
	paramPassword = utils->getInvalidTestValue("updateAnimationInteractiveSequenceEffect", "password", paramPassword);
	utils->initialize("updateAnimationInteractiveSequenceEffect", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage");
	paramFolder = utils->getInvalidTestValue("updateAnimationInteractiveSequenceEffect", "folder", paramFolder);
	utils->initialize("updateAnimationInteractiveSequenceEffect", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateAnimationInteractiveSequenceEffectInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex");
	int32_t paramSequenceIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex");
	int32_t paramEffectIndex = utils->getIntTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex");
	std::shared_ptr<Effect> paramEffect = utils->getTestValueForClass<Effect>("updateAnimationInteractiveSequenceEffect", "effect");
	utility::string_t paramPassword = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "password");
	utility::string_t paramFolder = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateAnimationInteractiveSequenceEffect", "storage");
	paramStorage = utils->getInvalidTestValue("updateAnimationInteractiveSequenceEffect", "storage", paramStorage);
	utils->initialize("updateAnimationInteractiveSequenceEffect", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateAnimationInteractiveSequenceEffect", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateAnimationInteractiveSequenceEffect", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateAnimationInteractiveSequenceEffect", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategory) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage");
	utils->initialize("updateChartCategory", "");
	std::shared_ptr<Chart> result = api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage");
	paramName = utils->getInvalidTestValue("updateChartCategory", "name", paramName);
	utils->initialize("updateChartCategory", "name", paramName);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateChartCategory", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateChartCategory", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updateChartCategory", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updateChartCategory", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidCategoryIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage");
	paramCategoryIndex = utils->getInvalidIntTestValue("updateChartCategory", "categoryIndex", paramCategoryIndex).value();
	utils->initialize("updateChartCategory", "categoryIndex", paramCategoryIndex);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "categoryIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "categoryIndex", paramCategoryIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "categoryIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "categoryIndex", paramCategoryIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "categoryIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidCategory) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage");
	paramCategory = utils->getInvalidTestValueForClass<>("updateChartCategory", "category", paramCategory);
	utils->initialize("updateChartCategory", "category", paramCategory);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "category");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "category", paramCategory);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "category");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "category", paramCategory);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "category"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage");
	paramPassword = utils->getInvalidTestValue("updateChartCategory", "password", paramPassword);
	utils->initialize("updateChartCategory", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage");
	paramFolder = utils->getInvalidTestValue("updateChartCategory", "folder", paramFolder);
	utils->initialize("updateChartCategory", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartCategoryInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateChartCategory", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartCategory", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartCategory", "shapeIndex");
	int32_t paramCategoryIndex = utils->getIntTestValue("updateChartCategory", "categoryIndex");
	std::shared_ptr<ChartCategory> paramCategory = utils->getTestValueForClass<ChartCategory>("updateChartCategory", "category");
	utility::string_t paramPassword = utils->getTestValue("updateChartCategory", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartCategory", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartCategory", "storage");
	paramStorage = utils->getInvalidTestValue("updateChartCategory", "storage", paramStorage);
	utils->initialize("updateChartCategory", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartCategory", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartCategory", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartCategory", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPoint) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage");
	utils->initialize("updateChartDataPoint", "");
	std::shared_ptr<Chart> result = api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage");
	paramName = utils->getInvalidTestValue("updateChartDataPoint", "name", paramName);
	utils->initialize("updateChartDataPoint", "name", paramName);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateChartDataPoint", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateChartDataPoint", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updateChartDataPoint", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updateChartDataPoint", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage");
	paramSeriesIndex = utils->getInvalidIntTestValue("updateChartDataPoint", "seriesIndex", paramSeriesIndex).value();
	utils->initialize("updateChartDataPoint", "seriesIndex", paramSeriesIndex);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "seriesIndex", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "seriesIndex", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidPointIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage");
	paramPointIndex = utils->getInvalidIntTestValue("updateChartDataPoint", "pointIndex", paramPointIndex).value();
	utils->initialize("updateChartDataPoint", "pointIndex", paramPointIndex);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "pointIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "pointIndex", paramPointIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "pointIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "pointIndex", paramPointIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "pointIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidDataPoint) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage");
	paramDataPoint = utils->getInvalidTestValueForClass<>("updateChartDataPoint", "dataPoint", paramDataPoint);
	utils->initialize("updateChartDataPoint", "dataPoint", paramDataPoint);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "dataPoint");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "dataPoint", paramDataPoint);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "dataPoint");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "dataPoint", paramDataPoint);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "dataPoint"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage");
	paramPassword = utils->getInvalidTestValue("updateChartDataPoint", "password", paramPassword);
	utils->initialize("updateChartDataPoint", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage");
	paramFolder = utils->getInvalidTestValue("updateChartDataPoint", "folder", paramFolder);
	utils->initialize("updateChartDataPoint", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartDataPointInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateChartDataPoint", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartDataPoint", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartDataPoint", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartDataPoint", "seriesIndex");
	int32_t paramPointIndex = utils->getIntTestValue("updateChartDataPoint", "pointIndex");
	std::shared_ptr<DataPoint> paramDataPoint = utils->getTestValueForClass<ScatterChartDataPoint>("updateChartDataPoint", "dataPoint");
	utility::string_t paramPassword = utils->getTestValue("updateChartDataPoint", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartDataPoint", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartDataPoint", "storage");
	paramStorage = utils->getInvalidTestValue("updateChartDataPoint", "storage", paramStorage);
	utils->initialize("updateChartDataPoint", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartDataPoint", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartDataPoint", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartDataPoint", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeries) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage");
	utils->initialize("updateChartSeries", "");
	std::shared_ptr<Chart> result = api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage");
	paramName = utils->getInvalidTestValue("updateChartSeries", "name", paramName);
	utils->initialize("updateChartSeries", "name", paramName);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateChartSeries", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateChartSeries", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updateChartSeries", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updateChartSeries", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidSeriesIndex) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage");
	paramSeriesIndex = utils->getInvalidIntTestValue("updateChartSeries", "seriesIndex", paramSeriesIndex).value();
	utils->initialize("updateChartSeries", "seriesIndex", paramSeriesIndex);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "seriesIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "seriesIndex", paramSeriesIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "seriesIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "seriesIndex", paramSeriesIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "seriesIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidSeries) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage");
	paramSeries = utils->getInvalidTestValueForClass<>("updateChartSeries", "series", paramSeries);
	utils->initialize("updateChartSeries", "series", paramSeries);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "series");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "series", paramSeries);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "series");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "series", paramSeries);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "series"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage");
	paramPassword = utils->getInvalidTestValue("updateChartSeries", "password", paramPassword);
	utils->initialize("updateChartSeries", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage");
	paramFolder = utils->getInvalidTestValue("updateChartSeries", "folder", paramFolder);
	utils->initialize("updateChartSeries", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateChartSeriesInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateChartSeries", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateChartSeries", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateChartSeries", "shapeIndex");
	int32_t paramSeriesIndex = utils->getIntTestValue("updateChartSeries", "seriesIndex");
	std::shared_ptr<Series> paramSeries = utils->getTestValueForClass<Series>("updateChartSeries", "series");
	utility::string_t paramPassword = utils->getTestValue("updateChartSeries", "password");
	utility::string_t paramFolder = utils->getTestValue("updateChartSeries", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateChartSeries", "storage");
	paramStorage = utils->getInvalidTestValue("updateChartSeries", "storage", paramStorage);
	utils->initialize("updateChartSeries", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateChartSeries", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateChartSeries", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateChartSeries", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlide) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage");
	utils->initialize("updateLayoutSlide", "");
	std::shared_ptr<LayoutSlide> result = api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage");
	paramName = utils->getInvalidTestValue("updateLayoutSlide", "name", paramName);
	utils->initialize("updateLayoutSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateLayoutSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateLayoutSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidSlideDto) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage");
	paramSlideDto = utils->getInvalidTestValueForClass<>("updateLayoutSlide", "slideDto", paramSlideDto);
	utils->initialize("updateLayoutSlide", "slideDto", paramSlideDto);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "slideDto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "slideDto", paramSlideDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "slideDto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "slideDto", paramSlideDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "slideDto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage");
	paramPassword = utils->getInvalidTestValue("updateLayoutSlide", "password", paramPassword);
	utils->initialize("updateLayoutSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage");
	paramFolder = utils->getInvalidTestValue("updateLayoutSlide", "folder", paramFolder);
	utils->initialize("updateLayoutSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateLayoutSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateLayoutSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateLayoutSlide", "slideIndex");
	std::shared_ptr<LayoutSlide> paramSlideDto = utils->getTestValueForClass<LayoutSlide>("updateLayoutSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateLayoutSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateLayoutSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateLayoutSlide", "storage");
	paramStorage = utils->getInvalidTestValue("updateLayoutSlide", "storage", paramStorage);
	utils->initialize("updateLayoutSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateLayoutSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateLayoutSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateLayoutSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlide) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage");
	utils->initialize("updateNotesSlide", "");
	std::shared_ptr<NotesSlide> result = api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage");
	paramName = utils->getInvalidTestValue("updateNotesSlide", "name", paramName);
	utils->initialize("updateNotesSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateNotesSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateNotesSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("updateNotesSlide", "dto", paramDto);
	utils->initialize("updateNotesSlide", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage");
	paramPassword = utils->getInvalidTestValue("updateNotesSlide", "password", paramPassword);
	utils->initialize("updateNotesSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage");
	paramFolder = utils->getInvalidTestValue("updateNotesSlide", "folder", paramFolder);
	utils->initialize("updateNotesSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlide", "slideIndex");
	std::shared_ptr<NotesSlide> paramDto = utils->getTestValueForClass<NotesSlide>("updateNotesSlide", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlide", "storage");
	paramStorage = utils->getInvalidTestValue("updateNotesSlide", "storage", paramStorage);
	utils->initialize("updateNotesSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideParagraph) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlideParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateNotesSlideParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideParagraph", "storage");
	utils->initialize("updateNotesSlideParagraph", "");
	std::shared_ptr<Paragraph> result = api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateNotesSlideParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlideParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateNotesSlideParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideParagraph", "storage");
	paramName = utils->getInvalidTestValue("updateNotesSlideParagraph", "name", paramName);
	utils->initialize("updateNotesSlideParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlideParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateNotesSlideParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateNotesSlideParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateNotesSlideParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlideParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateNotesSlideParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updateNotesSlideParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updateNotesSlideParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlideParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateNotesSlideParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("updateNotesSlideParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("updateNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlideParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateNotesSlideParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideParagraph", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("updateNotesSlideParagraph", "dto", paramDto);
	utils->initialize("updateNotesSlideParagraph", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlideParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateNotesSlideParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("updateNotesSlideParagraph", "password", paramPassword);
	utils->initialize("updateNotesSlideParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlideParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateNotesSlideParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("updateNotesSlideParagraph", "folder", paramFolder);
	utils->initialize("updateNotesSlideParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlideParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateNotesSlideParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("updateNotesSlideParagraph", "storage", paramStorage);
	utils->initialize("updateNotesSlideParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlidePortion) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateNotesSlidePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateNotesSlidePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlidePortion", "storage");
	utils->initialize("updateNotesSlidePortion", "");
	std::shared_ptr<Portion> result = api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateNotesSlidePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateNotesSlidePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateNotesSlidePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlidePortion", "storage");
	paramName = utils->getInvalidTestValue("updateNotesSlidePortion", "name", paramName);
	utils->initialize("updateNotesSlidePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlidePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlidePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateNotesSlidePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateNotesSlidePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlidePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateNotesSlidePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateNotesSlidePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlidePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlidePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateNotesSlidePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateNotesSlidePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlidePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updateNotesSlidePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updateNotesSlidePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlidePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlidePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateNotesSlidePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateNotesSlidePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlidePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("updateNotesSlidePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("updateNotesSlidePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlidePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlidePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateNotesSlidePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateNotesSlidePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlidePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("updateNotesSlidePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("updateNotesSlidePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlidePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlidePortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateNotesSlidePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateNotesSlidePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlidePortion", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("updateNotesSlidePortion", "dto", paramDto);
	utils->initialize("updateNotesSlidePortion", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlidePortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlidePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateNotesSlidePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateNotesSlidePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlidePortion", "storage");
	paramPassword = utils->getInvalidTestValue("updateNotesSlidePortion", "password", paramPassword);
	utils->initialize("updateNotesSlidePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlidePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlidePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateNotesSlidePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateNotesSlidePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlidePortion", "storage");
	paramFolder = utils->getInvalidTestValue("updateNotesSlidePortion", "folder", paramFolder);
	utils->initialize("updateNotesSlidePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlidePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlidePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlidePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlidePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlidePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateNotesSlidePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateNotesSlidePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateNotesSlidePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlidePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlidePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlidePortion", "storage");
	paramStorage = utils->getInvalidTestValue("updateNotesSlidePortion", "storage", paramStorage);
	utils->initialize("updateNotesSlidePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlidePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlidePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlidePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideShape) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideShape", "storage");
	utils->initialize("updateNotesSlideShape", "");
	std::shared_ptr<ShapeBase> result = api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateNotesSlideShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideShape", "storage");
	paramName = utils->getInvalidTestValue("updateNotesSlideShape", "name", paramName);
	utils->initialize("updateNotesSlideShape", "name", paramName);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateNotesSlideShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateNotesSlideShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideShape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updateNotesSlideShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updateNotesSlideShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideShapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideShape", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("updateNotesSlideShape", "dto", paramDto);
	utils->initialize("updateNotesSlideShape", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideShape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideShape", "storage");
	paramPassword = utils->getInvalidTestValue("updateNotesSlideShape", "password", paramPassword);
	utils->initialize("updateNotesSlideShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideShape", "storage");
	paramFolder = utils->getInvalidTestValue("updateNotesSlideShape", "folder", paramFolder);
	utils->initialize("updateNotesSlideShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateNotesSlideShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateNotesSlideShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateNotesSlideShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateNotesSlideShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateNotesSlideShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateNotesSlideShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateNotesSlideShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateNotesSlideShape", "storage");
	paramStorage = utils->getInvalidTestValue("updateNotesSlideShape", "storage", paramStorage);
	utils->initialize("updateNotesSlideShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateNotesSlideShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateNotesSlideShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateNotesSlideShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraph) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage");
	utils->initialize("updateParagraph", "");
	std::shared_ptr<Paragraph> result = api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage");
	paramName = utils->getInvalidTestValue("updateParagraph", "name", paramName);
	utils->initialize("updateParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updateParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updateParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("updateParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("updateParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("updateParagraph", "dto", paramDto);
	utils->initialize("updateParagraph", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("updateParagraph", "password", paramPassword);
	utils->initialize("updateParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("updateParagraph", "folder", paramFolder);
	utils->initialize("updateParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateParagraph", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("updateParagraph", "storage", paramStorage);
	utils->initialize("updateParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortion) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage");
	utils->initialize("updatePortion", "");
	std::shared_ptr<Portion> result = api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updatePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage");
	paramName = utils->getInvalidTestValue("updatePortion", "name", paramName);
	utils->initialize("updatePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updatePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("updatePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updatePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updatePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("updatePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("updatePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("updatePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("updatePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("updatePortion", "dto", paramDto);
	utils->initialize("updatePortion", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage");
	paramPassword = utils->getInvalidTestValue("updatePortion", "password", paramPassword);
	utils->initialize("updatePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage");
	paramFolder = utils->getInvalidTestValue("updatePortion", "folder", paramFolder);
	utils->initialize("updatePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updatePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updatePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updatePortion", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updatePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updatePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updatePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updatePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updatePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updatePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updatePortion", "storage");
	paramStorage = utils->getInvalidTestValue("updatePortion", "storage", paramStorage);
	utils->initialize("updatePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updatePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updatePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updatePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updatePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updatePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSection) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage");
	utils->initialize("updateSection", "");
	std::shared_ptr<Sections> result = api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSectionInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage");
	paramName = utils->getInvalidTestValue("updateSection", "name", paramName);
	utils->initialize("updateSection", "name", paramName);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSectionInvalidSectionIndex) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage");
	paramSectionIndex = utils->getInvalidIntTestValue("updateSection", "sectionIndex", paramSectionIndex).value();
	utils->initialize("updateSection", "sectionIndex", paramSectionIndex);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "sectionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "sectionIndex", paramSectionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "sectionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "sectionIndex", paramSectionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "sectionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSectionInvalidSectionName) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage");
	paramSectionName = utils->getInvalidTestValue("updateSection", "sectionName", paramSectionName);
	utils->initialize("updateSection", "sectionName", paramSectionName);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "sectionName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "sectionName", paramSectionName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "sectionName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "sectionName", paramSectionName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "sectionName"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSectionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage");
	paramPassword = utils->getInvalidTestValue("updateSection", "password", paramPassword);
	utils->initialize("updateSection", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSectionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage");
	paramFolder = utils->getInvalidTestValue("updateSection", "folder", paramFolder);
	utils->initialize("updateSection", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSectionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSection", "name");
	int32_t paramSectionIndex = utils->getIntTestValue("updateSection", "sectionIndex");
	utility::string_t paramSectionName = utils->getTestValue("updateSection", "sectionName");
	utility::string_t paramPassword = utils->getTestValue("updateSection", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSection", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSection", "storage");
	paramStorage = utils->getInvalidTestValue("updateSection", "storage", paramStorage);
	utils->initialize("updateSection", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSection", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSection", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSection", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSection", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSection", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShape) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage");
	utils->initialize("updateShape", "");
	std::shared_ptr<ShapeBase> result = api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateShapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage");
	paramName = utils->getInvalidTestValue("updateShape", "name", paramName);
	utils->initialize("updateShape", "name", paramName);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateShape", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateShape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updateShape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updateShape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("updateShape", "dto", paramDto);
	utils->initialize("updateShape", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage");
	paramPassword = utils->getInvalidTestValue("updateShape", "password", paramPassword);
	utils->initialize("updateShape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage");
	paramFolder = utils->getInvalidTestValue("updateShape", "folder", paramFolder);
	utils->initialize("updateShape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateShapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateShape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateShape", "slideIndex");
	int32_t paramShapeIndex = utils->getIntTestValue("updateShape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateShape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateShape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateShape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateShape", "storage");
	paramStorage = utils->getInvalidTestValue("updateShape", "storage", paramStorage);
	utils->initialize("updateShape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateShape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateShape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateShape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateShape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateShape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlide) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage");
	utils->initialize("updateSlide", "");
	std::shared_ptr<Slide> result = api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSlideInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage");
	paramName = utils->getInvalidTestValue("updateSlide", "name", paramName);
	utils->initialize("updateSlide", "name", paramName);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlideInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateSlide", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateSlide", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlideInvalidSlideDto) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage");
	paramSlideDto = utils->getInvalidTestValueForClass<>("updateSlide", "slideDto", paramSlideDto);
	utils->initialize("updateSlide", "slideDto", paramSlideDto);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "slideDto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "slideDto", paramSlideDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "slideDto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "slideDto", paramSlideDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "slideDto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlideInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage");
	paramPassword = utils->getInvalidTestValue("updateSlide", "password", paramPassword);
	utils->initialize("updateSlide", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlideInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage");
	paramFolder = utils->getInvalidTestValue("updateSlide", "folder", paramFolder);
	utils->initialize("updateSlide", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSlideInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSlide", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSlide", "slideIndex");
	std::shared_ptr<Slide> paramSlideDto = utils->getTestValueForClass<Slide>("updateSlide", "slideDto");
	utility::string_t paramPassword = utils->getTestValue("updateSlide", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSlide", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSlide", "storage");
	paramStorage = utils->getInvalidTestValue("updateSlide", "storage", paramStorage);
	utils->initialize("updateSlide", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSlide", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSlide", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSlide", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSlide", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSlide", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshape) {
	utility::string_t paramName = utils->getTestValue("updateSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSubshape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshape", "storage");
	utils->initialize("updateSubshape", "");
	std::shared_ptr<ShapeBase> result = api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSubshapeInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSubshape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshape", "storage");
	paramName = utils->getInvalidTestValue("updateSubshape", "name", paramName);
	utils->initialize("updateSubshape", "name", paramName);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshape", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSubshape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshape", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateSubshape", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateSubshape", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshape", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeInvalidPath) {
	utility::string_t paramName = utils->getTestValue("updateSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSubshape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshape", "storage");
	paramPath = utils->getInvalidTestValue("updateSubshape", "path", paramPath);
	utils->initialize("updateSubshape", "path", paramPath);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshape", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSubshape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshape", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updateSubshape", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updateSubshape", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshape", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSubshape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshape", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("updateSubshape", "dto", paramDto);
	utils->initialize("updateSubshape", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshape", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSubshape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshape", "storage");
	paramPassword = utils->getInvalidTestValue("updateSubshape", "password", paramPassword);
	utils->initialize("updateSubshape", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshape", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSubshape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshape", "storage");
	paramFolder = utils->getInvalidTestValue("updateSubshape", "folder", paramFolder);
	utils->initialize("updateSubshape", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshape", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSubshape", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshape", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshape", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshape", "shapeIndex");
	std::shared_ptr<ShapeBase> paramDto = utils->getTestValueForClass<ShapeBase>("updateSubshape", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshape", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshape", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshape", "storage");
	paramStorage = utils->getInvalidTestValue("updateSubshape", "storage", paramStorage);
	utils->initialize("updateSubshape", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshape", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshape", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshape", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeParagraph) {
	utility::string_t paramName = utils->getTestValue("updateSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSubshapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapeParagraph", "storage");
	utils->initialize("updateSubshapeParagraph", "");
	std::shared_ptr<Paragraph> result = api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSubshapeParagraphInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSubshapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapeParagraph", "storage");
	paramName = utils->getInvalidTestValue("updateSubshapeParagraph", "name", paramName);
	utils->initialize("updateSubshapeParagraph", "name", paramName);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapeParagraph", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeParagraphInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSubshapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapeParagraph", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateSubshapeParagraph", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateSubshapeParagraph", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapeParagraph", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeParagraphInvalidPath) {
	utility::string_t paramName = utils->getTestValue("updateSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSubshapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapeParagraph", "storage");
	paramPath = utils->getInvalidTestValue("updateSubshapeParagraph", "path", paramPath);
	utils->initialize("updateSubshapeParagraph", "path", paramPath);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapeParagraph", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeParagraphInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSubshapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapeParagraph", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updateSubshapeParagraph", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updateSubshapeParagraph", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapeParagraph", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeParagraphInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updateSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSubshapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapeParagraph", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("updateSubshapeParagraph", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("updateSubshapeParagraph", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapeParagraph", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeParagraphInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSubshapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapeParagraph", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("updateSubshapeParagraph", "dto", paramDto);
	utils->initialize("updateSubshapeParagraph", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapeParagraph", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeParagraphInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSubshapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapeParagraph", "storage");
	paramPassword = utils->getInvalidTestValue("updateSubshapeParagraph", "password", paramPassword);
	utils->initialize("updateSubshapeParagraph", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapeParagraph", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeParagraphInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSubshapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapeParagraph", "storage");
	paramFolder = utils->getInvalidTestValue("updateSubshapeParagraph", "folder", paramFolder);
	utils->initialize("updateSubshapeParagraph", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapeParagraph", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapeParagraphInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSubshapeParagraph", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapeParagraph", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapeParagraph", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapeParagraph", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapeParagraph", "paragraphIndex");
	std::shared_ptr<Paragraph> paramDto = utils->getTestValueForClass<Paragraph>("updateSubshapeParagraph", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapeParagraph", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapeParagraph", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapeParagraph", "storage");
	paramStorage = utils->getInvalidTestValue("updateSubshapeParagraph", "storage", paramStorage);
	utils->initialize("updateSubshapeParagraph", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapeParagraph", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapeParagraph", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapeParagraph", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapePortion) {
	utility::string_t paramName = utils->getTestValue("updateSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSubshapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSubshapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapePortion", "storage");
	utils->initialize("updateSubshapePortion", "");
	std::shared_ptr<Portion> result = api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, updateSubshapePortionInvalidName) {
	utility::string_t paramName = utils->getTestValue("updateSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSubshapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSubshapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapePortion", "storage");
	paramName = utils->getInvalidTestValue("updateSubshapePortion", "name", paramName);
	utils->initialize("updateSubshapePortion", "name", paramName);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "name");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "name", paramName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "name");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "name", paramName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapePortion", "name"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapePortionInvalidSlideIndex) {
	utility::string_t paramName = utils->getTestValue("updateSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSubshapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSubshapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapePortion", "storage");
	paramSlideIndex = utils->getInvalidIntTestValue("updateSubshapePortion", "slideIndex", paramSlideIndex).value();
	utils->initialize("updateSubshapePortion", "slideIndex", paramSlideIndex);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "slideIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "slideIndex", paramSlideIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "slideIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "slideIndex", paramSlideIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapePortion", "slideIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapePortionInvalidPath) {
	utility::string_t paramName = utils->getTestValue("updateSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSubshapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSubshapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapePortion", "storage");
	paramPath = utils->getInvalidTestValue("updateSubshapePortion", "path", paramPath);
	utils->initialize("updateSubshapePortion", "path", paramPath);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapePortion", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapePortionInvalidShapeIndex) {
	utility::string_t paramName = utils->getTestValue("updateSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSubshapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSubshapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapePortion", "storage");
	paramShapeIndex = utils->getInvalidIntTestValue("updateSubshapePortion", "shapeIndex", paramShapeIndex).value();
	utils->initialize("updateSubshapePortion", "shapeIndex", paramShapeIndex);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "shapeIndex", paramShapeIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "shapeIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "shapeIndex", paramShapeIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapePortion", "shapeIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapePortionInvalidParagraphIndex) {
	utility::string_t paramName = utils->getTestValue("updateSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSubshapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSubshapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapePortion", "storage");
	paramParagraphIndex = utils->getInvalidIntTestValue("updateSubshapePortion", "paragraphIndex", paramParagraphIndex).value();
	utils->initialize("updateSubshapePortion", "paragraphIndex", paramParagraphIndex);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "paragraphIndex", paramParagraphIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "paragraphIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "paragraphIndex", paramParagraphIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapePortion", "paragraphIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapePortionInvalidPortionIndex) {
	utility::string_t paramName = utils->getTestValue("updateSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSubshapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSubshapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapePortion", "storage");
	paramPortionIndex = utils->getInvalidIntTestValue("updateSubshapePortion", "portionIndex", paramPortionIndex).value();
	utils->initialize("updateSubshapePortion", "portionIndex", paramPortionIndex);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "portionIndex");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "portionIndex", paramPortionIndex);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "portionIndex");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "portionIndex", paramPortionIndex);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapePortion", "portionIndex"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapePortionInvalidDto) {
	utility::string_t paramName = utils->getTestValue("updateSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSubshapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSubshapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapePortion", "storage");
	paramDto = utils->getInvalidTestValueForClass<>("updateSubshapePortion", "dto", paramDto);
	utils->initialize("updateSubshapePortion", "dto", paramDto);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "dto");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "dto", paramDto);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "dto");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "dto", paramDto);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapePortion", "dto"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapePortionInvalidPassword) {
	utility::string_t paramName = utils->getTestValue("updateSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSubshapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSubshapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapePortion", "storage");
	paramPassword = utils->getInvalidTestValue("updateSubshapePortion", "password", paramPassword);
	utils->initialize("updateSubshapePortion", "password", paramPassword);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "password");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "password", paramPassword);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "password");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "password", paramPassword);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapePortion", "password"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapePortionInvalidFolder) {
	utility::string_t paramName = utils->getTestValue("updateSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSubshapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSubshapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapePortion", "storage");
	paramFolder = utils->getInvalidTestValue("updateSubshapePortion", "folder", paramFolder);
	utils->initialize("updateSubshapePortion", "folder", paramFolder);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "folder");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "folder", paramFolder);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "folder");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "folder", paramFolder);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapePortion", "folder"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, updateSubshapePortionInvalidStorage) {
	utility::string_t paramName = utils->getTestValue("updateSubshapePortion", "name");
	int32_t paramSlideIndex = utils->getIntTestValue("updateSubshapePortion", "slideIndex");
	utility::string_t paramPath = utils->getTestValue("updateSubshapePortion", "path");
	int32_t paramShapeIndex = utils->getIntTestValue("updateSubshapePortion", "shapeIndex");
	int32_t paramParagraphIndex = utils->getIntTestValue("updateSubshapePortion", "paragraphIndex");
	int32_t paramPortionIndex = utils->getIntTestValue("updateSubshapePortion", "portionIndex");
	std::shared_ptr<Portion> paramDto = utils->getTestValueForClass<Portion>("updateSubshapePortion", "dto");
	utility::string_t paramPassword = utils->getTestValue("updateSubshapePortion", "password");
	utility::string_t paramFolder = utils->getTestValue("updateSubshapePortion", "folder");
	utility::string_t paramStorage = utils->getTestValue("updateSubshapePortion", "storage");
	paramStorage = utils->getInvalidTestValue("updateSubshapePortion", "storage", paramStorage);
	utils->initialize("updateSubshapePortion", "storage", paramStorage);

	bool failed = true;
	try
	{
		api->updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "storage");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "storage", paramStorage);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("updateSubshapePortion", "storage");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("updateSubshapePortion", "storage", paramStorage);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("updateSubshapePortion", "storage"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFile) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName");
	utils->initialize("uploadFile", "");
	std::shared_ptr<FilesUploadResult> result = api->uploadFile(paramPath, paramFile, paramStorageName).get();
	EXPECT_NE(nullptr, result);
}

TEST_F(SlidesApiTest, uploadFileInvalidPath) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName");
	paramPath = utils->getInvalidTestValue("uploadFile", "path", paramPath);
	utils->initialize("uploadFile", "path", paramPath);

	bool failed = true;
	try
	{
		api->uploadFile(paramPath, paramFile, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "path");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "path", paramPath);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "path");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "path", paramPath);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "path"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFileInvalidFile) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName");
	paramFile = utils->getInvalidBinaryTestValue("uploadFile", "file", paramFile);
	utils->initialize("uploadFile", "file", paramFile);

	bool failed = true;
	try
	{
		api->uploadFile(paramPath, paramFile, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "file");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "file", paramFile);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "file");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "file", paramFile);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "file"))
	{
		FAIL() << "Must have failed";
	}
}

TEST_F(SlidesApiTest, uploadFileInvalidStorageName) {
	utility::string_t paramPath = utils->getTestValue("uploadFile", "path");
	std::shared_ptr<HttpContent> paramFile = utils->getBinaryTestValue("uploadFile", "file");
	utility::string_t paramStorageName = utils->getTestValue("uploadFile", "storageName");
	paramStorageName = utils->getInvalidTestValue("uploadFile", "storageName", paramStorageName);
	utils->initialize("uploadFile", "storageName", paramStorageName);

	bool failed = true;
	try
	{
		api->uploadFile(paramPath, paramFile, paramStorageName).wait();
		failed = false;
	}
	catch (ApiException ex)
	{
		int code = utils->getExpectedCode("uploadFile", "storageName");
		EXPECT_EQ(code, ex.error_code().value());

		utility::string_t message = utils->getExpectedMessage("uploadFile", "storageName", paramStorageName);
		std::string contentString;
		std::ostringstream contentStream;
		contentStream << ex.getContent()->rdbuf();
		EXPECT_TRUE(boost::contains(contentStream.str(), message));
	}
	catch (std::invalid_argument ex)
	{
		int code = utils->getExpectedCode("uploadFile", "storageName");
		EXPECT_EQ(code, 400);

		utility::string_t message = utils->getExpectedMessage("uploadFile", "storageName", paramStorageName);
		EXPECT_TRUE(boost::contains(ex.what(), message));
	}
	if (!failed && utils->mustFail("uploadFile", "storageName"))
	{
		FAIL() << "Must have failed";
	}
}
